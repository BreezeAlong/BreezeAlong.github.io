<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>综合架构-DBA-14-MongoDB</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-14-MongoDB/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-14-MongoDB/</url>
      
        <content type="html"><![CDATA[<h1 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h1><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Mongodb 逻辑结构                         MySQL逻辑结构</span><br><span class="line">库database                                 库</span><br><span class="line">集合（collection）                          表</span><br><span class="line">文档（<span class="built_in">document</span>）                            数据行</span><br></pre></td></tr></table></figure><h1 id="安装部署"><a href="#安装部署" class="headerlink" title="安装部署"></a>安装部署</h1><h2 id="系统准备"><a href="#系统准备" class="headerlink" title="系统准备"></a>系统准备</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">（1）redhat或centos6.2以上系统</span><br><span class="line">（2）系统开发包完整</span><br><span class="line">（3）ip地址和hosts文件解析正常</span><br><span class="line">（4）iptables防火墙&amp;SElinux关闭</span><br><span class="line">（5）关闭大页内存机制</span><br><span class="line"><span class="comment">########################################################################</span></span><br><span class="line">root用户下</span><br><span class="line">在vi /etc/rc.local最后添加如下代码</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/enabled; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/enabled</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">test</span> -f /sys/kernel/mm/transparent_hugepage/defrag; <span class="keyword">then</span></span><br><span class="line">   <span class="built_in">echo</span> never &gt; /sys/kernel/mm/transparent_hugepage/defrag</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">cat  /sys/kernel/mm/transparent_hugepage/enabled        </span><br><span class="line">cat /sys/kernel/mm/transparent_hugepage/defrag  </span><br><span class="line">其他系统关闭参照官方文档：   </span><br><span class="line"></span><br><span class="line">https://docs.mongodb.com/manual/tutorial/transparent-huge-pages/</span><br><span class="line">---------------</span><br><span class="line">为什么要关闭？</span><br><span class="line">Transparent Huge Pages (THP) is a Linux memory management system </span><br><span class="line">that reduces the overhead of Translation Lookaside Buffer (TLB) </span><br><span class="line">lookups on machines with large amounts of memory by using larger memory pages.</span><br><span class="line">However, database workloads often perform poorly with THP, </span><br><span class="line">because they tend to have sparse rather than contiguous memory access patterns. </span><br><span class="line">You should <span class="built_in">disable</span> THP on Linux machines to ensure best performance with MongoDB.</span><br><span class="line"><span class="comment">############################################################################    </span></span><br></pre></td></tr></table></figure><h2 id="mongodb安装"><a href="#mongodb安装" class="headerlink" title="mongodb安装"></a>mongodb安装</h2><h3 id="创建所需用户和"><a href="#创建所需用户和" class="headerlink" title="创建所需用户和"></a>创建所需用户和</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd mongod</span><br><span class="line">passwd mongod</span><br></pre></td></tr></table></figure><h3 id="创建mongodb所需目录结构"><a href="#创建mongodb所需目录结构" class="headerlink" title="创建mongodb所需目录结构"></a>创建mongodb所需目录结构</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mongodb/conf</span><br><span class="line">mkdir -p /mongodb/<span class="built_in">log</span></span><br><span class="line">mkdir -p /mongodb/data</span><br></pre></td></tr></table></figure><h3 id="上传并解压软件到指定位置"><a href="#上传并解压软件到指定位置" class="headerlink" title="上传并解压软件到指定位置"></a>上传并解压软件到指定位置</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="symbol">root@</span>db01 <span class="keyword">data</span>]# cd   /<span class="keyword">data</span></span><br><span class="line">[<span class="symbol">root@</span>db01 <span class="keyword">data</span>]# tar xf mongodb-linux-x86_64-rhel70-<span class="number">3.6</span><span class="number">.12</span>.tgz </span><br><span class="line">[<span class="symbol">root@</span>db01 <span class="keyword">data</span>]#  cp -r /<span class="keyword">data</span>/mongodb-linux-x86_64-rhel70-<span class="number">3.6</span><span class="number">.12</span>/bin/ /mongodb</span><br></pre></td></tr></table></figure><h3 id="设置目录结构权限"><a href="#设置目录结构权限" class="headerlink" title="设置目录结构权限"></a>设置目录结构权限</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mongod:mongod &#x2F;mongodb</span><br></pre></td></tr></table></figure><h3 id="设置用户环境变量"><a href="#设置用户环境变量" class="headerlink" title="设置用户环境变量"></a>设置用户环境变量</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">su - mongod</span><br><span class="line">vi .bash_profile</span><br><span class="line"><span class="built_in">export</span> PATH=/mongodb/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> .bash_profile</span><br></pre></td></tr></table></figure><h3 id="启动mongodb"><a href="#启动mongodb" class="headerlink" title="启动mongodb"></a>启动mongodb</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongod --dbpath=/mongodb/data --logpath=/mongodb/<span class="built_in">log</span>/mongodb.<span class="built_in">log</span> --port=<span class="number">27017</span> --logappend --fork </span><br></pre></td></tr></table></figure><h3 id="登录mongodb"><a href="#登录mongodb" class="headerlink" title="登录mongodb"></a>登录mongodb</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mongod@server2 ~]$ mongo</span><br></pre></td></tr></table></figure><h3 id="使用配置文件"><a href="#使用配置文件" class="headerlink" title="使用配置文件"></a>使用配置文件</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">YAML模式</span></span><br><span class="line"></span><br><span class="line"><span class="string">NOTE：</span></span><br><span class="line"><span class="attr">YAML does not support tab characters for indentation:</span> <span class="string">use</span> <span class="string">spaces</span> <span class="string">instead.</span></span><br><span class="line"></span><br><span class="line"><span class="string">--系统日志有关</span>  </span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">   <span class="attr">destination:</span> <span class="string">file</span>        </span><br><span class="line">   <span class="attr">path:</span> <span class="string">&quot;/mongodb/log/mongodb.log&quot;</span>    <span class="string">--日志位置</span></span><br><span class="line">   <span class="attr">logAppend:</span> <span class="literal">true</span>                     <span class="string">--日志以追加模式记录</span></span><br><span class="line">  </span><br><span class="line"><span class="string">--数据存储有关</span>   </span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">   <span class="attr">journal:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">dbPath:</span> <span class="string">&quot;/mongodb/data&quot;</span>            <span class="string">--数据路径的位置</span></span><br><span class="line"></span><br><span class="line"><span class="string">--</span> <span class="string">进程控制</span>  </span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">   <span class="attr">fork:</span> <span class="literal">true</span>                         <span class="string">--后台守护进程</span></span><br><span class="line">   <span class="attr">pidFilePath:</span> <span class="string">&lt;string&gt;</span>              <span class="string">--pid文件的位置，一般不用配置，可以去掉这行，自动生成到data中</span></span><br><span class="line">    </span><br><span class="line"><span class="string">--网络配置有关</span>   </span><br><span class="line"><span class="attr">net:</span>            </span><br><span class="line">   <span class="attr">bindIp:</span> <span class="string">&lt;ip&gt;</span>                       <span class="string">--</span> <span class="string">监听地址</span></span><br><span class="line">   <span class="attr">port:</span> <span class="string">&lt;port&gt;</span>                       <span class="string">--</span> <span class="string">端口号,默认不配置端口号，是27017</span></span><br><span class="line">   </span><br><span class="line"><span class="string">--</span> <span class="string">安全验证有关配置</span>      </span><br><span class="line"><span class="attr">security:</span></span><br><span class="line">  <span class="attr">authorization:</span> <span class="string">enabled</span>              <span class="string">--是否打开用户名密码验证</span></span><br><span class="line">  </span><br><span class="line"><span class="string">------------------以下是复制集与分片集群有关----------------------</span>  </span><br><span class="line"></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line"> <span class="attr">oplogSizeMB:</span> <span class="string">&lt;NUM&gt;</span></span><br><span class="line"> <span class="attr">replSetName:</span> <span class="string">&quot;&lt;REPSETNAME&gt;&quot;</span></span><br><span class="line"> <span class="attr">secondaryIndexPrefetch:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">   <span class="attr">clusterRole:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line">   <span class="attr">archiveMovedChunks:</span> <span class="string">&lt;boolean&gt;</span></span><br><span class="line">      </span><br><span class="line"><span class="string">---for</span> <span class="string">mongos</span> <span class="string">only</span></span><br><span class="line"><span class="attr">replication:</span></span><br><span class="line">   <span class="attr">localPingThresholdMs:</span> <span class="string">&lt;int&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">sharding:</span></span><br><span class="line">   <span class="attr">configDB:</span> <span class="string">&lt;string&gt;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="string">++++++++++++++++++++++</span></span><br><span class="line"><span class="string">YAML例子</span></span><br><span class="line"><span class="string">cat</span> <span class="string">&gt;</span>  <span class="string">/mongodb/conf/mongo.conf</span> <span class="string">&lt;&lt;EOF</span></span><br><span class="line"><span class="attr">systemLog:</span></span><br><span class="line">   <span class="attr">destination:</span> <span class="string">file</span></span><br><span class="line">   <span class="attr">path:</span> <span class="string">&quot;/mongodb/log/mongodb.log&quot;</span></span><br><span class="line">   <span class="attr">logAppend:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">storage:</span></span><br><span class="line">   <span class="attr">journal:</span></span><br><span class="line">      <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">   <span class="attr">dbPath:</span> <span class="string">&quot;/mongodb/data/&quot;</span></span><br><span class="line"><span class="attr">processManagement:</span></span><br><span class="line">   <span class="attr">fork:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">net:</span></span><br><span class="line">   <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">   <span class="attr">bindIp:</span> <span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span><span class="string">,127.0.0.1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"><span class="string">mongod</span> <span class="string">-f</span> <span class="string">/mongodb/conf/mongo.conf</span> <span class="string">--shutdown</span></span><br><span class="line"><span class="string">mongod</span> <span class="string">-f</span> <span class="string">/mongodb/conf/mongo.conf</span>   </span><br></pre></td></tr></table></figure><h3 id="mongodb的关闭方式"><a href="#mongodb的关闭方式" class="headerlink" title="mongodb的关闭方式"></a>mongodb的关闭方式</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mongod</span> <span class="selector-tag">-f</span> <span class="selector-tag">mongo</span><span class="selector-class">.conf</span>  <span class="selector-tag">--shutdown</span></span><br></pre></td></tr></table></figure><h3 id="mongodb-使用systemd管理"><a href="#mongodb-使用systemd管理" class="headerlink" title="mongodb 使用systemd管理"></a>mongodb 使用systemd管理</h3><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># cat &gt; /etc/systemd/system/mongod.service &lt;&lt;EOF</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=mongodb </span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line">[Service]</span><br><span class="line">User=mongod</span><br><span class="line">Type=forking</span><br><span class="line">ExecStart=<span class="regexp">/mongodb/bin</span><span class="regexp">/mongod --config /mongodb</span><span class="regexp">/conf/mongo</span>.conf</span><br><span class="line">ExecReload=<span class="regexp">/bin/kill</span> -s HUP $MAINPID</span><br><span class="line">ExecStop=<span class="regexp">/mongodb/bin</span><span class="regexp">/mongod --config /mongodb</span><span class="regexp">/conf/mongo</span>.conf --shutdown</span><br><span class="line">PrivateTmp=<span class="literal">true</span>  </span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl restart mongod</span></span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl stop mongod</span></span><br><span class="line">[root@db01 ~]<span class="comment"># systemctl start mongod</span></span><br></pre></td></tr></table></figure><h1 id="mongodb常用基本操作"><a href="#mongodb常用基本操作" class="headerlink" title="mongodb常用基本操作"></a>mongodb常用基本操作</h1><h2 id="mongodb-默认存在的库"><a href="#mongodb-默认存在的库" class="headerlink" title="mongodb 默认存在的库"></a>mongodb 默认存在的库</h2><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">test:登录时默认存在的库</span><br><span class="line">管理MongoDB有关的系统库</span><br><span class="line">admin库:系统预留库,MongoDB系统管理库</span><br><span class="line">local库:本地预留库,存储关键日志</span><br><span class="line">config库:MongoDB配置信息库</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> databases/<span class="keyword">show</span> dbs</span><br><span class="line"><span class="keyword">show</span> tables/<span class="keyword">show</span> collections</span><br><span class="line">use admin </span><br><span class="line">db/select database()</span><br><span class="line">db 查看当前库</span><br></pre></td></tr></table></figure><h2 id="命令种类"><a href="#命令种类" class="headerlink" title="命令种类"></a>命令种类</h2><h3 id="db-对象相关命令"><a href="#db-对象相关命令" class="headerlink" title="db 对象相关命令"></a>db 对象相关命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">db.[TAB][TAB]</span><br><span class="line">db.help()</span><br><span class="line">db.oldboy.[TAB][TAB]</span><br><span class="line">db.oldboy.help()</span><br></pre></td></tr></table></figure><h3 id="rs-复制集有关-replication-set"><a href="#rs-复制集有关-replication-set" class="headerlink" title="rs 复制集有关(replication set):"></a>rs 复制集有关(replication set):</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">rs</span>.<span class="selector-attr">[TAB]</span><span class="selector-attr">[TAB]</span></span><br><span class="line"><span class="selector-tag">rs</span><span class="selector-class">.help</span>()</span><br></pre></td></tr></table></figure><h3 id="sh-分片集群-sharding-cluster"><a href="#sh-分片集群-sharding-cluster" class="headerlink" title="sh 分片集群(sharding cluster)"></a>sh 分片集群(sharding cluster)</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">sh</span>.<span class="selector-attr">[TAB]</span><span class="selector-attr">[TAB]</span></span><br><span class="line"><span class="selector-tag">sh</span><span class="selector-class">.help</span>()</span><br></pre></td></tr></table></figure><h1 id="mongodb对象操作"><a href="#mongodb对象操作" class="headerlink" title="mongodb对象操作"></a>mongodb对象操作</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mongo         mysql</span><br><span class="line">库    -----&gt;  库</span><br><span class="line">集合  -----&gt;  表</span><br><span class="line">文档  -----&gt;  数据行</span><br></pre></td></tr></table></figure><h2 id="库的操作"><a href="#库的操作" class="headerlink" title="库的操作"></a>库的操作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建库</span></span><br><span class="line">&gt; use <span class="built_in">test</span></span><br><span class="line"><span class="comment"># 删库</span></span><br><span class="line">&gt;db.dropDatabase()   </span><br><span class="line">&#123; <span class="string">&quot;dropped&quot;</span> : <span class="string">&quot;test&quot;</span>, <span class="string">&quot;ok&quot;</span> : 1 &#125;</span><br></pre></td></tr></table></figure><h2 id="集合的操作"><a href="#集合的操作" class="headerlink" title="集合的操作"></a>集合的操作</h2><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app&gt; db.createCollection(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">app&gt; db.createCollection(<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">方法<span class="number">2</span>：当插入一个文档的时候，一个集合就会自动创建。</span><br><span class="line"></span><br><span class="line">use oldboy</span><br><span class="line">db.test.insert(&#123;name:<span class="string">&quot;zhangsan&quot;</span>&#125;)</span><br><span class="line">db.stu.insert(&#123;<span class="keyword">id</span>:<span class="number">101</span>,name:<span class="string">&quot;zhangsan&quot;</span>,age:<span class="number">20</span>,gender:<span class="string">&quot;m&quot;</span>&#125;)</span><br><span class="line">show tables;</span><br><span class="line">db.stu.insert(&#123;<span class="keyword">id</span>:<span class="number">102</span>,name:<span class="string">&quot;lisi&quot;</span>&#125;)</span><br><span class="line">db.stu.insert(&#123;a:<span class="string">&quot;b&quot;</span>,c:<span class="string">&quot;d&quot;</span>&#125;)</span><br><span class="line">db.stu.insert(&#123;a:<span class="number">1</span>,c:<span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">数据录入：</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">10000</span>;i++)&#123;db.<span class="built_in">log</span>.insert(&#123;<span class="string">&quot;uid&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;mongodb&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">6</span>,<span class="string">&quot;date&quot;</span>:<span class="keyword">new</span></span><br><span class="line">Date()&#125;)&#125;</span><br><span class="line"></span><br><span class="line">查询数据行数：</span><br><span class="line">&gt; db.<span class="built_in">log</span>.count()</span><br><span class="line">全表查询：</span><br><span class="line">&gt; db.<span class="built_in">log</span>.find()</span><br><span class="line">每页显示<span class="number">50</span>条记录：</span><br><span class="line">&gt; DBQuery.shellBatchSize=<span class="number">50</span>; </span><br><span class="line">按照条件查询</span><br><span class="line">&gt; db.<span class="built_in">log</span>.find(&#123;uid:<span class="number">999</span>&#125;)</span><br><span class="line">以标准的json格式显示数据</span><br><span class="line">&gt; db.<span class="built_in">log</span>.find(&#123;uid:<span class="number">999</span>&#125;).pretty()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : ObjectId(<span class="string">&quot;5cc516e60d13144c89dead33&quot;</span>),</span><br><span class="line">    <span class="string">&quot;uid&quot;</span> : <span class="number">999</span>,</span><br><span class="line">    <span class="string">&quot;name&quot;</span> : <span class="string">&quot;mongodb&quot;</span>,</span><br><span class="line">    <span class="string">&quot;age&quot;</span> : <span class="number">6</span>,</span><br><span class="line">    <span class="string">&quot;date&quot;</span> : ISODate(<span class="string">&quot;2019-04-28T02:58:46.109Z&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">删除集合中所有记录</span><br><span class="line">app&gt; db.<span class="built_in">log</span>.remove(&#123;&#125;)</span><br></pre></td></tr></table></figure><h3 id="查看集合存储信息"><a href="#查看集合存储信息" class="headerlink" title="查看集合存储信息"></a>查看集合存储信息</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app&gt; db.<span class="built_in">log</span>.totalSize() <span class="comment">//集合中索引+数据压缩存储之后的大小    </span></span><br></pre></td></tr></table></figure><h1 id="用户及权限管理"><a href="#用户及权限管理" class="headerlink" title="用户及权限管理"></a>用户及权限管理</h1><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>验证库: 建立用户时use到的库，在使用用户时，要加上验证库才能登陆。</p><p>对于管理员用户,必须在admin下创建.</p><ol><li>建用户时,use到的库,就是此用户的验证库</li><li>登录时,必须明确指定验证库才能登录</li><li>通常,管理员用的验证库是admin,普通用户的验证库一般是所管理的库设置为验证库</li><li>如果直接登录到数据库,不进行use,默认的验证库是test,不是我们生产建议的.</li><li>从3.6 版本开始，不添加bindIp参数，默认不让远程登录，只能本地管理员登录。</li></ol><h2 id="用户创建语法"><a href="#用户创建语法" class="headerlink" title="用户创建语法"></a>用户创建语法</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">use admin </span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;&lt;name&gt;&quot;</span>,</span><br><span class="line">    <span class="built_in">pwd</span>: <span class="string">&quot;&lt;cleartext password&gt;&quot;</span>,</span><br><span class="line">    roles: [</span><br><span class="line">       &#123; role: <span class="string">&quot;&lt;role&gt;&quot;</span>,</span><br><span class="line">     db: <span class="string">&quot;&lt;database&gt;&quot;</span> &#125; | <span class="string">&quot;&lt;role&gt;&quot;</span>,</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">基本语法说明：</span><br><span class="line">user:用户名</span><br><span class="line"><span class="built_in">pwd</span>:密码</span><br><span class="line">roles:</span><br><span class="line">    role:角色名</span><br><span class="line">    db:作用对象 </span><br><span class="line">role：root, readWrite,<span class="built_in">read</span>   </span><br><span class="line">验证数据库：</span><br><span class="line">mongo -u oldboy -p 123 10.0.0.53/oldboy</span><br></pre></td></tr></table></figure><h2 id="用户管理例子"><a href="#用户管理例子" class="headerlink" title="用户管理例子"></a>用户管理例子</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">创建超级管理员：管理所有数据库（必须<span class="keyword">use</span> admin再去创建）</span><br><span class="line">$ mongo</span><br><span class="line"><span class="keyword">use</span> admin</span><br><span class="line">db.createUser(</span><br><span class="line">&#123;</span><br><span class="line">    user: <span class="string">&quot;root&quot;</span>,</span><br><span class="line">    pwd: <span class="string">&quot;root123&quot;</span>,</span><br><span class="line">    roles: [ &#123; role: <span class="string">&quot;root&quot;</span>, db: <span class="string">&quot;admin&quot;</span> &#125; ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="验证用户"><a href="#验证用户" class="headerlink" title="验证用户"></a>验证用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.auth(<span class="string">&#x27;root&#x27;</span>,<span class="string">&#x27;root123&#x27;</span>)</span><br></pre></td></tr></table></figure><h3 id="配置文件中，加入以下配置"><a href="#配置文件中，加入以下配置" class="headerlink" title="配置文件中，加入以下配置"></a>配置文件中，加入以下配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br></pre></td></tr></table></figure><h3 id="重启mongodb"><a href="#重启mongodb" class="headerlink" title="重启mongodb"></a>重启mongodb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongod -f &#x2F;mongodb&#x2F;conf&#x2F;mongo.conf --shutdown </span><br><span class="line">mongod -f &#x2F;mongodb&#x2F;conf&#x2F;mongo.conf </span><br></pre></td></tr></table></figure><h3 id="登录验证"><a href="#登录验证" class="headerlink" title="登录验证"></a>登录验证</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongo -uroot -proot123  admin</span><br><span class="line">mongo -uroot -proot123  <span class="number">10.0</span>.<span class="number">0.53</span>/admin</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">mongo</span><br><span class="line"><span class="keyword">use</span> admin</span><br><span class="line">db.auth(<span class="symbol">&#x27;root</span><span class="string">&#x27;,&#x27;</span>root123&#x27;)</span><br></pre></td></tr></table></figure><h3 id="查看用户"><a href="#查看用户" class="headerlink" title="查看用户"></a>查看用户</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">admin</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.system</span><span class="selector-class">.users</span><span class="selector-class">.find</span>()<span class="selector-class">.pretty</span>()</span><br></pre></td></tr></table></figure><h3 id="创建应用用户"><a href="#创建应用用户" class="headerlink" title="创建应用用户"></a>创建应用用户</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">oldboy</span></span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.createUser</span>(</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attribute">user</span>: <span class="string">&quot;app01&quot;</span>,</span><br><span class="line">        pwd: <span class="string">&quot;app01&quot;</span>,</span><br><span class="line">        roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span> , db: <span class="string">&quot;oldboy&quot;</span> &#125; ]</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">mongo</span>  <span class="selector-tag">-uapp01</span> <span class="selector-tag">-papp01</span> <span class="selector-tag">app</span></span><br></pre></td></tr></table></figure><h3 id="查询mongodb中的用户信息"><a href="#查询mongodb中的用户信息" class="headerlink" title="查询mongodb中的用户信息"></a>查询mongodb中的用户信息</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mongo -uroot -proot123 <span class="number">10.0</span>.<span class="number">0.53</span>/admin</span><br><span class="line">db.system.users.<span class="built_in">find</span>().pretty()</span><br></pre></td></tr></table></figure><h2 id="删除用户（root身份登录，use到验证库）"><a href="#删除用户（root身份登录，use到验证库）" class="headerlink" title="删除用户（root身份登录，use到验证库）"></a>删除用户（root身份登录，use到验证库）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">删除用户</span><br><span class="line">db.createUser(&#123;user: <span class="string">&quot;app02&quot;</span>,<span class="built_in">pwd</span>: <span class="string">&quot;app02&quot;</span>,roles: [ &#123; role: <span class="string">&quot;readWrite&quot;</span> , db: <span class="string">&quot;oldboy1&quot;</span> &#125; ]&#125;)</span><br><span class="line">mongo -uroot -proot123 10.0.0.53/admin</span><br><span class="line">use oldboy1</span><br><span class="line">db.dropUser(<span class="string">&quot;app02&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="用户管理注意事项"><a href="#用户管理注意事项" class="headerlink" title="用户管理注意事项"></a>用户管理注意事项</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1. 建用户要有验证库，管理员admin，普通用户是要管理的库</span><br><span class="line">2. 登录时，注意验证库</span><br><span class="line">mongo -uapp01 -papp01 10.0.0.51:27017&#x2F;oldboy</span><br><span class="line">3. 重点参数</span><br><span class="line">net:</span><br><span class="line">   port: 27017</span><br><span class="line">   bindIp: 10.0.0.51,127.0.0.1</span><br><span class="line">security:</span><br><span class="line">   authorization: enabled</span><br></pre></td></tr></table></figure><h1 id="MongoDB复制集RS（ReplicationSet）"><a href="#MongoDB复制集RS（ReplicationSet）" class="headerlink" title="MongoDB复制集RS（ReplicationSet）"></a>MongoDB复制集RS（ReplicationSet）</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200812200517506.png" alt="image-20200812200517506"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">基本构成是1主2从的结构，自带互相监控投票机制（Raft（MongoDB）  Paxos（mysql MGR 用的是变种））</span><br><span class="line">如果发生主库宕机，复制集内部会进行投票选举，选择一个新的主库替代原有主库对外提供服务。同时复制集会自动通知</span><br><span class="line">客户端程序，主库已经发生切换了。应用就会连接到新的主库。</span><br></pre></td></tr></table></figure><h2 id="Replication-Set配置过程详解"><a href="#Replication-Set配置过程详解" class="headerlink" title="Replication Set配置过程详解"></a>Replication Set配置过程详解</h2><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>三个以上的mongodb节点（或多实例）</p><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><h4 id="多个端口"><a href="#多个端口" class="headerlink" title="多个端口"></a>多个端口</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">28017、28018、28019、28020</span><br></pre></td></tr></table></figure><h4 id="多套目录"><a href="#多套目录" class="headerlink" title="多套目录"></a>多套目录</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">su - mongod </span><br><span class="line">mkdir -p /mongodb/28017/conf /mongodb/28017/data /mongodb/28017/<span class="built_in">log</span></span><br><span class="line">mkdir -p /mongodb/28018/conf /mongodb/28018/data /mongodb/28018/<span class="built_in">log</span></span><br><span class="line">mkdir -p /mongodb/28019/conf /mongodb/28019/data /mongodb/28019/<span class="built_in">log</span></span><br><span class="line">mkdir -p /mongodb/28020/conf /mongodb/28020/data /mongodb/28020/<span class="built_in">log</span></span><br></pre></td></tr></table></figure><h4 id="多套配置文件"><a href="#多套配置文件" class="headerlink" title="多套配置文件"></a>多套配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">&#x2F;mongodb&#x2F;28018&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">&#x2F;mongodb&#x2F;28019&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">&#x2F;mongodb&#x2F;28020&#x2F;conf&#x2F;mongod.conf</span><br></pre></td></tr></table></figure><h4 id="配置文件内容"><a href="#配置文件内容" class="headerlink" title="配置文件内容"></a>配置文件内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; &#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf &lt;&lt;EOF</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: &#x2F;mongodb&#x2F;28017&#x2F;log&#x2F;mongodb.log</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  dbPath: &#x2F;mongodb&#x2F;28017&#x2F;data</span><br><span class="line">  directoryPerDB: true</span><br><span class="line">  #engine: wiredTiger</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line">    collectionConfig:</span><br><span class="line">      blockCompressor: zlib</span><br><span class="line">    indexConfig:</span><br><span class="line">      prefixCompression: true</span><br><span class="line">processManagement:</span><br><span class="line">  fork: true</span><br><span class="line">net:</span><br><span class="line">  bindIp: 10.0.0.51,127.0.0.1</span><br><span class="line">  port: 28017</span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 2048</span><br><span class="line">  replSetName: my_repl</span><br><span class="line">EOF</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">\cp  &#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf  &#x2F;mongodb&#x2F;28018&#x2F;conf&#x2F;</span><br><span class="line">\cp  &#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf  &#x2F;mongodb&#x2F;28019&#x2F;conf&#x2F;</span><br><span class="line">\cp  &#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf  &#x2F;mongodb&#x2F;28020&#x2F;conf&#x2F;</span><br><span class="line"></span><br><span class="line">sed &#39;s#28017#28018#g&#39; &#x2F;mongodb&#x2F;28018&#x2F;conf&#x2F;mongod.conf -i</span><br><span class="line">sed &#39;s#28017#28019#g&#39; &#x2F;mongodb&#x2F;28019&#x2F;conf&#x2F;mongod.conf -i</span><br><span class="line">sed &#39;s#28017#28020#g&#39; &#x2F;mongodb&#x2F;28020&#x2F;conf&#x2F;mongod.conf -i</span><br></pre></td></tr></table></figure><h4 id="启动多个实例备用"><a href="#启动多个实例备用" class="headerlink" title="启动多个实例备用"></a>启动多个实例备用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mongod -f &#x2F;mongodb&#x2F;28017&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">mongod -f &#x2F;mongodb&#x2F;28018&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">mongod -f &#x2F;mongodb&#x2F;28019&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">mongod -f &#x2F;mongodb&#x2F;28020&#x2F;conf&#x2F;mongod.conf</span><br><span class="line">netstat -lnp|grep 280</span><br></pre></td></tr></table></figure><h2 id="配置普通复制集："><a href="#配置普通复制集：" class="headerlink" title="配置普通复制集："></a>配置普通复制集：</h2><p>1主2从，从库普通从库</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mongo --port 28017 admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;my_repl&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;10.0.0.51:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;10.0.0.51:28018&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;10.0.0.51:28019&#x27;</span>&#125;]</span><br><span class="line">          &#125;                   </span><br><span class="line">rs.initiate(config) </span><br><span class="line">查询复制集状态</span><br><span class="line">rs.status();</span><br></pre></td></tr></table></figure><h2 id="1主1从1个arbiter"><a href="#1主1从1个arbiter" class="headerlink" title="1主1从1个arbiter"></a>1主1从1个arbiter</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200812203411211.png" alt="image-20200812203411211"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mongo -port 28017 admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;my_repl&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;10.0.0.51:28017&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;10.0.0.51:28018&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;10.0.0.51:28019&#x27;</span>,<span class="string">&quot;arbiterOnly&quot;</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">          &#125;                </span><br><span class="line">rs.initiate(config) </span><br></pre></td></tr></table></figure><p>将已有节点28019替换为arbiter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mongo --port 28017 admin</span><br><span class="line">my_repl:PRIMARY&gt; rs.remove(&quot;10.0.0.51:28019&quot;)</span><br><span class="line">my_repl:PRIMARY&gt; rs.addArb(&quot;10.0.0.51:28019&quot;)</span><br><span class="line">mongod -f &#x2F;mongodb&#x2F;28019&#x2F;cinf&#x2F;mongod.conf</span><br></pre></td></tr></table></figure><h2 id="复制集管理操作"><a href="#复制集管理操作" class="headerlink" title="复制集管理操作"></a>复制集管理操作</h2><h3 id="查看复制集状态"><a href="#查看复制集状态" class="headerlink" title="查看复制集状态"></a>查看复制集状态</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rs.status();    <span class="comment">//查看整体复制集状态</span></span><br><span class="line">rs.isMaster(); <span class="comment">// 查看当前是否是主节点</span></span><br><span class="line">rs.conf()；   <span class="comment">//查看复制集配置信息</span></span><br></pre></td></tr></table></figure><h3 id="添加删除节点"><a href="#添加删除节点" class="headerlink" title="添加删除节点"></a>添加删除节点</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">rs.<span class="keyword">remove</span>(<span class="string">&quot;ip:port&quot;</span>); <span class="comment">// 删除一个节点</span></span><br><span class="line">rs.<span class="keyword">add</span>(<span class="string">&quot;ip:port&quot;</span>); <span class="comment">// 新增从节点</span></span><br><span class="line">rs.addArb(<span class="string">&quot;ip:port&quot;</span>); <span class="comment">// 新增仲裁节点</span></span><br><span class="line">例子：</span><br><span class="line">添加 arbiter节点</span><br><span class="line"><span class="number">1</span>、连接到主节点</span><br><span class="line">[<span class="meta">mongod@db03 ~</span>]$ mongo --port <span class="number">28018</span> admin</span><br><span class="line"><span class="number">2</span>、添加仲裁节点</span><br><span class="line">my_repl:PRIMARY&gt; rs.addArb(<span class="string">&quot;10.0.0.53:28020&quot;</span>)</span><br><span class="line"><span class="number">3</span>、查看节点状态</span><br><span class="line">my_repl:PRIMARY&gt; rs.isMaster()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;hosts&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;10.0.0.53:28017&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10.0.0.53:28018&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10.0.0.53:28019&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;arbiters&quot;</span> : [</span><br><span class="line">        <span class="string">&quot;10.0.0.53:28020&quot;</span></span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">rs.<span class="keyword">remove</span>(<span class="string">&quot;ip:port&quot;</span>); <span class="comment">// 删除一个节点</span></span><br><span class="line">例子：</span><br><span class="line">my_repl:PRIMARY&gt; rs.<span class="keyword">remove</span>(<span class="string">&quot;10.0.0.53:28019&quot;</span>);</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">my_repl:PRIMARY&gt; rs.isMaster()</span><br><span class="line">rs.<span class="keyword">add</span>(<span class="string">&quot;ip:port&quot;</span>); <span class="comment">// 新增从节点</span></span><br><span class="line">例子：</span><br><span class="line">my_repl:PRIMARY&gt; rs.<span class="keyword">add</span>(<span class="string">&quot;10.0.0.53:28019&quot;</span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">1</span> &#125;</span><br><span class="line">my_repl:PRIMARY&gt; rs.isMaster()</span><br></pre></td></tr></table></figure><h3 id="特殊从节点"><a href="#特殊从节点" class="headerlink" title="特殊从节点"></a>特殊从节点</h3><p><img src="https://upload-images.jianshu.io/upload_images/16956686-0c47c9de8b1f9d47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1084/format/webp" alt="img"></p><p>image.png</p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-8cb68afc326f2e61.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/651/format/webp" alt="img"></p><p>image.png</p><h4 id="介绍："><a href="#介绍：" class="headerlink" title="介绍："></a>介绍：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">arbiter节点：主要负责选主过程中的投票，但是不存储任何数据，也不提供任何服务</span><br><span class="line">hidden节点：隐藏节点，不参与选主，也不对外提供服务。</span><br><span class="line">delay节点：延时节点，数据落后于主库一段时间，因为数据是延时的，也不应该提供服务或参与选主，所以通常会配合hidden（隐藏）</span><br><span class="line">一般情况下会将delay+hidden一起配置使用</span><br></pre></td></tr></table></figure><h4 id="配置延时节点（一般延时节点也配置成hidden）"><a href="#配置延时节点（一般延时节点也配置成hidden）" class="headerlink" title="配置延时节点（一般延时节点也配置成hidden）"></a>配置延时节点（一般延时节点也配置成hidden）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">cfg=rs.conf() </span><br><span class="line">cfg.members[2].priority=0</span><br><span class="line">cfg.members[2].hidden=<span class="literal">true</span></span><br><span class="line">cfg.members[2].slaveDelay=120</span><br><span class="line">rs.reconfig(cfg)    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">取消以上配置</span><br><span class="line">cfg=rs.conf() </span><br><span class="line">cfg.members[2].priority=1</span><br><span class="line">cfg.members[2].hidden=<span class="literal">false</span></span><br><span class="line">cfg.members[2].slaveDelay=0</span><br><span class="line">rs.reconfig(cfg)    </span><br><span class="line">配置成功后，通过以下命令查询配置后的属性</span><br><span class="line">rs.conf(); </span><br></pre></td></tr></table></figure><h3 id="副本集其他操作命令"><a href="#副本集其他操作命令" class="headerlink" title="副本集其他操作命令"></a>副本集其他操作命令</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">查看副本集的配置信息</span><br><span class="line">admin&gt; rs.conf()</span><br><span class="line">查看副本集各成员的状态</span><br><span class="line">admin&gt; rs.status()</span><br><span class="line">++++++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">--副本集角色切换（不要人为随便操作）</span><br><span class="line">admin&gt; rs.stepDown()</span><br><span class="line">注：</span><br><span class="line">admin&gt; rs.freeze(<span class="number">300</span>) <span class="comment">//锁定从，使其不会转变成主库</span></span><br><span class="line">freeze()和stepDown单位都是秒。</span><br><span class="line">+++++++++++++++++++++++++++++++++++++++++++++</span><br><span class="line">设置副本节点可读：在副本节点执行</span><br><span class="line">admin&gt; rs.slaveOk()</span><br><span class="line">eg：</span><br><span class="line">admin&gt; <span class="keyword">use</span> app</span><br><span class="line">switched to db app</span><br><span class="line">app&gt; db.createCollection(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">&#123; <span class="string">&quot;ok&quot;</span> : <span class="number">0</span>, <span class="string">&quot;errmsg&quot;</span> : <span class="string">&quot;not master&quot;</span>, <span class="string">&quot;code&quot;</span> : <span class="number">10107</span> &#125;</span><br><span class="line"></span><br><span class="line">查看副本节点（监控主从延时）</span><br><span class="line">admin&gt; rs.printSlaveReplicationInfo()</span><br><span class="line">source: <span class="number">192.168</span>.<span class="number">1.22</span>:<span class="number">27017</span></span><br><span class="line">    syncedTo: Thu May <span class="number">26</span> <span class="number">2016</span> <span class="number">10</span>:<span class="number">28</span>:<span class="number">56</span> GMT+<span class="number">0800</span> (CST)</span><br><span class="line">    <span class="number">0</span> secs (<span class="number">0</span> hrs) behind the primary</span><br><span class="line"></span><br><span class="line">OPlog日志（备份恢复章节）</span><br></pre></td></tr></table></figure><h1 id="MongoDB-Sharding-Cluster-分片集群"><a href="#MongoDB-Sharding-Cluster-分片集群" class="headerlink" title="MongoDB Sharding Cluster 分片集群"></a>MongoDB Sharding Cluster 分片集群</h1><h2 id="规划-1"><a href="#规划-1" class="headerlink" title="规划"></a>规划</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">10个实例：38017<span class="selector-tag">-38026</span></span><br><span class="line">（1）<span class="selector-tag">configserver</span><span class="selector-pseudo">:38018-38020</span></span><br><span class="line">3台构成的复制集（1主两从，不支持<span class="selector-tag">arbiter</span>）38018<span class="selector-tag">-38020</span>（复制集名字<span class="selector-tag">configsvr</span>）</span><br><span class="line">（2）<span class="selector-tag">shard</span>节点：</span><br><span class="line"><span class="selector-tag">sh1</span>：38021<span class="selector-tag">-23</span>    （1主两从，其中一个节点为<span class="selector-tag">arbiter</span>，复制集名字<span class="selector-tag">sh1</span>）</span><br><span class="line"><span class="selector-tag">sh2</span>：38024<span class="selector-tag">-26</span>    （1主两从，其中一个节点为<span class="selector-tag">arbiter</span>，复制集名字<span class="selector-tag">sh2</span>）</span><br><span class="line">（3） <span class="selector-tag">mongos</span>:</span><br><span class="line">38017</span><br></pre></td></tr></table></figure><h2 id="Shard节点配置过程"><a href="#Shard节点配置过程" class="headerlink" title="Shard节点配置过程"></a>Shard节点配置过程</h2><h3 id="目录创建："><a href="#目录创建：" class="headerlink" title="目录创建："></a>目录创建：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mongodb/38021/conf  /mongodb/38021/<span class="built_in">log</span>  /mongodb/38021/data</span><br><span class="line">mkdir -p /mongodb/38022/conf  /mongodb/38022/<span class="built_in">log</span>  /mongodb/38022/data</span><br><span class="line">mkdir -p /mongodb/38023/conf  /mongodb/38023/<span class="built_in">log</span>  /mongodb/38023/data</span><br><span class="line">mkdir -p /mongodb/38024/conf  /mongodb/38024/<span class="built_in">log</span>  /mongodb/38024/data</span><br><span class="line">mkdir -p /mongodb/38025/conf  /mongodb/38025/<span class="built_in">log</span>  /mongodb/38025/data</span><br><span class="line">mkdir -p /mongodb/38026/conf  /mongodb/38026/<span class="built_in">log</span>  /mongodb/38026/data</span><br></pre></td></tr></table></figure><h3 id="修改配置文件："><a href="#修改配置文件：" class="headerlink" title="修改配置文件："></a>修改配置文件：</h3><h4 id="第一组复制集搭建：21-23（1主-1从-1Arb）"><a href="#第一组复制集搭建：21-23（1主-1从-1Arb）" class="headerlink" title="第一组复制集搭建：21-23（1主 1从 1Arb）"></a>第一组复制集搭建：21-23（1主 1从 1Arb）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;  &#x2F;mongodb&#x2F;38021&#x2F;conf&#x2F;mongodb.conf  &lt;&lt;EOF</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: &#x2F;mongodb&#x2F;38021&#x2F;log&#x2F;mongodb.log   </span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  dbPath: &#x2F;mongodb&#x2F;38021&#x2F;data</span><br><span class="line">  directoryPerDB: true</span><br><span class="line">  #engine: wiredTiger</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line">    collectionConfig:</span><br><span class="line">      blockCompressor: zlib</span><br><span class="line">    indexConfig:</span><br><span class="line">      prefixCompression: true</span><br><span class="line">net:</span><br><span class="line">  bindIp: 10.0.0.51,127.0.0.1</span><br><span class="line">  port: 38021</span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 2048</span><br><span class="line">  replSetName: sh1</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line">processManagement: </span><br><span class="line">  fork: true</span><br><span class="line">EOF</span><br><span class="line">\cp  &#x2F;mongodb&#x2F;38021&#x2F;conf&#x2F;mongodb.conf  &#x2F;mongodb&#x2F;38022&#x2F;conf&#x2F;</span><br><span class="line">\cp  &#x2F;mongodb&#x2F;38021&#x2F;conf&#x2F;mongodb.conf  &#x2F;mongodb&#x2F;38023&#x2F;conf&#x2F;</span><br><span class="line"></span><br><span class="line">sed &#39;s#38021#38022#g&#39; &#x2F;mongodb&#x2F;38022&#x2F;conf&#x2F;mongodb.conf -i</span><br><span class="line">sed &#39;s#38021#38023#g&#39; &#x2F;mongodb&#x2F;38023&#x2F;conf&#x2F;mongodb.conf -i</span><br></pre></td></tr></table></figure><h4 id="第二组节点：24-26-1主1从1Arb"><a href="#第二组节点：24-26-1主1从1Arb" class="headerlink" title="第二组节点：24-26(1主1从1Arb)"></a>第二组节点：24-26(1主1从1Arb)</h4><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; <span class="regexp">/mongodb/</span><span class="number">38024</span>/conf/mongodb.conf &lt;&lt;EOF</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: <span class="regexp">/mongodb/</span><span class="number">38024</span>/log/mongodb.log   </span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: <span class="literal">true</span></span><br><span class="line">  dbPath: <span class="regexp">/mongodb/</span><span class="number">38024</span>/data</span><br><span class="line">  directoryPerDB: <span class="literal">true</span></span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: <span class="number">1</span></span><br><span class="line">      directoryForIndexes: <span class="literal">true</span></span><br><span class="line">    collectionConfig:</span><br><span class="line">      blockCompressor: zlib</span><br><span class="line">    indexConfig:</span><br><span class="line">      prefixCompression: <span class="literal">true</span></span><br><span class="line">net:</span><br><span class="line">  bindIp: <span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>,<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">38024</span></span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: <span class="number">2048</span></span><br><span class="line">  replSetName: sh2</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: shardsvr</span><br><span class="line">processManagement: </span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">\cp  /mongodb/<span class="number">38024</span>/conf/mongodb.conf  /mongodb/<span class="number">38025</span>/conf/</span><br><span class="line">\cp  /mongodb/<span class="number">38024</span>/conf/mongodb.conf  /mongodb/<span class="number">38026</span>/conf/</span><br><span class="line">sed <span class="string">&#x27;s#38024#38025#g&#x27;</span> /mongodb/<span class="number">38025</span>/conf/mongodb.conf -i</span><br><span class="line">sed <span class="string">&#x27;s#38024#38026#g&#x27;</span> /mongodb/<span class="number">38026</span>/conf/mongodb.conf -i</span><br></pre></td></tr></table></figure><h3 id="启动所有节点，并搭建复制集"><a href="#启动所有节点，并搭建复制集" class="headerlink" title="启动所有节点，并搭建复制集"></a>启动所有节点，并搭建复制集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mongod -f  /mongodb/38021/conf/mongodb.conf </span><br><span class="line">mongod -f  /mongodb/38022/conf/mongodb.conf </span><br><span class="line">mongod -f  /mongodb/38023/conf/mongodb.conf </span><br><span class="line">mongod -f  /mongodb/38024/conf/mongodb.conf </span><br><span class="line">mongod -f  /mongodb/38025/conf/mongodb.conf </span><br><span class="line">mongod -f  /mongodb/38026/conf/mongodb.conf  </span><br><span class="line">ps -ef |grep mongod</span><br><span class="line"></span><br><span class="line">mongo --port 38021</span><br><span class="line">use  admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;sh1&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;10.0.0.51:38021&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;10.0.0.51:38022&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;10.0.0.51:38023&#x27;</span>,<span class="string">&quot;arbiterOnly&quot;</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">           &#125;</span><br><span class="line"></span><br><span class="line">rs.initiate(config)</span><br><span class="line">  </span><br><span class="line"> mongo --port 38024 </span><br><span class="line"> use admin</span><br><span class="line">config = &#123;_id: <span class="string">&#x27;sh2&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;10.0.0.51:38024&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;10.0.0.51:38025&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;10.0.0.51:38026&#x27;</span>,<span class="string">&quot;arbiterOnly&quot;</span>:<span class="literal">true</span>&#125;]</span><br><span class="line">           &#125;</span><br><span class="line">  </span><br><span class="line">rs.initiate(config)</span><br></pre></td></tr></table></figure><h2 id="config节点配置"><a href="#config节点配置" class="headerlink" title="config节点配置"></a>config节点配置</h2><h3 id="目录创建"><a href="#目录创建" class="headerlink" title="目录创建"></a>目录创建</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mongodb/38018/conf  /mongodb/38018/<span class="built_in">log</span>  /mongodb/38018/data</span><br><span class="line">mkdir -p /mongodb/38019/conf  /mongodb/38019/<span class="built_in">log</span>  /mongodb/38019/data</span><br><span class="line">mkdir -p /mongodb/38020/conf  /mongodb/38020/<span class="built_in">log</span>  /mongodb/38020/data</span><br></pre></td></tr></table></figure><h3 id="修改配置文件：-1"><a href="#修改配置文件：-1" class="headerlink" title="修改配置文件："></a>修改配置文件：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; &#x2F;mongodb&#x2F;38018&#x2F;conf&#x2F;mongodb.conf &lt;&lt;EOF</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: &#x2F;mongodb&#x2F;38018&#x2F;log&#x2F;mongodb.conf</span><br><span class="line">  logAppend: true</span><br><span class="line">storage:</span><br><span class="line">  journal:</span><br><span class="line">    enabled: true</span><br><span class="line">  dbPath: &#x2F;mongodb&#x2F;38018&#x2F;data</span><br><span class="line">  directoryPerDB: true</span><br><span class="line">  #engine: wiredTiger</span><br><span class="line">  wiredTiger:</span><br><span class="line">    engineConfig:</span><br><span class="line">      cacheSizeGB: 1</span><br><span class="line">      directoryForIndexes: true</span><br><span class="line">    collectionConfig:</span><br><span class="line">      blockCompressor: zlib</span><br><span class="line">    indexConfig:</span><br><span class="line">      prefixCompression: true</span><br><span class="line">net:</span><br><span class="line">  bindIp: 10.0.0.51,127.0.0.1</span><br><span class="line">  port: 38018</span><br><span class="line">replication:</span><br><span class="line">  oplogSizeMB: 2048</span><br><span class="line">  replSetName: configReplSet</span><br><span class="line">sharding:</span><br><span class="line">  clusterRole: configsvr</span><br><span class="line">processManagement: </span><br><span class="line">  fork: true</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">\cp &#x2F;mongodb&#x2F;38018&#x2F;conf&#x2F;mongodb.conf &#x2F;mongodb&#x2F;38019&#x2F;conf&#x2F;</span><br><span class="line">\cp &#x2F;mongodb&#x2F;38018&#x2F;conf&#x2F;mongodb.conf &#x2F;mongodb&#x2F;38020&#x2F;conf&#x2F;</span><br><span class="line">sed &#39;s#38018#38019#g&#39; &#x2F;mongodb&#x2F;38019&#x2F;conf&#x2F;mongodb.conf -i</span><br><span class="line">sed &#39;s#38018#38020#g&#39; &#x2F;mongodb&#x2F;38020&#x2F;conf&#x2F;mongodb.conf -i</span><br></pre></td></tr></table></figure><h3 id="启动节点，并配置复制集"><a href="#启动节点，并配置复制集" class="headerlink" title="启动节点，并配置复制集"></a>启动节点，并配置复制集</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">mongod -f /mongodb/38018/conf/mongodb.conf </span><br><span class="line">mongod -f /mongodb/38019/conf/mongodb.conf </span><br><span class="line">mongod -f /mongodb/38020/conf/mongodb.conf </span><br><span class="line"></span><br><span class="line">mongo --port 38018</span><br><span class="line">use  admin</span><br><span class="line"> config = &#123;_id: <span class="string">&#x27;configReplSet&#x27;</span>, members: [</span><br><span class="line">                          &#123;_id: 0, host: <span class="string">&#x27;10.0.0.51:38018&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 1, host: <span class="string">&#x27;10.0.0.51:38019&#x27;</span>&#125;,</span><br><span class="line">                          &#123;_id: 2, host: <span class="string">&#x27;10.0.0.51:38020&#x27;</span>&#125;]</span><br><span class="line">           &#125;</span><br><span class="line">rs.initiate(config)  </span><br><span class="line">  </span><br><span class="line">注：configserver 可以是一个节点，官方建议复制集。configserver不能有arbiter。</span><br><span class="line">新版本中，要求必须是复制集。</span><br><span class="line">注：mongodb 3.4之后，虽然要求config server为replica <span class="built_in">set</span>，但是不支持arbiter</span><br></pre></td></tr></table></figure><h2 id="mongos节点配置："><a href="#mongos节点配置：" class="headerlink" title="mongos节点配置："></a>mongos节点配置：</h2><h3 id="创建目录："><a href="#创建目录：" class="headerlink" title="创建目录："></a>创建目录：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /mongodb/38017/conf  /mongodb/38017/<span class="built_in">log</span> </span><br></pre></td></tr></table></figure><h3 id="配置文件："><a href="#配置文件：" class="headerlink" title="配置文件："></a>配置文件：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /mongodb/<span class="number">38017</span>/conf/mongos.conf &lt;&lt;EOF</span><br><span class="line">systemLog:</span><br><span class="line">  destination: file</span><br><span class="line">  path: /mongodb/<span class="number">38017</span>/<span class="built_in">log</span>/mongos.<span class="built_in">log</span></span><br><span class="line">  logAppend: <span class="literal">true</span></span><br><span class="line">net:</span><br><span class="line">  bindIp: <span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>,<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">  port: <span class="number">38017</span></span><br><span class="line">sharding:</span><br><span class="line">  configDB: configReplSet/<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>:<span class="number">38018</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>:<span class="number">38019</span>,<span class="number">10.0</span><span class="number">.0</span><span class="number">.51</span>:<span class="number">38020</span></span><br><span class="line">processManagement: </span><br><span class="line">  fork: <span class="literal">true</span></span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="启动mongos"><a href="#启动mongos" class="headerlink" title="启动mongos"></a>启动mongos</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongos -f &#x2F;mongodb&#x2F;38017&#x2F;conf&#x2F;mongos.conf </span><br></pre></td></tr></table></figure><h2 id="分片集群添加节点"><a href="#分片集群添加节点" class="headerlink" title="分片集群添加节点"></a>分片集群添加节点</h2><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> 连接到其中一个mongos（<span class="number">10.0</span>.<span class="number">0</span>.<span class="number">51</span>），做以下配置</span><br><span class="line">（<span class="number">1</span>）连接到mongs的admin数据库</span><br><span class="line"><span class="comment"># su - mongod</span></span><br><span class="line">$ mongo <span class="number">10.0</span>.<span class="number">0</span>.<span class="number">51</span><span class="symbol">:</span><span class="number">38017</span>/admin</span><br><span class="line">（<span class="number">2</span>）添加分片</span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;sh1/10.0.0.51:38021,10.0.0.51:38022,10.0.0.51:38023&quot;</span>,<span class="symbol">name:</span><span class="string">&quot;shard1&quot;</span>&#125; )</span><br><span class="line">db.runCommand( &#123; addshard : <span class="string">&quot;sh2/10.0.0.51:38024,10.0.0.51:38025,10.0.0.51:38026&quot;</span>,<span class="symbol">name:</span><span class="string">&quot;shard2&quot;</span>&#125; )</span><br><span class="line">（<span class="number">3</span>）列出分片</span><br><span class="line">mongos&gt; db.runCommand( &#123; listshards : <span class="number">1</span> &#125; )</span><br><span class="line">（<span class="number">4</span>）整体状态查看</span><br><span class="line">mongos&gt; sh.status();</span><br></pre></td></tr></table></figure><h2 id="使用分片集群"><a href="#使用分片集群" class="headerlink" title="使用分片集群"></a>使用分片集群</h2><h3 id="RANGE分片配置及测试"><a href="#RANGE分片配置及测试" class="headerlink" title="RANGE分片配置及测试"></a>RANGE分片配置及测试</h3><h3 id="1、激活数据库分片功能"><a href="#1、激活数据库分片功能" class="headerlink" title="1、激活数据库分片功能"></a>1、激活数据库分片功能</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mongo</span> <span class="selector-tag">--port</span> 38017 <span class="selector-tag">admin</span></span><br><span class="line"><span class="selector-tag">admin</span>&gt;  ( &#123; <span class="attribute">enablesharding </span>: <span class="string">&quot;数据库名称&quot;</span> &#125; )</span><br><span class="line"><span class="selector-tag">eg</span>：</span><br><span class="line"><span class="selector-tag">admin</span>&gt; <span class="selector-tag">db</span><span class="selector-class">.runCommand</span>( &#123; <span class="attribute">enablesharding </span>: <span class="string">&quot;test&quot;</span> &#125; )</span><br></pre></td></tr></table></figure><h3 id="2、指定分片键对集合分片"><a href="#2、指定分片键对集合分片" class="headerlink" title="2、指定分片键对集合分片"></a>2、指定分片键对集合分片</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">### 创建索引</span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">test</span></span><br><span class="line">&gt; <span class="selector-tag">db</span><span class="selector-class">.vast</span><span class="selector-class">.ensureIndex</span>( &#123; <span class="attribute">id</span>: <span class="number">1</span> &#125; )</span><br><span class="line">### 开启分片</span><br><span class="line"><span class="selector-tag">use</span> <span class="selector-tag">admin</span></span><br><span class="line">&gt; <span class="selector-tag">db</span><span class="selector-class">.runCommand</span>( &#123; <span class="attribute">shardcollection </span>: <span class="string">&quot;test.vast&quot;</span>,key : &#123;id: <span class="number">1</span>&#125; &#125; )</span><br></pre></td></tr></table></figure><h3 id="3、集合分片验证"><a href="#3、集合分片验证" class="headerlink" title="3、集合分片验证"></a>3、集合分片验证</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">admin&gt; use <span class="built_in">test</span></span><br><span class="line"><span class="built_in">test</span>&gt; <span class="keyword">for</span>(i=1;i&lt;1000000;i++)&#123; db.vast.insert(&#123;<span class="string">&quot;id&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shenzheng&quot;</span>,<span class="string">&quot;age&quot;</span>:70,<span class="string">&quot;date&quot;</span>:new Date()&#125;); &#125;</span><br><span class="line"><span class="built_in">test</span>&gt; db.vast.stats()</span><br></pre></td></tr></table></figure><p>4、分片结果测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">shard1</span>:</span><br><span class="line"><span class="selector-tag">mongo</span> <span class="selector-tag">--port</span> 38021</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.vast</span><span class="selector-class">.count</span>();</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">shard2</span>:</span><br><span class="line"><span class="selector-tag">mongo</span> <span class="selector-tag">--port</span> 38024</span><br><span class="line"><span class="selector-tag">db</span><span class="selector-class">.vast</span><span class="selector-class">.count</span>();</span><br></pre></td></tr></table></figure><h3 id="7-6-2-Hash分片例子："><a href="#7-6-2-Hash分片例子：" class="headerlink" title="7.6.2 Hash分片例子："></a>7.6.2 Hash分片例子：</h3><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">对oldboy库下的vast大表进行hash</span><br><span class="line">创建哈希索引</span><br><span class="line">（<span class="number">1</span>）对于oldboy开启分片功能</span><br><span class="line">mongo --port <span class="number">38017</span> admin</span><br><span class="line"><span class="keyword">use</span> admin</span><br><span class="line">admin&gt; db.runCommand( &#123; enablesharding : <span class="string">&quot;oldboy&quot;</span> &#125; )</span><br><span class="line">（<span class="number">2</span>）对于oldboy库下的vast表建立hash索引</span><br><span class="line"><span class="keyword">use</span> oldboy</span><br><span class="line">oldboy&gt; db.vast.ensureIndex( &#123; id: <span class="string">&quot;hashed&quot;</span> &#125; )</span><br><span class="line">（<span class="number">3</span>）开启分片 </span><br><span class="line"><span class="keyword">use</span> admin</span><br><span class="line">admin &gt; sh.shardCollection( <span class="string">&quot;oldboy.vast&quot;</span>, &#123; id: <span class="string">&quot;hashed&quot;</span> &#125; )</span><br><span class="line">（<span class="number">4</span>）录入<span class="number">10</span>w行数据测试</span><br><span class="line"><span class="keyword">use</span> oldboy</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">100000</span>;i++)&#123; db.vast.insert(&#123;<span class="string">&quot;id&quot;</span>:i,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;shenzheng&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">70</span>,<span class="string">&quot;date&quot;</span>:new Date()&#125;); &#125;</span><br><span class="line">（<span class="number">5</span>）hash分片结果测试</span><br><span class="line">mongo --port <span class="number">38021</span></span><br><span class="line"><span class="keyword">use</span> oldboy</span><br><span class="line">db.vast.count();</span><br><span class="line">mongo --port <span class="number">38024</span></span><br><span class="line"><span class="keyword">use</span> oldboy</span><br><span class="line">db.vast.count();</span><br></pre></td></tr></table></figure><h2 id="分片集群的查询及管理"><a href="#分片集群的查询及管理" class="headerlink" title="分片集群的查询及管理"></a>分片集群的查询及管理</h2><h3 id="判断是否Shard集群"><a href="#判断是否Shard集群" class="headerlink" title="判断是否Shard集群"></a>判断是否Shard集群</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span>&gt; <span class="selector-tag">db</span><span class="selector-class">.runCommand</span>(&#123; <span class="attribute">isdbgrid </span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="列出所有分片信息"><a href="#列出所有分片信息" class="headerlink" title="列出所有分片信息"></a>列出所有分片信息</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span>&gt; <span class="selector-tag">db</span><span class="selector-class">.runCommand</span>(&#123; <span class="attribute">listshards </span>: <span class="number">1</span>&#125;)</span><br></pre></td></tr></table></figure><h3 id="列出开启分片的数据库"><a href="#列出开启分片的数据库" class="headerlink" title="列出开启分片的数据库"></a>列出开启分片的数据库</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">admin&gt; use config</span><br><span class="line">config&gt; db.databases.<span class="built_in">find</span>( &#123; <span class="string">&quot;partitioned&quot;</span>: <span class="literal">true</span> &#125; )</span><br><span class="line">或者：</span><br><span class="line">config&gt; db.databases.<span class="built_in">find</span>() <span class="comment">//列出所有数据库分片情况</span></span><br></pre></td></tr></table></figure><h3 id="查看分片的片键"><a href="#查看分片的片键" class="headerlink" title="查看分片的片键"></a>查看分片的片键</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">config&gt; db.collections.<span class="built_in">find</span>().pretty()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;_id&quot;</span> : <span class="string">&quot;test.vast&quot;</span>,</span><br><span class="line">    <span class="string">&quot;lastmodEpoch&quot;</span> : <span class="type">ObjectId</span>(<span class="string">&quot;58a599f19c898bbfb818b63c&quot;</span>),</span><br><span class="line">    <span class="string">&quot;lastmod&quot;</span> : <span class="type">ISODate</span>(<span class="string">&quot;1970-02-19T17:02:47.296Z&quot;</span>),</span><br><span class="line">    <span class="string">&quot;dropped&quot;</span> : <span class="literal">false</span>,</span><br><span class="line">    <span class="string">&quot;key&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;id&quot;</span> : <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;unique&quot;</span> : <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查看分片的详细信息"><a href="#查看分片的详细信息" class="headerlink" title="查看分片的详细信息"></a>查看分片的详细信息</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">admin</span>&gt; <span class="selector-tag">sh</span><span class="selector-class">.status</span>()</span><br></pre></td></tr></table></figure><h3 id="删除分片节点（谨慎）"><a href="#删除分片节点（谨慎）" class="headerlink" title="删除分片节点（谨慎）"></a>删除分片节点（谨慎）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">（1）确认<span class="selector-tag">blance</span>是否在工作</span><br><span class="line"><span class="selector-tag">sh</span><span class="selector-class">.getBalancerState</span>()</span><br><span class="line">（2）删除<span class="selector-tag">shard2</span>节点(谨慎)</span><br><span class="line"><span class="selector-tag">mongos</span>&gt; <span class="selector-tag">db</span><span class="selector-class">.runCommand</span>( &#123; <span class="attribute">removeShard</span>: <span class="string">&quot;shard2&quot;</span> &#125; )</span><br><span class="line">注意：删除操作一定会立即触发<span class="selector-tag">blancer</span>。</span><br></pre></td></tr></table></figure><h2 id="balancer操作"><a href="#balancer操作" class="headerlink" title="balancer操作"></a>balancer操作</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">mongos</span>的一个重要功能，自动巡查所有<span class="selector-tag">shard</span>节点上的<span class="selector-tag">chunk</span>的情况，自动做<span class="selector-tag">chunk</span>迁移。</span><br><span class="line">什么时候工作？</span><br><span class="line">1、自动运行，会检测系统不繁忙的时候做迁移</span><br><span class="line">2、在做节点删除的时候，立即开始迁移工作</span><br><span class="line">3、<span class="selector-tag">balancer</span>只能在预设定的时间窗口内运行</span><br><span class="line"></span><br><span class="line">有需要时可以关闭和开启<span class="selector-tag">blancer</span>（备份的时候）</span><br><span class="line"><span class="selector-tag">mongos</span>&gt; <span class="selector-tag">sh</span><span class="selector-class">.stopBalancer</span>()</span><br><span class="line"><span class="selector-tag">mongos</span>&gt; <span class="selector-tag">sh</span><span class="selector-class">.startBalancer</span>()</span><br></pre></td></tr></table></figure><h3 id="自定义-自动平衡进行的时间段"><a href="#自定义-自动平衡进行的时间段" class="headerlink" title="自定义 自动平衡进行的时间段"></a>自定义 自动平衡进行的时间段</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">https:<span class="comment">//docs.mongodb.com/manual/tutorial/manage-sharded-cluster-balancer/#schedule-the-balancing-window</span></span><br><span class="line"><span class="comment">// connect to mongos</span></span><br><span class="line"></span><br><span class="line">use config</span><br><span class="line">sh.setBalancerState( <span class="literal">true</span> )</span><br><span class="line">db.settings.update(&#123; _<span class="keyword">id</span> : <span class="string">&quot;balancer&quot;</span> &#125;, &#123; $set : &#123; activeWindow : &#123; start : <span class="string">&quot;3:00&quot;</span>, stop : <span class="string">&quot;5:00&quot;</span> &#125; &#125; &#125;, <span class="literal">true</span> )</span><br><span class="line"></span><br><span class="line">sh.getBalancerWindow()</span><br><span class="line">sh.status()</span><br><span class="line"></span><br><span class="line">关于集合的balancer（了解下）</span><br><span class="line">关闭某个集合的balance</span><br><span class="line">sh.disableBalancing(<span class="string">&quot;students.grades&quot;</span>)</span><br><span class="line">打开某个集合的balancer</span><br><span class="line">sh.enableBalancing(<span class="string">&quot;students.grades&quot;</span>)</span><br><span class="line">确定某个集合的balance是开启或者关闭</span><br><span class="line">db.getSiblingDB(<span class="string">&quot;config&quot;</span>).collections.findOne(&#123;_<span class="keyword">id</span> : <span class="string">&quot;students.grades&quot;</span>&#125;).noBalance;</span><br></pre></td></tr></table></figure><h1 id="备份恢复"><a href="#备份恢复" class="headerlink" title="备份恢复"></a>备份恢复</h1><h2 id="备份恢复工具介绍："><a href="#备份恢复工具介绍：" class="headerlink" title="备份恢复工具介绍："></a>备份恢复工具介绍：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）**   mongoexport&#x2F;mongoimport</span><br><span class="line">（2）***** mongodump&#x2F;mongorestore</span><br></pre></td></tr></table></figure><h2 id="备份工具区别在哪里？"><a href="#备份工具区别在哪里？" class="headerlink" title="备份工具区别在哪里？"></a>备份工具区别在哪里？</h2><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">应用场景总结:</span><br><span class="line">mongoexport/mongoimport:json csv </span><br><span class="line"><span class="number">1</span>、异构平台迁移  mysql  &lt;---&gt; mongodb</span><br><span class="line"><span class="number">2</span>、同平台，跨大版本：mongodb <span class="number">2</span>  ----&gt; mongodb <span class="number">3</span></span><br><span class="line">mongodump/mongorestore</span><br><span class="line">日常备份恢复时使用.</span><br></pre></td></tr></table></figure><h2 id="导出工具mongoexport"><a href="#导出工具mongoexport" class="headerlink" title="导出工具mongoexport"></a>导出工具mongoexport</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">mongoexport具体用法如下所示：</span><br><span class="line">$ mongoexport --<span class="built_in">help</span>  </span><br><span class="line">参数说明：</span><br><span class="line">-h:指明数据库宿主机的IP</span><br><span class="line">-u:指明数据库的用户名</span><br><span class="line">-p:指明数据库的密码</span><br><span class="line">-d:指明数据库的名字</span><br><span class="line">-c:指明collection的名字</span><br><span class="line">-f:指明要导出那些列</span><br><span class="line">-o:指明到要导出的文件名</span><br><span class="line">-q:指明导出数据的过滤条件</span><br><span class="line">--authenticationDatabase admin</span><br><span class="line"></span><br><span class="line">1.单表备份至json格式</span><br><span class="line">mongoexport -uroot -proot123 --port 27017 --authenticationDatabase admin -d oldboy -c <span class="built_in">log</span> -o /mongodb/log.json</span><br><span class="line"></span><br><span class="line">注：备份文件的名字可以自定义，默认导出了JSON格式的数据。</span><br><span class="line"></span><br><span class="line">2. 单表备份至csv格式</span><br><span class="line">如果我们需要导出CSV格式的数据，则需要使用----<span class="built_in">type</span>=csv参数：</span><br><span class="line"></span><br><span class="line"> mongoexport -uroot -proot123 --port 27017 --authenticationDatabase admin -d <span class="built_in">test</span> -c <span class="built_in">log</span> --<span class="built_in">type</span>=csv -f uid,name,age,date  -o /mongodb/log.csv</span><br></pre></td></tr></table></figure><h2 id="导入工具mongoimport"><a href="#导入工具mongoimport" class="headerlink" title="导入工具mongoimport"></a>导入工具mongoimport</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$ mongoimport --help</span><br><span class="line">参数说明：</span><br><span class="line">-h:指明数据库宿主机的IP</span><br><span class="line">-u:指明数据库的用户名</span><br><span class="line">-p:指明数据库的密码</span><br><span class="line">-d:指明数据库的名字</span><br><span class="line">-c:指明collection的名字</span><br><span class="line">-f:指明要导入那些列</span><br><span class="line">-j, --numInsertionWorkers&#x3D;&lt;number&gt;  number of insert operations to run concurrently                                                  (defaults to 1)</span><br><span class="line">&#x2F;&#x2F;并行</span><br><span class="line">数据恢复:</span><br><span class="line">1.恢复json格式表数据到log1</span><br><span class="line">mongoimport -uroot -proot123 --port 27017 --authenticationDatabase admin -d oldboy -c log1 &#x2F;mongodb&#x2F;log.json</span><br><span class="line">2.恢复csv格式的文件到log2</span><br><span class="line">上面演示的是导入JSON格式的文件中的内容，如果要导入CSV格式文件中的内容，则需要通过--type参数指定导入格式，具体如下所示：</span><br><span class="line">错误的恢复</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">（1）csv格式的文件头行，有列名字</span><br><span class="line">mongoimport   -uroot -proot123 --port 27017 --authenticationDatabase admin   -d oldboy -c log2 --type&#x3D;csv --headerline --file  &#x2F;mongodb&#x2F;log.csv</span><br><span class="line"></span><br><span class="line">（2）csv格式的文件头行，没有列名字</span><br><span class="line">mongoimport   -uroot -proot123 --port 27017 --authenticationDatabase admin   -d oldboy -c log3 --type&#x3D;csv -f id,name,age,date --file  &#x2F;mongodb&#x2F;log.csv</span><br><span class="line">--headerline:指明第一行是列名，不需要导入。</span><br></pre></td></tr></table></figure><h2 id="异构平台迁移案例"><a href="#异构平台迁移案例" class="headerlink" title="异构平台迁移案例"></a>异构平台迁移案例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">mysql   -----&gt; mongodb  </span><br><span class="line">world数据库下city表进行导出，导入到mongodb</span><br><span class="line"></span><br><span class="line">（1）mysql开启安全路径</span><br><span class="line">vim /etc/my.cnf   ---&gt;添加以下配置</span><br><span class="line">secure-file-priv=/tmp</span><br><span class="line"></span><br><span class="line">--重启数据库生效</span><br><span class="line">/etc/init.d/mysqld restart</span><br><span class="line"></span><br><span class="line">（2）导出mysql的city表数据</span><br><span class="line"><span class="built_in">source</span> /root/world.sql</span><br><span class="line"></span><br><span class="line">select * from world.city into outfile <span class="string">&#x27;/tmp/city1.csv&#x27;</span> fields terminated by <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line">（3）处理备份文件</span><br><span class="line">desc world.city</span><br><span class="line">  ID          | int(11)  | NO   | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO   |     |         |                |</span><br><span class="line">| CountryCode | char(3)  | NO   | MUL |         |                |</span><br><span class="line">| District    | char(20) | NO   |     |         |                |</span><br><span class="line">| Population</span><br><span class="line"></span><br><span class="line">vim /tmp/city.csv   ----&gt; 添加第一行列名信息</span><br><span class="line"></span><br><span class="line">ID,Name,CountryCode,District,Population</span><br><span class="line"></span><br><span class="line">(4)在mongodb中导入备份</span><br><span class="line">mongoimport -uroot -proot123 --port 27017 --authenticationDatabase admin -d world  -c city --<span class="built_in">type</span>=csv -f ID,Name,CountryCode,District,Population --file  /tmp/city1.csv</span><br><span class="line"></span><br><span class="line">use world</span><br><span class="line">db.city.find(&#123;CountryCode:<span class="string">&quot;CHN&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line">-------------</span><br><span class="line">world共100张表，全部迁移到mongodb</span><br><span class="line"></span><br><span class="line">select table_name ,group_concat(column_name) from columns <span class="built_in">where</span> table_schema=<span class="string">&#x27;world&#x27;</span> group by table_name;</span><br><span class="line"></span><br><span class="line">select * from world.city into outfile <span class="string">&#x27;/tmp/world_city.csv&#x27;</span> fields terminated by <span class="string">&#x27;,&#x27;</span>;</span><br><span class="line"></span><br><span class="line">select concat(<span class="string">&quot;select * from &quot;</span>,table_schema,<span class="string">&quot;.&quot;</span>,table_name ,<span class="string">&quot; into outfile &#x27;/tmp/&quot;</span>,table_schema,<span class="string">&quot;_&quot;</span>,table_name,<span class="string">&quot;.csv&#x27; fields terminated by &#x27;,&#x27;;&quot;</span>)</span><br><span class="line">from information_schema.tables <span class="built_in">where</span> table_schema =<span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"></span><br><span class="line">导入：</span><br><span class="line">提示，使用infomation_schema.columns + information_schema.tables</span><br><span class="line"></span><br><span class="line">mysql导出csv：</span><br><span class="line">select * from test_info   </span><br><span class="line">into outfile <span class="string">&#x27;/tmp/test.csv&#x27;</span>   </span><br><span class="line">fields terminated by <span class="string">&#x27;,&#x27;</span>　　　 ------字段间以,号分隔</span><br><span class="line">optionally enclosed by <span class="string">&#x27;&quot;&#x27;</span>　　 ------字段用<span class="string">&quot;号括起</span></span><br><span class="line"><span class="string">escaped by &#x27;&quot;</span><span class="string">&#x27;   　　　　　　  ------字段中使用的转义符为&quot;</span></span><br><span class="line"><span class="string">lines terminated by &#x27;</span>\r\n<span class="string">&#x27;;　　------行以\r\n结束</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">mysql导入csv：</span></span><br><span class="line"><span class="string">load data infile &#x27;</span>/tmp/test.csv<span class="string">&#x27;   </span></span><br><span class="line"><span class="string">into table test_info    </span></span><br><span class="line"><span class="string">fields terminated by &#x27;</span>,<span class="string">&#x27;  </span></span><br><span class="line"><span class="string">optionally enclosed by &#x27;</span><span class="string">&quot;&#x27; </span></span><br><span class="line"><span class="string">escaped by &#x27;&quot;</span><span class="string">&#x27;   </span></span><br><span class="line"><span class="string">lines terminated by &#x27;</span>\r\n<span class="string">&#x27;; </span></span><br></pre></td></tr></table></figure><h2 id="mongodump和mongorestore"><a href="#mongodump和mongorestore" class="headerlink" title="mongodump和mongorestore"></a>mongodump和mongorestore</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mongodump能够在Mongodb运行时进行备份，它的工作原理是对运行的Mongodb做查询，然后将所有查到的文档写入磁盘。</span><br><span class="line">但是存在的问题时使用mongodump产生的备份不一定是数据库的实时快照，如果我们在备份时对数据库进行了写入操作，</span><br><span class="line">则备份出来的文件可能不完全和Mongodb实时数据相等。另外在备份时可能会对其它客户端性能产生不利的影响。</span><br></pre></td></tr></table></figure><h3 id="mongodump用法如下："><a href="#mongodump用法如下：" class="headerlink" title="mongodump用法如下："></a>mongodump用法如下：</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ mongodump --help</span><br><span class="line">参数说明：</span><br><span class="line">-h:指明数据库宿主机的<span class="type">IP</span></span><br><span class="line">-u:指明数据库的用户名</span><br><span class="line">-p:指明数据库的密码</span><br><span class="line">-d:指明数据库的名字</span><br><span class="line">-<span class="built_in">c</span>:指明collection的名字</span><br><span class="line">-o:指明到要导出的文件名</span><br><span class="line">-q:指明导出数据的过滤条件</span><br><span class="line">-j, --numParallelCollections=  number of collections to <span class="built_in">dump</span> <span class="keyword">in</span> parallel (<span class="number">4</span> by <span class="keyword">default</span>)</span><br><span class="line">--oplog  备份的同时备份oplog</span><br></pre></td></tr></table></figure><h4 id="mongodump和mongorestore基本使用"><a href="#mongodump和mongorestore基本使用" class="headerlink" title="mongodump和mongorestore基本使用"></a>mongodump和mongorestore基本使用</h4><h4 id="全库备份"><a href="#全库备份" class="headerlink" title="全库备份"></a>全库备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;mongodb&#x2F;backup</span><br><span class="line">mongodump  -uroot -proot123 --port 27017 --authenticationDatabase admin -o &#x2F;mongodb&#x2F;backup</span><br></pre></td></tr></table></figure><h4 id="备份world库"><a href="#备份world库" class="headerlink" title="备份world库"></a>备份world库</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongodump   -uroot -proot123 --port <span class="number">27017</span> --authenticationDatabase admin -d world -o /mongodb/backup/</span><br></pre></td></tr></table></figure><h4 id="备份oldboy库下的log集合"><a href="#备份oldboy库下的log集合" class="headerlink" title="备份oldboy库下的log集合"></a>备份oldboy库下的log集合</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -d oldboy -c <span class="built_in">log</span> -o /mongodb/backup/</span><br></pre></td></tr></table></figure><h4 id="压缩备份"><a href="#压缩备份" class="headerlink" title="压缩备份"></a>压缩备份</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -d oldguo -o &#x2F;mongodb&#x2F;backup&#x2F; --gzip</span><br><span class="line"> mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -o &#x2F;mongodb&#x2F;backup&#x2F; --gzip</span><br><span class="line">$ mongodump   -uroot -proot123 --port 27017 --authenticationDatabase admin -d app -c vast -o &#x2F;mongodb&#x2F;backup&#x2F; --gzip</span><br></pre></td></tr></table></figure><h4 id="恢复world库"><a href="#恢复world库" class="headerlink" title="恢复world库"></a>恢复world库</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongorestore   -uroot -proot123 --port <span class="number">27017</span> --authenticationDatabase admin -d world1  /mongodb/backup/world</span><br></pre></td></tr></table></figure><h4 id="恢复oldguo库下的t1集合"><a href="#恢复oldguo库下的t1集合" class="headerlink" title="恢复oldguo库下的t1集合"></a>恢复oldguo库下的t1集合</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[mongod@db03 oldboy]$ mongorestore   -uroot -proot123 --port <span class="number">27017</span> --authenticationDatabase admin -d world -c t1  --gzip  /mongodb/backup.bak/oldboy/log1.bson.gz </span><br></pre></td></tr></table></figure><h4 id="drop表示恢复的时候把之前的集合drop掉-危险"><a href="#drop表示恢复的时候把之前的集合drop掉-危险" class="headerlink" title="drop表示恢复的时候把之前的集合drop掉(危险)"></a>drop表示恢复的时候把之前的集合drop掉(危险)</h4><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ mongorestore  -uroot -proot123 --port <span class="number">27017</span> --authenticationDatabase admin -d oldboy --drop  /mongodb/backup/oldboy</span><br></pre></td></tr></table></figure><h2 id="mongodump和mongorestore高级企业应用（–oplog）"><a href="#mongodump和mongorestore高级企业应用（–oplog）" class="headerlink" title="mongodump和mongorestore高级企业应用（–oplog）"></a>mongodump和mongorestore高级企业应用（–oplog）</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">注意：这是replica <span class="built_in">set</span>或者master/slave模式专用</span><br><span class="line">--oplog</span><br><span class="line"> use oplog <span class="keyword">for</span> taking a point-in-time snapshot</span><br></pre></td></tr></table></figure><h3 id="oplog介绍"><a href="#oplog介绍" class="headerlink" title="oplog介绍"></a>oplog介绍</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">在replica <span class="built_in">set</span>中oplog是一个定容集合（capped collection），它的默认大小是磁盘空间的5%（可以通过--oplogSizeMB参数修改）.</span><br><span class="line"></span><br><span class="line">位于<span class="built_in">local</span>库的db.oplog.rs，有兴趣可以看看里面到底有些什么内容。</span><br><span class="line">其中记录的是整个mongod实例一段时间内数据库的所有变更（插入/更新/删除）操作。</span><br><span class="line">当空间用完时新记录自动覆盖最老的记录。</span><br><span class="line">其覆盖范围被称作oplog时间窗口。需要注意的是，因为oplog是一个定容集合，</span><br><span class="line">所以时间窗口能覆盖的范围会因为你单位时间内的更新次数不同而变化。</span><br><span class="line">想要查看当前的oplog时间窗口预计值，可以使用以下命令：</span><br><span class="line"></span><br><span class="line"> mongod -f /mongodb/28017/conf/mongod.conf </span><br><span class="line"> mongod -f /mongodb/28018/conf/mongod.conf </span><br><span class="line"> mongod -f /mongodb/28019/conf/mongod.conf </span><br><span class="line"> mongod -f /mongodb/28020/conf/mongod.conf </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> use <span class="built_in">local</span> </span><br><span class="line"> db.oplog.rs.find().pretty()</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1553597844, 1),</span><br><span class="line"><span class="string">&quot;op&quot;</span> : <span class="string">&quot;n&quot;</span></span><br><span class="line"><span class="string">&quot;o&quot;</span>  :</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;i&quot;</span>: insert</span><br><span class="line"><span class="string">&quot;u&quot;</span>: update</span><br><span class="line"><span class="string">&quot;d&quot;</span>: delete</span><br><span class="line"><span class="string">&quot;c&quot;</span>: db cmd</span><br><span class="line"></span><br><span class="line"><span class="built_in">test</span>:PRIMARY&gt; rs.printReplicationInfo()</span><br><span class="line">configured oplog size:   1561.5615234375MB &lt;--集合大小</span><br><span class="line"><span class="built_in">log</span> length start to end: 423849secs (117.74hrs) &lt;--预计窗口覆盖时间</span><br><span class="line">oplog first event time:  Wed Sep 09 2015 17:39:50 GMT+0800 (CST)</span><br><span class="line">oplog last event time:   Mon Sep 14 2015 15:23:59 GMT+0800 (CST)</span><br><span class="line">now:                     Mon Sep 14 2015 16:37:30 GMT+0800 (CST)</span><br></pre></td></tr></table></figure><h3 id="oplog企业级应用"><a href="#oplog企业级应用" class="headerlink" title="oplog企业级应用"></a>oplog企业级应用</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）实现热备，在备份时使用--oplog选项</span><br><span class="line">注：为了演示效果我们在备份过程，模拟数据插入</span><br><span class="line">（<span class="number">2</span>）准备测试数据</span><br><span class="line">[<span class="meta">mongod@db01 conf</span>]$ mongo --port <span class="number">28018</span></span><br><span class="line">use oldboy</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span> ;i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">    db.foo.insert(&#123;a:i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">my_repl:PRIMARY&gt; db.oplog.rs.find(&#123;<span class="string">&quot;op&quot;</span>:<span class="string">&quot;i&quot;</span>&#125;).pretty()</span><br><span class="line"></span><br><span class="line">oplog 配合mongodump实现热备</span><br><span class="line">mongodump --port <span class="number">28018</span> --oplog -o /mongodb/backup</span><br><span class="line">作用介绍：--oplog 会记录备份过程中的数据变化。会以oplog.bson保存下来</span><br><span class="line">恢复</span><br><span class="line">mongorestore  --port <span class="number">28018</span> --oplogReplay /mongodb/backup</span><br></pre></td></tr></table></figure><h2 id="oplog高级应用"><a href="#oplog高级应用" class="headerlink" title="oplog高级应用"></a>oplog高级应用</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">背景：每天0点全备，oplog恢复窗口为48小时</span><br><span class="line">某天，上午10点world.city 业务表被误删除。</span><br><span class="line">恢复思路：</span><br><span class="line">    0、停应用</span><br><span class="line">    2、找测试库</span><br><span class="line">    3、恢复昨天晚上全备</span><br><span class="line">    4、截取全备之后到world.city误删除时间点的oplog，并恢复到测试库</span><br><span class="line">    5、将误删除表导出，恢复到生产库</span><br><span class="line"></span><br><span class="line">恢复步骤：</span><br><span class="line">模拟故障环境：</span><br><span class="line"></span><br><span class="line">1、全备数据库</span><br><span class="line">模拟原始数据</span><br><span class="line"></span><br><span class="line">mongo --port 28017</span><br><span class="line">use wo</span><br><span class="line"><span class="keyword">for</span>(var i = 1 ;i &lt; 20; i++) &#123;</span><br><span class="line">    db.ci.insert(&#123;a: i&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">全备:</span><br><span class="line">rm -rf /mongodb/backup/*</span><br><span class="line">mongodump --port 28018 --oplog -o /mongodb/backup</span><br><span class="line"></span><br><span class="line">--oplog功能:在备份同时,将备份过程中产生的日志进行备份</span><br><span class="line">文件必须存放在/mongodb/backup下,自动命令为oplog.bson</span><br><span class="line"></span><br><span class="line">再次模拟数据</span><br><span class="line">db.ci1.insert(&#123;id:1&#125;)</span><br><span class="line">db.ci2.insert(&#123;id:2&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2、上午10点：删除wo库下的ci表</span><br><span class="line">10:00时刻,误删除</span><br><span class="line">db.ci.drop()</span><br><span class="line">show tables;</span><br><span class="line"></span><br><span class="line">3、备份现有的oplog.rs表</span><br><span class="line">mongodump --port 28018 -d <span class="built_in">local</span> -c oplog.rs  -o /mongodb/backup</span><br><span class="line"></span><br><span class="line">4、截取oplog并恢复到drop之前的位置</span><br><span class="line">更合理的方法：登陆到原数据库</span><br><span class="line">[mongod@db03 <span class="built_in">local</span>]$ mongo --port 28018</span><br><span class="line">my_repl:PRIMARY&gt; use <span class="built_in">local</span></span><br><span class="line">db.oplog.rs.find(&#123;op:<span class="string">&quot;c&quot;</span>&#125;).pretty();</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;ts&quot;</span> : Timestamp(1553659908, 1),</span><br><span class="line">    <span class="string">&quot;t&quot;</span> : NumberLong(2),</span><br><span class="line">    <span class="string">&quot;h&quot;</span> : NumberLong(<span class="string">&quot;-7439981700218302504&quot;</span>),</span><br><span class="line">    <span class="string">&quot;v&quot;</span> : 2,</span><br><span class="line">    <span class="string">&quot;op&quot;</span> : <span class="string">&quot;c&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ns&quot;</span> : <span class="string">&quot;wo.<span class="variable">$cmd</span>&quot;</span>,</span><br><span class="line">    <span class="string">&quot;ui&quot;</span> : UUID(<span class="string">&quot;db70fa45-edde-4945-ade3-747224745725&quot;</span>),</span><br><span class="line">    <span class="string">&quot;wall&quot;</span> : ISODate(<span class="string">&quot;2019-03-27T04:11:48.890Z&quot;</span>),</span><br><span class="line">    <span class="string">&quot;o&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;drop&quot;</span> : <span class="string">&quot;ci&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">获取到oplog误删除时间点位置:</span><br><span class="line"><span class="string">&quot;ts&quot;</span> : Timestamp(1553659908, 1)</span><br><span class="line"></span><br><span class="line"> 5、恢复备份+应用oplog</span><br><span class="line">[mongod@db03 backup]$ <span class="built_in">cd</span> /mongodb/backup/<span class="built_in">local</span>/</span><br><span class="line">[mongod@db03 <span class="built_in">local</span>]$ ls</span><br><span class="line">oplog.rs.bson  oplog.rs.metadata.json</span><br><span class="line">[mongod@db03 <span class="built_in">local</span>]$ cp oplog.rs.bson ../oplog.bson </span><br><span class="line">rm -rf /mongodb/backup/<span class="built_in">local</span>/</span><br><span class="line"> </span><br><span class="line">mongorestore --port 38021  --oplogReplay --oplogLimit <span class="string">&quot;1553659908:1&quot;</span>  --drop   /mongodb/backup/</span><br></pre></td></tr></table></figure><h2 id="分片集群的备份思路（了解）"><a href="#分片集群的备份思路（了解）" class="headerlink" title="分片集群的备份思路（了解）"></a>分片集群的备份思路（了解）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">1、你要备份什么？</span><br><span class="line">config server</span><br><span class="line">shard 节点</span><br><span class="line"></span><br><span class="line">单独进行备份</span><br><span class="line">2、备份有什么困难和问题</span><br><span class="line">（1）chunk迁移的问题</span><br><span class="line">    人为控制在备份的时候，避开迁移的时间窗口</span><br><span class="line">（2）shard节点之间的数据不在同一时间点。</span><br><span class="line">    选业务量较少的时候       </span><br><span class="line">        </span><br><span class="line">Ops Manager </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-13-Redis</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-13-Redis/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-13-Redis/</url>
      
        <content type="html"><![CDATA[<h1 id="NoSQL-产品-key-value"><a href="#NoSQL-产品-key-value" class="headerlink" title="NoSQL 产品(key-value)"></a>NoSQL 产品(key-value)</h1><ul><li>RDBMS ：MySQL，Oracle ，MSSQL，PG</li><li>NoSQL  :Redis,MongoDB，列存储存储相关</li><li>NewSQL—–&gt;分布式数据库架构，第三代数据库架构转型</li><li>缓存产品介绍：<ul><li>memcached （大公司会做二次开发）</li><li>redis</li><li>Tair</li></ul></li></ul><h1 id="Redis功能介绍"><a href="#Redis功能介绍" class="headerlink" title="Redis功能介绍"></a>Redis功能介绍</h1><ul><li>数据类型丰富</li><li>支持持久化</li><li>多种内存分配及回收策略</li><li>支持事务</li><li>消息队列、消息订阅 </li><li>支持高可用</li><li>支持分布式分片集群 （面试）</li><li>缓存穿透\雪崩（笔试、面试）</li><li>Redis API</li></ul><h1 id="企业缓存产品介绍"><a href="#企业缓存产品介绍" class="headerlink" title="企业缓存产品介绍"></a>企业缓存产品介绍</h1><ul><li>Memcached:<ul><li>优点：高性能读写、单一数据类型、支持客户端式分布式集群、一致性hash<br>多核结构、多线程读写性能高。</li><li>缺点：无持久化、节点故障可能出现缓存穿透、分布式需要客户端实现、跨机房数据同步困难、架构扩容复杂度高</li></ul></li><li>Redis:  <ul><li>优点：高性能读写、多数据类型支持、数据持久化、高可用架构、支持自定义虚拟内存、支持分布式分片集群、单线程读写性能极高</li><li>缺点：多线程读写较Memcached慢</li></ul></li><li>memcache与redis在读写性能的对比<ul><li>memcached 适合,多用户访问,每个用户少量的rw</li><li>redis     适合,少用户访问,每个用户大量rw </li></ul></li><li>Tair：<ul><li>优点：高性能读写、支持三种存储引擎（ddb、rdb、ldb）、支持高可用、支持分布式分片集群、支撑了几乎所有淘宝业务的缓存。</li><li>缺点：单机情况下，读写性能较其他两种产品较慢</li></ul></li></ul><h1 id="Redis使用场景介绍"><a href="#Redis使用场景介绍" class="headerlink" title="Redis使用场景介绍"></a>Redis使用场景介绍</h1><ul><li>Memcached：多核的缓存服务，更加适合于多用户并发访问次数较少的应用场景</li><li>Redis：单核的缓存服务，单节点情况下，更加适合于少量用户，多次访问的应用场景。</li><li>Redis一般是单机多实例架构，配合redis集群出现。</li></ul><h1 id="Redis安装部署"><a href="#Redis安装部署" class="headerlink" title="Redis安装部署"></a>Redis安装部署</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">下载：</span><br><span class="line">wget http://download.redis.io/releases/redis-3.2.12.tar.gz</span><br><span class="line">解压：</span><br><span class="line">上传至 /data</span><br><span class="line">tar xzf redis-3.2.12.tar.gz</span><br><span class="line">mv redis-3.2.12 redis</span><br><span class="line"></span><br><span class="line">安装：</span><br><span class="line">yum -y install gcc automake autoconf libtool make</span><br><span class="line"><span class="built_in">cd</span> redis</span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">环境变量：</span><br><span class="line">vim /etc/profile </span><br><span class="line"><span class="built_in">export</span> PATH=/data/redis/src:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile </span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">redis-server &amp; </span><br><span class="line"></span><br><span class="line">连接测试：</span><br><span class="line">redis-cli </span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> num 10</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">10</span><br></pre></td></tr></table></figure><h1 id="Redis基本管理操作"><a href="#Redis基本管理操作" class="headerlink" title="Redis基本管理操作"></a>Redis基本管理操作</h1><h2 id="基础配置文件介绍"><a href="#基础配置文件介绍" class="headerlink" title="基础配置文件介绍"></a>基础配置文件介绍</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/6379</span><br><span class="line">cat &gt; /data/6379/redis.conf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">port 6379</span></span><br><span class="line"><span class="string">logfile /data/6379/redis.log</span></span><br><span class="line"><span class="string">dir /data/6379</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">redis-cli shutdown </span><br><span class="line">redis-server /data/6379/redis.conf </span><br><span class="line">netstat -lnp|grep 63</span><br><span class="line"></span><br><span class="line">+++++++++++配置文件说明++++++++++++++</span><br><span class="line">redis.conf</span><br><span class="line">是否后台运行：</span><br><span class="line">daemonize yes</span><br><span class="line">默认端口：</span><br><span class="line">port 6379</span><br><span class="line">日志文件位置</span><br><span class="line">logfile /var/<span class="built_in">log</span>/redis.log</span><br><span class="line">持久化文件存储位置</span><br><span class="line">dir /data/6379</span><br><span class="line">RDB持久化数据文件:</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">++++++++++++++++++++++++++++++++++++++</span><br><span class="line">redis-cli</span><br><span class="line">127.0.0.1:6379&gt; <span class="built_in">set</span> name zhangsan </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; get name</span><br><span class="line"><span class="string">&quot;zhangsan&quot;</span></span><br></pre></td></tr></table></figure><h2 id="redis安全配置"><a href="#redis安全配置" class="headerlink" title="redis安全配置"></a>redis安全配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">redis默认开启了保护模式，只允许本地回环地址登录并访问数据库。</span><br><span class="line">禁止protected-mode</span><br><span class="line">protected-mode yes&#x2F;no （保护模式，是否只允许本地访问）</span><br><span class="line"></span><br><span class="line">(1)Bind :指定IP进行监听</span><br><span class="line">vim &#x2F;data&#x2F;6379&#x2F;redis.conf</span><br><span class="line">bind 10.0.0.51  127.0.0.1</span><br><span class="line"></span><br><span class="line">(2)增加requirepass  &#123;password&#125;</span><br><span class="line">vim &#x2F;data&#x2F;6379&#x2F;redis.conf</span><br><span class="line">requirepass 123456</span><br><span class="line"></span><br><span class="line">----------验证-----</span><br><span class="line">方法一：</span><br><span class="line">[root@db03 ~]# redis-cli -a 123456</span><br><span class="line">127.0.0.1:6379&gt; set name zhangsan </span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; exit</span><br><span class="line">方法二：</span><br><span class="line">[root@db03 ~]# redis-cli</span><br><span class="line">127.0.0.1:6379&gt; auth 123456</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set a b</span><br><span class="line">[root@db01 src]# redis-cli -a 123 -h 10.0.0.51 -p 6379</span><br><span class="line">10.0.0.51:6379&gt; set b 2</span><br><span class="line">OK</span><br></pre></td></tr></table></figure><h2 id="在线查看和修改配置"><a href="#在线查看和修改配置" class="headerlink" title="在线查看和修改配置"></a>在线查看和修改配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CONFIG GET *</span><br><span class="line">CONFIG GET requirepass</span><br><span class="line">CONFIG GET r*</span><br><span class="line">CONFIG SET requirepass 123</span><br><span class="line">CONFIG REWRITE 保存到配置文件</span><br></pre></td></tr></table></figure><h2 id="redis持久化（内存数据保存到磁盘）"><a href="#redis持久化（内存数据保存到磁盘）" class="headerlink" title="redis持久化（内存数据保存到磁盘）"></a>redis持久化（内存数据保存到磁盘）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">RDB、AOF</span><br><span class="line"></span><br><span class="line">RDB 持久化</span><br><span class="line">    可以在指定的时间间隔内生成数据集的时间点快照（point-in-time snapshot），新快照会覆盖旧快照。</span><br><span class="line">    优点：速度快，适合于用做备份，主从复制也是基于RDB持久化功能实现的。</span><br><span class="line">    缺点：会有数据丢失</span><br><span class="line"></span><br><span class="line">RDB持久化核心配置参数：</span><br><span class="line">vim &#x2F;data&#x2F;6379&#x2F;redis.conf</span><br><span class="line">dir &#x2F;data&#x2F;6379</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"></span><br><span class="line">配置分别表示：</span><br><span class="line">900秒（15分钟）内有1个更改</span><br><span class="line">300秒（5分钟）内有10个更改</span><br><span class="line">60秒内有10000个更改</span><br><span class="line">  </span><br><span class="line">AOF 持久化(append-only log file)</span><br><span class="line">    记录服务器执行的所有写操作命令，并在服务器启动时，通过重新执行这些命令来还原数据集。 </span><br><span class="line">    AOF 文件中的命令全部以 Redis 协议的格式来保存，新命令会被追加到文件的末尾。</span><br><span class="line">    优点：可以最大程度保证数据不丢</span><br><span class="line">    缺点：日志记录量级比较大</span><br><span class="line"></span><br><span class="line">AOF持久化配置</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync always</span><br><span class="line">appendfsync everysec</span><br><span class="line">appendfsync no</span><br><span class="line"></span><br><span class="line">是否打开aof日志功能</span><br><span class="line">每1个命令,都立即同步到aof </span><br><span class="line">每秒写1次</span><br><span class="line">写入工作交给操作系统,由操作系统判断缓冲区大小,统一写入到aof.</span><br><span class="line"></span><br><span class="line">vim &#x2F;data&#x2F;6379&#x2F;redis.conf</span><br><span class="line">appendonly yes</span><br><span class="line">appendfsync everysec </span><br><span class="line"></span><br><span class="line">面试： </span><br><span class="line">redis 持久化方式有哪些？有什么区别？</span><br><span class="line">rdb：基于快照的持久化，速度更快，一般用作备份，主从复制也是依赖于rdb持久化功能</span><br><span class="line">aof：以追加的方式记录redis操作日志的文件。可以最大程度的保证redis数据安全，类似于mysql的binlog</span><br><span class="line"></span><br><span class="line">save和bgsave区别：</span><br><span class="line">共同点：都能实现RDB持久化功能</span><br><span class="line">不同点</span><br><span class="line">SAVE:前台，阻塞redis正常写入，直到持久化完成。</span><br><span class="line">BGSAVE:后台，开启子线程，异步的持久化功能，不会阻塞redis正常写入。</span><br></pre></td></tr></table></figure><h1 id="Redis数据类型"><a href="#Redis数据类型" class="headerlink" title="Redis数据类型"></a>Redis数据类型</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li>String ：      字符类型</li><li>Hash：         字典类型</li><li>List：         列表 </li><li>Set：          集合 </li><li>Sorted set：   有序集合</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/16956686-1f727d6d23a61c5b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/483/format/webp" alt="img"></p><h2 id="KEY的通用操作"><a href="#KEY的通用操作" class="headerlink" title="KEY的通用操作"></a>KEY的通用操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">KEYS *   keys a  keys a*    查看已存在所有键的名字   ****</span><br><span class="line">TYPE                        返回键所存储值的类型     ****</span><br><span class="line">EXPIRE\ PEXPIRE             以秒\毫秒设定生存时间       ***</span><br><span class="line">TTL\ PTTL                   以秒\毫秒为单位返回生存时间 ***</span><br><span class="line">PERSIST                     取消生存时间设置            ***</span><br><span class="line">DEL                         删除一个key</span><br><span class="line">EXISTS                      检查是否存在</span><br><span class="line">RENAME                      变更KEY名</span><br><span class="line"></span><br><span class="line">---例子：</span><br><span class="line">127.0.0.1:6379&gt; set name zhangsan </span><br><span class="line">127.0.0.1:6379&gt; EXPIRE name 60</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl name</span><br><span class="line">(integer) 57</span><br><span class="line">127.0.0.1:6379&gt; set a b ex 60</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; ttl a</span><br><span class="line">127.0.0.1:6379&gt; PERSIST a</span><br><span class="line">(integer) 1</span><br><span class="line">127.0.0.1:6379&gt; ttl a</span><br><span class="line">(integer) -1</span><br></pre></td></tr></table></figure><h2 id="Strings"><a href="#Strings" class="headerlink" title="Strings"></a>Strings</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">应用场景</span><br><span class="line">session 共享</span><br><span class="line">常规计数：微博数，粉丝数，订阅、礼物</span><br><span class="line">key:value</span><br><span class="line">----------</span><br><span class="line">（1）</span><br><span class="line"> set name zhangsan  </span><br><span class="line">（2）</span><br><span class="line"> MSET id 101 name zhangsan age 20 gender m</span><br><span class="line"> 等价于以下操作：</span><br><span class="line"> SET id 101 </span><br><span class="line"> set name zhangsan </span><br><span class="line"> set age 20 </span><br><span class="line"> set gender m</span><br><span class="line">（3）计数器</span><br><span class="line">每点一次关注，都执行以下命令一次</span><br><span class="line">127.0.0.1:6379&gt; incr num</span><br><span class="line">显示粉丝数量：</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line"></span><br><span class="line">暗箱操作：</span><br><span class="line">127.0.0.1:6379&gt; INCRBY num 10000</span><br><span class="line">(integer) 10006</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;10006&quot;</span><br><span class="line">127.0.0.1:6379&gt; DECRBY num 10000</span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; get num</span><br><span class="line">&quot;6&quot;</span><br><span class="line">详细的例子：------------------------------------</span><br><span class="line"></span><br><span class="line">增</span><br><span class="line">set mykey &quot;test&quot;                为键设置新值，并覆盖原有值</span><br><span class="line">getset mycounter 0              设置值,取值同时进行</span><br><span class="line">setex mykey 10 &quot;hello&quot;          设置指定 Key 的过期时间为10秒,在存活时间可以获取value</span><br><span class="line">setnx mykey &quot;hello&quot;             若该键不存在，则为键设置新值</span><br><span class="line">mset key3  &quot;zyx&quot;  key4 &quot;xyz&quot;    批量设置键</span><br><span class="line">incr mykey值+1</span><br><span class="line">incrby mykey x值+x</span><br><span class="line">删</span><br><span class="line">del mykey                        删除已有键</span><br><span class="line">decr mykey值-1</span><br><span class="line">decrby mykey  x                值减少x</span><br><span class="line">改</span><br><span class="line">append mykey &quot;hello&quot;            若该键并不存在,返回当前 Value 的长度</span><br><span class="line">                                该键已经存在，返回追加后 Value的长度</span><br><span class="line">incr mykey                      值增加1,若该key不存在,创建key,初始值设为0,增加后结果为1</span><br><span class="line">decrby  mykey  5                值减少5</span><br><span class="line">setrange mykey 20 dd            把第21和22个字节,替换为dd, 超过value长度,自动补0</span><br><span class="line">查  </span><br><span class="line">exists mykey                    判断该键是否存在，存在返回 1，否则返回0</span><br><span class="line">get mykey                       获取Key对应的value</span><br><span class="line">strlen mykey                    获取指定 Key 的字符长度</span><br><span class="line">ttl mykey                       查看一下指定 Key 的剩余存活时间(秒数)</span><br><span class="line">getrange mykey 1 20             获取第2到第20个字节,若20超过value长度,则截取第2个和后面所有的</span><br><span class="line">mget key3 key4                  批量获取键</span><br></pre></td></tr></table></figure><h2 id="hash类型（字典类型）"><a href="#hash类型（字典类型）" class="headerlink" title="hash类型（字典类型）"></a>hash类型（字典类型）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">应用场景：</span><br><span class="line">存储部分变更的数据，如用户信息等。</span><br><span class="line">最接近mysql表结构的一种类型</span><br><span class="line">主要是可以做数据库缓存。</span><br><span class="line"></span><br><span class="line">存数据：</span><br><span class="line">HMSET stu  id 101 name zhangsan age 20 gender m</span><br><span class="line">HMSET stu1 id 102 name zhangsan1 age 21 gender f</span><br><span class="line"></span><br><span class="line">取数据：</span><br><span class="line">HMGET stu id name age gender</span><br><span class="line">HMGET stu1 id name age gender</span><br><span class="line"></span><br><span class="line">select concat(&quot;hmset city_&quot;,id,&quot; id &quot;,id,&quot; name &quot;,name,&quot; countrycode &quot;,countrycode,&quot; district &quot;,district,&quot; population &quot;,population) from city limit 10 into outfile &#39;&#x2F;tmp&#x2F;hmset.txt&#39;</span><br><span class="line"></span><br><span class="line">---------------------更多的例子</span><br><span class="line">增</span><br><span class="line">hset myhash field1 &quot;s&quot;    </span><br><span class="line">若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s ，若存在会覆盖原value</span><br><span class="line"></span><br><span class="line">hsetnx myhash field1 s    </span><br><span class="line">若字段field1不存在,创建该键及与其关联的Hashes, Hashes中,key为field1 ,并设value为s， 若字段field1存在,则无效</span><br><span class="line"></span><br><span class="line">hmset myhash field1 &quot;hello&quot; field2 &quot;world       一次性设置多个字段</span><br><span class="line">删</span><br><span class="line">hdel myhash field1                      删除 myhash 键中字段名为 field1 的字段</span><br><span class="line">del myhash                              删除键</span><br><span class="line">改  </span><br><span class="line">hincrby myhash field 1                  给field的值加1</span><br><span class="line"></span><br><span class="line">查</span><br><span class="line">hget myhash field1                      获取键值为 myhash,字段为 field1 的值</span><br><span class="line">hlen myhash                             获取myhash键的字段数量</span><br><span class="line">hexists myhash field1                   判断 myhash 键中是否存在字段名为 field1 的字段</span><br><span class="line">hmget myhash field1 field2 field3       一次性获取多个字段</span><br><span class="line">hgetall myhash                          返回 myhash 键的所有字段及其值</span><br><span class="line">hkeys myhash                            获取myhash 键中所有字段的名字</span><br><span class="line">hvals myhash                            获取 myhash 键中所有字段的值</span><br><span class="line">keys xx查询键</span><br></pre></td></tr></table></figure><h2 id="LIST（列表）"><a href="#LIST（列表）" class="headerlink" title="LIST（列表）"></a>LIST（列表）</h2><p>应用场景<br>消息队列系统<br>比如sina微博<br>在Redis中最新的微博ID使用了常驻缓存，这是一直更新的。<br>但是做了限制不能超过5000个ID，因此获取ID的函数会一直询问Redis。<br>只有在start/count参数超出了这个范围的时候，才需要去访问数据库。<br>系统不会像传统方式那样“刷新”缓存，Redis实例中的信息永远是一致的。<br>SQL数据库（或是硬盘上的其他类型数据库）只是在用户需要获取“很远”的数据时才会被触发，<br>而主页或第一个评论页是不会麻烦到硬盘上的数据库了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">微信朋友圈：</span><br><span class="line">127.0.0.1:6379&gt; LPUSH wechat &quot;today is nice day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; LPUSH wechat &quot;today is bad day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; LPUSH wechat &quot;today is good  day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; LPUSH wechat &quot;today is rainy  day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; LPUSH wechat &quot;today is friday !&quot;</span><br><span class="line"></span><br><span class="line">[5,4,3,2,1]</span><br><span class="line"> 0 1 2 3 4 </span><br><span class="line"></span><br><span class="line">[e,d,c,b,a]</span><br><span class="line">0 1 2 3  4</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; lrange wechat  0 0</span><br><span class="line">1) &quot;today is friday !&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange wechat  0 1</span><br><span class="line">1) &quot;today is friday !&quot;</span><br><span class="line">2) &quot;today is rainy  day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange wechat  0 2</span><br><span class="line">1) &quot;today is friday !&quot;</span><br><span class="line">2) &quot;today is rainy  day !&quot;</span><br><span class="line">3) &quot;today is good  day !&quot;</span><br><span class="line">127.0.0.1:6379&gt; lrange wechat  0 3</span><br><span class="line">127.0.0.1:6379&gt; lrange wechat  -2 -1</span><br><span class="line">1) &quot;today is bad day !&quot;</span><br><span class="line">2) &quot;today is nice day !&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">增 </span><br><span class="line">lpush mykey a b             若key不存在,创建该键及与其关联的List,依次插入a ,b， 若List类型的key存在,则插入value中</span><br><span class="line">lpushx mykey2 e             若key不存在,此命令无效， 若key存在,则插入value中</span><br><span class="line">linsert mykey before a a1   在 a 的前面插入新元素 a1</span><br><span class="line">linsert mykey after e e2    在e 的后面插入新元素 e2</span><br><span class="line">rpush mykey a b             在链表尾部先插入b,在插入a</span><br><span class="line">rpushx mykey e              若key存在,在尾部插入e, 若key不存在,则无效</span><br><span class="line">rpoplpush mykey mykey2      将mykey的尾部元素弹出,再插入到mykey2 的头部(原子性的操作)</span><br><span class="line">删</span><br><span class="line">del mykey                   删除已有键 </span><br><span class="line">lrem mykey 2 a              从头部开始找,按先后顺序,值为a的元素,删除数量为2个,若存在第3个,则不删除</span><br><span class="line">ltrim mykey 0 2             从头开始,索引为0,1,2的3个元素,其余全部删除</span><br><span class="line">改</span><br><span class="line">lset mykey 1 e              从头开始, 将索引为1的元素值,设置为新值 e,若索引越界,则返回错误信息</span><br><span class="line">rpoplpush mykey mykey       将 mykey 中的尾部元素移到其头部</span><br><span class="line">查</span><br><span class="line">lrange mykey 0 -1           取链表中的全部元素，其中0表示第一个元素,-1表示最后一个元素。</span><br><span class="line">lrange mykey 0 2            从头开始,取索引为0,1,2的元素</span><br><span class="line">lrange mykey 0 0            从头开始,取第一个元素,从第0个开始,到第0个结束</span><br><span class="line">lpop mykey                  获取头部元素,并且弹出头部元素,出栈</span><br><span class="line">lindex mykey 6              从头开始,获取索引为6的元素 若下标越界,则返回nil </span><br></pre></td></tr></table></figure><h2 id="SET-集合类型（join-union）"><a href="#SET-集合类型（join-union）" class="headerlink" title="SET 集合类型（join union）"></a>SET 集合类型（join union）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">应用场景：</span><br><span class="line">案例：在微博应用中，可以将一个用户所有的关注人存在一个集合中，将其所有粉丝存在一个集合。</span><br><span class="line">Redis还为集合提供了求交集、并集、差集等操作，可以非常方便的实现如共同关注、共同喜好、二度好友等功能，</span><br><span class="line">对上面的所有集合操作，你还可以使用不同的命令选择将结果返回给客户端还是存集到一个新的集合中。</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; sadd lxl pg1 jnl baoqiang gsy alexsb</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; sadd jnl baoqiang ms bbh yf wxg</span><br><span class="line">(integer) 5</span><br><span class="line">127.0.0.1:6379&gt; SUNION lx jnl</span><br><span class="line">1) &quot;baoqiang&quot;</span><br><span class="line">2) &quot;yf&quot;</span><br><span class="line">3) &quot;bbh&quot;</span><br><span class="line">4) &quot;ms&quot;</span><br><span class="line">5) &quot;wxg&quot;</span><br><span class="line">127.0.0.1:6379&gt; SUNION lxl  jnl</span><br><span class="line">1) &quot;gsy&quot;</span><br><span class="line">2) &quot;yf&quot;</span><br><span class="line">3) &quot;alexsb&quot;</span><br><span class="line">4) &quot;bbh&quot;</span><br><span class="line">5) &quot;jnl&quot;</span><br><span class="line">6) &quot;pg1&quot;</span><br><span class="line">7) &quot;baoqiang&quot;</span><br><span class="line">8) &quot;ms&quot;</span><br><span class="line">9) &quot;wxg&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; SINTER lxl jnl</span><br><span class="line">1) &quot;baoqiang&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; SDIFF jnl lxl</span><br><span class="line">1) &quot;wxg&quot;</span><br><span class="line">2) &quot;yf&quot;</span><br><span class="line">3) &quot;bbh&quot;</span><br><span class="line">4) &quot;ms&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line">127.0.0.1:6379&gt; SDIFF lxl jnl</span><br><span class="line">1) &quot;jnl&quot;</span><br><span class="line">2) &quot;pg1&quot;</span><br><span class="line">3) &quot;gsy&quot;</span><br><span class="line">4) &quot;alexsb&quot;</span><br><span class="line"></span><br><span class="line">增</span><br><span class="line">sadd myset a b c  </span><br><span class="line">若key不存在,创建该键及与其关联的set,依次插入a ,b,若key存在,则插入value中,若a 在myset中已经存在,则插入了 d 和 e 两个新成员。</span><br><span class="line">删</span><br><span class="line">spop myset              尾部的b被移出,事实上b并不是之前插入的第一个或最后一个成员</span><br><span class="line">srem myset a d f        若f不存在, 移出 a、d ,并返回2</span><br><span class="line">改</span><br><span class="line">smove myset myset2 a        将a从 myset 移到 myset2，</span><br><span class="line">查</span><br><span class="line">sismember myset a           判断 a 是否已经存在，返回值为 1 表示存在。</span><br><span class="line">smembers myset          查看set中的内容</span><br><span class="line">scard myset             获取Set 集合中元素的数量</span><br><span class="line">srandmember myset       随机的返回某一成员</span><br><span class="line">sdiff myset1 myset2 myset3      1和2得到一个结果,拿这个集合和3比较,获得每个独有的值</span><br><span class="line">sdiffstore diffkey myset myset2 myset3      3个集和比较,获取独有的元素,并存入diffkey 关联的Set中</span><br><span class="line">sinter myset myset2 myset3              获得3个集合中都有的元素</span><br><span class="line">sinterstore interkey myset myset2 myset3  把交集存入interkey 关联的Set中</span><br><span class="line">sunion myset myset2 myset3              获取3个集合中的成员的并集</span><br><span class="line">sunionstore unionkey myset myset2 myset3  把并集存入unionkey 关联的Set中</span><br></pre></td></tr></table></figure><h2 id="SortedSet（有序集合）"><a href="#SortedSet（有序集合）" class="headerlink" title="SortedSet（有序集合）"></a>SortedSet（有序集合）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">应用场景：</span><br><span class="line">排行榜应用，取TOP N操作</span><br><span class="line">这个需求与上面需求的不同之处在于，前面操作以时间为权重，这个是以某个条件为权重，比如按顶的次数排序，</span><br><span class="line">这时候就需要我们的sorted set出马了，将你要排序的值设置成sorted set的score，将具体的数据设置成相应的value，</span><br><span class="line">每次只需要执行一条ZADD命令即可。</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; zadd topN 0 smlt 0 fskl 0 fshkl 0 lzlsfs 0 wdhbx 0 wxg </span><br><span class="line">(integer) 6</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 100000 smlt</span><br><span class="line">&quot;100000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 10000 fskl</span><br><span class="line">&quot;10000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 1000000 fshkl</span><br><span class="line">&quot;1000000&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 100 lzlsfs</span><br><span class="line">&quot;100&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 10 wdhbx</span><br><span class="line">&quot;10&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZINCRBY topN 100000000 wxg</span><br><span class="line">&quot;100000000&quot;</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE topN 0 2 </span><br><span class="line">1) &quot;wxg&quot;</span><br><span class="line">2) &quot;fshkl&quot;</span><br><span class="line">3) &quot;smlt&quot;</span><br><span class="line">127.0.0.1:6379&gt; ZREVRANGE topN 0 2 withscores</span><br><span class="line">1) &quot;wxg&quot;</span><br><span class="line">2) &quot;100000000&quot;</span><br><span class="line">3) &quot;fshkl&quot;</span><br><span class="line">4) &quot;1000000&quot;</span><br><span class="line">5) &quot;smlt&quot;</span><br><span class="line">6) &quot;100000&quot;</span><br><span class="line">127.0.0.1:6379&gt; </span><br><span class="line"></span><br><span class="line">增</span><br><span class="line">zadd myzset 2 &quot;two&quot; 3 &quot;three&quot;       添加两个分数分别是 2 和 3 的两个成员</span><br><span class="line">删</span><br><span class="line">zrem myzset one two                 删除多个成员变量,返回删除的数量</span><br><span class="line">改</span><br><span class="line">zincrby myzset 2 one                将成员 one 的分数增加 2，并返回该成员更新后的分数</span><br><span class="line">查 </span><br><span class="line">zrange myzset 0 -1 WITHSCORES       返回所有成员和分数,不加WITHSCORES,只返回成员</span><br><span class="line">zrank myzset one                    获取成员one在Sorted-Set中的位置索引值。0表示第一个位置</span><br><span class="line">zcard myzset                        获取 myzset 键中成员的数量</span><br><span class="line">zcount myzset 1 2                   获取分数满足表达式 1 &lt;&#x3D; score &lt;&#x3D; 2 的成员的数量</span><br><span class="line">zscore myzset three                 获取成员 three 的分数</span><br><span class="line">zrangebyscore myzset  1 2               获取分数满足表达式 1 &lt; score &lt;&#x3D; 2 的成员</span><br><span class="line">#-inf 表示第一个成员，+inf最后一个成员</span><br><span class="line">#limit限制关键字</span><br><span class="line">#2  3  是索引号</span><br><span class="line">zrangebyscore myzset -inf +inf limit 2 3  返回索引是2和3的成员</span><br><span class="line">zremrangebyscore myzset 1 2         删除分数 1&lt;&#x3D; score &lt;&#x3D; 2 的成员，并返回实际删除的数量</span><br><span class="line">zremrangebyrank myzset 0 1              删除位置索引满足表达式 0 &lt;&#x3D; rank &lt;&#x3D; 1 的成员</span><br><span class="line">zrevrange myzset 0 -1 WITHSCORES        按位置索引从高到低,获取所有成员和分数</span><br><span class="line">#原始成员:位置索引从小到大</span><br><span class="line">      one  0  </span><br><span class="line">      two  1</span><br><span class="line">#执行顺序:把索引反转</span><br><span class="line">      位置索引:从大到小</span><br><span class="line">      one 1</span><br><span class="line">      two 0</span><br><span class="line">#输出结果: two  </span><br><span class="line">       one</span><br><span class="line">zrevrange myzset 1 3                获取位置索引,为1,2,3的成员</span><br><span class="line">#相反的顺序:从高到低的顺序</span><br><span class="line">zrevrangebyscore myzset 3 0             获取分数 3&gt;&#x3D;score&gt;&#x3D;0的成员并以相反的顺序输出</span><br><span class="line">zrevrangebyscore myzset 4 0 limit 1 2    获取索引是1和2的成员,并反转位置索引</span><br></pre></td></tr></table></figure><h1 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-a1a42c3d7fe9855e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>消息模式是为了帮助解决在架构中，资源有效利用方面提供有效的协调</p><p>Redis的消息模式有两种形式：消息队列，发布订阅</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">PUBLISH channel msg</span><br><span class="line">    将信息 message 发送到指定的频道 channel</span><br><span class="line">SUBSCRIBE channel [channel ...]</span><br><span class="line">    订阅频道，可以同时订阅多个频道</span><br><span class="line">UNSUBSCRIBE [channel ...]</span><br><span class="line">    取消订阅指定的频道, 如果不指定频道，则会取消订阅所有频道</span><br><span class="line">PSUBSCRIBE pattern [pattern ...]</span><br><span class="line">    订阅一个或多个符合给定模式的频道，每个模式以 * 作为匹配符，比如 it* 匹配所   有以 it 开头的频道( it.news 、 it.blog 、 it.tweets 等等)， news.* 匹配所有 以 news. 开头的频道( news.it 、 news.global.today 等等)，诸如此类</span><br><span class="line">PUNSUBSCRIBE [pattern [pattern ...]]</span><br><span class="line">    退订指定的规则, 如果没有参数则会退订所有规则</span><br><span class="line">PUBSUB subcommand [argument [argument ...]]</span><br><span class="line">    查看订阅与发布系统状态</span><br><span class="line">注意：使用发布订阅模式实现的消息队列，当有客户端订阅channel后只能收到后续发布到该频道的消息，之前发送的不会缓存，必须Provider和Consumer同时在线。</span><br><span class="line"></span><br><span class="line">发布订阅例子：</span><br><span class="line">窗口1：</span><br><span class="line">127.0.0.1:6379&gt; SUBSCRIBE baodi </span><br><span class="line">窗口2：</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH baodi &quot;jin tian zhen kaixin!&quot;</span><br><span class="line">订阅多频道：</span><br><span class="line">窗口1：</span><br><span class="line">127.0.0.1:6379&gt; PSUBSCRIBE wang*</span><br><span class="line">窗口2：</span><br><span class="line">127.0.0.1:6379&gt; PUBLISH wangbaoqiang &quot;jintian zhennanshou &quot;</span><br></pre></td></tr></table></figure><h1 id="Redis事务"><a href="#Redis事务" class="headerlink" title="Redis事务"></a>Redis事务</h1><p>redis的事务是基于队列实现的。<br>mysql的事务是基于事务日志和锁机制实现的。<br>redis是乐观锁机制。仅实现了原子性的保证，属于弱事务支持。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">开启事务功能时（multi）</span><br><span class="line">multi </span><br><span class="line">command1      </span><br><span class="line">command2</span><br><span class="line">command3</span><br><span class="line">command4</span><br><span class="line"></span><br><span class="line">exec </span><br><span class="line">discard</span><br><span class="line"></span><br><span class="line">4条语句作为一个组，并没有真正执行，而是被放入同一队列中。</span><br><span class="line">如果，这是执行discard，会直接丢弃队列中所有的命令，而不是做回滚。</span><br><span class="line">exec</span><br><span class="line">当执行exec时，对列中所有操作，要么全成功要么全失败</span><br><span class="line"></span><br><span class="line">127.0.0.1:6379&gt; set a b</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; MULTI</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; set a b</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; set c d</span><br><span class="line">QUEUED</span><br><span class="line">127.0.0.1:6379&gt; exec</span><br><span class="line">1) OK</span><br><span class="line">2) OK</span><br></pre></td></tr></table></figure><h1 id="redis乐观锁实现（模拟买票）"><a href="#redis乐观锁实现（模拟买票）" class="headerlink" title="redis乐观锁实现（模拟买票）"></a>redis乐观锁实现（模拟买票）</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">发布一张票</span><br><span class="line">set ticket 1</span><br><span class="line">窗口1：</span><br><span class="line">watch ticket</span><br><span class="line">multi</span><br><span class="line">set ticket 0       1----&gt;0</span><br><span class="line">窗口2：</span><br><span class="line">multi </span><br><span class="line">set ticket 0 </span><br><span class="line">exec </span><br><span class="line">窗口1：</span><br><span class="line">exec</span><br></pre></td></tr></table></figure><h1 id="服务器管理命令"><a href="#服务器管理命令" class="headerlink" title="服务器管理命令"></a>服务器管理命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Info</span><br><span class="line">Client list</span><br><span class="line">Client kill ip:port</span><br><span class="line">config get *</span><br><span class="line">CONFIG RESETSTAT 重置统计</span><br><span class="line">CONFIG GET&#x2F;SET 动态修改</span><br><span class="line">Dbsize</span><br><span class="line">FLUSHALL 清空所有数据 </span><br><span class="line">select 1</span><br><span class="line">FLUSHDB 清空当前库</span><br><span class="line">MONITOR 监控实时指令</span><br><span class="line">SHUTDOWN 关闭服务器</span><br><span class="line"></span><br><span class="line">关闭数据库：</span><br><span class="line">redis-cli -a root shutdown</span><br></pre></td></tr></table></figure><h1 id="redis（Master-Replicaset）"><a href="#redis（Master-Replicaset）" class="headerlink" title="redis（Master-Replicaset）"></a>redis（Master-Replicaset）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200812114942695.png" alt="image-20200812114942695"></p><ol><li><p>副本库通过slaveof 10.0.0.51 6379命令,连接主库,并发送SYNC给主库 </p></li><li><p>主库收到SYNC,会立即触发BGSAVE,后台保存RDB,发送给副本库</p></li><li><p>副本库接收后会应用RDB快照</p></li><li><p>主库会陆续将中间产生的新的操作,保存并发送给副本库</p></li><li><p>到此,我们主复制集就正常工作了</p></li><li><p>再此以后,主库只要发生新的操作,都会以命令传播的形式自动发送给副本库.</p></li><li><p>所有复制相关信息,从info信息中都可以查到.即使重启任何节点,他的主从关系依然都在.</p><p>2.8版本的PSYNC功能：</p></li><li><p>如果发生主从关系断开时,从库数据没有任何损坏,在下次重连之后,从库发送PSYNC给主库</p></li><li><p>主库只会将从库缺失部分的数据同步给从库应用,达到快速恢复主从的目的</p></li></ol><h2 id="主从数据一致性保证"><a href="#主从数据一致性保证" class="headerlink" title="主从数据一致性保证"></a>主从数据一致性保证</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">min-slaves-to-write 1 </span><br><span class="line">min-slaves-max-lag  3</span><br></pre></td></tr></table></figure><h2 id="主库是否要开启持久化"><a href="#主库是否要开启持久化" class="headerlink" title="主库是否要开启持久化"></a>主库是否要开启持久化</h2><p>如果不开，有可能主库重启操作，造成所有主从数据丢失！</p><h1 id="主从复制实现"><a href="#主从复制实现" class="headerlink" title="主从复制实现"></a>主从复制实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">1、环境：</span><br><span class="line">准备两个或两个以上redis实例</span><br><span class="line"></span><br><span class="line">mkdir &#x2F;data&#x2F;638&#123;0..2&#125;</span><br><span class="line"></span><br><span class="line">配置文件示例：</span><br><span class="line">cat &gt;&gt; &#x2F;data&#x2F;6380&#x2F;redis.conf &lt;&lt;EOF</span><br><span class="line">port 6380</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;data&#x2F;6380&#x2F;redis.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&#x2F;data&#x2F;6380&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;6380</span><br><span class="line">requirepass 123</span><br><span class="line">masterauth 123</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;&gt;   &#x2F;data&#x2F;6381&#x2F;redis.conf &lt;&lt;EOF</span><br><span class="line">port 6381</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;data&#x2F;6381&#x2F;redis.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&#x2F;data&#x2F;6381&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;6381</span><br><span class="line">requirepass 123</span><br><span class="line">masterauth 123</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;&gt;   &#x2F;data&#x2F;6382&#x2F;redis.conf &lt;&lt;EOF</span><br><span class="line">port 6382</span><br><span class="line">daemonize yes</span><br><span class="line">pidfile &#x2F;data&#x2F;6382&#x2F;redis.pid</span><br><span class="line">loglevel notice</span><br><span class="line">logfile &quot;&#x2F;data&#x2F;6382&#x2F;redis.log&quot;</span><br><span class="line">dbfilename dump.rdb</span><br><span class="line">dir &#x2F;data&#x2F;6382</span><br><span class="line">requirepass 123</span><br><span class="line">masterauth 123</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">redis-server &#x2F;data&#x2F;6380&#x2F;redis.conf</span><br><span class="line">redis-server &#x2F;data&#x2F;6381&#x2F;redis.conf</span><br><span class="line">redis-server &#x2F;data&#x2F;6382&#x2F;redis.conf</span><br><span class="line"></span><br><span class="line">主节点：6380</span><br><span class="line">从节点：6381、6382</span><br><span class="line"></span><br><span class="line">2、开启主从：</span><br><span class="line">6381&#x2F;6382命令行:</span><br><span class="line"></span><br><span class="line">redis-cli -p 6381 -a 123 SLAVEOF 127.0.0.1 6380</span><br><span class="line">redis-cli -p 6382 -a 123 SLAVEOF 127.0.0.1 6380</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3、查询主从状态</span><br><span class="line"> redis-cli -p 6380 -a 123 info replication</span><br><span class="line"> redis-cli -p 6381 -a 123 info replication</span><br><span class="line"> redis-cli -p 6382 -a 123 info replication</span><br><span class="line"></span><br><span class="line">4、解除主从</span><br><span class="line"> redis-cli -p 6381 -a 123 SLAVEOF no one</span><br></pre></td></tr></table></figure><h1 id="redis-sentinel（哨兵）"><a href="#redis-sentinel（哨兵）" class="headerlink" title="redis-sentinel（哨兵）"></a>redis-sentinel（哨兵）</h1><p>1、监控<br>2、自动选主，切换（6381 slaveof no one）<br>3、2号从库（6382）指向新主库（6381）<br>4、应用透明<br>5、自动处理故障节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">sentinel搭建过程</span><br><span class="line"></span><br><span class="line">mkdir &#x2F;data&#x2F;26380</span><br><span class="line">cd &#x2F;data&#x2F;26380</span><br><span class="line">vim sentinel.conf</span><br><span class="line">port 26380</span><br><span class="line">dir &quot;&#x2F;data&#x2F;26380&quot;</span><br><span class="line">sentinel monitor mymaster 127.0.0.1 6380 1</span><br><span class="line">sentinel down-after-milliseconds mymaster 5000</span><br><span class="line">sentinel auth-pass mymaster 123 </span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">[root@db01 26380]# redis-sentinel &#x2F;data&#x2F;26380&#x2F;sentinel.conf  &amp;&gt;&#x2F;tmp&#x2F;sentinel.log &amp;</span><br><span class="line"></span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">如果有问题：</span><br><span class="line">1、重新准备1主2从环境</span><br><span class="line">2、kill掉sentinel进程</span><br><span class="line">3、删除sentinel目录下的所有文件</span><br><span class="line">4、重新搭建sentinel</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line"></span><br><span class="line">停主库测试：</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# redis-cli -p 6380 shutdown</span><br><span class="line">[root@db01 ~]# redis-cli -p 6381</span><br><span class="line">info replication</span><br><span class="line"></span><br><span class="line">启动源主库（6380），看状态。</span><br><span class="line"></span><br><span class="line">Sentinel管理命令：</span><br><span class="line">redis-cli -p 26380</span><br><span class="line">PING ：返回 PONG 。</span><br><span class="line">SENTINEL masters ：列出所有被监视的主服务器</span><br><span class="line">SENTINEL slaves &lt;master name&gt; </span><br><span class="line"></span><br><span class="line">SENTINEL get-master-addr-by-name &lt;master name&gt; ： 返回给定名字的主服务器的 IP 地址和端口号。 </span><br><span class="line">SENTINEL reset &lt;pattern&gt; ： 重置所有名字和给定模式 pattern 相匹配的主服务器。 </span><br><span class="line">SENTINEL failover &lt;master name&gt; ： 当主服务器失效时， 在不询问其他 Sentinel 意见的情况下， 强制开始一次自动故障迁移。</span><br></pre></td></tr></table></figure><h1 id="redis-cluster"><a href="#redis-cluster" class="headerlink" title="redis cluster"></a>redis cluster</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-f16bbe65c8764050.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><h3 id="高性能"><a href="#高性能" class="headerlink" title="高性能"></a>高性能</h3><ol><li>在多分片节点中，将16384个槽位，均匀分布到多个分片节点中</li><li>存数据时，将key做crc16(key),然后和16384进行取模，得出槽位值（0-16383之间）</li><li>根据计算得出的槽位值，找到相对应的分片节点的主节点，存储到相应槽位上</li><li>如果客户端当时连接的节点不是将来要存储的分片节点，分片集群会将客户端连接切换至真正存储节点进行数据存储</li></ol><h3 id="高可用"><a href="#高可用" class="headerlink" title="高可用"></a>高可用</h3><p>在搭建集群时，会为每一个分片的主节点，对应一个从节点，实现slaveof的功能，同时当主节点down，实现类似于sentinel的自动failover的功能。</p><p>1、redis会有多组分片构成（3组）<br>2、redis cluster 使用固定个数的slot存储数据（一共16384slot）<br>3、每组分片分得1/3 slot个数（0-5500  5501-11000  11001-16383）<br>4、基于CRC16(key) % 16384 ====》值 （槽位号）。</p><h2 id="规划、搭建过程"><a href="#规划、搭建过程" class="headerlink" title="规划、搭建过程"></a>规划、搭建过程</h2><p>6个redis实例，一般会放到3台硬件服务器<br>注：在企业规划中，一个分片的两个分到不同的物理机，防止硬件主机宕机造成的整个分片数据丢失。<br>端口号：7000-7005</p><h3 id="安装集群插件"><a href="#安装集群插件" class="headerlink" title="安装集群插件"></a>安装集群插件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">EPEL源安装ruby支持</span><br><span class="line">yum install ruby rubygems -y</span><br><span class="line"></span><br><span class="line">使用国内源</span><br><span class="line">gem sources -l</span><br><span class="line"></span><br><span class="line">gem sources -a http://mirrors.aliyun.com/rubygems/ </span><br><span class="line">gem sources --remove https://rubygems.org/</span><br><span class="line"></span><br><span class="line">gem sources -l</span><br><span class="line">gem install redis -v 3.3.3</span><br></pre></td></tr></table></figure><h3 id="集群节点准备"><a href="#集群节点准备" class="headerlink" title="集群节点准备"></a>集群节点准备</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/700&#123;0..5&#125;</span><br><span class="line">cat &gt; /data/7000/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7000</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7000/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7000/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7000</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /data/7001/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7001</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7001/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7001/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7001</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /data/7002/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7002</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7002/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7002/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7002</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;&gt;  /data/7003/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7003</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7003/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7003/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7003</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /data/7004/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7004</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7004/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7004/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7004</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /data/7005/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7005</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7005/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7005/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7005</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="启动节点："><a href="#启动节点：" class="headerlink" title="启动节点："></a>启动节点：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis-server &#x2F;data&#x2F;7000&#x2F;redis.conf </span><br><span class="line">redis-server &#x2F;data&#x2F;7001&#x2F;redis.conf </span><br><span class="line">redis-server &#x2F;data&#x2F;7002&#x2F;redis.conf </span><br><span class="line">redis-server &#x2F;data&#x2F;7003&#x2F;redis.conf </span><br><span class="line">redis-server &#x2F;data&#x2F;7004&#x2F;redis.conf </span><br><span class="line">redis-server &#x2F;data&#x2F;7005&#x2F;redis.conf </span><br><span class="line">[root@db01 ~]# ps -ef |grep redis</span><br><span class="line">root       8854      1  0 03:56 ?        00:00:00 redis-server *:7000 [cluster]     </span><br><span class="line">root       8858      1  0 03:56 ?        00:00:00 redis-server *:7001 [cluster]     </span><br><span class="line">root       8860      1  0 03:56 ?        00:00:00 redis-server *:7002 [cluster]     </span><br><span class="line">root       8864      1  0 03:56 ?        00:00:00 redis-server *:7003 [cluster]     </span><br><span class="line">root       8866      1  0 03:56 ?        00:00:00 redis-server *:7004 [cluster]     </span><br><span class="line">root       8874      1  0 03:56 ?        00:00:00 redis-server *:7005 [cluster]  </span><br></pre></td></tr></table></figure><h3 id="将节点加入集群管理"><a href="#将节点加入集群管理" class="headerlink" title="将节点加入集群管理"></a>将节点加入集群管理</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">create</span> <span class="selector-tag">--replicas</span> 1 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7001</span> \</span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7002</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7003</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7004</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7005</span></span><br></pre></td></tr></table></figure><h3 id="集群状态查看"><a href="#集群状态查看" class="headerlink" title="集群状态查看"></a>集群状态查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">集群主节点状态</span><br><span class="line">redis-cli -p 7000 cluster nodes | grep master</span><br><span class="line">集群从节点状态</span><br><span class="line">redis-cli -p 7000 cluster nodes | grep slave</span><br></pre></td></tr></table></figure><h2 id="集群节点管理"><a href="#集群节点管理" class="headerlink" title="集群节点管理"></a>集群节点管理</h2><h3 id="增加新的节点"><a href="#增加新的节点" class="headerlink" title="增加新的节点"></a>增加新的节点</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/7006</span><br><span class="line">mkdir /data/7007</span><br><span class="line">cat &gt; /data/7006/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7006</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7006/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7006/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7006</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;  /data/7007/redis.conf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">port 7007</span></span><br><span class="line"><span class="string">daemonize yes</span></span><br><span class="line"><span class="string">pidfile /data/7007/redis.pid</span></span><br><span class="line"><span class="string">loglevel notice</span></span><br><span class="line"><span class="string">logfile &quot;/data/7007/redis.log&quot;</span></span><br><span class="line"><span class="string">dbfilename dump.rdb</span></span><br><span class="line"><span class="string">dir /data/7007</span></span><br><span class="line"><span class="string">protected-mode no</span></span><br><span class="line"><span class="string">cluster-enabled yes</span></span><br><span class="line"><span class="string">cluster-config-file nodes.conf</span></span><br><span class="line"><span class="string">cluster-node-timeout 5000</span></span><br><span class="line"><span class="string">appendonly yes</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">redis-server /data/7006/redis.conf </span><br><span class="line">redis-server /data/7007/redis.conf </span><br></pre></td></tr></table></figure><h3 id="添加主节点："><a href="#添加主节点：" class="headerlink" title="添加主节点："></a>添加主节点：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">add-node</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7006</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span></span><br></pre></td></tr></table></figure><h3 id="转移slot（重新分片）"><a href="#转移slot（重新分片）" class="headerlink" title="转移slot（重新分片）"></a>转移slot（重新分片）</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">reshard</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span></span><br></pre></td></tr></table></figure><h3 id="添加一个从节点"><a href="#添加一个从节点" class="headerlink" title="添加一个从节点"></a>添加一个从节点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">add-node</span> <span class="selector-tag">--slave</span> <span class="selector-tag">--master-id</span> 8<span class="selector-tag">ff9ef5b78e6da62bd7b362e1fe190cba19ef5ae</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7007</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span></span><br></pre></td></tr></table></figure><h2 id="删除节点"><a href="#删除节点" class="headerlink" title="删除节点"></a>删除节点</h2><h3 id="将需要删除节点slot移动走"><a href="#将需要删除节点slot移动走" class="headerlink" title="将需要删除节点slot移动走"></a>将需要删除节点slot移动走</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">reshard</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7000</span></span><br><span class="line">49257<span class="selector-tag">f251824dd815bc7f31e1118b670365e861a</span> </span><br><span class="line">127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7006</span></span><br><span class="line">0<span class="selector-tag">-1364</span> 5461<span class="selector-tag">-6826</span> 10923<span class="selector-tag">-12287</span></span><br><span class="line">1365      1366     1365</span><br></pre></td></tr></table></figure><h3 id="删除一个节点"><a href="#删除一个节点" class="headerlink" title="删除一个节点"></a>删除一个节点</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">删除<span class="selector-tag">master</span>节点之前首先要使用<span class="selector-tag">reshard</span>移除<span class="selector-tag">master</span>的全部<span class="selector-tag">slot</span>,然后再删除当前节点</span><br><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">del-node</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7006</span> 8<span class="selector-tag">ff9ef5b78e6da62bd7b362e1fe190cba19ef5ae</span></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">redis-trib</span><span class="selector-class">.rb</span> <span class="selector-tag">del-node</span> 127<span class="selector-class">.0</span><span class="selector-class">.0</span><span class="selector-class">.1</span><span class="selector-pseudo">:7007</span> </span><br><span class="line"><span class="selector-tag">as15e84a6s5f6q1asd8w1d6f1ef58q5qw1h8ehr1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">---------------------</span></span><br><span class="line">设置<span class="selector-tag">redis</span>最大内存</span><br><span class="line"><span class="selector-tag">config</span> <span class="selector-tag">set</span> <span class="selector-tag">maxmemory</span> 102400000</span><br><span class="line"><span class="selector-tag">---------------------</span></span><br></pre></td></tr></table></figure><h1 id="redis的多API支持"><a href="#redis的多API支持" class="headerlink" title="redis的多API支持"></a>redis的多API支持</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">python为例</span><br><span class="line">yum install -y python36 </span><br><span class="line">python3 -V</span><br><span class="line">yum install -y python36-pip</span><br><span class="line">pip3 install redis </span><br><span class="line">pip3 install redis-py-cluster</span><br><span class="line"></span><br><span class="line">++++++++++++源码方式+++++++++++++++</span><br><span class="line">https:&#x2F;&#x2F;redis.io&#x2F;clients</span><br><span class="line">下载redis-py-master.zip</span><br><span class="line">安装驱动：</span><br><span class="line">unzip redis-py-master.zip</span><br><span class="line">cd redis-py-master</span><br><span class="line">python3 setup.py install</span><br><span class="line"></span><br><span class="line">redis cluster的连接并操作（python2.7.2以上版本才支持redis cluster，我们选择的是3.6）</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;Grokzen&#x2F;redis-py-cluster</span><br><span class="line">安装redis-cluser的客户端程序</span><br><span class="line">cd redis-py-cluster-unstable</span><br><span class="line">python3 setup.py install</span><br><span class="line">+++++++++++++++++++++++++++++++++</span><br></pre></td></tr></table></figure><h2 id="对redis的单实例进行连接操作"><a href="#对redis的单实例进行连接操作" class="headerlink" title="对redis的单实例进行连接操作"></a>对redis的单实例进行连接操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# redis-server &#x2F;data&#x2F;6379&#x2F;redis.conf </span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">&gt;&gt;&gt;import redis</span><br><span class="line">&gt;&gt;&gt;r &#x3D; redis.StrictRedis(host&#x3D;&#39;10.0.0.51&#39;, port&#x3D;6379, db&#x3D;0,password&#x3D;&#39;123456&#39;)</span><br><span class="line">&gt;&gt;&gt;r.set(&#39;oldboy&#39;, &#39;oldguo&#39;)</span><br><span class="line">&gt;&gt;&gt;r.get(&#39;oldboy&#39;)</span><br></pre></td></tr></table></figure><h2 id="sentinel集群连接并操作"><a href="#sentinel集群连接并操作" class="headerlink" title="sentinel集群连接并操作"></a>sentinel集群连接并操作</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# redis-server &#x2F;data&#x2F;6380&#x2F;redis.conf</span><br><span class="line">[root@db01 ~]# redis-server &#x2F;data&#x2F;6381&#x2F;redis.conf</span><br><span class="line">[root@db01 ~]# redis-server &#x2F;data&#x2F;6382&#x2F;redis.conf </span><br><span class="line">[root@db01 ~]# redis-sentinel &#x2F;data&#x2F;26380&#x2F;sentinel.conf &amp;</span><br><span class="line">--------------------------------</span><br><span class="line">## 导入redis sentinel包</span><br><span class="line">&gt;&gt;&gt;from redis.sentinel import Sentinel  </span><br><span class="line">##指定sentinel的地址和端口号</span><br><span class="line">&gt;&gt;&gt; sentinel &#x3D; Sentinel([(&#39;localhost&#39;, 26380)], socket_timeout&#x3D;0.1)  </span><br><span class="line">##测试，获取以下主库和从库的信息</span><br><span class="line">&gt;&gt;&gt; sentinel.discover_master(&#39;mymaster&#39;)  </span><br><span class="line">&gt;&gt;&gt; sentinel.discover_slaves(&#39;mymaster&#39;)  </span><br></pre></td></tr></table></figure><h2 id="配置读写分离"><a href="#配置读写分离" class="headerlink" title="配置读写分离"></a>配置读写分离</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#写节点</span><br><span class="line">&gt;&gt;&gt; master &#x3D; sentinel.master_for(&#39;mymaster&#39;, socket_timeout&#x3D;0.1,password&#x3D;&quot;123&quot;)  </span><br><span class="line">#读节点</span><br><span class="line">&gt;&gt;&gt; slave &#x3D; sentinel.slave_for(&#39;mymaster&#39;, socket_timeout&#x3D;0.1,password&#x3D;&quot;123&quot;)  </span><br><span class="line">###读写分离测试   key     </span><br><span class="line">&gt;&gt;&gt; master.set(&#39;oldboy&#39;, &#39;123&#39;)  </span><br><span class="line">&gt;&gt;&gt; slave.get(&#39;oldboy&#39;)  </span><br></pre></td></tr></table></figure><h2 id="python连接rediscluster集群测试"><a href="#python连接rediscluster集群测试" class="headerlink" title="python连接rediscluster集群测试"></a>python连接rediscluster集群测试</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用</span><br><span class="line"></span><br><span class="line">python3</span><br><span class="line">&gt;&gt;&gt; from rediscluster import StrictRedisCluster  </span><br><span class="line">&gt;&gt;&gt; startup_nodes &#x3D; [&#123;&quot;host&quot;:&quot;127.0.0.1&quot;, &quot;port&quot;: &quot;7000&quot;&#125;,&#123;&quot;host&quot;:&quot;127.0.0.1&quot;, &quot;port&quot;: &quot;7001&quot;&#125;,&#123;&quot;host&quot;:&quot;127.0.0.1&quot;, &quot;port&quot;: &quot;7002&quot;&#125;]  </span><br><span class="line">### Note: decode_responses must be set to True when used with python3  </span><br><span class="line">&gt;&gt;&gt; rc &#x3D; StrictRedisCluster(startup_nodes&#x3D;startup_nodes, decode_responses&#x3D;True)  </span><br><span class="line">&gt;&gt;&gt; rc.set(&quot;foo&quot;, &quot;bar&quot;)  </span><br><span class="line">True  </span><br><span class="line">&gt;&gt;&gt; print(rc.get(&quot;foo&quot;))  </span><br><span class="line">&#39;bar&#39;</span><br></pre></td></tr></table></figure><h1 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h1><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">概念</span><br><span class="line">访问一个不存在的key，缓存不起作用，请求会穿透到DB，流量大时DB会挂掉。</span><br><span class="line"></span><br><span class="line">解决方案</span><br><span class="line">采用布隆过滤器，使用一个足够大的bitmap，用于存储可能访问的key，不存在的key直接被过滤；</span><br><span class="line">访问key未在DB查询到值，也将空值写进缓存，但可以设置较短过期时间。</span><br></pre></td></tr></table></figure><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">概念</span><br><span class="line">大量的key设置了相同的过期时间，导致在缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。</span><br><span class="line"></span><br><span class="line">解决方案</span><br><span class="line">可以给缓存设置过期时间时加上一个随机值时间，使得每个key的过期时间分布开来，不会集中在同一时刻失效。</span><br></pre></td></tr></table></figure><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">概念</span><br><span class="line">一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到DB，造成瞬时DB请求量大、压力骤增。</span><br><span class="line">解决方案</span><br><span class="line">在访问key之前，采用SETNX（<span class="built_in">set</span> <span class="keyword">if</span> not exists）来设置另一个短期key来锁住当前key的访问，访问结束再删除该短期key。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-12-Mycat</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-12-Mycat/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-12-Mycat/</url>
      
        <content type="html"><![CDATA[<h1 id="MyCAT基础架构图"><a href="#MyCAT基础架构图" class="headerlink" title="MyCAT基础架构图"></a>MyCAT基础架构图</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-7e5ff50e4071c7eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/843/format/webp" alt="img"></p><p>image.png</p><h1 id="MyCAT基础架构准备"><a href="#MyCAT基础架构准备" class="headerlink" title="MyCAT基础架构准备"></a>MyCAT基础架构准备</h1><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>两台虚拟机 db01 db02<br>每台创建四个mysql实例：3307 3308 3309 3310</p><h2 id="删除历史环境"><a href="#删除历史环境" class="headerlink" title="删除历史环境"></a>删除历史环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkill mysqld</span><br><span class="line">rm -rf /data/330* </span><br><span class="line">mv /etc/my.cnf /etc/my.cnf.bak</span><br></pre></td></tr></table></figure><h2 id="创建相关目录初始化数据"><a href="#创建相关目录初始化数据" class="headerlink" title="创建相关目录初始化数据"></a>创建相关目录初始化数据</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/33&#123;07..10&#125;/data -p</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/app/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/app/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/app/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3310/data --basedir=/app/mysql</span><br></pre></td></tr></table></figure><h2 id="准备配置文件和启动脚本"><a href="#准备配置文件和启动脚本" class="headerlink" title="准备配置文件和启动脚本"></a>准备配置文件和启动脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br></pre></td><td class="code"><pre><span class="line">========db01==============</span><br><span class="line">cat &gt;/data/3307/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3307/data</span></span><br><span class="line"><span class="string">socket=/data/3307/mysql.sock</span></span><br><span class="line"><span class="string">port=3307</span></span><br><span class="line"><span class="string">log-error=/data/3307/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3307/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=7</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/data/3308/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3308/data</span></span><br><span class="line"><span class="string">port=3308</span></span><br><span class="line"><span class="string">socket=/data/3308/mysql.sock</span></span><br><span class="line"><span class="string">log-error=/data/3308/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3308/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=8</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/data/3309/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3309/data</span></span><br><span class="line"><span class="string">socket=/data/3309/mysql.sock</span></span><br><span class="line"><span class="string">port=3309</span></span><br><span class="line"><span class="string">log-error=/data/3309/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3309/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=9</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">cat &gt;/data/3310/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3310/data</span></span><br><span class="line"><span class="string">socket=/data/3310/mysql.sock</span></span><br><span class="line"><span class="string">port=3310</span></span><br><span class="line"><span class="string">log-error=/data/3310/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3310/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=10</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3307.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3308.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3309.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3310.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3310/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">========db02===============</span><br><span class="line">cat &gt;/data/3307/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3307/data</span></span><br><span class="line"><span class="string">socket=/data/3307/mysql.sock</span></span><br><span class="line"><span class="string">port=3307</span></span><br><span class="line"><span class="string">log-error=/data/3307/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3307/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=17</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">cat &gt;/data/3308/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3308/data</span></span><br><span class="line"><span class="string">port=3308</span></span><br><span class="line"><span class="string">socket=/data/3308/mysql.sock</span></span><br><span class="line"><span class="string">log-error=/data/3308/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3308/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=18</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">cat &gt;/data/3309/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3309/data</span></span><br><span class="line"><span class="string">socket=/data/3309/mysql.sock</span></span><br><span class="line"><span class="string">port=3309</span></span><br><span class="line"><span class="string">log-error=/data/3309/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3309/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=19</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cat &gt;/data/3310/my.cnf&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3310/data</span></span><br><span class="line"><span class="string">socket=/data/3310/mysql.sock</span></span><br><span class="line"><span class="string">port=3310</span></span><br><span class="line"><span class="string">log-error=/data/3310/mysql.log</span></span><br><span class="line"><span class="string">log_bin=/data/3310/mysql-bin</span></span><br><span class="line"><span class="string">binlog_format=row</span></span><br><span class="line"><span class="string">skip-name-resolve</span></span><br><span class="line"><span class="string">server-id=20</span></span><br><span class="line"><span class="string">gtid-mode=on</span></span><br><span class="line"><span class="string">enforce-gtid-consistency=true</span></span><br><span class="line"><span class="string">log-slave-updates=1</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3307.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3308.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3309.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line">cat &gt;/etc/systemd/system/mysqld3310.service&lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[Unit]</span></span><br><span class="line"><span class="string">Description=MySQL Server</span></span><br><span class="line"><span class="string">Documentation=man:mysqld(8)</span></span><br><span class="line"><span class="string">Documentation=http://dev.mysql.com/doc/refman/en/using-systemd.html</span></span><br><span class="line"><span class="string">After=network.target</span></span><br><span class="line"><span class="string">After=syslog.target</span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target</span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">User=mysql</span></span><br><span class="line"><span class="string">Group=mysql</span></span><br><span class="line"><span class="string">ExecStart=/app/mysql/bin/mysqld --defaults-file=/data/3310/my.cnf</span></span><br><span class="line"><span class="string">LimitNOFILE = 5000</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h2 id="修改权限，启动多实例"><a href="#修改权限，启动多实例" class="headerlink" title="修改权限，启动多实例"></a>修改权限，启动多实例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /data/*</span><br><span class="line">systemctl start mysqld3307</span><br><span class="line">systemctl start mysqld3308</span><br><span class="line">systemctl start mysqld3309</span><br><span class="line">systemctl start mysqld3310</span><br><span class="line"></span><br><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">mysql -S /data/3309/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br><span class="line">mysql -S /data/3310/mysql.sock -e <span class="string">&quot;show variables like &#x27;server_id&#x27;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="节点主从规划"><a href="#节点主从规划" class="headerlink" title="节点主从规划"></a>节点主从规划</h2><p>箭头指向谁是主库<br>10.0.0.51:3307    &lt;—–&gt;  10.0.0.52:3307<br>10.0.0.51:3309    ——&gt;  10.0.0.51:3307<br>10.0.0.52:3309    ——&gt;  10.0.0.52:3307</p><p>10.0.0.52:3308  &lt;—–&gt;    10.0.0.51:3308<br>10.0.0.52:3310  —–&gt;     10.0.0.52:3308<br>10.0.0.51:3310  —–&gt;     10.0.0.51:3308</p><h2 id="分片规划"><a href="#分片规划" class="headerlink" title="分片规划"></a>分片规划</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">shard1：</span><br><span class="line">    Master：10.0.0.51:3307</span><br><span class="line">    slave1：10.0.0.51:3309</span><br><span class="line">    Standby Master：10.0.0.52:3307</span><br><span class="line">    slave2：10.0.0.52:3309</span><br><span class="line">shard2：</span><br><span class="line">    Master：10.0.0.52:3308</span><br><span class="line">    slave1：10.0.0.52:3310</span><br><span class="line">    Standby Master：10.0.0.51:3308</span><br><span class="line">    slave2：10.0.0.51:3310</span><br></pre></td></tr></table></figure><h2 id="开始配置"><a href="#开始配置" class="headerlink" title="开始配置"></a>开始配置</h2><h3 id="shard1"><a href="#shard1" class="headerlink" title="shard1"></a>shard1</h3><h3 id="10-0-0-51-3307-lt-—–-gt-10-0-0-52-3307"><a href="#10-0-0-51-3307-lt-—–-gt-10-0-0-52-3307" class="headerlink" title="10.0.0.51:3307    &lt;—–&gt;  10.0.0.52:3307"></a>10.0.0.51:3307    &lt;—–&gt;  10.0.0.52:3307</h3><h3 id="db02"><a href="#db02" class="headerlink" title="db02"></a>db02</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;grant all  on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;  with grant option;&quot;</span><br></pre></td></tr></table></figure><h3 id="db01"><a href="#db01" class="headerlink" title="db01"></a>db01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="db02-1"><a href="#db02-1" class="headerlink" title="db02"></a>db02</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="10-0-0-51-3309-——-gt-10-0-0-51-3307"><a href="#10-0-0-51-3309-——-gt-10-0-0-51-3307" class="headerlink" title="10.0.0.51:3309    ——&gt;  10.0.0.51:3307"></a>10.0.0.51:3309    ——&gt;  10.0.0.51:3307</h3><h3 id="db01-1"><a href="#db01-1" class="headerlink" title="db01"></a>db01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock  -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="10-0-0-52-3309-——-gt-10-0-0-52-3307"><a href="#10-0-0-52-3309-——-gt-10-0-0-52-3307" class="headerlink" title="10.0.0.52:3309    ——&gt;  10.0.0.52:3307"></a>10.0.0.52:3309    ——&gt;  10.0.0.52:3307</h3><h3 id="db02-2"><a href="#db02-2" class="headerlink" title="db02"></a>db02</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3307, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3309&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="shard2"><a href="#shard2" class="headerlink" title="shard2"></a>shard2</h3><h3 id="10-0-0-52-3308-lt-—–-gt-10-0-0-51-3308"><a href="#10-0-0-52-3308-lt-—–-gt-10-0-0-51-3308" class="headerlink" title="10.0.0.52:3308  &lt;—–&gt;    10.0.0.51:3308"></a>10.0.0.52:3308  &lt;—–&gt;    10.0.0.51:3308</h3><h3 id="db01-2"><a href="#db01-2" class="headerlink" title="db01"></a>db01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;grant replication slave on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;grant all  on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;  with grant option;&quot;</span><br></pre></td></tr></table></figure><h3 id="db02-3"><a href="#db02-3" class="headerlink" title="db02"></a>db02</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="db01-3"><a href="#db01-3" class="headerlink" title="db01"></a>db01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="10-0-0-52-3310-—–-gt-10-0-0-52-3308"><a href="#10-0-0-52-3310-—–-gt-10-0-0-52-3308" class="headerlink" title="10.0.0.52:3310    —–&gt;       10.0.0.52:3308"></a>10.0.0.52:3310    —–&gt;       10.0.0.52:3308</h3><h3 id="db02-4"><a href="#db02-4" class="headerlink" title="db02"></a>db02</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h3 id="10-0-0-51-3310-—–-gt-10-0-0-51-3308"><a href="#10-0-0-51-3310-—–-gt-10-0-0-51-3308" class="headerlink" title="10.0.0.51:3310  —–&gt;     10.0.0.51:3308"></a>10.0.0.51:3310  —–&gt;     10.0.0.51:3308</h3><h3 id="db01-4"><a href="#db01-4" class="headerlink" title="db01"></a>db01</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.51&#39;, MASTER_PORT&#x3D;3308, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;start slave;&quot;</span><br><span class="line">mysql  -S &#x2F;data&#x2F;3310&#x2F;mysql.sock -e &quot;show slave status\G&quot;</span><br></pre></td></tr></table></figure><h2 id="检测主从状态"><a href="#检测主从状态" class="headerlink" title="检测主从状态"></a>检测主从状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;show slave status\G&quot;</span>|grep Yes</span><br><span class="line"> mysql -S /data/3308/mysql.sock -e <span class="string">&quot;show slave status\G&quot;</span>|grep Yes</span><br><span class="line"> mysql -S /data/3309/mysql.sock -e <span class="string">&quot;show slave status\G&quot;</span>|grep Yes</span><br><span class="line"> mysql -S /data/3310/mysql.sock -e <span class="string">&quot;show slave status\G&quot;</span>|grep Yes</span><br></pre></td></tr></table></figure><p> 注：如果中间出现错误，在每个节点进行执行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;stop slave; reset slave all;&quot;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock -e <span class="string">&quot;stop slave; reset slave all;&quot;</span></span><br><span class="line">mysql -S /data/3309/mysql.sock -e <span class="string">&quot;stop slave; reset slave all;&quot;</span></span><br><span class="line">mysql -S /data/3310/mysql.sock -e <span class="string">&quot;stop slave; reset slave all;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="MySQL分布式架构介绍"><a href="#MySQL分布式架构介绍" class="headerlink" title="MySQL分布式架构介绍"></a>MySQL分布式架构介绍</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-7c753fb3640bc0ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/475/format/webp" alt="img"></p><ol><li>schema拆分及业务分库</li><li>垂直拆分-分库分表</li><li>水平拆分-分片</li></ol><h2 id="企业代表产品"><a href="#企业代表产品" class="headerlink" title="企业代表产品"></a>企业代表产品</h2><p>360 Atlas-Sharding<br>Alibaba  cobar<br>Mycat<br>TDDL<br>Heisenberg<br>Oceanus<br>Vitess<br>OneProxy<br>DRDS</p><h1 id="MyCAT安装"><a href="#MyCAT安装" class="headerlink" title="MyCAT安装"></a>MyCAT安装</h1><h2 id="预先安装Java运行环境"><a href="#预先安装Java运行环境" class="headerlink" title="预先安装Java运行环境"></a>预先安装Java运行环境</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y java</span><br></pre></td></tr></table></figure><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>Mycat-server-xxxxx.linux.tar.gz<br><a href="http://dl.mycat.io/">http://dl.mycat.io/</a></p><h2 id="解压文件"><a href="#解压文件" class="headerlink" title="解压文件"></a>解压文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar xf Mycat-server-1.6.5-release-20180122220033-linux.tar.gz</span><br></pre></td></tr></table></figure><h2 id="软件目录结构"><a href="#软件目录结构" class="headerlink" title="软件目录结构"></a>软件目录结构</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br><span class="line">bin  catlet  conf  lib  logs  version.txt</span><br></pre></td></tr></table></figure><h2 id="启动和连接"><a href="#启动和连接" class="headerlink" title="启动和连接"></a>启动和连接</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置环境变量</span><br><span class="line">vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/application/mycat/bin:<span class="variable">$PATH</span></span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br><span class="line">启动</span><br><span class="line">mycat start</span><br><span class="line">连接mycat：</span><br><span class="line">mysql -uroot -p123456 -h 127.0.0.1 -P8066</span><br></pre></td></tr></table></figure><h1 id="配置文件介绍"><a href="#配置文件介绍" class="headerlink" title="配置文件介绍"></a>配置文件介绍</h1><p>bin目录：启动和关闭mycat 中间件</p><p>logs目录:</p><ul><li>wrapper.log：mycat启动日志</li><li>mycat.log：mycat详细工作日志</li></ul><p>conf目录:</p><ul><li>schema.xml：主配置文件（读写分离、高可用、分布式策略定制、节点控制）</li><li>server.xml：mycat软件本身相关的配置</li><li>rule.xml：分片规则配置文件,记录分片规则列表、使用方法等</li></ul><h1 id="应用前环境准备"><a href="#应用前环境准备" class="headerlink" title="应用前环境准备"></a>应用前环境准备</h1><h2 id="用户创建及数据库导入"><a href="#用户创建及数据库导入" class="headerlink" title="用户创建及数据库导入"></a>用户创建及数据库导入</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db01:</span><br><span class="line">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock </span><br><span class="line">grant all on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line">source &#x2F;root&#x2F;world.sql</span><br><span class="line"></span><br><span class="line">mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock </span><br><span class="line">grant all on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line">source &#x2F;root&#x2F;world.sql</span><br></pre></td></tr></table></figure><h2 id="配置文件处理"><a href="#配置文件处理" class="headerlink" title="配置文件处理"></a>配置文件处理</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cd /application/mycat/conf</span><br><span class="line">mv schema.xml schema.xml.bak</span><br><span class="line">vim schema.xml </span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"># 逻辑库</span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span> </span><br><span class="line">    </span><br><span class="line">    # 数据节点(逻辑分片)</span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>= <span class="string">&quot;wordpress&quot;</span> /&gt;</span>  </span><br><span class="line">    # 数据主机</span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="配置文件简单介绍"><a href="#配置文件简单介绍" class="headerlink" title="配置文件简单介绍"></a>配置文件简单介绍</h1><h2 id="逻辑库：schema"><a href="#逻辑库：schema" class="headerlink" title="逻辑库：schema"></a>逻辑库：schema</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;dn1&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="数据节点-datanode"><a href="#数据节点-datanode" class="headerlink" title="数据节点:datanode"></a>数据节点:datanode</h2><p>实现分布式功能的垂直和水平拆分</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;dn1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">database</span>= <span class="string">&quot;world&quot;</span> /&gt;</span>  </span><br></pre></td></tr></table></figure><h2 id="数据主机：datahost-w和r"><a href="#数据主机：datahost-w和r" class="headerlink" title="数据主机：datahost(w和r)"></a>数据主机：datahost(w和r)</h2><p>读写分离和高可用</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;localhost1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200811083942141.png" alt="image-20200811083942141"></p><h1 id="读写分离结构配置"><a href="#读写分离结构配置" class="headerlink" title="读写分离结构配置"></a>读写分离结构配置</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim schema.xml </span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;sh1&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;sh1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">database</span>= <span class="string">&quot;world&quot;</span> /&gt;</span>         </span><br><span class="line">        <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span>    </span><br><span class="line">                <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span> </span><br><span class="line">                        <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>重启mycat<br>mycat restart</p><p>读写分离测试<br> mysql -uroot -p -h 127.0.0.1 -P8066<br> show variables like ‘server_id’;<br> begin;<br> show variables like ‘server_id’;</p><p>总结：<br>以上案例实现了1主1从的读写分离功能，写操作落到主库，读操作落到从库.如果主库宕机，从库不能在继续提供服务了。</p><h1 id="配置读写分离及高可用"><a href="#配置读写分离及高可用" class="headerlink" title="配置读写分离及高可用"></a>配置读写分离及高可用</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 conf]# mv schema.xml schema.xml.rw</span><br><span class="line">[root@db01 conf]# vim schema.xml</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span>  </span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;sh1&quot;</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;sh1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">database</span>= <span class="string">&quot;world&quot;</span> /&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span> </span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db4&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span> </span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span>        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br></pre></td></tr></table></figure><p>真正的 writehost：负责写操作的writehost<br>standby  writeHost  ：和readhost一样，只提供读服务</p><p>当写节点宕机后，后面跟的readhost也不提供服务，这时候standby的writehost就提供写服务，<br>后面跟的readhost提供读服务</p><p>测试：<br>mysql -uroot -p123456 -h 127.0.0.1 -P 8066<br>show variables like ‘server_id’;<br>读写分离测试<br> mysql -uroot -p -h 127.0.0.1 -P8066<br> show variables like ‘server_id’;<br> show variables like ‘server_id’;<br> show variables like ‘server_id’;<br> begin;<br> show variables like ‘server_id’;<br> 对db01 3307节点进行关闭和启动,测试读写操作</p><h1 id="配置中的属性介绍"><a href="#配置中的属性介绍" class="headerlink" title="配置中的属性介绍"></a>配置中的属性介绍</h1><h2 id="balance属性"><a href="#balance属性" class="headerlink" title="balance属性"></a>balance属性</h2><p>负载均衡类型，目前的取值有3种： </p><ol><li>balance=”0”, 不开启读写分离机制，所有读操作都发送到当前可用的writeHost上。 </li><li>balance=”1”，全部的readHost与standby writeHost参与select语句的负载均衡，简单的说，<br>当双主双从模式(M1-&gt;S1，M2-&gt;S2，并且M1与 M2互为主备)，正常情况下，M2,S1,S2都参与select语句的负载均衡。 </li><li>balance=”2”，所有读操作都随机的在writeHost、readhost上分发。</li></ol><h2 id="writeType属性"><a href="#writeType属性" class="headerlink" title="writeType属性"></a>writeType属性</h2><p>负载均衡类型，目前的取值有2种： </p><ol><li>writeType=”0”, 所有写操作发送到配置的第一个writeHost，<br>第一个挂了切到还生存的第二个writeHost，重新启动后已切换后的为主，切换记录在配置文件中:dnindex.properties . </li><li>writeType=“1”，所有写操作都随机的发送到配置的writeHost，但不推荐使用</li></ol><h2 id="switchType属性"><a href="#switchType属性" class="headerlink" title="switchType属性"></a>switchType属性</h2><p>-1 表示不自动切换<br>1 默认值，自动切换<br>2 基于MySQL主从同步的状态决定是否切换 ，心跳语句为 show slave status </p><h2 id="datahost其他配置"><a href="#datahost其他配置" class="headerlink" title="datahost其他配置"></a>datahost其他配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;dataHost name&#x3D;&quot;localhost1&quot; maxCon&#x3D;&quot;1000&quot; minCon&#x3D;&quot;10&quot; balance&#x3D;&quot;1&quot;  writeType&#x3D;&quot;0&quot; dbType&#x3D;&quot;mysql&quot;  dbDriver&#x3D;&quot;native&quot; switchType&#x3D;&quot;1&quot;&gt;</span><br></pre></td></tr></table></figure><p>maxCon=”1000”：最大的并发连接数<br>minCon=”10” ：mycat在启动之后，会在后端节点上自动开启的连接线程<br>tempReadHostAvailable=”1”<br>这个一主一从时（1个writehost，1个readhost时），可以开启这个参数，如果2个writehost，2个readhost时<br>&lt;heartbeat&gt;select user()&lt;/heartbeat&gt;  监测心跳</p><h1 id="垂直分表"><a href="#垂直分表" class="headerlink" title="垂直分表"></a>垂直分表</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-c188becb93fdef0f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1059/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-96987959032a94c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1063/format/webp" alt="img"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mv  schema.xml  schema.xml.ha </span><br><span class="line">vim schema.xml</span><br><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mycat</span>:schema <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;schema.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mycat:schema</span> <span class="attr">xmlns:mycat</span>=<span class="string">&quot;http://io.mycat/&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">schema</span> <span class="attr">name</span>=<span class="string">&quot;TESTDB&quot;</span> <span class="attr">checkSQLschema</span>=<span class="string">&quot;false&quot;</span> <span class="attr">sqlMaxLimit</span>=<span class="string">&quot;100&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;sh1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;sh1&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">name</span>=<span class="string">&quot;order_t&quot;</span> <span class="attr">dataNode</span>=<span class="string">&quot;sh2&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">schema</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;sh1&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">database</span>= <span class="string">&quot;taobao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataNode</span> <span class="attr">name</span>=<span class="string">&quot;sh2&quot;</span> <span class="attr">dataHost</span>=<span class="string">&quot;oldguo2&quot;</span> <span class="attr">database</span>= <span class="string">&quot;taobao&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;oldguo1&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3307&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db4&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3309&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dataHost</span> <span class="attr">name</span>=<span class="string">&quot;oldguo2&quot;</span> <span class="attr">maxCon</span>=<span class="string">&quot;1000&quot;</span> <span class="attr">minCon</span>=<span class="string">&quot;10&quot;</span> <span class="attr">balance</span>=<span class="string">&quot;1&quot;</span>  <span class="attr">writeType</span>=<span class="string">&quot;0&quot;</span> <span class="attr">dbType</span>=<span class="string">&quot;mysql&quot;</span>  <span class="attr">dbDriver</span>=<span class="string">&quot;native&quot;</span> <span class="attr">switchType</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">heartbeat</span>&gt;</span>select user()<span class="tag">&lt;/<span class="name">heartbeat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db1&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db2&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.51:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">writeHost</span> <span class="attr">host</span>=<span class="string">&quot;db3&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3308&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">readHost</span> <span class="attr">host</span>=<span class="string">&quot;db4&quot;</span> <span class="attr">url</span>=<span class="string">&quot;10.0.0.52:3310&quot;</span> <span class="attr">user</span>=<span class="string">&quot;root&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">writeHost</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dataHost</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mycat:schema</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">创建测试库和表:</span><br><span class="line">[root@db01 conf]<span class="comment"># mysql -S /data/3307/mysql.sock -e &quot;create database taobao charset utf8;&quot;</span></span><br><span class="line">[root@db01 conf]<span class="comment"># mysql -S /data/3308/mysql.sock -e &quot;create database taobao charset utf8;&quot;</span></span><br><span class="line">[root@db01 conf]<span class="comment"># mysql -S /data/3307/mysql.sock -e &quot;use taobao;create table user(id int,name varchar(20))&quot;;</span></span><br><span class="line">[root@db01 conf]<span class="comment"># mysql -S /data/3308/mysql.sock -e &quot;use taobao;create table order_t(id int,name varchar(20))&quot;</span></span><br></pre></td></tr></table></figure><h1 id="MyCAT核心特性——分片（水平拆分）"><a href="#MyCAT核心特性——分片（水平拆分）" class="headerlink" title="MyCAT核心特性——分片（水平拆分）"></a>MyCAT核心特性——分片（水平拆分）</h1><p>分片：对一个”bigtable”，比如说t3表</p><p>(1)行数非常多，800w<br>(2)访问非常频繁</p><p>分片的目的：<br>（1）将大数据量进行分布存储<br>（2）提供均衡的访问路由</p><p>分片策略：</p><ul><li><p>范围 range  800w  1-400w 400w01-800w</p></li><li><p>取模 mod    取余数</p></li><li><p>枚举 </p></li><li><p>哈希 hash </p></li><li><p>时间 流水</p></li><li><p>优化关联查询</p></li><li><p>全局表</p></li><li><p>ER分片</p></li></ul><h1 id="范围分片"><a href="#范围分片" class="headerlink" title="范围分片"></a>范围分片</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-71a4dc83c387d7b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/933/format/webp" alt="img"></p><p>比如说t3表<br>(1)行数非常多，2000w（1-1000w:sh1   1000w01-2000w:sh2）<br>(2)访问非常频繁，用户访问较离散</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">mv schema.xml schema.xml.1  </span><br><span class="line">vim schema.xml</span><br><span class="line">&lt;schema name=<span class="string">&quot;TESTDB&quot;</span> checkSQLschema=<span class="string">&quot;false&quot;</span> sqlMaxLimit=<span class="string">&quot;100&quot;</span> dataNode=<span class="string">&quot;sh1&quot;</span>&gt; </span><br><span class="line">        &lt;table name=<span class="string">&quot;t3&quot;</span> dataNode=<span class="string">&quot;sh1,sh2&quot;</span> rule=<span class="string">&quot;auto-sharding-long&quot;</span> /&gt;</span><br><span class="line">&lt;/schema&gt;  </span><br><span class="line">    &lt;dataNode name=<span class="string">&quot;sh1&quot;</span> dataHost=<span class="string">&quot;oldguo1&quot;</span> database= <span class="string">&quot;taobao&quot;</span> /&gt; </span><br><span class="line">    &lt;dataNode name=<span class="string">&quot;sh2&quot;</span> dataHost=<span class="string">&quot;oldguo2&quot;</span> database= <span class="string">&quot;taobao&quot;</span> /&gt;  </span><br><span class="line"></span><br><span class="line">vim rule.xml</span><br><span class="line">&lt;tableRule name=<span class="string">&quot;auto-sharding-long&quot;</span>&gt;</span><br><span class="line">                &lt;rule&gt;</span><br><span class="line">                        &lt;columns&gt;id&lt;/columns&gt;</span><br><span class="line">                        &lt;algorithm&gt;rang-long&lt;/algorithm&gt;</span><br><span class="line">                &lt;/rule&gt;             </span><br><span class="line">&lt;<span class="keyword">function</span> name=<span class="string">&quot;rang-long&quot;</span></span><br><span class="line">    class=<span class="string">&quot;io.mycat.route.function.AutoPartitionByLong&quot;</span>&gt;</span><br><span class="line">    &lt;property name=<span class="string">&quot;mapFile&quot;</span>&gt;autopartition-long.txt&lt;/property&gt;</span><br><span class="line">&lt;/<span class="keyword">function</span>&gt;</span><br><span class="line">===================================         </span><br><span class="line">vim autopartition-long.txt</span><br><span class="line">0-10=0</span><br><span class="line">11-20=1</span><br><span class="line"></span><br><span class="line">创建测试表：</span><br><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class="line"></span><br><span class="line">mysql -S /data/3308/mysql.sock  -e <span class="string">&quot;use taobao;create table t3 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class="line"></span><br><span class="line">测试：</span><br><span class="line">重启mycat</span><br><span class="line">mycat restart</span><br><span class="line">mysql -uroot -p123456 -h 127.0.0.1 -P 8066</span><br><span class="line">insert into t3(id,name) values(1,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(2,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(3,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(4,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(11,<span class="string">&#x27;aa&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(12,<span class="string">&#x27;bb&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(13,<span class="string">&#x27;cc&#x27;</span>);</span><br><span class="line">insert into t3(id,name) values(14,<span class="string">&#x27;dd&#x27;</span>);</span><br></pre></td></tr></table></figure><h1 id="取模分片（mod-long）"><a href="#取模分片（mod-long）" class="headerlink" title="取模分片（mod-long）"></a>取模分片（mod-long）</h1><p>取余分片方式：分片键（一个列）与节点数量进行取余，得到余数，将数据写入对应节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">vim schema.xml</span><br><span class="line">&lt;table name=<span class="string">&quot;t4&quot;</span> dataNode=<span class="string">&quot;sh1,sh2&quot;</span> rule=<span class="string">&quot;mod-long&quot;</span> /&gt;</span><br><span class="line">vim rule.xml</span><br><span class="line">&lt;property name=<span class="string">&quot;count&quot;</span>&gt;2&lt;/property&gt;</span><br><span class="line"></span><br><span class="line">准备测试环境</span><br><span class="line">     </span><br><span class="line">创建测试表：</span><br><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock -e <span class="string">&quot;use taobao;create table t4 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span></span><br><span class="line"></span><br><span class="line">重启mycat </span><br><span class="line">mycat restart </span><br><span class="line"></span><br><span class="line">测试： </span><br><span class="line">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class="line"></span><br><span class="line">use TESTDB</span><br><span class="line">insert into t4(id,name) values(1,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">insert into t4(id,name) values(2,<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line">insert into t4(id,name) values(3,<span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">insert into t4(id,name) values(4,<span class="string">&#x27;d&#x27;</span>);</span><br><span class="line"></span><br><span class="line">分别登录后端节点查询数据</span><br><span class="line">mysql -S /data/3307/mysql.sock </span><br><span class="line">use taobao</span><br><span class="line">select * from t4;</span><br><span class="line"></span><br><span class="line">mysql -S /data/3308/mysql.sock </span><br><span class="line">use taobao</span><br><span class="line">select * from t4;</span><br></pre></td></tr></table></figure><h1 id="枚举分片"><a href="#枚举分片" class="headerlink" title="枚举分片"></a>枚举分片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">t5 表</span><br><span class="line">id name telnum</span><br><span class="line">1   bj   1212</span><br><span class="line">2   sh   22222</span><br><span class="line">3   bj   3333</span><br><span class="line">4   sh   44444</span><br><span class="line">5   bj   5555</span><br><span class="line"></span><br><span class="line">sharding-by-intfile</span><br><span class="line">vim schema.xml</span><br><span class="line">&lt;table name&#x3D;&quot;t5&quot; dataNode&#x3D;&quot;sh1,sh2&quot; rule&#x3D;&quot;sharding-by-intfile&quot; &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">vim rule.xml</span><br><span class="line">&lt;tableRule name&#x3D;&quot;sharding-by-intfile&quot;&gt; </span><br><span class="line">&lt;rule&gt; &lt;columns&gt;name&lt;&#x2F;columns&gt; </span><br><span class="line">&lt;algorithm&gt;hash-int&lt;&#x2F;algorithm&gt; </span><br><span class="line">&lt;&#x2F;rule&gt; </span><br><span class="line">&lt;&#x2F;tableRule&gt; </span><br><span class="line"></span><br><span class="line">&lt;function name&#x3D;&quot;hash-int&quot; class&#x3D;&quot;org.opencloudb.route.function.PartitionByFileMap&quot;&gt; </span><br><span class="line">&lt;property name&#x3D;&quot;mapFile&quot;&gt;partition-hash-int.txt&lt;&#x2F;property&gt; </span><br><span class="line">  &lt;property name&#x3D;&quot;type&quot;&gt;1&lt;&#x2F;property&gt;</span><br><span class="line">                &lt;property name&#x3D;&quot;defaultNode&quot;&gt;0&lt;&#x2F;property&gt;</span><br><span class="line">&lt;&#x2F;function&gt; </span><br><span class="line"></span><br><span class="line">partition-hash-int.txt 配置： </span><br><span class="line">bj&#x3D;0 </span><br><span class="line">sh&#x3D;1</span><br><span class="line">DEFAULT_NODE&#x3D;1 </span><br><span class="line">columns 标识将要分片的表字段，algorithm 分片函数， 其中分片函数配置中，mapFile标识配置文件名称</span><br><span class="line"></span><br><span class="line">准备测试环境</span><br><span class="line">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line"></span><br><span class="line">mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock -e &quot;use taobao;create table t5 (id int not null primary key auto_increment,name varchar(20) not null);&quot;</span><br><span class="line">重启mycat </span><br><span class="line">mycat restart </span><br><span class="line">mysql -uroot -p123456 -h10.0.0.51 -P8066</span><br><span class="line">use TESTDB</span><br><span class="line">insert into t5(id,name) values(1,&#39;bj&#39;);</span><br><span class="line">insert into t5(id,name) values(2,&#39;sh&#39;);</span><br><span class="line">insert into t5(id,name) values(3,&#39;bj&#39;);</span><br><span class="line">insert into t5(id,name) values(4,&#39;sh&#39;);</span><br><span class="line">insert into t5(id,name) values(5,&#39;tj&#39;);</span><br></pre></td></tr></table></figure><h1 id="Mycat全局表"><a href="#Mycat全局表" class="headerlink" title="Mycat全局表"></a>Mycat全局表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">a   b   c  d   </span><br><span class="line">join </span><br><span class="line">t </span><br><span class="line"></span><br><span class="line">select  t1.name   ,t.x  from  t1 </span><br><span class="line">join t </span><br><span class="line">select  t2.name   ,t.x  from  t2 </span><br><span class="line">join t </span><br><span class="line">select  t3.name   ,t.x  from  t3 </span><br><span class="line">join t </span><br><span class="line"></span><br><span class="line">使用场景：</span><br><span class="line">如果你的业务中有些数据类似于数据字典，比如配置文件的配置，</span><br><span class="line">常用业务的配置或者数据量不大很少变动的表，这些表往往不是特别大，</span><br><span class="line">而且大部分的业务场景都会用到，那么这种表适合于Mycat全局表，无须对数据进行切分，</span><br><span class="line">要在所有的分片上保存一份数据即可，Mycat 在Join操作中，业务表与全局表进行Join聚合会优先选择相同分片内的全局表join，</span><br><span class="line">避免跨库Join，在进行数据插入操作时，mycat将把数据分发到全局表对应的所有分片执行，在进行数据读取时候将会随机获取一个节点读取数据。 </span><br><span class="line"></span><br><span class="line">vim schema.xml </span><br><span class="line">&lt;table name&#x3D;&quot;t_area&quot; primaryKey&#x3D;&quot;id&quot;  type&#x3D;&quot;global&quot; dataNode&#x3D;&quot;sh1,sh2&quot; &#x2F;&gt; </span><br><span class="line"></span><br><span class="line">后端数据准备</span><br><span class="line">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock </span><br><span class="line">use taobao</span><br><span class="line">create table t_area (id int not null primary key auto_increment,name varchar(20) not null);</span><br><span class="line"></span><br><span class="line">mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock </span><br><span class="line">use taobao</span><br><span class="line">create table t_area  (id int not null primary key auto_increment,name varchar(20) not null);</span><br><span class="line"></span><br><span class="line">重启mycat </span><br><span class="line">mycat restart </span><br><span class="line"></span><br><span class="line">测试： </span><br><span class="line">mysql -uroot -p123456 -h10.0.0.52 -P8066</span><br><span class="line"></span><br><span class="line">use TESTDB</span><br><span class="line">insert into t_area(id,name) values(1,&#39;a&#39;);</span><br><span class="line">insert into t_area(id,name) values(2,&#39;b&#39;);</span><br><span class="line">insert into t_area(id,name) values(3,&#39;c&#39;);</span><br><span class="line">insert into t_area(id,name) values(4,&#39;d&#39;);</span><br></pre></td></tr></table></figure><h1 id="E-R分片"><a href="#E-R分片" class="headerlink" title="E-R分片"></a>E-R分片</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A </span><br><span class="line">join </span><br><span class="line">B  </span><br><span class="line">为了防止跨分片join，可以使用E-R模式</span><br><span class="line">A   join   B</span><br><span class="line">on  a.xx&#x3D;b.yy</span><br><span class="line">join C</span><br><span class="line">on A.id&#x3D;C.id</span><br><span class="line">&lt;table name&#x3D;&quot;A&quot; dataNode&#x3D;&quot;sh1,sh2&quot; rule&#x3D;&quot;mod-long&quot;&gt; </span><br><span class="line">       &lt;childTable name&#x3D;&quot;B&quot; joinKey&#x3D;&quot;yy&quot; parentKey&#x3D;&quot;xx&quot; &#x2F;&gt; </span><br><span class="line">&lt;&#x2F;table&gt; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
            <tag> Mycat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-11-Atlas</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-11-Atlas/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-11-Atlas/</url>
      
        <content type="html"><![CDATA[<h1 id="Atlas介绍"><a href="#Atlas介绍" class="headerlink" title="Atlas介绍"></a>Atlas介绍</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-24b9752549843352.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/567/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-dce5742c72a16dac.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/546/format/webp" alt="img"></p><p> Atlas是由 Qihoo 360, Web平台部基础架构团队开发维护的一个基于MySQL协议的数据中间层项目。<br>它是在mysql-proxy 0.8.2版本的基础上，对其进行了优化，增加了一些新的功能特性。<br>360内部使用Atlas运行的mysql业务，每天承载的读写请求数达几十亿条。<br>下载地址<br><a href="https://github.com/Qihoo360/Atlas/releases">https://github.com/Qihoo360/Atlas/releases</a><br>注意：</p><ol><li>Atlas只能安装运行在64位的系统上</li><li>Centos 5.X安装 Atlas-XX.el5.x86_64.rpm，Centos 6.X安装Atlas-XX.el6.x86_64.rpm。</li><li>后端mysql版本应大于5.1，建议使用Mysql 5.6以上</li></ol><h1 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">yum install -y Atlas*</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/mysql-proxy/conf</span><br><span class="line">mv test.cnf test.cnf.bak</span><br><span class="line">vim test.cnf</span><br><span class="line">[mysql-proxy]</span><br><span class="line">admin-username = user</span><br><span class="line">admin-password = <span class="built_in">pwd</span></span><br><span class="line">proxy-backend-addresses = 10.0.0.55:3306</span><br><span class="line">proxy-read-only-backend-addresses = 10.0.0.51:3306,10.0.0.53:3306</span><br><span class="line">pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=</span><br><span class="line">daemon = <span class="literal">true</span></span><br><span class="line">keepalive = <span class="literal">true</span></span><br><span class="line">event-threads = 8</span><br><span class="line">log-level = message</span><br><span class="line">log-path = /usr/<span class="built_in">local</span>/mysql-proxy/<span class="built_in">log</span></span><br><span class="line">sql-log=ON</span><br><span class="line">proxy-address = 0.0.0.0:33060</span><br><span class="line">admin-address = 0.0.0.0:2345</span><br><span class="line">charset=utf8</span><br><span class="line"></span><br><span class="line">启动atlas</span><br><span class="line">/usr/<span class="built_in">local</span>/mysql-proxy/bin/mysql-proxyd <span class="built_in">test</span> start</span><br><span class="line">ps -ef |grep proxy</span><br></pre></td></tr></table></figure><h1 id="Atlas功能测试"><a href="#Atlas功能测试" class="headerlink" title="Atlas功能测试"></a>Atlas功能测试</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">测试读操作：</span><br><span class="line">mysql -umha -pmha  -h 10.0.0.53 -P 33060 </span><br><span class="line">db03 [(none)]&gt;select @@server_id;</span><br><span class="line">测试写操作：</span><br><span class="line">mysql&gt; begin;select @@server_id;commit;</span><br></pre></td></tr></table></figure><h1 id="生产用户要求"><a href="#生产用户要求" class="headerlink" title="生产用户要求"></a>生产用户要求</h1><p>开发人员申请一个应用用户 app(  select  update  insert)  密码123456,要通过10网段登录</p><ol><li>在主库中,创建用户<br>grant select ,update,insert on <em>.</em> to app@’10.0.0.%’ identified by ‘123456’;</li><li>在atlas中添加生产用户<br>/usr/local/mysql-proxy/bin/encrypt  123456      —-&gt;制作加密密码<br>vim test.cnf<br>pwds = repl:3yb5jEku5h4=,mha:O2jBXONX098=,app:/iZxz+0GRoA=<br>/usr/local/mysql-proxy/bin/mysql-proxyd test restart<br>[root@db03 conf]# mysql -uapp -p123456  -h 10.0.0.53 -P 33060</li></ol><h1 id="Atlas基本管理"><a href="#Atlas基本管理" class="headerlink" title="Atlas基本管理"></a>Atlas基本管理</h1><h2 id="连接管理接口"><a href="#连接管理接口" class="headerlink" title="连接管理接口"></a>连接管理接口</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uuser -ppwd -h127.0.0.1 -P2345</span><br></pre></td></tr></table></figure><h2 id="打印帮助"><a href="#打印帮助" class="headerlink" title="打印帮助"></a>打印帮助</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from help;</span><br></pre></td></tr></table></figure><h2 id="查询后端所有节点信息"><a href="#查询后端所有节点信息" class="headerlink" title="查询后端所有节点信息"></a>查询后端所有节点信息</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;  SELECT * FROM backends;</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">| backend_ndx | address        | state | type |</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">|           1 | 10.0.0.55:3306 | up    | rw   |</span><br><span class="line">|           2 | 10.0.0.51:3306 | up    | ro   |</span><br><span class="line">|           3 | 10.0.0.53:3306 | up    | ro   |</span><br><span class="line">+-------------+----------------+-------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h2 id="上线或下线节点"><a href="#上线或下线节点" class="headerlink" title="上线或下线节点"></a>上线或下线节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SET OFFLINE $backend_id;</span><br><span class="line">SET ONLINE $backend_id;</span><br></pre></td></tr></table></figure><h2 id="动态添加删除节点"><a href="#动态添加删除节点" class="headerlink" title="动态添加删除节点"></a>动态添加删除节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REMOVE BACKEND 3;</span><br></pre></td></tr></table></figure><h2 id="动态添加节点"><a href="#动态添加节点" class="headerlink" title="动态添加节点"></a>动态添加节点</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD SLAVE 10.0.0.53:3306;</span><br></pre></td></tr></table></figure><h2 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM pwds</span><br><span class="line">ADD PWD $pwd</span><br><span class="line">ADD ENPWD $pwd</span><br><span class="line">REMOVE PWD $pwd</span><br></pre></td></tr></table></figure><p>企业用户管理案例</p><ol><li><p>数据库节点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all on *.* to xxx@&#39;192.168.0.%&#39; identified by &#39;123&#39;</span><br></pre></td></tr></table></figure></li><li><p>Atlas中添加数据库用户</p><p>明文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ADD PWD xxx:123;</span><br></pre></td></tr></table></figure><p>密文</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;usr&#x2F;local&#x2F;mysql-proxy&#x2F;bin&#x2F;encrypt 123</span><br><span class="line">3yb5jEku5h4&#x3D;</span><br><span class="line">ADD ENPWD xxx: 3yb5jEku5h4&#x3D;</span><br></pre></td></tr></table></figure></li></ol><h2 id="保存配置到配置文件"><a href="#保存配置到配置文件" class="headerlink" title="保存配置到配置文件"></a>保存配置到配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SAVE CONFIG;</span><br></pre></td></tr></table></figure><h1 id="自动分表"><a href="#自动分表" class="headerlink" title="自动分表"></a>自动分表</h1><p>使用Atlas的分表功能时，首先需要在配置文件test.cnf设置tables参数。<br>tables参数设置格式：数据库名.表名.分表字段.子表数量，<br>比如：<br>你的数据库名叫school，表名叫stu，分表字段叫id，总共分为2张表，那么就写为school.stu.id.2，如果还有其他的分表，以逗号分隔即可。</p><h1 id="关于读写分离建议"><a href="#关于读写分离建议" class="headerlink" title="关于读写分离建议"></a>关于读写分离建议</h1><p>MySQL-Router    —&gt; MySQL官方<br>ProxySQL         —&gt;Percona<br>Maxscale         —&gt; MariaDB</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
            <tag> Atlas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-10-MHA高可用技术</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-10-MHA%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8A%80%E6%9C%AF/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-10-MHA%E9%AB%98%E5%8F%AF%E7%94%A8%E6%8A%80%E6%9C%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="主从复制架构演变介绍"><a href="#主从复制架构演变介绍" class="headerlink" title="主从复制架构演变介绍"></a>主从复制架构演变介绍</h1><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><ol><li>一主一从</li><li>一主多从</li><li>多级主从</li><li>双主</li><li>循环复制</li></ol><h2 id="高级应用架构演变"><a href="#高级应用架构演变" class="headerlink" title="高级应用架构演变"></a>高级应用架构演变</h2><h3 id="高性能架构"><a href="#高性能架构" class="headerlink" title="高性能架构"></a>高性能架构</h3><ul><li>读写分离架构(读性能较高)<br>代码级别<br>MySQL proxy (Atlas,mysql router,proxySQL(percona),maxscale)、<br>amoeba(taobao)xx-dbproxy等。</li><li>分布式架构(读写性能都提高):<br>分库分表——cobar—&gt;TDDL，DRDS<br>Mycat—&gt;DBLE自主研发等。<br>NewSQL–&gt;TiDB</li></ul><h3 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h3><ul><li>单活:MMM架构——mysql-mmm（google）</li><li>单活:MHA架构——mysql-master-ha（日本DeNa）,T-MHA</li><li>多活:MGR ——5.7 新特性 MySQL Group replication(5.7.17) —&gt;Innodb Cluster  </li><li>多活:MariaDB Galera Cluster架构,(PXC)Percona XtraDB Cluster、MySQL Cluster(Oracle rac)架构</li></ul><h1 id="高可用MHA"><a href="#高可用MHA" class="headerlink" title="高可用MHA"></a>高可用MHA</h1><h2 id="架构工作原理"><a href="#架构工作原理" class="headerlink" title="架构工作原理"></a>架构工作原理</h2><p>主库宕机处理过程</p><ol><li><p>监控节点 (通过配置文件获取所有节点信息)<br>系统,网络,SSH连接性<br>主从状态,重点是主库</p></li><li><p>选主<br>(1) 如果判断从库(position或者GTID),数据有差异,最接近于Master的slave,成为备选主<br>(2) 如果判断从库(position或者GTID),数据一致,按照配置文件顺序,选主.<br>(3) 如果设定有权重(candidate_master=1),按照权重强制指定备选主.</p><ol><li>默认情况下如果一个slave落后master 100M的relay logs的话，即使有权重,也会失效.</li><li>如果check_repl_delay=0的化,即使落后很多日志,也强制选择其为备选主</li></ol></li><li><p>数据补偿<br>(1) 当SSH能连接,从库对比主库GTID 或者position号,立即将二进制日志保存至各个从节点并且应用(save_binary_logs )<br>(2) 当SSH不能连接, 对比从库之间的relaylog的差异(apply_diff_relay_logs) </p></li><li><p>Failover<br>将备选主进行身份切换,对外提供服务<br>其余从库和新主库确认新的主从关系</p></li><li><p>应用透明(VIP)</p></li><li><p>故障切换通知(send_reprt)</p></li><li><p>二次数据补偿(binlog_server)</p></li><li><p>自愈自治(待开发…)</p></li></ol><h2 id="架构介绍"><a href="#架构介绍" class="headerlink" title="架构介绍:"></a>架构介绍:</h2><p>1主2从，master：db01   slave：db02   db03<br>MHA 高可用方案软件构成<br>Manager软件：选择一个从节点安装<br>Node软件：所有节点都要安装</p><h2 id="MHA软件构成"><a href="#MHA软件构成" class="headerlink" title="MHA软件构成"></a>MHA软件构成</h2><p>Manager工具包主要包括以下几个工具：</p><ul><li>masterha_manger             启动MHA </li><li>masterha_check_ssh      检查MHA的SSH配置状况 </li><li>masterha_check_repl         检查MySQL复制状况 </li><li>masterha_master_monitor     检测master是否宕机 </li><li>masterha_check_status       检测当前MHA运行状态 </li><li>masterha_master_switch  控制故障转移（自动或者手动）</li><li>masterha_conf_host      添加或删除配置的server信息</li></ul><p>Node工具包主要包括以下几个工具：<br>这些工具通常由MHA Manager的脚本触发，无需人为操作</p><ul><li>save_binary_logs            保存和复制master的二进制日志 </li><li>apply_diff_relay_logs       识别差异的中继日志事件并将其差异的事件应用于其他的</li><li>purge_relay_logs            清除中继日志（不会阻塞SQL线程）</li></ul><h2 id="MHA环境搭建"><a href="#MHA环境搭建" class="headerlink" title="MHA环境搭建"></a>MHA环境搭建</h2><h3 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h3><p>主库: 51    node<br>从库:<br>52      node<br>53      node    manager</p><h3 id="准备环境（略。1主2从GTID）"><a href="#准备环境（略。1主2从GTID）" class="headerlink" title="准备环境（略。1主2从GTID）"></a>准备环境（略。1主2从GTID）</h3><h3 id="配置关键程序软连接"><a href="#配置关键程序软连接" class="headerlink" title="配置关键程序软连接"></a>配置关键程序软连接</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s /data/mysql/bin/mysqlbinlog    /usr/bin/mysqlbinlog</span><br><span class="line">ln -s /data/mysql/bin/mysql          /usr/bin/mysql</span><br></pre></td></tr></table></figure><h3 id="配置各节点互信"><a href="#配置各节点互信" class="headerlink" title="配置各节点互信"></a>配置各节点互信</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">db01：</span><br><span class="line">rm -rf /root/.ssh </span><br><span class="line">ssh-keygen</span><br><span class="line"><span class="built_in">cd</span> /root/.ssh </span><br><span class="line">mv id_rsa.pub authorized_keys</span><br><span class="line">scp  -r  /root/.ssh  10.0.0.52:/root </span><br><span class="line">scp  -r  /root/.ssh  10.0.0.53:/root </span><br><span class="line">各节点验证</span><br><span class="line">db01:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br><span class="line">db02:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br><span class="line">db03:</span><br><span class="line">ssh 10.0.0.51 date</span><br><span class="line">ssh 10.0.0.52 date</span><br><span class="line">ssh 10.0.0.53 date</span><br></pre></td></tr></table></figure><h3 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h3><h4 id="下载mha软件"><a href="#下载mha软件" class="headerlink" title="下载mha软件"></a>下载mha软件</h4><p>mha官网：<a href="https://code.google.com/archive/p/mysql-master-ha/">https://code.google.com/archive/p/mysql-master-ha/</a><br>github下载地址：<a href="https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads">https://github.com/yoshinorim/mha4mysql-manager/wiki/Downloads</a></p><p>说明</p><p>8.0的版本</p><ul><li>密码加密模式sha2—&gt;native</li><li>使用mha0.58以上版本</li></ul><h4 id="所有节点安装Node软件依赖包"><a href="#所有节点安装Node软件依赖包" class="headerlink" title="所有节点安装Node软件依赖包"></a>所有节点安装Node软件依赖包</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-DBD-MySQL -y</span><br><span class="line">rpm -ivh mha4mysql-node-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h4 id="在db01主库中创建mha需要的用户"><a href="#在db01主库中创建mha需要的用户" class="headerlink" title="在db01主库中创建mha需要的用户"></a>在db01主库中创建mha需要的用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grant all privileges on *.* to mha@&#39;10.0.0.%&#39; identified by &#39;mha&#39;;</span><br></pre></td></tr></table></figure><h4 id="Manager软件安装（db03）"><a href="#Manager软件安装（db03）" class="headerlink" title="Manager软件安装（db03）"></a>Manager软件安装（db03）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install -y perl-Config-Tiny epel-release perl-Log-Dispatch perl-Parallel-ForkManager perl-Time-HiRes</span><br><span class="line">rpm -ivh mha4mysql-manager-0.56-0.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h3 id="配置文件准备-db03"><a href="#配置文件准备-db03" class="headerlink" title="配置文件准备(db03)"></a>配置文件准备(db03)</h3><p>创建配置文件目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /etc/mha</span><br></pre></td></tr></table></figure><p>创建日志目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /var/<span class="built_in">log</span>/mha/app1</span><br></pre></td></tr></table></figure><p>编辑mha配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">[server default]</span><br><span class="line">manager_log&#x3D;&#x2F;var&#x2F;log&#x2F;mha&#x2F;app1&#x2F;manager        </span><br><span class="line">manager_workdir&#x3D;&#x2F;var&#x2F;log&#x2F;mha&#x2F;app1            </span><br><span class="line">master_binlog_dir&#x3D;&#x2F;data&#x2F;binlog       </span><br><span class="line">user&#x3D;mha                                   </span><br><span class="line">password&#x3D;mha                               </span><br><span class="line">ping_interval&#x3D;2</span><br><span class="line">repl_password&#x3D;123</span><br><span class="line">repl_user&#x3D;repl</span><br><span class="line">ssh_user&#x3D;root                               </span><br><span class="line">[server1]                                   </span><br><span class="line">hostname&#x3D;10.0.0.51</span><br><span class="line">port&#x3D;3306                                  </span><br><span class="line">[server2]            </span><br><span class="line">hostname&#x3D;10.0.0.52</span><br><span class="line">port&#x3D;3306</span><br><span class="line">[server3]</span><br><span class="line">hostname&#x3D;10.0.0.53</span><br><span class="line">port&#x3D;3306</span><br></pre></td></tr></table></figure><h3 id="状态检查"><a href="#状态检查" class="headerlink" title="状态检查"></a>状态检查</h3><h4 id="互信检查"><a href="#互信检查" class="headerlink" title="互信检查"></a>互信检查</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_ssh  --conf=/etc/mha/app1.cnf </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Starting SSH connection tests..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [info] All SSH connection tests passed successfully.</span><br></pre></td></tr></table></figure><h4 id="主从状态检查"><a href="#主从状态检查" class="headerlink" title="主从状态检查"></a>主从状态检查</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment"># masterha_check_ssh  --conf=/etc/mha/app1.cnf </span></span><br><span class="line">Fri Apr 19 16:39:34 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [info] Starting SSH connection tests..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:34 2019 - [debug]  Connecting via SSH from root@10.0.0.51(10.0.0.51:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.52(10.0.0.52:22) to root@10.0.0.53(10.0.0.53:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [debug] </span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.51(10.0.0.51:22)..</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:35 2019 - [debug]  Connecting via SSH from root@10.0.0.53(10.0.0.53:22) to root@10.0.0.52(10.0.0.52:22)..</span><br><span class="line">Fri Apr 19 16:39:36 2019 - [debug]   ok.</span><br><span class="line">Fri Apr 19 16:39:37 2019 - [info] All SSH connection tests passed successfully.</span><br><span class="line">[root@db03 ~]<span class="comment"># masterha_check_repl  --conf=/etc/mha/app1.cnf </span></span><br><span class="line">Fri Apr 19 16:40:50 2019 - [warning] Global configuration file /etc/masterha_default.cnf not found. Skipping.</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] Reading application default configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] Reading server configuration from /etc/mha/app1.cnf..</span><br><span class="line">Fri Apr 19 16:40:50 2019 - [info] MHA::MasterMonitor version 0.56.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] GTID failover mode = 1</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Dead Servers:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Alive Servers:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.52(10.0.0.52:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.53(10.0.0.53:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Alive Slaves:</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.52(10.0.0.52:3306)  Version=5.7.20-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     GTID ON</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     Replicating from 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]   10.0.0.53(10.0.0.53:3306)  Version=5.7.20-log (oldest major version between slaves) log-bin:enabled</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     GTID ON</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]     Replicating from 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Current Alive Master: 10.0.0.51(10.0.0.51:3306)</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking slave configurations..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  read_only=1 is not <span class="built_in">set</span> on slave 10.0.0.52(10.0.0.52:3306).</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  read_only=1 is not <span class="built_in">set</span> on slave 10.0.0.53(10.0.0.53:3306).</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication filtering settings..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  binlog_do_db= , binlog_ignore_db= </span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  Replication filtering check ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] GTID (with auto-pos) is supported. Skipping all SSH and Node package checking.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking SSH publickey authentication settings on the current master..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] HealthCheck: SSH to 10.0.0.51 is reachable.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] </span><br><span class="line">10.0.0.51(10.0.0.51:3306) (current master)</span><br><span class="line"> +--10.0.0.52(10.0.0.52:3306)</span><br><span class="line"> +--10.0.0.53(10.0.0.53:3306)</span><br><span class="line"></span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication health on 10.0.0.52..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Checking replication health on 10.0.0.53..</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info]  ok.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [warning] master_ip_failover_script is not defined.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [warning] shutdown_script is not defined.</span><br><span class="line">Fri Apr 19 16:40:51 2019 - [info] Got <span class="built_in">exit</span> code 0 (Not master dead).</span><br><span class="line">MySQL Replication Health is OK.</span><br></pre></td></tr></table></figure><h3 id="开启MHA-db03"><a href="#开启MHA-db03" class="headerlink" title="开启MHA(db03)"></a>开启MHA(db03)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/<span class="built_in">log</span>/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="查看MHA状态"><a href="#查看MHA状态" class="headerlink" title="查看MHA状态"></a>查看MHA状态</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]# masterha_check_status --conf&#x3D;&#x2F;etc&#x2F;mha&#x2F;app1.cnf</span><br><span class="line">app1 (pid:4719) is running(0:PING_OK), master:10.0.0.51</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.51 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 51    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.52 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 52    |</span><br><span class="line">+---------------+-------+</span><br><span class="line">[root@db03 ~]# mysql -umha -pmha -h 10.0.0.53 -e &quot;show variables like &#39;server_id&#39;&quot;</span><br><span class="line">mysql: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">+---------------+-------+</span><br><span class="line">| Variable_name | Value |</span><br><span class="line">+---------------+-------+</span><br><span class="line">| server_id     | 53    |</span><br><span class="line">+---------------+-------+</span><br></pre></td></tr></table></figure><h3 id="故障模拟及处理"><a href="#故障模拟及处理" class="headerlink" title="故障模拟及处理"></a>故障模拟及处理</h3><h4 id="停主库db01"><a href="#停主库db01" class="headerlink" title="停主库db01"></a>停主库db01</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p>观察manager  日志 tail -f /var/log/mha/app1/manager<br>末尾必须显示successfully，才算正常切换成功。  </p><h4 id="修复主库"><a href="#修复主库" class="headerlink" title="修复主库"></a>修复主库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h4 id="恢复主从结构"><a href="#恢复主从结构" class="headerlink" title="恢复主从结构"></a>恢复主从结构</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO </span><br><span class="line">MASTER_HOST=<span class="string">&#x27;10.0.0.52&#x27;</span>,</span><br><span class="line">MASTER_PORT=3306, </span><br><span class="line">MASTER_AUTO_POSITION=1, </span><br><span class="line">MASTER_USER=<span class="string">&#x27;repl&#x27;</span>, </span><br><span class="line">MASTER_PASSWORD=<span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">start slave ;</span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[server1]</span><br><span class="line">hostname&#x3D;10.0.0.51</span><br><span class="line">port&#x3D;3306</span><br></pre></td></tr></table></figure><h4 id="启动MHA"><a href="#启动MHA" class="headerlink" title="启动MHA"></a>启动MHA</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover  &lt; /dev/null&gt; /var/<span class="built_in">log</span>/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="MHA工作流程"><a href="#MHA工作流程" class="headerlink" title="MHA工作流程"></a>MHA工作流程</h3><ol><li><p>启动Manager，调用masterha_managet脚本启动manager程序</p></li><li><p>监控</p><p>通过masterha_master_monitor心跳检测脚本。默认检测4次，每隔(ping_interval=2)秒，如果主库还没有心跳，则认为主库宕机，进入failover过程</p></li><li><p>选主</p><p>1.优先级（主观)，如果在节点配置时，加入了candidate_master=1参数。如果备选主，日志量落后master太多(后master 100M的relay logs的话，)也不会被选择新主。<br>可以通过check_repl_delay=o，不检查由志落后的情景。<br>2.日志量最接近主库<br>3.日志量一样。配置文件顺序。</p></li><li><p>日志补偿<br>情况1: ssh能连上，通过save_binary_logs<br>立即保存缺失部分的日志到从库(/var/tmp目录下)并恢复。<br>情况2: ssh不能连，两个从库进行relaylog日志diff(apply_diff_relay_logs)差异补偿。</p></li><li><p>主从身份切换，所有从库取消和原有主库的复制关系(stop slave; reset slave all)，新主库和剩余从库重新构建主从关系</p></li><li><p>故障库自动被剔除集群(masterha_conf _host 配置信息去掉)</p></li><li><p>MHA是一次性的高可用，Failover后，Manager自动退出</p></li></ol><h3 id="Manager额外参数介绍"><a href="#Manager额外参数介绍" class="headerlink" title="Manager额外参数介绍"></a>Manager额外参数介绍</h3><p>说明：<br>主库宕机谁来接管？</p><ol><li>所有从节点日志都是一致的，默认会以配置文件的顺序去选择一个新主。</li><li>从节点日志不一致，自动选择最接近于主库的从库</li><li>如果对于某节点设定了权重（candidate_master=1），权重节点会优先选择。<br>但是此节点日志量落后主库100M日志的话，也不会被选择。可以配合check_repl_delay=0，关闭日志量的检查，强制选择候选节点。</li></ol><p>(1)  ping_interval=1<br>设置监控主库，发送ping包的时间间隔，尝试三次没有回应的时候自动进行failover<br>(2) candidate_master=1<br>设置为候选master，如果设置该参数以后，发生主从切换以后将会将此从库提升为主库，即使这个主库不是集群中事件最新的slave<br>(3)check_repl_delay=0<br>默认情况下如果一个slave落后master 100M的relay logs的话，<br>MHA将不会选择该slave作为一个新的master，因为对于这个slave的恢复需要花费很长时间，通过设置check_repl_delay=0,MHA触发切换在选择一个新的master的时候将会忽略复制延时，这个参数对于设置了candidate_master=1的主机非常有用，因为这个候选主在切换的过程中一定是新的master</p><h3 id="MHA-的vip功能"><a href="#MHA-的vip功能" class="headerlink" title="MHA 的vip功能"></a>MHA 的vip功能</h3><p>说明：只能同机房使用，无法跨机房跨网络</p><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">master_ip_failover_script=/usr/<span class="built_in">local</span>/bin/master_ip_failover</span><br><span class="line">注意：/usr/<span class="built_in">local</span>/bin/master_ip_failover，必须事先准备好</span><br></pre></td></tr></table></figure><h4 id="修改脚本内容"><a href="#修改脚本内容" class="headerlink" title="修改脚本内容"></a>修改脚本内容</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim  /usr/<span class="built_in">local</span>/bin/master_ip_failover</span><br><span class="line">my <span class="variable">$vip</span> = <span class="string">&#x27;10.0.0.55/24&#x27;</span>;</span><br><span class="line">my <span class="variable">$key</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">my <span class="variable">$ssh_start_vip</span> = <span class="string">&quot;/sbin/ifconfig eth0:<span class="variable">$key</span> <span class="variable">$vip</span>&quot;</span>;</span><br><span class="line">my <span class="variable">$ssh_stop_vip</span> = <span class="string">&quot;/sbin/ifconfig eth0:<span class="variable">$key</span> down&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="更改manager配置文件"><a href="#更改manager配置文件" class="headerlink" title="更改manager配置文件"></a>更改manager配置文件</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mha/app1.cnf</span><br><span class="line">添加：</span><br><span class="line">master_ip_failover_script=/usr/<span class="built_in">local</span>/bin/master_ip_failover</span><br><span class="line">注意：</span><br><span class="line">[root@db03 ~]<span class="comment"># dos2unix /usr/local/bin/master_ip_failover </span></span><br><span class="line">dos2unix: converting file /usr/<span class="built_in">local</span>/bin/master_ip_failover to Unix format ...</span><br><span class="line">[root@db03 ~]<span class="comment"># chmod +x /usr/local/bin/master_ip_failover </span></span><br></pre></td></tr></table></figure><h4 id="主库上，手工生成第一个vip地址"><a href="#主库上，手工生成第一个vip地址" class="headerlink" title="主库上，手工生成第一个vip地址"></a>主库上，手工生成第一个vip地址</h4><p>手工在主库上绑定vip，注意一定要和配置文件中的ethN一致，我的是eth0:1(1是key指定的值)<br>ifconfig eth0:1 10.0.0.55/24</p><h4 id="重启mha"><a href="#重启mha" class="headerlink" title="重启mha"></a>重启mha</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line">nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/<span class="built_in">log</span>/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><p>注意</p><p>如果配置keepalived的话，需要candidate_master=1和check_repl_delay=0进行配合，防止vip和主库选择不在一个节点上</p><h3 id="邮件提醒"><a href="#邮件提醒" class="headerlink" title="邮件提醒"></a>邮件提醒</h3><ol><li><p>参数：<br>report_script=/usr/local/bin/send</p></li><li><p>准备邮件脚本<br>send_report<br>(1)准备发邮件的脚本(上传 email_2019-最新.zip中的脚本，到/usr/local/bin/中)<br>(2)将准备好的脚本添加到mha配置文件中,让其调用</p></li><li><p>修改manager配置文件，调用邮件脚本<br>vi /etc/mha/app1.cnf<br>  report_script=/usr/local/bin/send</p><p>（3）停止MHA<br>masterha_stop –conf=/etc/mha/app1.cnf<br>（4）开启MHA    </p><p>nohup masterha_manager –conf=/etc/mha/app1.cnf –remove_dead_master_conf –ignore_last_failover &lt; /dev/null &gt; /var/log/mha/app1/manager.log 2&gt;&amp;1 &amp;<br> (5) 关闭主库,看警告邮件 </p></li></ol><p>排查过程：</p><p>1.排查进程状态</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep manager</span><br><span class="line">或</span><br><span class="line">masterha_check_status --conf=/etc/mha/app1.cnf</span><br></pre></td></tr></table></figure><p>2.检查配置文件中节点</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/mha/app1.conf</span><br></pre></td></tr></table></figure><p>如果节点已经被移除，说明切换过程已经大部分成功</p><p>如果节点还在，说明切换过程在中间卡住</p><p>3.看日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /var/<span class="built_in">log</span>/mha/app1/manager</span><br></pre></td></tr></table></figure><p>故障修复：</p><ol><li>恢复故障节点<br>（1）实例宕掉<br>/etc/init.d/mysqld start<br>（2）主机损坏，有可能数据也损坏了<br>备份并恢复故障节点。</li><li>恢复主从环境<br>看日志文件：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO MASTER_HOST&#x3D;&#39;10.0.0.52&#39;, MASTER_PORT&#x3D;3306, MASTER_AUTO_POSITION&#x3D;1, MASTER_USER&#x3D;&#39;repl&#39;, MASTER_PASSWORD&#x3D;&#39;123&#39;;</span><br><span class="line">start slave ;</span><br></pre></td></tr></table></figure><ol start="3"><li>修好的故障节点配置信息，加入到配置文件(配置文件节点信息还在，可忽略)</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[server1]</span><br><span class="line">hostname&#x3D;10.0.0.51</span><br><span class="line">port&#x3D;3306</span><br></pre></td></tr></table></figure><ol start="4"><li>检查ssh互信和rep1的主从关系</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_check_ssh --conf=/etc/mha/app1.cnf</span><br><span class="line">masterha_check_repl --conf=/etc/mha/app1.cnf</span><br></pre></td></tr></table></figure><ol start="5"><li>修复binlogserver</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db03 ~]<span class="comment">#cd /data/mysql/binlog/</span></span><br><span class="line">[root@db03 binlog]<span class="comment">#rm -rf *</span></span><br><span class="line">[rootldb03 binlog]<span class="comment"># mysqlbinlog -R --host=10.0.0.52 --user=mha --password=mha --raw --stop-never mysgl-bin.000001 &amp;</span></span><br></pre></td></tr></table></figure><ol start="6"><li><p>检查主节点vip状态</p><p>如果不在，再手工生成一下</p></li><li><p>启动manager   </p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/<span class="built_in">log</span>/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h3 id="binlog-server（db03）"><a href="#binlog-server（db03）" class="headerlink" title="binlog server（db03）"></a>binlog server（db03）</h3><h4 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h4><p>binlogserver配置：<br>找一台额外的机器，必须要有5.6以上的版本，支持gtid并开启，我们直接用的第二个slave（db03）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/mha/app1.cnf </span><br><span class="line">[binlog1]</span><br><span class="line">no_master=1</span><br><span class="line">hostname=10.0.0.53</span><br><span class="line">master_binlog_dir=/data/mysql/binlog</span><br></pre></td></tr></table></figure><h4 id="创建必要目录"><a href="#创建必要目录" class="headerlink" title="创建必要目录"></a>创建必要目录</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /data/mysql/binlog</span><br><span class="line">chown -R mysql.mysql /data/*</span><br><span class="line">修改完成后，将主库binlog拉过来（从000001开始拉，之后的binlog会自动按顺序过来）</span><br></pre></td></tr></table></figure><h4 id="拉取主库binlog日志"><a href="#拉取主库binlog日志" class="headerlink" title="拉取主库binlog日志"></a>拉取主库binlog日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /data/mysql/binlog     -----》必须进入到自己创建好的目录</span><br><span class="line">mysqlbinlog  -R --host=10.0.0.52 --user=mha --password=mha --raw  --stop-never mysql-bin.000001 &amp;</span><br></pre></td></tr></table></figure><p>注意：<br>拉取日志的起点,需要按照目前从库的已经获取到的二进制日志点为起点</p><h4 id="重启MHA"><a href="#重启MHA" class="headerlink" title="重启MHA"></a>重启MHA</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">masterha_stop --conf=/etc/mha/app1.cnf</span><br><span class="line">nohup masterha_manager --conf=/etc/mha/app1.cnf --remove_dead_master_conf --ignore_last_failover &lt; /dev/null &gt; /var/<span class="built_in">log</span>/mha/app1/manager.log 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure><h4 id="故障处理"><a href="#故障处理" class="headerlink" title="故障处理"></a>故障处理</h4><p>主库宕机，binlogserver 自动停掉，manager 也会自动停止。<br>处理思路：<br>1、重新获取新主库的binlog到binlogserver中<br>2、重新配置文件binlog server信息<br>3、最后再启动MHA</p><h1 id="管理员在高可用架构维护的职责"><a href="#管理员在高可用架构维护的职责" class="headerlink" title="管理员在高可用架构维护的职责"></a>管理员在高可用架构维护的职责</h1><ol><li>搭建：MHA+VIP+SendReport+BinlogServer</li><li>监控及故障处理</li><li>高可用架构的优化<br>核心是：尽可能降低主从的延时，让MHA花在数据补偿上的时间尽量减少。<br>5.7 版本，开启GTID模式，开启从库SQL并发复制。 </li></ol>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
            <tag> MHA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-09-主从复制进阶</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-09-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%BF%9B%E9%98%B6/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-09-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E8%BF%9B%E9%98%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="延时从库"><a href="#延时从库" class="headerlink" title="延时从库"></a>延时从库</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>是我们认为配置的一种特殊从库.人为配置从库和主库延时N小时.</p><h2 id="为什么要有延时从库"><a href="#为什么要有延时从库" class="headerlink" title="为什么要有延时从库"></a>为什么要有延时从库</h2><p>物理损坏</p><ul><li>主从复制非常擅长解决物理损坏</li></ul><p>逻辑损坏</p><ul><li>普通主从复制没办法解决逻辑损坏</li></ul><h2 id="配置延时从库"><a href="#配置延时从库" class="headerlink" title="配置延时从库"></a>配置延时从库</h2><p>SQL线程延时:数据已经写入relaylog中了,SQL线程”慢点”运行<br>一般企业建议3-6小时,具体看公司运维人员对于故障的反应时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;stop slave;</span><br><span class="line">mysql&gt;CHANGE MASTER TO MASTER_DELAY &#x3D; 300;</span><br><span class="line">mysql&gt;start slave;</span><br><span class="line">mysql&gt; show slave status \G</span><br><span class="line">SQL_Delay: 300</span><br><span class="line">SQL_Remaining_Delay: NULL</span><br></pre></td></tr></table></figure><h2 id="延时从库应用"><a href="#延时从库应用" class="headerlink" title="延时从库应用"></a>延时从库应用</h2><h3 id="故障恢复思路"><a href="#故障恢复思路" class="headerlink" title="故障恢复思路"></a>故障恢复思路</h3><p><strong>1主1从,从库延时5分钟,主库误删除1个库</strong></p><ol><li>先停业务，挂维护页</li><li>5分钟之内 侦测到误删除操作</li><li>停从库SQL线程</li><li>截取relaylog<br>起点 :停止SQL线程时,relay最后应用位置<br>  终点:误删除之前的position(GTID)</li><li>恢复截取的日志到从库<ol><li>导出被误操作的数据到主库，但如果数据量太大不建议这样操作</li><li>推荐方法：直接从库代替主库被误操作的业务</li></ol></li><li>从库身份解除,替代主库工作</li></ol><h3 id="故障模拟及恢复"><a href="#故障模拟及恢复" class="headerlink" title="故障模拟及恢复"></a>故障模拟及恢复</h3><ol><li>主库数据操作</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;create database relay charset utf8;</span><br><span class="line">db01 [(none)]&gt;use relay</span><br><span class="line">db01 [relay]&gt;create table t1 (id int);</span><br><span class="line">db01 [relay]&gt;insert into t1 values(1);</span><br><span class="line">db01 [relay]&gt;drop database relay;</span><br></pre></td></tr></table></figure><ol start="2"><li>停止从库SQL线程</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stop slave sql_thread;</span><br></pre></td></tr></table></figure><ol start="3"><li>找relaylog的截取起点和终点</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">起点:</span><br><span class="line">Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">Relay_Log_Pos: 482</span><br><span class="line">终点:</span><br><span class="line">show relaylog events in &#39;db01-relay-bin.000002&#39;</span><br><span class="line">| db01-relay-bin.000002 | 1046 | Xid            |         7 |        2489 | COMMIT &#x2F;* xid&#x3D;144 *&#x2F;                  |</span><br><span class="line">| db01-relay-bin.000002 | 1077 | Anonymous_Gtid |         7 |        2554 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;  |</span><br><span class="line">mysqlbinlog --start-position&#x3D;482 --stop-position&#x3D;1077  &#x2F;data&#x2F;3308&#x2F;data&#x2F;db01-relay-bin.000002&gt;&#x2F;tmp&#x2F;relay.sql</span><br></pre></td></tr></table></figure><ol start="4"><li>从库恢复relaylog</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">set sql_log_bin&#x3D;1</span><br><span class="line">source &#x2F;tmp&#x2F;relay.sql</span><br><span class="line">set sql_log_bin&#x3D;0</span><br></pre></td></tr></table></figure><ol start="5"><li>从库身份解除</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [relay]&gt;stop slave;</span><br><span class="line">db01 [relay]&gt;reset slave all</span><br></pre></td></tr></table></figure><h1 id="半同步"><a href="#半同步" class="headerlink" title="半同步"></a>半同步</h1><p>传统异步非GTID复制工作模型下，会导致主从数据不一致情况</p><p>为了解决主从数据一致性问题，5.5版本加入了半同步复制的组件</p><h2 id="半同步复制工作原理的变化"><a href="#半同步复制工作原理的变化" class="headerlink" title="半同步复制工作原理的变化"></a>半同步复制工作原理的变化</h2><ol><li>主库执行新的事务,commit时,更新 show master  status\G ,触发一个信号给</li><li>binlog dump 接收到主库的 show master status\G信息,通知从库日志更新了</li><li>从库IO线程请求新的二进制日志事件</li><li>主库会通过dump线程传送新的日志事件,给从库IO线程</li><li>从库IO线程接收到binlog日志,当日志写入到磁盘上的relaylog文件时,给主库ACK_receiver线程</li><li>ACK_receiver线程触发一个事件,告诉主库commit可以成功了</li><li>如果ACK达到了我们预设值的超时时间,半同步复制会切换为原始的异步复制.</li></ol><p>在5.6，5.7当中也加入了一些比较好的特性（After commit , after sync ，无损…)，也不能完全保证5个9以上的数据一致。<br>如果生产业务比较关注主从最终一致（金融类）。我们推荐可以使用MGR的架构，或者PXC等一致性架构。</p><h2 id="配置半同步复制"><a href="#配置半同步复制" class="headerlink" title="配置半同步复制"></a>配置半同步复制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">加载插件</span><br><span class="line">主:</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_master SONAME &#39;semisync_master.so&#39;;</span><br><span class="line">从:</span><br><span class="line">INSTALL PLUGIN rpl_semi_sync_slave SONAME &#39;semisync_slave.so&#39;;</span><br><span class="line">查看是否加载成功:</span><br><span class="line">show plugins;</span><br><span class="line">启动:</span><br><span class="line">主:</span><br><span class="line">SET GLOBAL rpl_semi_sync_master_enabled &#x3D; 1;</span><br><span class="line">从:</span><br><span class="line">SET GLOBAL rpl_semi_sync_slave_enabled &#x3D; 1;</span><br><span class="line">重启从库上的IO线程</span><br><span class="line">STOP SLAVE IO_THREAD;</span><br><span class="line">START SLAVE IO_THREAD;</span><br><span class="line">查看是否在运行</span><br><span class="line">主:</span><br><span class="line">show status like &#39;Rpl_semi_sync_master_status&#39;;</span><br><span class="line">从:</span><br><span class="line">show status like &#39;Rpl_semi_sync_slave_status&#39;;</span><br></pre></td></tr></table></figure><h1 id="过滤复制"><a href="#过滤复制" class="headerlink" title="过滤复制"></a>过滤复制</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>主库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br><span class="line"># 白名单</span><br><span class="line">binlog_do_db&#x3D;world</span><br><span class="line"># 黑名单</span><br><span class="line">binlog_ignore_db&#x3D;world</span><br></pre></td></tr></table></figure><p>从库：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show slave status\G</span><br><span class="line"># 库级别</span><br><span class="line">replicate_do_db&#x3D;world </span><br><span class="line">replicate_ignore_db&#x3D;world</span><br><span class="line"># 表级别</span><br><span class="line">replicate_do_table&#x3D;world.city</span><br><span class="line">replicate_ignore_table&#x3D;world.city</span><br><span class="line"># 模糊匹配</span><br><span class="line">replicate_wild_do_table&#x3D;world.t*</span><br><span class="line">replicate_wild_ignore_table&#x3D;world.t*</span><br></pre></td></tr></table></figure><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -S &#x2F;data&#x2F;3307&#x2F;mysql.sock -A --master-data&#x3D;2 --single-transaction  -R --triggers &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line">vim  &#x2F;backup&#x2F;full.sql</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;, MASTER_LOG_POS&#x3D;154;</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysql -S &#x2F;data&#x2F;3309&#x2F;mysql.sock </span><br><span class="line">source &#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">MASTER_PORT&#x3D;3307,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000002&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;154,</span><br><span class="line">MASTER_CONNECT_RETRY&#x3D;10;</span><br><span class="line">start  slave;</span><br><span class="line">[root@db01 ~]# vim &#x2F;data&#x2F;3309&#x2F;my.cnf </span><br><span class="line">replicate_do_db&#x3D;ppt</span><br><span class="line">replicate_do_db&#x3D;word</span><br><span class="line">[root@db01 ~]# systemctl restart mysqld3309</span><br><span class="line"></span><br><span class="line">主库：</span><br><span class="line">Master [(none)]&gt;create database word;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Master [(none)]&gt;create database ppt;</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line">Master [(none)]&gt;create database excel;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br></pre></td></tr></table></figure><h1 id="GTID复制"><a href="#GTID复制" class="headerlink" title="GTID复制"></a>GTID复制</h1><h2 id="GTID引入"><a href="#GTID引入" class="headerlink" title="GTID引入"></a>GTID引入</h2><p>主要保证主从复制中的高级特性 </p><p>GTID(Global Transaction ID)是对于一个已提交事务的唯一编号，并且是一个全局(主从复制)唯一的编号。5.6版本没有默认开启，5.7中即使不开启也有匿名的GTID记录<br>它的官方定义如下：<br>GTID = source_id ：transaction_id<br>7E11FA47-31CA-19E1-9E56-C43AA21293967:29<br>什么是sever_uuid，和Server-id 区别？<br>核心特性: 全局唯一,具备幂等性</p><p>5.7.17+的版本以后几乎都是GTID模式了</p><h2 id="GTID核心参数"><a href="#GTID核心参数" class="headerlink" title="GTID核心参数"></a>GTID核心参数</h2><p>重要参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line"></span><br><span class="line">gtid-mode&#x3D;on                        --启用gtid类型，否则就是普通的复制架构</span><br><span class="line">enforce-gtid-consistency&#x3D;true               --强制GTID的一致性</span><br><span class="line">log-slave-updates&#x3D;1                 --slave更新是否记入日志</span><br></pre></td></tr></table></figure><h2 id="GTID复制配置过程"><a href="#GTID复制配置过程" class="headerlink" title="GTID复制配置过程"></a>GTID复制配置过程</h2><h3 id="清理环境"><a href="#清理环境" class="headerlink" title="清理环境"></a>清理环境</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pkill mysqld</span><br><span class="line">\rm -rf /data/mysql/data/*</span><br><span class="line">\rm -rf /data/binlog/*</span><br></pre></td></tr></table></figure><h3 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">主库db01：</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;data&#x2F;mysql&#x2F;</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">server_id&#x3D;51</span><br><span class="line">port&#x3D;3306</span><br><span class="line">secure-file-priv&#x3D;&#x2F;tmp</span><br><span class="line">autocommit&#x3D;0</span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line">[mysql]</span><br><span class="line">prompt&#x3D;db01 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">slave1(db02)：</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">server_id&#x3D;52</span><br><span class="line">port&#x3D;3306</span><br><span class="line">secure-file-priv&#x3D;&#x2F;tmp</span><br><span class="line">autocommit&#x3D;0</span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line">[mysql]</span><br><span class="line">prompt&#x3D;db02 [\\d]&gt;</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">slave2(db03)：</span><br><span class="line">cat &gt; &#x2F;etc&#x2F;my.cnf &lt;&lt;EOF</span><br><span class="line">[mysqld]</span><br><span class="line">basedir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql&#x2F;data</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">server_id&#x3D;53</span><br><span class="line">port&#x3D;3306</span><br><span class="line">secure-file-priv&#x3D;&#x2F;tmp</span><br><span class="line">autocommit&#x3D;0</span><br><span class="line">log_bin&#x3D;&#x2F;data&#x2F;binlog&#x2F;mysql-bin</span><br><span class="line">binlog_format&#x3D;row</span><br><span class="line">gtid-mode&#x3D;on</span><br><span class="line">enforce-gtid-consistency&#x3D;true</span><br><span class="line">log-slave-updates&#x3D;1</span><br><span class="line">[mysql]</span><br><span class="line">prompt&#x3D;db03 [\\d]&gt;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/data/mysql  --datadir=/data/mysql/data </span><br></pre></td></tr></table></figure><h3 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysql</span><br></pre></td></tr></table></figure><h3 id="构建主从："><a href="#构建主从：" class="headerlink" title="构建主从："></a>构建主从：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">master:51</span><br><span class="line">slave:52,53</span><br><span class="line"></span><br><span class="line">51:</span><br><span class="line">grant replication slave  on *.* to repl@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line"></span><br><span class="line">52\53:</span><br><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">master_password&#x3D;&#39;123&#39; ,</span><br><span class="line">MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line"></span><br><span class="line">start slave;</span><br></pre></td></tr></table></figure><h2 id="GTID-从库误写入操作处理"><a href="#GTID-从库误写入操作处理" class="headerlink" title="GTID 从库误写入操作处理"></a>GTID 从库误写入操作处理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">查看监控信息:</span><br><span class="line">Last_SQL_Error: Error &#39;Can&#39;t create database &#39;oldboy&#39;; database exists&#39; on query. Default database: &#39;oldboy&#39;. Query: &#39;create database oldboy&#39;</span><br><span class="line"></span><br><span class="line">Retrieved_Gtid_Set: 71bfa52e-4aae-11e9-ab8c-000c293b577e:1-3</span><br><span class="line">Executed_Gtid_Set:  71bfa52e-4aae-11e9-ab8c-000c293b577e:1-2,</span><br><span class="line">7ca4a2b7-4aae-11e9-859d-000c298720f6:1</span><br><span class="line"></span><br><span class="line">注入空事物的方法：</span><br><span class="line"></span><br><span class="line">stop slave;</span><br><span class="line">set gtid_next&#x3D;&#39;99279e1e-61b7-11e9-a9fc-000c2928f5dd:3&#39;;</span><br><span class="line">begin;commit;</span><br><span class="line">set gtid_next&#x3D;&#39;AUTOMATIC&#39;;</span><br><span class="line">    </span><br><span class="line">这里的xxxxx:N 也就是你的slave sql thread报错的GTID，或者说是你想要跳过的GTID。</span><br><span class="line">最好的解决方案：重新构建主从环境</span><br></pre></td></tr></table></figure><h2 id="GTID-复制和普通复制的区别"><a href="#GTID-复制和普通复制的区别" class="headerlink" title="GTID 复制和普通复制的区别"></a>GTID 复制和普通复制的区别</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">CHANGE MASTER TO</span><br><span class="line">MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">MASTER_PORT&#x3D;3307,</span><br><span class="line">MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">MASTER_LOG_POS&#x3D;444,</span><br><span class="line">MASTER_CONNECT_RETRY&#x3D;10;</span><br><span class="line"></span><br><span class="line">change master to </span><br><span class="line">master_host&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">master_user&#x3D;&#39;repl&#39;,</span><br><span class="line">master_password&#x3D;&#39;123&#39; ,</span><br><span class="line">MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">1.在主从复制环境中，主库发生过的事务，在全局都是由唯一GTID记录的，更方便Failover</span><br><span class="line">2.额外功能参数（3个）</span><br><span class="line">3.change master to 的时候不再需要binlog 文件名和position号,MASTER_AUTO_POSITION&#x3D;1;</span><br><span class="line">4.在复制过程中，从库不再依赖master.info文件，而是直接读取最后一个relaylog的 GTID号</span><br><span class="line">5.mysqldump备份时，默认会将备份中包含的事务操作，以以下方式</span><br><span class="line">    SET @@GLOBAL.GTID_PURGED&#x3D;&#39;8c49d7ec-7e78-11e8-9638-000c29ca725d:1&#39;;</span><br><span class="line">    告诉从库，我的备份中已经有以上事务，你就不用运行了，直接从下一个GTID开始请求binlog就行。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-08-主从复制</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-08-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-08-%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="企业高可用性标准"><a href="#企业高可用性标准" class="headerlink" title="企业高可用性标准"></a>企业高可用性标准</h1><h2 id="全年无故障率-非计划内故障停机"><a href="#全年无故障率-非计划内故障停机" class="headerlink" title="全年无故障率(非计划内故障停机)"></a>全年无故障率(非计划内故障停机)</h2><p>99.9%                 —-&gt; 0.001*365*24*60=525.6  min<br>99.99%               —-&gt; 0.0001*365<em>24\</em>60=52.56 min<br>99.999%            —-&gt; 0.0001*365*24*60=5.256 min</p><h2 id="高可用架构方案"><a href="#高可用架构方案" class="headerlink" title="高可用架构方案"></a>高可用架构方案</h2><ul><li>负载均衡:有一定的高可用性<br>LVS  Nginx</li><li>主备系统:有高可用性,但是需要切换,是单活的架构<br>KA ,   MHA, MMM</li><li>真正高可用(多活系统):<br>NDB Cluster  Oracle RAC  Sysbase cluster   , InnoDB Cluster（MGR）,PXC , MGC</li></ul><h1 id="主从复制简介"><a href="#主从复制简介" class="headerlink" title="主从复制简介"></a>主从复制简介</h1><ol><li>基于二进制日志复制的</li><li>主库的修改操作会记录二进制日志</li><li>从库会请求新的二进制日志并回放,最终达到主从数据同步</li><li>主从复制核心功能:<br>辅助备份,处理物理损坏<br>扩展新型的架构:高可用,高性能,分布式架构等</li></ol><h1 id="主从复制前提-搭建主从的过程"><a href="#主从复制前提-搭建主从的过程" class="headerlink" title="主从复制前提(搭建主从的过程)"></a>主从复制前提(搭建主从的过程)</h1><ol><li>两台以上mysql实例 ,server_id,server_uuid不同</li><li>主库开启二进制日志</li><li>网络通畅</li><li>系统时间同步</li><li>专用的复制用户</li><li>保证主从开启之前的某个时间点,从库数据是和主库一致</li><li>告知从库,复制user,passwd,IP port,以及复制起点(change master to)</li><li>线程(三个):Dump thread  IO thread  SQL thread 开启(start slave)</li></ol><h1 id="主从复制搭建-Classic-replication"><a href="#主从复制搭建-Classic-replication" class="headerlink" title="主从复制搭建(Classic replication)"></a>主从复制搭建(Classic replication)</h1><h2 id="清理主库数据"><a href="#清理主库数据" class="headerlink" title="清理主库数据"></a>清理主库数据</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /data/3307/data/*</span><br></pre></td></tr></table></figure><h2 id="重新初始化3307"><a href="#重新初始化3307" class="headerlink" title="重新初始化3307"></a>重新初始化3307</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --initialize-insecure --user=mysql --basedir=/app/mysql --datadir=/data/3307/data</span><br></pre></td></tr></table></figure><h2 id="修改my-cnf-开启二进制日志功能"><a href="#修改my-cnf-开启二进制日志功能" class="headerlink" title="修改my.cnf ,开启二进制日志功能"></a>修改my.cnf ,开启二进制日志功能</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]<span class="comment"># vim /data/3307/my.cnf </span></span><br><span class="line">log_bin=/data/3307/data/mysql-bin</span><br></pre></td></tr></table></figure><h2 id="启动所有节点"><a href="#启动所有节点" class="headerlink" title="启动所有节点"></a>启动所有节点</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]<span class="comment"># systemctl start mysqld3307</span></span><br><span class="line">[root@db01 3307]<span class="comment"># systemctl start mysqld3308</span></span><br><span class="line">[root@db01 3307]<span class="comment"># systemctl start mysqld3309</span></span><br><span class="line">[root@db01 3307]<span class="comment"># ps -ef |grep mysqld</span></span><br><span class="line">mysql      3684      1  4 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3307/my.cnf</span><br><span class="line">mysql      3719      1  7 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3308/my.cnf</span><br><span class="line">mysql      3754      1  8 09:59 ?        00:00:00 /app/mysql/bin/mysqld --defaults-file=/data/3309/my.cnf</span><br><span class="line">[root@db01 3307]<span class="comment"># mysql -S /data/3307/mysql.sock -e &quot;select @@server_id&quot;</span></span><br><span class="line">[root@db01 3307]<span class="comment"># mysql -S /data/3308/mysql.sock -e &quot;select @@server_id&quot;</span></span><br><span class="line">[root@db01 3307]<span class="comment"># mysql -S /data/3309/mysql.sock -e &quot;select @@server_id&quot;</span></span><br></pre></td></tr></table></figure><h2 id="主库中创建复制用户"><a href="#主库中创建复制用户" class="headerlink" title="主库中创建复制用户"></a>主库中创建复制用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]<span class="comment"># mysql -S /data/3307/mysql.sock </span></span><br><span class="line">db01 [(none)]&gt;grant replication slave on *.* to repl@<span class="string">&#x27;10.0.0.%&#x27;</span> identified by <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">db01 [(none)]&gt;select user,host from mysql.user;</span><br></pre></td></tr></table></figure><h2 id="备份主库并恢复到从库"><a href="#备份主库并恢复到从库" class="headerlink" title="备份主库并恢复到从库"></a>备份主库并恢复到从库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]<span class="comment"># mysqldump -S /data/3307/mysql.sock -A --master-data=2 --single-transaction  -R --triggers &gt;/backup/full.sql</span></span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE=<span class="string">&#x27;mysql-bin.000001&#x27;</span>, MASTER_LOG_POS=653;</span><br><span class="line">[root@db01 3307]<span class="comment"># mysql -S /data/3308/mysql.sock</span></span><br><span class="line">db01 [(none)]&gt;<span class="built_in">source</span> /backup/full.sql</span><br></pre></td></tr></table></figure><h2 id="告知从库关键复制信息"><a href="#告知从库关键复制信息" class="headerlink" title="告知从库关键复制信息"></a>告知从库关键复制信息</h2><p>ip port user  password  binlog position </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 3307]# mysql -S &#x2F;data&#x2F;3308&#x2F;mysql.sock</span><br><span class="line">db01 [mysql]&gt;help change master to</span><br><span class="line"></span><br><span class="line">CHANGE MASTER TO</span><br><span class="line">  MASTER_HOST&#x3D;&#39;10.0.0.51&#39;,</span><br><span class="line">  MASTER_USER&#x3D;&#39;repl&#39;,</span><br><span class="line">  MASTER_PASSWORD&#x3D;&#39;123&#39;,</span><br><span class="line">  MASTER_PORT&#x3D;3307,</span><br><span class="line">  MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000001&#39;,</span><br><span class="line">  MASTER_LOG_POS&#x3D;653,</span><br><span class="line">  MASTER_CONNECT_RETRY&#x3D;10;</span><br></pre></td></tr></table></figure><h2 id="开启主从专用线程"><a href="#开启主从专用线程" class="headerlink" title="开启主从专用线程"></a>开启主从专用线程</h2><p>在从库中开启专用线程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave ;</span><br></pre></td></tr></table></figure><h2 id="检查复制状态"><a href="#检查复制状态" class="headerlink" title="检查复制状态"></a>检查复制状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db01 [mysql]&gt;show slave  status \G;</span><br><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br></pre></td></tr></table></figure><p>如果失败，则在从库中运行以下命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># mysql -s /tmp/mysql330x.sock -e &quot;stop slave;reset slave all;&quot;</span></span><br></pre></td></tr></table></figure><p>并重新操作一遍</p><h1 id="主从复制的原理-Classic-Replication"><a href="#主从复制的原理-Classic-Replication" class="headerlink" title="主从复制的原理 (Classic Replication)"></a>主从复制的原理 (Classic Replication)</h1><h2 id="主从中设置到的文件和线程"><a href="#主从中设置到的文件和线程" class="headerlink" title="主从中设置到的文件和线程"></a>主从中设置到的文件和线程</h2><h3 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h3><ul><li>主:<ul><li>Binlog_dump_Thread：用来接收从库请求，并且投递binlog给从库</li></ul></li><li>从:<br>IO  THREAD：请求binlog日志，接收binlog日志<br>SQL THREAD：回访relay日志</li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li><p>主:<br>mysql-bin.000001</p></li><li><p>从: </p><ul><li><p>db01-relay.000001   </p><p>作用：中继日志，存储接收的binlog。</p><p>位置：默认在从库的数据目录下。</p><p>手工定义方法:relay_log_basename=/data/3308/data/db01-relay-bin</p></li><li><p>master.info</p><p>作用：主库信息记录日志，已经接收binlog位置点信息。</p><p>位置：默认存储在从库的数据路径下 </p><p>手工定义：master_info_repository = FILE/TABLE</p></li><li><p>relay-log.info</p><p>作用：记录从库会放到的relay-log的位置点</p><p>位置：默认在从库的数据路径下</p><p>手工定义：relay_log_info_repository=FILE/TABLE</p></li></ul></li></ul><h1 id="主从复制原理"><a href="#主从复制原理" class="headerlink" title="主从复制原理"></a>主从复制原理</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-72dd1f45d206d507.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/693/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-a4273ecc8aa1c370.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/724/format/webp" alt="img"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200809171143678.png" alt="image-20200809171143678"></p><p>主从复制原理描述：</p><ol><li>change master to 时，ip port user password binlog position写入到master.info进行记录</li><li>start slave 时，从库会启动IO线程和SQL线程</li><li>IO_T，读取master.info信息，获取主库信息连接主库</li><li>主库会生成一个准备binlog DUMP线程，来响应从库</li><li>IO_T根据master.info记录的binlog文件名和position号，请求主库DUMP最新日志</li><li>DUMP线程检查主库的binlog日志，如果有新的，TP(传送)给从从库的IO_T</li><li>IO_T将收到的日志存储到了TCP/IP 缓存，立即返回ACK给主库 ，主库工作完成</li><li>IO_T将缓存中的数据，存储到relay-log日志文件,更新master.info文件binlog 文件名和postion，IO_T工作完成</li><li>SQL_T读取relay-log.info文件，获取到上次执行到的relay-log的位置，作为起点，回放relay-log</li><li>SQL_T回放完成之后，会更新relay-log.info文件。</li></ol><p>细节：</p><ol><li>relay-log会有自动清理的功能。relay_log_purge=ON</li><li>主库一旦有新的日志生成，会发送“信号”给binlog dump ，IO线程再请求</li></ol><h1 id="主从故障监控-分析-处理"><a href="#主从故障监控-分析-处理" class="headerlink" title="主从故障监控\分析\处理"></a>主从故障监控\分析\处理</h1><h2 id="线程相关监控"><a href="#线程相关监控" class="headerlink" title="线程相关监控"></a>线程相关监控</h2><h2 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">show full processlist;</span><br><span class="line">每个从库都会有一行dump相关的信息</span><br><span class="line">HOSTS: </span><br><span class="line">db01:47176</span><br><span class="line">State:</span><br><span class="line">Master has sent all binlog to slave; waiting for more updates</span><br><span class="line"></span><br><span class="line">show slave hosts;</span><br><span class="line">如果现实非以上信息,说明主从之间的关系出现了问题    </span><br></pre></td></tr></table></figure><h2 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;show slave status \G</span><br></pre></td></tr></table></figure><h2 id="主库相关信息监控"><a href="#主库相关信息监控" class="headerlink" title="主库相关信息监控"></a>主库相关信息监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Master_Host: 10.0.0.51</span><br><span class="line">Master_User: repl</span><br><span class="line">Master_Port: 3307</span><br><span class="line">Master_Log_File: mysql-bin.000005</span><br><span class="line">Read_Master_Log_Pos: 444</span><br></pre></td></tr></table></figure><h2 id="从库中继日志的应用状态"><a href="#从库中继日志的应用状态" class="headerlink" title="从库中继日志的应用状态"></a>从库中继日志的应用状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Relay_Log_File: db01-relay-bin.000002</span><br><span class="line">Relay_Log_Pos: 485</span><br></pre></td></tr></table></figure><h2 id="从库复制线程有关的状态"><a href="#从库复制线程有关的状态" class="headerlink" title="从库复制线程有关的状态"></a>从库复制线程有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Slave_IO_Running: Yes</span><br><span class="line">Slave_SQL_Running: Yes</span><br><span class="line">Last_IO_Errno: 0</span><br><span class="line">Last_IO_Error: </span><br><span class="line">Last_SQL_Errno: 0</span><br><span class="line">Last_SQL_Error: </span><br></pre></td></tr></table></figure><h2 id="过滤复制有关的状态"><a href="#过滤复制有关的状态" class="headerlink" title="过滤复制有关的状态"></a>过滤复制有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Replicate_Do_DB: </span><br><span class="line">Replicate_Ignore_DB: </span><br><span class="line">Replicate_Do_Table: </span><br><span class="line">Replicate_Ignore_Table: </span><br><span class="line">Replicate_Wild_Do_Table: </span><br><span class="line">Replicate_Wild_Ignore_Table: </span><br></pre></td></tr></table></figure><h2 id="主从延时相关状态-非人为"><a href="#主从延时相关状态-非人为" class="headerlink" title="主从延时相关状态(非人为)"></a>主从延时相关状态(非人为)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Seconds_Behind_Master: 0</span><br></pre></td></tr></table></figure><h2 id="延时从库有关的状态-人为"><a href="#延时从库有关的状态-人为" class="headerlink" title="延时从库有关的状态(人为)"></a>延时从库有关的状态(人为)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SQL_Delay: 0</span><br><span class="line">SQL_Remaining_Delay: NULL</span><br></pre></td></tr></table></figure><h2 id="GTID-复制有关的状态"><a href="#GTID-复制有关的状态" class="headerlink" title="GTID 复制有关的状态"></a>GTID 复制有关的状态</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Retrieved_Gtid_Set: </span><br><span class="line">Executed_Gtid_Set: </span><br><span class="line">Auto_Position: 0</span><br></pre></td></tr></table></figure><h2 id="主从复制故障分析"><a href="#主从复制故障分析" class="headerlink" title="主从复制故障分析"></a>主从复制故障分析</h2><ol><li><p>网络、端口、防火墙</p></li><li><p>用户、密码、授权</p><p>replication slave</p></li><li><p>主库连接数上限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@max_connections;</span><br></pre></td></tr></table></figure></li><li><p>版本不统一</p></li></ol><h3 id="IO"><a href="#IO" class="headerlink" title="IO"></a>IO</h3><h4 id="连接主库"><a href="#连接主库" class="headerlink" title="连接主库"></a>连接主库</h4><p>(1) 用户 密码  IP  port<br>Last_IO_Error: error reconnecting to master ‘repl@10.0.0.51:3307’ - retry-time: 10  retries: 7</p><p>处理思路：手工连接</p><p>[root@db01 ~]# mysql -urepl  -p123333  -h 10.0.0.51 -P 3307<br>ERROR 1045 (28000): Access denied for user ‘repl’@’db01’ (using password: YES)</p><p>原因:</p><ul><li>密码错误 </li><li>用户错误 </li><li>skip_name_resolve</li><li>地址错误</li><li>端口</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/16956686-2d45278fb16e4d69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/932/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-0ed17c75c871d787.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/975/format/webp" alt="img"></p><p>处理方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">start slave # 启动所有线程</span><br><span class="line">stop  slave  # 关闭所有线程</span><br><span class="line">start&#x2F;stop slave sql_thread # 单独开启&#x2F;关闭sql_thread线程</span><br><span class="line">start&#x2F;stop slave io_thread  # 单独开启&#x2F;关闭io_thread线程</span><br><span class="line">reset slave all # 解除从库身份</span><br><span class="line">change master to ......</span><br></pre></td></tr></table></figure><h4 id="主库连接数上限-或者是主库太繁忙"><a href="#主库连接数上限-或者是主库太繁忙" class="headerlink" title="主库连接数上限,或者是主库太繁忙"></a>主库连接数上限,或者是主库太繁忙</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show slave  staus \G </span><br><span class="line">Last_IO_Errno: 1040</span><br><span class="line">Last_IO_Error: error reconnecting to master &#39;repl@10.0.0.51:3307&#39; - retry-time: 10  retries: 7</span><br></pre></td></tr></table></figure><p>处理思路:<br>拿复制用户,手工连接一下</p><p>[root@db01 ~]# mysql -urepl -p123 -h 10.0.0.51 -P 3307<br>mysql: [Warning] Using a password on the command line interface can be insecure.<br>ERROR 1040 (HY000): Too many connections<br>处理方法:<br>db01 [(none)]&gt;set global max_connections=300;</p><p>(3) 防火墙,网络不通</p><h4 id="请求二进制日志"><a href="#请求二进制日志" class="headerlink" title="请求二进制日志"></a>请求二进制日志</h4><p>主库二进制日志不完整:损坏，不连续….<br>从库请求的起点问题…<br>主从的server id (server_uuid）相同.<br>relaylog问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;could not find next log; the first event &#39;mysql-bin.000001&#39; at 154, the last event read from &#39;&#x2F;data&#x2F;3307&#x2F;data&#x2F;mysql-bin.000002&#39; at 154, the last byte read from &#39;&#x2F;data&#x2F;3307&#x2F;data&#x2F;mysql-bin.000002&#39; at 154.&#39;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/16956686-78c7eaaacd175fc0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><p>注意: 在主从复制环境中,严令禁止主库中reset master; 可以选择expire 进行定期清理主库二进制日志</p><p>解决方案:<br>重新构建主从</p><p>生产中如果要reset master</p><ol><li><p>找一个业务不繁忙旗舰，停止业务5分钟</p></li><li><p>等待从库同步完主库的所有日志</p></li><li><p>主库reset master;</p></li><li><p>从库重新同步主库日志 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">stop slave;</span><br><span class="line">reset slave all;</span><br><span class="line">reset master;</span><br><span class="line">change master to ......</span><br><span class="line">start slave</span><br></pre></td></tr></table></figure></li></ol><h3 id="SQL-线程故障"><a href="#SQL-线程故障" class="headerlink" title="SQL 线程故障"></a>SQL 线程故障</h3><h4 id="SQL线程功能"><a href="#SQL线程功能" class="headerlink" title="SQL线程功能"></a>SQL线程功能</h4><p>(1)读写relay-log.info<br>(2)relay-log损坏,断节,找不到<br>(3)接收到的SQL无法执行</p><h4 id="导致SQL线程故障原因分析"><a href="#导致SQL线程故障原因分析" class="headerlink" title="导致SQL线程故障原因分析"></a>导致SQL线程故障原因分析</h4><ol><li>版本差异，参数设定不同，比如：数据类型的差异，SQL_MODE影响</li><li>要创建的数据库对象已经存在</li><li>要删除或修改的对象不存在  </li><li>DML语句不符合表定义及约束时</li></ol><p>归根揭底的原因都是由于从库发生了写入操作.<br>Last_SQL_Error: Error ‘Can’t create database ‘db’; database exists’ on query. Default database: ‘db’. Query: ‘create database db’</p><h4 id="处理方法-以主库为核心的处理方案"><a href="#处理方法-以主库为核心的处理方案" class="headerlink" title="处理方法(以主库为核心的处理方案)"></a>处理方法(以主库为核心的处理方案)</h4><p>将从库进行反操作，再重启线程</p><h4 id="处理方法-以从库为核心的处理方案"><a href="#处理方法-以从库为核心的处理方案" class="headerlink" title="处理方法(以从库为核心的处理方案)"></a>处理方法(以从库为核心的处理方案)</h4><p>方法一：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stop slave; </span><br><span class="line">set global sql_slave_skip_counter &#x3D; 1;</span><br></pre></td></tr></table></figure><p>将同步指针向下移动一个，如果多次不同步，可以重复操作。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start slave;</span><br></pre></td></tr></table></figure><p>注意：如果要使用此种方法，一定要保证此时故障数据完全一致</p><p>方法二：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;my.cnf</span><br><span class="line">slave-skip-errors &#x3D; 1032,1062,1007</span><br></pre></td></tr></table></figure><p>常见错误代码:<br>1007:对象已存在<br>1032:无法执行DML<br>1062:主键冲突,或约束冲突</p><p>但是，以上操作有时是有风险的，最安全的做法就是重新构建主从。把握一个原则,一切以主库为主.</p><h4 id="主库出了问题怎么办"><a href="#主库出了问题怎么办" class="headerlink" title="主库出了问题怎么办"></a>主库出了问题怎么办</h4><p>如果是物理损坏：</p><ol><li>看看主库能不能ssh连接上</li><li>检查一下binlog是否完整</li><li>手工追加日志到最新位置</li><li>从库替代主库工作</li></ol><p>如果是逻辑损坏：</p><ul><li>只能通过备份去恢复</li></ul><h4 id="从库怎么称当主库"><a href="#从库怎么称当主库" class="headerlink" title="从库怎么称当主库"></a>从库怎么称当主库</h4><ul><li>修复最新状态</li><li>取消从库身份</li><li>清空binlog日志信息</li></ul><h3 id="一劳永逸的方法"><a href="#一劳永逸的方法" class="headerlink" title="一劳永逸的方法"></a>一劳永逸的方法</h3><p>(1) 可以设置从库只读.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@read_only</span><br></pre></td></tr></table></figure><p>注意：<br>只会影响到普通用户，对管理员用户无效。</p><p>但是可以通过</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@super_read_only</span><br></pre></td></tr></table></figure><p>来设置普通管理员只读</p><p>(2)加中间件<br>读写分离。</p><h1 id="主从延时监控及原因"><a href="#主从延时监控及原因" class="headerlink" title="主从延时监控及原因"></a>主从延时监控及原因</h1><p>主库做了修改操作,从库比较长时间才能追上。</p><h2 id="怎么监控"><a href="#怎么监控" class="headerlink" title="怎么监控"></a>怎么监控</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show slave status \G;# 粗略评估</span><br><span class="line">Second_Behind_Master:0 # 从库落后于主库的时间</span><br></pre></td></tr></table></figure><p>得出：有或者没有延时的情况，等于0不代表没有延时</p><p>评估主从延时更加精确的指标是延时了多少日志量</p><p>主库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show master status;</span><br></pre></td></tr></table></figure><p>从库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/xxx/relay-log.info</span><br></pre></td></tr></table></figure><h2 id="主库原因"><a href="#主库原因" class="headerlink" title="主库原因"></a>主库原因</h2><ul><li>网络 </li><li>主从硬件差异较大</li><li>主库业务量大</li><li>从库太多</li><li>版本差异</li><li>参数因素</li></ul><p>(1) 二进制日志写入不及时</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[rep]&gt;select @@sync_binlog;</span><br></pre></td></tr></table></figure><p>(2) CR的主从复制中,binlog_dump线程,事件为单元,串行传送二进制日志(5.6 5.5)</p><ol><li>主库并发事务量大,主库可以并行,传送时是串行</li><li>主库发生了大事务,由于是串行传送,会产生阻塞后续的事务.</li></ol><p>解决方案:</p><ol><li>5.6 开始,开启GTID,实现了GC(group commit)机制,可以并行传输日志给从库IO</li><li>5.7 开始,不开启GTID,会自动维护匿名的GTID,也能实现GC,我们建议还是开启GTIDs</li><li>拆分业务(分布式)：组件分离。垂直，水平</li><li>大事务拆成多个小事务,可以有效的减少主从延时.</li></ol><h2 id="从库原因"><a href="#从库原因" class="headerlink" title="从库原因"></a>从库原因</h2><p>SQL线程导致的主从延时<br>在CR复制情况下: 从库默认情况下只有一个SQL,只能串行回放事务SQL</p><ol><li>主库如果并发事务量较大,从库只能串行回放</li><li>主库发生了大事务,会阻塞后续的所有的事务的运行</li></ol><p>解决方案:</p><ol><li>5.6 版本开启GTID之后,加入了SQL多线程的特性,但是只能针对不同库(database)下的事务进行并发回放.</li><li>5.7 版本开始GTID之后,在SQL方面,提供了基于逻辑时钟(logical_clock),binlog加入了seq_no机制,<br>真正实现了基于事务级别的并发回放,这种技术我们把它称之为MTS(enhanced multi-threaded slave).</li><li>大事务拆成多个小事务,可以有效的减少主从延时.<br><a href="https://dev.mysql.com/worklog/task/?id=6314">https://dev.mysql.com/worklog/task/?id=6314</a></li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ol><li>主从复制原理</li><li>主从复制故障</li><li>主从延时：group commit    MTS   </li></ol>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-07-备份恢复</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-07-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-07-%E5%A4%87%E4%BB%BD%E6%81%A2%E5%A4%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="运维在数据库备份恢复方面的职责"><a href="#运维在数据库备份恢复方面的职责" class="headerlink" title="运维在数据库备份恢复方面的职责"></a>运维在数据库备份恢复方面的职责</h1><h2 id="设计备份策略"><a href="#设计备份策略" class="headerlink" title="设计备份策略"></a>设计备份策略</h2><p>全备  、增量、时间、自动</p><h2 id="日常备份检查"><a href="#日常备份检查" class="headerlink" title="日常备份检查"></a>日常备份检查</h2><p>备份存在性<br>备份空间够用否</p><h2 id="定期恢复演练-测试库"><a href="#定期恢复演练-测试库" class="headerlink" title="定期恢复演练(测试库)"></a>定期恢复演练(测试库)</h2><p>一季度 或者 半年</p><h2 id="故障恢复"><a href="#故障恢复" class="headerlink" title="故障恢复"></a>故障恢复</h2><p>通过现有备份,能够将数据库恢复到故障之前的时间点.       </p><h2 id="迁移"><a href="#迁移" class="headerlink" title="迁移"></a>迁移</h2><ol><li>停机时间</li><li>回退方案</li></ol><h1 id="备份类型"><a href="#备份类型" class="headerlink" title="备份类型"></a>备份类型</h1><h2 id="热备"><a href="#热备" class="headerlink" title="热备"></a>热备</h2><p>在数据库正常业务时,备份数据,并且能够一致性恢复（只能是innodb）<br>对业务影响非常小</p><h2 id="温备"><a href="#温备" class="headerlink" title="温备"></a>温备</h2><p>锁表备份,只能查询不能修改（myisam）<br>影响到写入操作</p><h2 id="冷备"><a href="#冷备" class="headerlink" title="冷备"></a>冷备</h2><p>关闭数据库业务,数据库没有任何变更的情况下,进行备份数据.<br>业务停止</p><h1 id="备份方式及工具介绍"><a href="#备份方式及工具介绍" class="headerlink" title="备份方式及工具介绍"></a>备份方式及工具介绍</h1><h2 id="逻辑备份工具"><a href="#逻辑备份工具" class="headerlink" title="逻辑备份工具"></a>逻辑备份工具</h2><ul><li>mysqldump</li><li>mydumper</li><li>load data in file</li><li>主从方式</li><li>mysqlbinlog</li></ul><h2 id="物理备份工具"><a href="#物理备份工具" class="headerlink" title="物理备份工具"></a>物理备份工具</h2><p>基于磁盘数据文件备份<br>xtrabackup(XBK) ：percona 第三方<br>MySQL Enterprise Backup（MEB）</p><h1 id="逻辑备份和物理备份的比较"><a href="#逻辑备份和物理备份的比较" class="headerlink" title="逻辑备份和物理备份的比较"></a>逻辑备份和物理备份的比较</h1><h2 id="mysqldump-MDP"><a href="#mysqldump-MDP" class="headerlink" title="mysqldump (MDP)"></a>mysqldump (MDP)</h2><p>优点：<br>1.不需要下载安装<br>2.备份出来的是SQL语句，文本格式，可读性高,便于备份处理<br>3.压缩比较高，节省备份的磁盘空间</p><p>缺点：<br>4.依赖于数据库引擎，需要从磁盘把数据读出，然后转换成SQL进行转储，比较耗费资源，数据量大的话效率较低</p><p> lnnoDB表<br>可以采取快照备份的方式。开启一个独立的事务，获取当前最新的一致性快照。将快照数据，放在临时表中，转换成SQL(Create database，Create table , insert)，保存到sql文件中。<br>非InnoDB表<br>需要锁表备份。触发FTWRL，全局锁表。转换成SQL(Create database，Create table , insert)，保存到sql文件中。</p><p>建议：<br>100G以内的数据量级，可以使用mysqldump<br>超过TB以上，我们也可能选择的是mysqldump，配合分布式的系统<br>1EB  =1024 PB =1000000TB</p><h2 id="xtrabackup-XBK"><a href="#xtrabackup-XBK" class="headerlink" title="xtrabackup(XBK)"></a>xtrabackup(XBK)</h2><p>优点：<br>1.类似于直接cp数据文件，不需要管逻辑结构，相对来说性能较高<br>缺点：<br>2.可读性差<br>3.压缩比低，需要更多磁盘空间<br>建议：<br>100G&lt;TB</p><h1 id="备份策略"><a href="#备份策略" class="headerlink" title="备份策略"></a>备份策略</h1><p>备份方式：<br>全备:全库备份，备份所有数据<br>增量:备份变化的数据<br>逻辑备份=mysqldump+mysqlbinlog<br>物理备份=xtrabackup_full+xtrabackup_incr+binlog或者xtrabackup_full+binlog<br>备份周期:<br>根据数据量设计备份周期<br>比如：周日全备，周1-周6增量</p><h1 id="备份工具使用-mysqldump"><a href="#备份工具使用-mysqldump" class="headerlink" title="备份工具使用-mysqldump"></a>备份工具使用-mysqldump</h1><h2 id="mysqldump-逻辑备份的客户端工具"><a href="#mysqldump-逻辑备份的客户端工具" class="headerlink" title="mysqldump (逻辑备份的客户端工具)"></a>mysqldump (逻辑备份的客户端工具)</h2><h3 id="客户端通用参数"><a href="#客户端通用参数" class="headerlink" title="客户端通用参数"></a>客户端通用参数</h3><p>-u  -p   -S   -h  -P</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">本地备份:</span><br><span class="line">mysqldump -uroot -p  -S &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">远程备份:</span><br><span class="line">mysqldump -uroot -p  -h 10.0.0.51 -P3306</span><br></pre></td></tr></table></figure><h3 id="备份专用基本参数"><a href="#备份专用基本参数" class="headerlink" title="备份专用基本参数"></a>备份专用基本参数</h3><h4 id="A-全备参数"><a href="#A-全备参数" class="headerlink" title="-A   全备参数"></a>-A   全备参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">例子1:</span><br><span class="line">[root@db01 ~]# mkdir -p &#x2F;data&#x2F;backup</span><br><span class="line">[root@db01 ~]# mysqldump -uroot -p -A &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">Enter password: </span><br><span class="line"></span><br><span class="line">mysqldump: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Warning: A partial dump from a server that has GTIDs will by default include the GTIDs of all transactions, even those that changed suppressed parts of the database. If you don&#39;t want to restore GTIDs, pass --set-gtid-purged&#x3D;OFF. To make a complete dump, pass --all-databases --triggers --routines --events. </span><br><span class="line"></span><br><span class="line"># 补充:</span><br><span class="line"># 1.常规备份是要加 --set-gtid-purged&#x3D;OFF,解决备份时的警告</span><br><span class="line"># [root@db01 ~]# mysqldump -uroot -p123 -A  --set-gtid-purged&#x3D;OFF  &gt;&#x2F;backup&#x2F;full.sql</span><br><span class="line"># 2.构建主从时,做的备份,不需要加这个参数</span><br><span class="line"># [root@db01 ~]# mysqldump -uroot -p123 -A    --set-gtid-purged&#x3D;ON &gt;&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="B-db1-db2-db3-备份多个单库"><a href="#B-db1-db2-db3-备份多个单库" class="headerlink" title="-B db1  db2  db3  备份多个单库"></a>-B db1  db2  db3  备份多个单库</h4><p>说明：生产中需要备份，生产相关的库和MySQL库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例子2 :</span><br><span class="line">mysqldump -B mysql gtid --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;b.sql </span><br></pre></td></tr></table></figure><h4 id="备份单个或多个表"><a href="#备份单个或多个表" class="headerlink" title="备份单个或多个表"></a>备份单个或多个表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例子3 备份world数据库下的city,country表</span><br><span class="line">mysqldump -uroot -p world city country &gt;&#x2F;backup&#x2F;bak1.sql</span><br><span class="line">以上备份恢复时:必须库事先存在,并且ues才能source恢复</span><br></pre></td></tr></table></figure><p>验证一下:以下两个命令的备份结果区别?<br>mysqldump -uroot -pl23 -B world &gt;/data/backup/db1.sql<br>create database world;<br>use world;<br>mysqldump -uroot -p123world &gt;/data/backup/db2.sql<br>应用时，world库不存在，需要手工创建，并且use到world库下再恢复。</p><h3 id="高级参数应用"><a href="#高级参数应用" class="headerlink" title="高级参数应用"></a>高级参数应用</h3><h4 id="特殊参数1使用（必须要加）"><a href="#特殊参数1使用（必须要加）" class="headerlink" title="特殊参数1使用（必须要加）"></a>特殊参数1使用（必须要加）</h4><p>-R            备份存储过程及函数<br>–triggers  备份触发器<br>-E             备份事件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">例子4:</span><br><span class="line">[root@db01 backup]# mysqldump -uroot -p -A -R -E --triggers &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">(5) 特殊参数2使用</span><br></pre></td></tr></table></figure><h4 id="F-在备份开始时-刷新一个新binlog日志"><a href="#F-在备份开始时-刷新一个新binlog日志" class="headerlink" title="-F  在备份开始时,刷新一个新binlog日志"></a>-F  在备份开始时,刷新一个新binlog日志</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例子5:</span><br><span class="line">mysqldump -uroot -p  -A  -R --triggers -F &gt;&#x2F;bak&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="–master-data-2"><a href="#–master-data-2" class="headerlink" title="–master-data=2"></a>–master-data=2</h4><p>以注释的形式,保存备份开始时间点的binlog的状态信息</p><p>自动锁表和解锁</p><p>配合single transation 可以减少锁表时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p  -A  -R --triggers --master-data&#x3D;2   &gt;&#x2F;back&#x2F;world.sql</span><br><span class="line">[root@db01 ~]# grep &#39;CHANGE&#39; &#x2F;backup&#x2F;world.sql </span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000035&#39;, MASTER_LOG_POS&#x3D;194;</span><br><span class="line"></span><br><span class="line">功能：</span><br><span class="line">（1）在备份时，会自动记录，二进制日志文件名和位置号</span><br><span class="line">0 默认值</span><br><span class="line">1  以change master to命令形式，可以用作主从复制</span><br><span class="line">2  以注释的形式记录，备份时刻的文件名+postion号</span><br><span class="line">（2） 自动锁表</span><br><span class="line">（3）如果配合--single-transaction，只对非InnoDB表进行锁表备份，InnoDB表进行“热“”备，实际上是实现快照备份。</span><br></pre></td></tr></table></figure><h4 id="–single-transaction"><a href="#–single-transaction" class="headerlink" title="–single-transaction"></a>–single-transaction</h4><p>innodb 存储引擎开启热备(快照备份)功能<br>master-data可以自动加锁<br>（1）在不加–single-transaction ，启动所有表的温备份，所有表都锁定<br>（1）加上–single-transaction ,对innodb进行快照备份,对非innodb表可以实现自动锁表功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例子6: 备份必加参数</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="–set-gtid-purged-auto"><a href="#–set-gtid-purged-auto" class="headerlink" title="–set-gtid-purged=auto"></a>–set-gtid-purged=auto</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">auto , on</span><br><span class="line">off </span><br><span class="line">使用场景:</span><br><span class="line">1. --set-gtid-purged&#x3D;OFF,可以使用在日常备份参数中.</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">2. auto , on:在构建主从复制环境时需要的参数配置</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;ON &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br></pre></td></tr></table></figure><h4 id="–max-allowed-packet"><a href="#–max-allowed-packet" class="headerlink" title="–max-allowed-packet=#"></a>–max-allowed-packet=#</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF --max-allowed-packet&#x3D;256M &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line"></span><br><span class="line"> --max-allowed-packet&#x3D;# </span><br><span class="line">The maximum packet length to send to or receive from server.</span><br></pre></td></tr></table></figure><h4 id="小练习："><a href="#小练习：" class="headerlink" title="小练习："></a>小练习：</h4><p>6.2.1. 实现所有表的单独备份</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">提示：</span><br><span class="line">information_schema.tables</span><br><span class="line">mysqldump -uroot -p123 world city &gt;&#x2F;backup&#x2F;world_city.sql</span><br><span class="line"></span><br><span class="line">select concat(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; --master-data&#x3D;2 --single-transaction --set-gtid-purged&#x3D;0  -R -E --triggers&gt;&#x2F;backup&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot;) from information_schema.tables where table_schema not in (&#39;sys&#39;,&#39;information_schema&#39;,&#39;performance_schema&#39;);</span><br></pre></td></tr></table></figure><h4 id="模拟故障案例并恢复"><a href="#模拟故障案例并恢复" class="headerlink" title="模拟故障案例并恢复"></a>模拟故障案例并恢复</h4><p>（1）每天全备<br>（2）binlog日志是完整<br>（3）模拟白天的数据变化<br>（4）模拟下午两点误删除数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">需求： 利用全备+binlog回复数据库误删除之前。</span><br><span class="line">故障模拟及恢复：</span><br><span class="line">1. 模拟周一23:00的全备</span><br><span class="line">mysqldump -uroot -p -A -R -E --triggers --master-data&#x3D;2  --single-transaction --set-gtid-purged&#x3D;OFF &gt;&#x2F;data&#x2F;backup&#x2F;full.sql</span><br><span class="line">2. 模拟白天的数据变化</span><br><span class="line">Master [(none)]&gt;create database day1 charset utf8;</span><br><span class="line">Master [(none)]&gt;use day1</span><br><span class="line">Master [day1]&gt;create table t1(id int);</span><br><span class="line">Master [day1]&gt;insert into t1 values(1),(2),(3);</span><br><span class="line">Master [day1]&gt;commit;</span><br><span class="line">Master [world]&gt;update city set countrycode&#x3D;&#39;CHN&#39;;</span><br><span class="line">Master [world]&gt;commit;</span><br><span class="line">模拟磁盘损坏：</span><br><span class="line">[root@db01 data]# \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*</span><br><span class="line">3. 恢复故障</span><br><span class="line">[root@db01 data]# pkill mysqld</span><br><span class="line">[root@db01 data]# \rm -rf &#x2F;data&#x2F;mysql&#x2F;data&#x2F;*</span><br><span class="line">4. 恢复思路</span><br><span class="line">    1.检查备份可用性</span><br><span class="line">    2.从备份中获取二进制日志位置</span><br><span class="line">    3.根据日志位置截取需要的二进制日志</span><br><span class="line">    4.初始化数据库,并启动</span><br><span class="line">    5.恢复全备</span><br><span class="line">    6.恢复二进制日志</span><br></pre></td></tr></table></figure><h2 id="压缩备份并添加时间戳"><a href="#压缩备份并添加时间戳" class="headerlink" title="压缩备份并添加时间戳"></a>压缩备份并添加时间戳</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F-%T).sql.gz</span><br><span class="line"></span><br><span class="line">mysqldump备份的恢复方式（在生产中恢复要谨慎，恢复会删除重复的表）</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;backup&#x2F;full_2018-06-28.sql</span><br><span class="line"></span><br><span class="line">注意：</span><br><span class="line">1、mysqldump在备份和恢复时都需要mysql实例启动为前提。</span><br><span class="line">2、一般数据量级100G以内，大约15-45分钟可以恢复，数据量级很大很大的时候（PB、EB）</span><br><span class="line">3、mysqldump是覆盖形式恢复的方法。</span><br><span class="line"></span><br><span class="line">一般我们认为，在同数据量级，物理备份要比逻辑备份速度快.</span><br><span class="line">逻辑备份的优势:</span><br><span class="line">1、可读性强</span><br><span class="line">2、压缩比很高</span><br></pre></td></tr></table></figure><h1 id="企业故障恢复案例"><a href="#企业故障恢复案例" class="headerlink" title="企业故障恢复案例"></a>企业故障恢复案例</h1><h2 id="背景环境"><a href="#背景环境" class="headerlink" title="背景环境"></a>背景环境</h2><p>正在运行的网站系统，mysql-5.7.20 数据库，数据量50G，日业务增量1-5M。</p><h2 id="备份策略-1"><a href="#备份策略-1" class="headerlink" title="备份策略"></a>备份策略</h2><p>每天23:00点，计划任务调用mysqldump执行全备脚本</p><h2 id="故障时间点"><a href="#故障时间点" class="headerlink" title="故障时间点"></a>故障时间点</h2><p>年底故障演练:模拟周三上午10点误删除数据库，并进行恢复.</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>1、停业务，避免数据的二次伤害<br>2、找一个临时库，恢复周三23：00全备<br>3、截取周二23：00  — 周三10点误删除之间的binlog，恢复到临时库<br>4、测试可用性和完整性<br>5、<br>    5.1 方法一：直接使用临时库顶替原生产库，前端应用割接到新库<br>    5.2 方法二：将误删除的表导出，导入到原生产库<br>6、开启业务<br>处理结果：经过20分钟的处理，最终业务恢复正常</p><h2 id="故障模拟演练"><a href="#故障模拟演练" class="headerlink" title="故障模拟演练"></a>故障模拟演练</h2><h3 id="准备数据"><a href="#准备数据" class="headerlink" title="准备数据"></a>准备数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database backup;</span><br><span class="line">use backup</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values(1),(2),(3);</span><br><span class="line">commit;</span><br><span class="line">rm -rf &#x2F;backup&#x2F;*</span><br></pre></td></tr></table></figure><h3 id="周二-23：00全"><a href="#周二-23：00全" class="headerlink" title="周二 23：00全"></a>周二 23：00全</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --set-gtid-purged&#x3D;OFF --master-data&#x3D;2  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br></pre></td></tr></table></figure><h3 id="模拟周二-23：00到周三-10点之间数据变化"><a href="#模拟周二-23：00到周三-10点之间数据变化" class="headerlink" title="模拟周二 23：00到周三 10点之间数据变化"></a>模拟周二 23：00到周三 10点之间数据变化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">use backup</span><br><span class="line">insert into t1 values(11),(22),(33);</span><br><span class="line">commit;</span><br><span class="line">create table t2 (id int);</span><br><span class="line">insert into t2 values(11),(22),(33);</span><br></pre></td></tr></table></figure><h3 id="模拟故障-删除表-只是模拟，不代表生产操作"><a href="#模拟故障-删除表-只是模拟，不代表生产操作" class="headerlink" title="模拟故障,删除表(只是模拟，不代表生产操作)"></a>模拟故障,删除表(只是模拟，不代表生产操作)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database backup;</span><br></pre></td></tr></table></figure><h2 id="恢复过程"><a href="#恢复过程" class="headerlink" title="恢复过程"></a>恢复过程</h2><h3 id="准备临时数据库（多实例3307）"><a href="#准备临时数据库（多实例3307）" class="headerlink" title="准备临时数据库（多实例3307）"></a>准备临时数据库（多实例3307）</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld3307</span><br></pre></td></tr></table></figure><h3 id="准备备份"><a href="#准备备份" class="headerlink" title="准备备份"></a>准备备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（1）准备全备：</span><br><span class="line">cd &#x2F;backup</span><br><span class="line">gunzip full_2018-10-17.sql.gz </span><br><span class="line">（2）截取二进制日志</span><br><span class="line">-- CHANGE MASTER TO MASTER_LOG_FILE&#x3D;&#39;mysql-bin.000036&#39;, MASTER_LOG_POS&#x3D;793;</span><br><span class="line">mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:6-7&#39; &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000036 &gt;&#x2F;backup&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h3 id="恢复备份到临时库"><a href="#恢复备份到临时库" class="headerlink" title="恢复备份到临时库"></a>恢复备份到临时库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql -S &#x2F;data&#x2F;3307&#x2F;mysql.sock</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;backup&#x2F;full_2018-10-17.sql</span><br><span class="line">source &#x2F;backup&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h3 id="将故障表导出并恢复到生产"><a href="#将故障表导出并恢复到生产" class="headerlink" title="将故障表导出并恢复到生产"></a>将故障表导出并恢复到生产</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">mysqldump   -S &#x2F;data&#x2F;3307&#x2F;mysql.sock backup t1 &gt;&#x2F;backup&#x2F;t1.sql</span><br><span class="line">mysql -uroot -p123 </span><br><span class="line">set sql_log_bin&#x3D;0</span><br><span class="line">use backup </span><br><span class="line">source &#x2F;backup&#x2F;t1.sql;</span><br></pre></td></tr></table></figure><h1 id="备份时优化参数"><a href="#备份时优化参数" class="headerlink" title="备份时优化参数"></a>备份时优化参数</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(1) max_allowed_packet   最大的数据包大小</span><br><span class="line"></span><br><span class="line">mysqldump -uroot -p123 -A  -R  --triggers --set-gtid-purged&#x3D;OFF --master-data&#x3D;2 max_allowed_packet&#x3D;128M  --single-transaction|gzip &gt; &#x2F;backup&#x2F;full_$(date +%F).sql.gz</span><br><span class="line"></span><br><span class="line">(2) 增加key_buffer_size    (临时表有关)</span><br><span class="line">(3) 分库分表并发备份       (作业)</span><br><span class="line">(4) 架构分离,分别备份      (架构拆分,分布式备份)</span><br></pre></td></tr></table></figure><h1 id="MySQL物理备份工具-xtrabackup-XBK、Xbackup"><a href="#MySQL物理备份工具-xtrabackup-XBK、Xbackup" class="headerlink" title="MySQL物理备份工具-xtrabackup(XBK、Xbackup)"></a>MySQL物理备份工具-xtrabackup(XBK、Xbackup)</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</span><br><span class="line">yum -y install perl perl-devel libaio libaio-devel perl-Time-HiRes perl-DBD-MySQL libev</span><br></pre></td></tr></table></figure><h3 id="下载软件并安装"><a href="#下载软件并安装" class="headerlink" title="下载软件并安装"></a>下载软件并安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.12/binary/redhat/7/x86_64/percona-xtrabackup-24-2.4.12-1.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">https://www.percona.com/downloads/XtraBackup/Percona-XtraBackup-2.4.4/binary/redhat/6/x86_64/percona-xtrabackup-24-2.4.4-1.el6.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum -y install percona-xtrabackup-24-2.4.4-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="备份命令介绍"><a href="#备份命令介绍" class="headerlink" title="备份命令介绍"></a>备份命令介绍</h2><p>xtrabackup<br>innobackupex </p><h2 id="备份方式——物理备份"><a href="#备份方式——物理备份" class="headerlink" title="备份方式——物理备份"></a>备份方式——物理备份</h2><p>（1）对于非Innodb表（比如 myisam）是，锁表cp数据文件，属于一种温备份。<br>（2）对于Innodb的表（支持事务的），不锁表，拷贝数据页，最终以数据文件的方式保存下来，把一部分redo和undo一并备走，属于热备方式。</p><h2 id="xbk-在innodb表备份恢复的流程"><a href="#xbk-在innodb表备份恢复的流程" class="headerlink" title="xbk 在innodb表备份恢复的流程"></a>xbk 在innodb表备份恢复的流程</h2><ol><li>xbk备份执行的瞬间,立即触发ckpt,已提交的数据脏页,从内存刷写到磁盘,并记录此时的LSN号</li><li>备份时，拷贝磁盘数据页，并且记录备份过程中产生的redo和undo一起拷贝走,也就是checkpoint LSN之后的日志</li><li>在恢复之前，模拟Innodb“自动故障恢复”的过程，将redo（前滚）与undo（回滚）进行应用</li><li>恢复过程是cp 备份到原来数据目录下</li></ol><h2 id="xbk-在非innodb表备份恢复的流程"><a href="#xbk-在非innodb表备份恢复的流程" class="headerlink" title="xbk 在非innodb表备份恢复的流程"></a>xbk 在非innodb表备份恢复的流程</h2><ol><li>FTWRL ，触发全局锁。</li><li>拷贝非工nnoDB表的数据</li><li>解锁</li><li>再次统计LSN，写入到专用文件。记录二进制日志位置记录下来。所有备份文件统一存放在一个目录下。</li></ol><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><ol><li><p>数据库启动</p></li><li><p>能连上数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br></pre></td></tr></table></figure></li><li><p>默认会读取[mysqld] —–&gt; datadir=xxx</p></li><li><p>服务器端工具</p></li></ol><h2 id="innobackupex使用"><a href="#innobackupex使用" class="headerlink" title="innobackupex使用"></a>innobackupex使用</h2><h3 id="全备"><a href="#全备" class="headerlink" title="全备"></a>全备</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]<span class="comment"># innobackupex --user=root --password=123  /data/backup</span></span><br></pre></td></tr></table></figure><h3 id="自主定制备份路径名"><a href="#自主定制备份路径名" class="headerlink" title="自主定制备份路径名"></a>自主定制备份路径名</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]<span class="comment"># innobackupex --user=root --password=123 --no-timestamp /data/backup/full_`data +%F`</span></span><br></pre></td></tr></table></figure><h3 id="备份集中多出来的文件"><a href="#备份集中多出来的文件" class="headerlink" title="备份集中多出来的文件"></a>备份集中多出来的文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">-rw-r----- 1 root root       24 Jun 29 09:59 xtrabackup_binlog_info</span><br><span class="line">-rw-r----- 1 root root      119 Jun 29 09:59 xtrabackup_checkpoints</span><br><span class="line">-rw-r----- 1 root root      489 Jun 29 09:59 xtrabackup_info</span><br><span class="line">-rw-r----- 1 root root     2560 Jun 29 09:59 xtrabackup_logfile</span><br><span class="line"></span><br><span class="line">xtrabackup_binlog_info ：（备份时刻的binlog位置）</span><br><span class="line">[root@db01 full]<span class="comment"># cat xtrabackup_binlog_info </span></span><br><span class="line">mysql-bin.000003    536749</span><br><span class="line">79de40d3-5ff3-11e9-804a-000c2928f5dd:1-7</span><br><span class="line">记录的是备份时刻，binlog的文件名字和当时的结束的position，可以用来作为截取binlog时的起点。</span><br><span class="line"></span><br><span class="line">xtrabackup_checkpoints ：</span><br><span class="line">backup_type = full-backuped</span><br><span class="line">from_lsn = 0            上次所到达的LSN号(对于全备就是从0开始,对于增量有别的显示方法)</span><br><span class="line">to_lsn = 160683027      备份开始时间(ckpt)点数据页的LSN    </span><br><span class="line">last_lsn = 160683036    备份结束后，redo日志最终的LSN</span><br><span class="line">compact = 0</span><br><span class="line">recover_binlog_info = 0</span><br></pre></td></tr></table></figure><p>（1）备份时刻，立即将已经commit过的，内存中的数据页刷新到磁盘(CKPT).开始备份数据，数据文件的LSN会停留在to_lsn位置。<br>（2）备份时刻有可能会有其他的数据写入，已备走的数据文件就不会再发生变化了。<br>（3）在备份过程中，备份软件会一直监控着redo的undo，如果一旦有变化会将日志也一并备走，并记录LSN到last_lsn。<br>从to_lsn  —-》last_lsn 就是，备份过程中产生的数据变化.</p><h3 id="全备的恢复"><a href="#全备的恢复" class="headerlink" title="全备的恢复"></a>全备的恢复</h3><h4 id="准备备份（Prepared）"><a href="#准备备份（Prepared）" class="headerlink" title="准备备份（Prepared）"></a>准备备份（Prepared）</h4><p>将redo进行重做，已提交的写到数据文件，未提交的使用undo回滚掉。模拟了CSR的过程</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]<span class="comment"># innobackupex --apply-log  /backup/full</span></span><br></pre></td></tr></table></figure><h4 id="恢复备份"><a href="#恢复备份" class="headerlink" title="恢复备份"></a>恢复备份</h4><p>前提：<br>1、被恢复的目录是空<br>2、被恢复的数据库的实例是关闭<br>systemctl stop mysqld</p><p>创建新目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 backup]<span class="comment"># mkdir /data/mysql1</span></span><br></pre></td></tr></table></figure><h4 id="数据授权"><a href="#数据授权" class="headerlink" title="数据授权"></a>数据授权</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /data/mysql1</span><br></pre></td></tr></table></figure><h4 id="恢复备份-1"><a href="#恢复备份-1" class="headerlink" title="恢复备份"></a>恢复备份</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 full]<span class="comment"># cp -a /backup/full/* /data/mysql1/</span></span><br></pre></td></tr></table></figure><h4 id="启动数据库"><a href="#启动数据库" class="headerlink" title="启动数据库"></a>启动数据库</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">datadir=/data/mysql1</span><br><span class="line">[root@db01 mysql1]<span class="comment"># chown -R mysql.mysql /data/mysql1</span></span><br><span class="line">systemctl start mysqld</span><br></pre></td></tr></table></figure><h2 id="innobackupex-增量备份-incremental"><a href="#innobackupex-增量备份-incremental" class="headerlink" title="innobackupex 增量备份(incremental)"></a>innobackupex 增量备份(incremental)</h2><p>（1）增量备份的方式，是参照上次备份的LSN号码并备份在此基础上变化的数据页，并且会将备份过程中产生新的变化的redo一并备份走。<br>（2）增量备份无法单独恢复。必须基于全备进行恢复。<br>（3）所有增量必须要按顺序合并到全备中。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200809133949111.png" alt="image-20200809133949111"></p><h4 id="增量备份命令"><a href="#增量备份命令" class="headerlink" title="增量备份命令"></a>增量备份命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">（1）删掉原来备份</span><br><span class="line">略.</span><br><span class="line">（2）全备（周日）</span><br><span class="line">[root@db01 backup]# innobackupex --user&#x3D;root --password --no-timestamp &#x2F;backup&#x2F;full &gt;&amp;&#x2F;tmp&#x2F;xbk_full.log</span><br><span class="line">（3）模拟周一数据变化</span><br><span class="line">db01 [(none)]&gt;create database cs charset utf8;</span><br><span class="line">db01 [(none)]&gt;use cs</span><br><span class="line">db01 [cs]&gt;create table t1 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t1 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line"></span><br><span class="line">（4）第一次增量备份（周一）</span><br><span class="line">innobackupex --user&#x3D;root --password&#x3D;123 --no-timestamp --incremental --incremental-basedir&#x3D;&#x2F;backup&#x2F;full  &#x2F;backup&#x2F;inc1 &amp;&gt;&#x2F;tmp&#x2F;inc1.log</span><br><span class="line">（5）模拟周二数据</span><br><span class="line">db01 [cs]&gt;create table t2 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t2 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line">（6）周二增量</span><br><span class="line"> innobackupex --user&#x3D;root --password&#x3D;123 --no-timestamp --incremental --incremental-basedir&#x3D;&#x2F;backup&#x2F;inc1  &#x2F;backup&#x2F;inc2  &amp;&gt;&#x2F;tmp&#x2F;inc2.log</span><br><span class="line">（7）模拟周三数据变化</span><br><span class="line">db01 [cs]&gt;create table t3 (id int);</span><br><span class="line">db01 [cs]&gt;insert into t3 values(1),(2),(3);</span><br><span class="line">db01 [cs]&gt;commit;</span><br><span class="line">db01 [cs]&gt;drop database cs;</span><br></pre></td></tr></table></figure><h4 id="恢复到周三误drop之前的数据状态"><a href="#恢复到周三误drop之前的数据状态" class="headerlink" title="恢复到周三误drop之前的数据状态"></a>恢复到周三误drop之前的数据状态</h4><p>恢复思路：</p><ol><li> 挂出维护页，停止当天的自动备份脚本</li><li> 检查备份：周日full+周一inc1+周二inc2，周三的完整二进制日志</li><li> 进行备份整理（细节），截取关键的二进制日志（从备份——误删除之前）</li><li> 测试库进行备份恢复及日志恢复</li><li> 应用进行测试无误，开启业务</li><li> 此次工作的总结</li></ol><h4 id="恢复过程-1"><a href="#恢复过程-1" class="headerlink" title="恢复过程"></a>恢复过程</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">1. 检查备份</span><br><span class="line">1afe8136-601d-11e9-9022-000c2928f5dd:7-9</span><br><span class="line">2. 备份整理（apply-log）+合并备份（full+inc1+inc2）</span><br><span class="line">(1) 全备的整理</span><br><span class="line">[root@db01 one]<span class="comment"># innobackupex --apply-log --redo-only /data/backup/full</span></span><br><span class="line">(2) 合并inc1到full中</span><br><span class="line">[root@db01 one]<span class="comment"># innobackupex --apply-log --redo-only --incremental-dir=/data/backup/inc1 /data/backup/full</span></span><br><span class="line">(3) 合并inc2到full中</span><br><span class="line">[root@db01 one]<span class="comment"># innobackupex --apply-log  --incremental-dir=/data/backup/inc2 /data/backup/full</span></span><br><span class="line">(4) 最后一次整理全备</span><br><span class="line">[root@db01 backup]<span class="comment">#  innobackupex --apply-log  /data/backup/full</span></span><br><span class="line">3. 截取周二 23:00 到drop 之前的 binlog </span><br><span class="line">[root@db01 inc2]<span class="comment"># mysqlbinlog --skip-gtids --include-gtids=&#x27;1afe8136-601d-11e9-9022-000c2928f5dd:7-9&#x27; /data/binlog/mysql-bin.000009 &gt;/data/backup/binlog.sql</span></span><br><span class="line">4. 进行恢复</span><br><span class="line">[root@db01 backup]<span class="comment"># mkdir /data/mysql/data2 -p</span></span><br><span class="line">[root@db01 full]<span class="comment"># cp -a * /data/mysql/data2</span></span><br><span class="line">[root@db01 backup]<span class="comment"># chown -R mysql.  /data/*</span></span><br><span class="line">[root@db01 backup]<span class="comment"># systemctl stop mysqld</span></span><br><span class="line">vim /etc/my.cnf</span><br><span class="line">datadir=/data/mysql/data2</span><br><span class="line">systemctl start mysqld</span><br><span class="line">Master [(none)]&gt;<span class="built_in">set</span> sql_log_bin=0;</span><br><span class="line">Master [(none)]&gt;<span class="built_in">source</span> /data/backup/binlog.sql</span><br></pre></td></tr></table></figure><p>小细节:<br>1.每次xbk恢复后，可以reset master清除无用的gtid信息<br>2.每次故障恢复完后，立即做全备。<br>3.如果出现增量合并不了怎么办?<br>FULL+binlog方式恢复</p><h3 id="作业1"><a href="#作业1" class="headerlink" title="作业1"></a>作业1</h3><p> Xtrabackup企业级增量恢复实战<br>背景：<br>某大型网站，mysql数据库，数据量500G，每日更新量20M-30M<br>备份策略：<br>xtrabackup，每周日0:00进行全备，周一到周六00:00进行增量备份。<br>故障场景：<br>周三下午2点出现数据库意外删除表操作。<br>如何恢复？</p><h3 id="作业2"><a href="#作业2" class="headerlink" title="作业2"></a>作业2</h3><p>练习：mysqldump备份恢复例子<br>1、创建一个数据库 oldboy<br>2、在oldboy下创建一张表t1<br>3、插入5行任意数据<br>4、全备<br>5、插入两行数据，任意修改3行数据，删除1行数据<br>6、删除所有数据<br>7、再t1中又插入5行新数据，修改3行数据<br>需求，跳过第六步恢复表数据</p><h3 id="作业4：备份集中单独恢复表"><a href="#作业4：备份集中单独恢复表" class="headerlink" title="作业4：备份集中单独恢复表"></a>作业4：备份集中单独恢复表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">思考:在之前的项目案例中,如果误删除的表只有10M,而备份有500G,该如何快速恢复误删除表?</span><br><span class="line">提示：</span><br><span class="line">drop table city;</span><br><span class="line">create table city like city_bak;</span><br><span class="line">alter table city discard tablespace;</span><br><span class="line">cp &#x2F;backup&#x2F;full&#x2F;world&#x2F;city.ibd  &#x2F;application&#x2F;mysql&#x2F;data&#x2F;world&#x2F;</span><br><span class="line">chown -R mysql.mysql  &#x2F;application&#x2F;mysql&#x2F;data&#x2F;world&#x2F;city.ibd </span><br><span class="line">alter table city import  tablespace;</span><br></pre></td></tr></table></figure><h3 id="作业5：-从mysqldump-全备中获取库和表的备份"><a href="#作业5：-从mysqldump-全备中获取库和表的备份" class="headerlink" title="作业5： 从mysqldump 全备中获取库和表的备份"></a>作业5： 从mysqldump 全备中获取库和表的备份</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1、获得表结构</span><br><span class="line"># sed -e&#39;&#x2F;.&#x2F;&#123;H;$!d;&#125;&#39; -e &#39;x;&#x2F;CREATE TABLE &#96;city&#96;&#x2F;!d;q&#39;  full.sql&gt;createtable.sql</span><br><span class="line"></span><br><span class="line">2、获得INSERT INTO 语句，用于数据的恢复</span><br><span class="line"></span><br><span class="line"># grep -i &#39;INSERT INTO &#96;city&#96;&#39;  full.sqll &gt;data.sql &amp;</span><br><span class="line"></span><br><span class="line">3.获取单库的备份</span><br><span class="line"></span><br><span class="line"># sed -n &#39;&#x2F;^-- Current Database: &#96;world&#96;&#x2F;,&#x2F;^-- Current Database: &#96;&#x2F;p&#39; all.sql &gt;world.sql</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-06-日志管理</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-06-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-06-%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p><img src="https://upload-images.jianshu.io/upload_images/16956686-062f0a6b2bc97bb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/605/format/webp" alt="img"></p><h1 id="错误日志-log-error"><a href="#错误日志-log-error" class="headerlink" title="错误日志(log_error)"></a>错误日志(log_error)</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>记录MySQL启动\关闭\日常运行过程中,状态信息,警告,错误信息。帮助管理员定位数据库问题，提供帮助</p><h2 id="错误日志配置"><a href="#错误日志配置" class="headerlink" title="错误日志配置"></a>错误日志配置</h2><p>默认就是开启的:  /数据路径下/hostname.err</p><p>手工设定:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;select @@log_error;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">log_error=/var/<span class="built_in">log</span>/mysql.log</span><br><span class="line">log_timestamps=system</span><br><span class="line"><span class="comment"># 说明：日志目录必须提前创建，并且mysql有写入权限</span></span><br></pre></td></tr></table></figure><p>重启生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;log_error&#39;;</span><br></pre></td></tr></table></figure><h2 id="日志内容查看"><a href="#日志内容查看" class="headerlink" title="日志内容查看"></a>日志内容查看</h2><p>主要关注[ERROR],看上下文</p><h1 id="binlog-binary-logs-二进制日志"><a href="#binlog-binary-logs-二进制日志" class="headerlink" title="binlog(binary logs):二进制日志 *****"></a>binlog(binary logs):二进制日志 *****</h1><p>主要记录数据库变化(DDL,DCL,DML)性质的日志，是逻辑层日志。</p><h2 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h2><p>(1)备份恢复必须依赖二进制日志<br>(2)主从环境必须依赖二进制日志</p><h2 id="binlog配置-5-7以后必须加server-id"><a href="#binlog配置-5-7以后必须加server-id" class="headerlink" title="binlog配置 (5.7以后必须加server_id)"></a>binlog配置 (5.7以后必须加server_id)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">注意：MySQL8.0以前默认是没有开启二进制日志的。</span><br><span class="line">基础参数查看:</span><br><span class="line">开关:</span><br><span class="line">[(none)]&gt;select @@log_bin;</span><br><span class="line">日志路径及名字</span><br><span class="line">[(none)]&gt;select @@log_bin_basename;</span><br><span class="line">服务ID号:</span><br><span class="line">[(none)]&gt;select @@server_id;</span><br><span class="line">二进制日志格式:</span><br><span class="line">[(none)]&gt;select @@binlog_format;</span><br><span class="line">双一标准之二:</span><br><span class="line">[(none)]&gt;select @@sync_binlog;</span><br></pre></td></tr></table></figure><h3 id="创建日志目录"><a href="#创建日志目录" class="headerlink" title="创建日志目录"></a>创建日志目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /data/binlog</span><br><span class="line">chown -R mysql.mysql /data/binlog</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">server_id=6          <span class="comment">#&gt;5.6中，单机可以不需要此参数 </span></span><br><span class="line">log_bin=/data/binlog/mysql-bin <span class="comment">#日志存放目录+日志名前缀</span></span><br><span class="line">binlog_format=row<span class="comment">#控制binlog的记录格式为row模式</span></span><br><span class="line">sync_binlog=1   <span class="comment">#binlog日志刷盘策略，双一中的第二个1</span></span><br></pre></td></tr></table></figure><p>双一说明:<br>innodb__flush_log_at_trx_commit=1 每次事务提交，必然log buffer中 redo落到磁盘。<br>sync_binlog=1 每次事务提交，必然保证binlog cache中的日志落到磁盘。</p><h3 id="重启数据库生效"><a href="#重启数据库生效" class="headerlink" title="重启数据库生效"></a>重启数据库生效</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 mysql]<span class="comment"># systemctl start mysqld</span></span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h3><p>server_id=3306<br>主要是在主从复制过程中必须要加的,但是在5.7版本中,要用以下参数(log_bin),开启binlog日志,即使是单机也是必加的<br>log_bin=/data/binlog/mysql-bin<br>(1)开启二进制日志功能<br>(2)设置二进制日志目录及名称前缀<br>binlog_format=row<br>binlog的记录格式??</p><h2 id="binlog记录了什么"><a href="#binlog记录了什么" class="headerlink" title="binlog记录了什么?"></a>binlog记录了什么?</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>binlog是SQL层的功能。记录的是变更SQL语句，不记录查询语句。</p><h3 id="记录SQL语句种类"><a href="#记录SQL语句种类" class="headerlink" title="记录SQL语句种类"></a>记录SQL语句种类</h3><ul><li>DDL ：原封不动的记录当前DDL(statement语句方式)。</li><li>DCL ：原封不动的记录当前DCL(statement语句方式)。</li><li>DML ：只记录已经提交的事务DML</li></ul><h3 id="DML三种记录方式"><a href="#DML三种记录方式" class="headerlink" title="DML三种记录方式"></a>DML三种记录方式</h3><p>binlog_format（binlog的记录格式）参数影响<br>（1）statement（5.6默认）SBR(statement based replication) ：语句模式原封不动的记录当前DML。<br>（2）ROW(5.7 默认值) RBR(ROW based replication) ：记录数据行的变化(用户看不懂，需要工具分析)<br>（3）mixed（混合）MBR(mixed based replication)模式  ：以上两种模式的混合</p><h3 id="SBR与RBR模式的对比"><a href="#SBR与RBR模式的对比" class="headerlink" title="SBR与RBR模式的对比"></a>SBR与RBR模式的对比</h3><p>STATEMENT：可读性较高，日志量少，但是不够严谨<br>ROW      ：可读性很低，日志量大，足够严谨<br>update t1 set xxx=xxx where id&gt;1000   ? –&gt;一共500w行，row模式怎么记录的日志</p><p> 为什么row模式严谨？<br>id  name    intime<br>insert into t1 values(1,’zs’,now())<br>我们建议使用：row记录模式</p><h2 id="event（事件）是什么"><a href="#event（事件）是什么" class="headerlink" title="event（事件）是什么"></a>event（事件）是什么</h2><h3 id="事件的简介"><a href="#事件的简介" class="headerlink" title="事件的简介"></a>事件的简介</h3><p>二进制日志的最小记录单元<br>对于DDL,DCL,一个语句就是一个event<br>对于DML语句来讲:只记录已提交的事务。<br>例如以下列子,就被分为了4个event</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">start  stop</span><br><span class="line">begin;      120  - 340</span><br><span class="line">DML1        340  - 460</span><br><span class="line">DML2        460  - 550</span><br><span class="line">commit;     550  - 760</span><br></pre></td></tr></table></figure><h3 id="event的组成"><a href="#event的组成" class="headerlink" title="event的组成"></a>event的组成</h3><p>三部分构成:<br>(1) 事件的开始标识<br>(2) 事件内容<br>(3) 事件的结束标识<br>Position:<br>开始标识: at 194<br>结束标识: end_log_pos 254</p><p>194 254是某个事件在binlog中的相对位置号<br>位置号的作用：为了方便我们截取事件</p><h2 id="日志文件查看"><a href="#日志文件查看" class="headerlink" title="日志文件查看"></a>日志文件查看</h2><h3 id="查看日志的开启情况"><a href="#查看日志的开启情况" class="headerlink" title="查看日志的开启情况"></a>查看日志的开启情况</h3><p>log_bin参数设置的路径,可以找到二进制日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show variables like &#39;%log_bin%&#39;;</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">| Variable_name                   | Value                        |</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">| log_bin                         | ON                           |</span><br><span class="line">| log_bin_basename                                                                       | &#x2F;data&#x2F;binlog&#x2F;mysql-bin       |</span><br><span class="line">| log_bin_index                   | &#x2F;data&#x2F;binlog&#x2F;mysql-bin.index |</span><br><span class="line">| log_bin_trust_function_creators | OFF                          |</span><br><span class="line">| log_bin_use_v1_row_events       | OFF                          |</span><br><span class="line">| sql_log_bin                     | ON                           |</span><br><span class="line">+---------------------------------+------------------------------+</span><br><span class="line">6 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><h3 id="查看一共多少个binlog"><a href="#查看一共多少个binlog" class="headerlink" title="查看一共多少个binlog"></a>查看一共多少个binlog</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show binary logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">1 row in set (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;flush logs;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;show binary logs;</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| Log_name         | File_size |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">| mysql-bin.000001 |       201 |</span><br><span class="line">| mysql-bin.000002 |       201 |</span><br><span class="line">| mysql-bin.000003 |       154 |</span><br><span class="line">+------------------+-----------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="查看mysql正在使用的日志文件"><a href="#查看mysql正在使用的日志文件" class="headerlink" title="查看mysql正在使用的日志文件"></a>查看mysql正在使用的日志文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt;show master status;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line">| mysql-bin.000003 |      154 |              |                  |                   |</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br></pre></td></tr></table></figure><p>file：当前MySQL正在使用的文件名<br>Position：最后一个事件的结束位置号</p><h2 id="日志内容查看-1"><a href="#日志内容查看-1" class="headerlink" title="日志内容查看"></a>日志内容查看</h2><h3 id="event查看"><a href="#event查看" class="headerlink" title="event查看"></a>event查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Master [binlog]&gt;show binlog events in &#39;mysql-bin.000003&#39;;</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line">| Log_name         | Pos | Event_type     | Server_id | End_log_pos | Info                                   |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line">| mysql-bin.000003 |   4 | Format_desc    |         6 |         123 | Server ver: 5.7.20-log, Binlog ver: 4  |</span><br><span class="line">| mysql-bin.000003 | 123 | Previous_gtids |         6 |         154 |                                        |</span><br><span class="line">| mysql-bin.000003 | 154 | Anonymous_Gtid |         6 |         219 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;   |</span><br><span class="line">| mysql-bin.000003 | 219 | Query          |         6 |         319 | create database binlog                 |</span><br><span class="line">| mysql-bin.000003 | 319 | Anonymous_Gtid |         6 |         384 | SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;   |</span><br><span class="line">| mysql-bin.000003 | 384 | Query          |         6 |         486 | use &#96;binlog&#96;; create table t1 (id int) |</span><br><span class="line">+------------------+-----+----------------+-----------+-------------+----------------------------------------+</span><br><span class="line"></span><br><span class="line">Log_name：binlog文件名</span><br><span class="line">Pos：开始的position    *****</span><br><span class="line">Event_type：事件类型</span><br><span class="line">Format_desc：格式描述，每一个日志文件的第一个事件，多用户没有意义，MySQL识别binlog必要信息</span><br><span class="line">Server_id：mysql服务号标识</span><br><span class="line">End_log_pos：事件的结束位置号 *****</span><br><span class="line">Info：事件内容*****</span><br><span class="line">补充:</span><br><span class="line">SHOW BINLOG EVENTS</span><br><span class="line">   [IN &#39;log_name&#39;]</span><br><span class="line">   [FROM pos]</span><br><span class="line">   [LIMIT [offset,] row_count]</span><br><span class="line">[root@db01 binlog]# mysql -e &quot;show binlog events in &#39;mysql-bin.000004&#39;&quot; |grep drop</span><br></pre></td></tr></table></figure><h3 id="binlog文件内容详细查看"><a href="#binlog文件内容详细查看" class="headerlink" title="binlog文件内容详细查看"></a>binlog文件内容详细查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006 &gt; &#x2F;tmp&#x2F;a.sql</span><br><span class="line">mysqlbinlog --base64-output&#x3D;decode-rows -vvv &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003</span><br><span class="line">mysqlbinlog  -d binlog &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003</span><br><span class="line">[root@db01 binlog]# mysqlbinlog --start-datetime&#x3D;&#39;2019-05-06 17:00:00&#39; --stop-datetime&#x3D;&#39;2019-05-06 17:01:00&#39;  &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 </span><br></pre></td></tr></table></figure><h2 id="基于Position号进行日志截取"><a href="#基于Position号进行日志截取" class="headerlink" title="基于Position号进行日志截取"></a>基于Position号进行日志截取</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">核心就是找截取的起点和终点</span><br><span class="line">--start-position&#x3D;321</span><br><span class="line">--stop-position&#x3D;513</span><br><span class="line">mysqlbinlog --start-position&#x3D;219 --stop-position&#x3D;1347 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000003 &gt;&#x2F;tmp&#x2F;bin.sql</span><br><span class="line"></span><br><span class="line">案例: 使用binlog日志进行数据恢复</span><br><span class="line">模拟:</span><br><span class="line">1. </span><br><span class="line">[(none)]&gt;create database binlog charset utf8;</span><br><span class="line">2. </span><br><span class="line">[(none)]&gt;use binlog;</span><br><span class="line">[binlog]&gt;create table t1(id int);</span><br><span class="line">3. </span><br><span class="line">[binlog]&gt;insert into t1 values(1);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">[binlog]&gt;insert into t1 values(2);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">[binlog]&gt;insert into t1 values(3);</span><br><span class="line">[binlog]&gt;commit;</span><br><span class="line">4. </span><br><span class="line">[binlog]&gt;drop database binlog;</span><br><span class="line">恢复:</span><br><span class="line">[(none)]&gt;show master status ;</span><br><span class="line">[(none)]&gt;show binlog events in &#39;mysql-bin.000004&#39;;</span><br><span class="line">[root@db01 binlog]# mysqlbinlog --start-position&#x3D;1227 --stop-position&#x3D;2342 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &gt;&#x2F;tmp&#x2F;bin.sql</span><br><span class="line">[(none)]&gt;set sql_Log_bin&#x3D;0;</span><br><span class="line">[(none)]&gt;source &#x2F;tmp&#x2F;bin.sql</span><br><span class="line">[(none)]&gt;set sql_Log_bin&#x3D;1;</span><br><span class="line"></span><br><span class="line">binlog记录不单单一个数据库的操作，可能对其他数据库重复操作? -d 指定数据库</span><br><span class="line">[root@db01 binlog]# mysqlbinlog --start-position&#x3D;1227 --stop-position&#x3D;2342 -d binlog &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &gt;&#x2F;tmp&#x2F;bin.sql</span><br><span class="line"></span><br><span class="line">需要的日志在多个文件中分布</span><br><span class="line">起点:假如，mysql-bin.000001 , 4600</span><br><span class="line">终点:一般是最后一个文件，假设mysql-bin.000002</span><br><span class="line">mysqlbinlog --start-datetime&#x3D;  --stop-datetime&#x3D; mysql-bin.000001 mysql-bin.000002</span><br><span class="line"></span><br><span class="line">案例:</span><br><span class="line">1. 备份策略每天全备,有全量的二进制日志</span><br><span class="line">2. 业务中一共10个库,其中一个被误drop了</span><br><span class="line">3. 需要在其他9个库正常工作过程中进行数据恢复</span><br><span class="line"></span><br><span class="line">binlog实际上是我们数据恢复时配合备份一起恢复数据的手段</span><br></pre></td></tr></table></figure><h2 id="binlog日志的GTID新特性"><a href="#binlog日志的GTID新特性" class="headerlink" title="binlog日志的GTID新特性"></a>binlog日志的GTID新特性</h2><h3 id="GTID-介绍"><a href="#GTID-介绍" class="headerlink" title="GTID 介绍"></a>GTID 介绍</h3><p>5.6 版本新加的特性,5.7中做了加强<br>5.6 中不开启,没有这个功能.<br>5.7 中的GTID,即使不开也会有自动生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SET @@SESSION.GTID_NEXT&#x3D; &#39;ANONYMOUS&#39;</span><br></pre></td></tr></table></figure><p>查看UUID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@server_uuid;</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /data/3306/auto.cnf</span><br></pre></td></tr></table></figure><h3 id="GTID-Global-Transaction-ID"><a href="#GTID-Global-Transaction-ID" class="headerlink" title="GTID(Global Transaction ID)"></a>GTID(Global Transaction ID)</h3><p>是对于一个已提交事务的编号，并且是一个全局唯一的编号。<br>它的官方定义如下：</p><p>GTID = source_id ：transaction_id<br>7E11FA47-31CA-19E1-9E56-C43AA21293967:29</p><p>重要参数介绍：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">gtid-mode=on</span><br><span class="line">enforce-gtid-consistency=<span class="literal">true</span></span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">Master [(none)]&gt; select @@gtid_mode;</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;create database gtid charset utf8;</span><br><span class="line">Query OK, 1 row affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                      |</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      326 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1 |</span><br><span class="line">+------------------+----------+--------------+------------------+----------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [(none)]&gt;use gtid</span><br><span class="line">Database changed</span><br><span class="line">Master [gtid]&gt;create table t1 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      489 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-2 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;create table t2 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;create table t3 (id int);</span><br><span class="line">Query OK, 0 rows affected (0.02 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |      815 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-4 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;insert into t1 values(1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;commit;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |     1068 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-5 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;begin;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;insert into t2 values(1);</span><br><span class="line">Query OK, 1 row affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;commit;</span><br><span class="line">Query OK, 0 rows affected (0.01 sec)</span><br><span class="line"></span><br><span class="line">Master [gtid]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| File             | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set                        |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">| mysql-bin.000004 |     1321 |              |                  | dff98809-55c3-11e9-a58b-000c2928f5dd:1-6 |</span><br><span class="line">+------------------+----------+--------------+------------------+------------------------------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><h3 id="基于GTID进行查看binlog"><a href="#基于GTID进行查看binlog" class="headerlink" title="基于GTID进行查看binlog"></a>基于GTID进行查看binlog</h3><p>具备GTID后,截取查看某些事务日志:<br>–include-gtids<br>–exclude-gtids</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --include-gtids&#x3D;&#39;dff98809-55c3-11e9-a58b-000c2928f5dd:1-6&#39; --exclude-gtids&#x3D;&#39;dff98809-55c3-11e9-a58b-000c2928f5dd:4&#39;  &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000005</span><br></pre></td></tr></table></figure><h3 id="GTID的幂等性"><a href="#GTID的幂等性" class="headerlink" title="GTID的幂等性"></a>GTID的幂等性</h3><p>开启GTID后,MySQL恢复Binlog时,重复GTID的事务不会再执行了</p><p>怎么办?</p><p>使用 –skip-gtids</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:4&#39; --skip-gtids &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004 &#x2F;data&#x2F;binlog&#x2F;mysql-bin.000004</span><br><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;binlog.sql</span><br><span class="line">set sql_log_bin&#x3D;1;</span><br></pre></td></tr></table></figure><h2 id="使用二进制日志恢复数据案例"><a href="#使用二进制日志恢复数据案例" class="headerlink" title="使用二进制日志恢复数据案例"></a>使用二进制日志恢复数据案例</h2><h3 id="故障环境介绍"><a href="#故障环境介绍" class="headerlink" title="故障环境介绍"></a>故障环境介绍</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">创建了一个库  db, 导入了表t1 ,t1表中录入了很多数据</span><br><span class="line">一个开发人员,drop database db;</span><br><span class="line">没有备份,日志都在.怎么恢复?</span><br><span class="line">思路:找到建库语句到删库之前所有的日志,进行恢复.(开启了GTID模式)</span><br><span class="line">故障案例模拟:</span><br><span class="line">(0) drop database if exists db ;</span><br><span class="line">(1) create database db charset utf8;     </span><br><span class="line">(2) use db;</span><br><span class="line">(3) create table t1 (id int);</span><br><span class="line">(4) insert into t1 values(1),(2),(3);</span><br><span class="line">(5) insert into t1 values(4),(5),(6);</span><br><span class="line">(6) commit</span><br><span class="line">(7) update t1 set id&#x3D;30 where id&#x3D;3;</span><br><span class="line">(8) commit;</span><br><span class="line">(9) delete from t1 where id&#x3D;4;</span><br><span class="line">(10)commit;</span><br><span class="line">(11)insert into t1 values(7),(8),(9);</span><br><span class="line">(12)commit;</span><br><span class="line">(13)drop database db;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">drop database if exists db ;</span><br><span class="line">create database db charset utf8; </span><br><span class="line">use db;</span><br><span class="line">create table t1 (id int);</span><br><span class="line">insert into t1 values(1),(2),(3);</span><br><span class="line">insert into t1 values(4),(5),(6);</span><br><span class="line">commit;</span><br><span class="line">update t1 set id&#x3D;30 where id&#x3D;3;</span><br><span class="line">commit;</span><br><span class="line">delete from t1 where id&#x3D;4;</span><br><span class="line">commit;</span><br><span class="line">insert into t1 values(7),(8),(9);</span><br><span class="line">commit;</span><br><span class="line">drop database db;</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class="line">运行以上语句，模拟故障场景</span><br><span class="line">需求：将数据库恢复到以下状态（提示第9步和第13步是误操作，其他都是正常操作）</span><br></pre></td></tr></table></figure><h3 id="恢复过程-无GTID时的恢复"><a href="#恢复过程-无GTID时的恢复" class="headerlink" title="恢复过程(无GTID时的恢复)"></a>恢复过程(无GTID时的恢复)</h3><ol><li>查看当前使用的 binlog文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">oldguo [db]&gt;show master status ;</span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">| File            | Position | Binlog_Do_DB | Binlog_Ignore_DB | Executed_Gtid_Set |</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |    1873 |              |                  |                  |</span><br><span class="line"></span><br><span class="line">+------------------+----------+--------------+------------------+-------------------+</span><br><span class="line"></span><br><span class="line">2.查看事件：</span><br><span class="line"></span><br><span class="line">第一段：</span><br><span class="line">| mysql-bin.000006 |  813 | Query      |        1 |        907 | use &#96;db&#96;; create table t1 (id int)                  |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |  907 | Query      |        1 |        977 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 |  977 | Table_map  |        1 |        1020 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1020 | Write_rows  |        1 |        1070 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1070 | Table_map  |        1 |        1113 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1113 | Write_rows  |        1 |        1163 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1163 | Xid        |        1 |        1194 | COMMIT &#x2F;* xid&#x3D;74 *&#x2F;                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1194 | Query      |        1 |        1264 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1264 | Table_map  |        1 |        1307 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1307 | Update_rows |        1 |        1353 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1353 | Xid        |        1 |        1384 | COMMIT &#x2F;* xid&#x3D;77 *&#x2F;   </span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position&#x3D;813 --stop-position&#x3D;1384 &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006 &gt;&#x2F;tmp&#x2F;bin1.sql </span><br></pre></td></tr></table></figure><p>第二段：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">| mysql-bin.000006 | 1568 | Query      |        1 |        1638 | BEGIN                                              |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1638 | Table_map  |        1 |        1681 | table_id: 77 (db.t1)                                |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1681 | Write_rows  |        1 |        1731 | table_id: 77 flags: STMT_END_F                      |</span><br><span class="line"></span><br><span class="line">| mysql-bin.000006 | 1731 | Xid        |        1 |        1762 | COMMIT &#x2F;* xid&#x3D;81 *&#x2F; </span><br><span class="line"></span><br><span class="line">mysqlbinlog --start-position&#x3D;1568 --stop-position&#x3D;1762 &#x2F;data&#x2F;mysql&#x2F;mysql-bin.000006 &gt;&#x2F;tmp&#x2F;bin2.sql</span><br></pre></td></tr></table></figure><p>3.恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;bin1.sql</span><br><span class="line">source &#x2F;tmp&#x2F;bin2.sql</span><br><span class="line">set sql_log_bin&#x3D;1;</span><br><span class="line">oldguo [db]&gt;select * from t1;</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">| id  |</span><br><span class="line"></span><br><span class="line">+------+</span><br><span class="line"></span><br><span class="line">|    1 |</span><br><span class="line"></span><br><span class="line">|    2 |</span><br><span class="line"></span><br><span class="line">|  30 |</span><br><span class="line"></span><br><span class="line">|    4 |</span><br><span class="line"></span><br><span class="line">|    5 |</span><br><span class="line"></span><br><span class="line">|    6 |</span><br><span class="line"></span><br><span class="line">|    7 |</span><br><span class="line"></span><br><span class="line">|    8 |</span><br><span class="line"></span><br><span class="line">|    9 |</span><br></pre></td></tr></table></figure><h3 id="有GTID的恢复"><a href="#有GTID的恢复" class="headerlink" title="有GTID的恢复"></a>有GTID的恢复</h3><p>(1)截取</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqlbinlog --skip-gtids --include-gtids&#x3D;&#39;3ca79ab5-3e4d-11e9-a709-000c293b577e:7-12&#39; mysql-bin.000004&gt; &#x2F;tmp&#x2F;bin.sql</span><br></pre></td></tr></table></figure><p>(2)恢复</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set sql_log_bin&#x3D;0;</span><br><span class="line">source &#x2F;tmp&#x2F;bin.sql</span><br></pre></td></tr></table></figure><h2 id="二进制日志其他操作"><a href="#二进制日志其他操作" class="headerlink" title="二进制日志其他操作"></a>二进制日志其他操作</h2><h3 id="自动清理日志"><a href="#自动清理日志" class="headerlink" title="自动清理日志"></a>自动清理日志</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%expire%&#39;;</span><br><span class="line">expire_logs_days  0   </span><br><span class="line">默认是0 单位是天 代表用不删除</span><br></pre></td></tr></table></figure><p>自动清理时间,是要按照全备周期+1<br>set global expire_logs_days=8;<br>永久生效:<br>my.cnf<br>expire_logs_days=15;<br>企业建议,至少保留两个全备周期+1的binlog</p><h3 id="手工清理"><a href="#手工清理" class="headerlink" title="手工清理"></a>手工清理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PURGE BINARY LOGS BEFORE now() - INTERVAL 3 day;</span><br><span class="line">PURGE BINARY LOGS TO &#39;mysql-bin.000010&#39;;</span><br><span class="line">PURGE BINARY LOGS BEFORE &#39;2020-08-08 22:46:26&#39;;</span><br></pre></td></tr></table></figure><p>注意:不要手工 rm binlog文件</p><ol><li>my.cnf binlog关闭掉,启动数据库</li><li>把数据库关闭,开启binlog,启动数据库<br>删除所有binlog,并从000001开始重新记录日志</li></ol><p>*<strong>reset master;     全部清空，主从关系中，主库执行此操作，主从环境必崩</strong></p><h3 id="日志是怎么滚动"><a href="#日志是怎么滚动" class="headerlink" title="日志是怎么滚动"></a>日志是怎么滚动</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; flush logs; </span><br><span class="line">重启mysql也会自动滚动一个新的日志</span><br><span class="line">日志文件达到1G大小(max_binlog_size)</span><br><span class="line">| max_binlog_size                          | 1073741824     </span><br><span class="line">备份时,加入参数也可以自动滚动</span><br><span class="line">mysqladmin -u root -p123 flush-logs</span><br><span class="line">mysqldump -F</span><br></pre></td></tr></table></figure><h1 id="slow-log-慢日志"><a href="#slow-log-慢日志" class="headerlink" title="slow_log 慢日志"></a>slow_log 慢日志</h1><h2 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h2><p>记录慢SQL语句的日志,定位低效SQL语句的工具日志</p><h2 id="开启慢日志-默认没开启"><a href="#开启慢日志-默认没开启" class="headerlink" title="开启慢日志(默认没开启)"></a>开启慢日志(默认没开启)</h2><p>开关:<br>slow_query_log=1<br>文件位置及名字<br>slow_query_log_file=/data/mysql/slow.log<br>设定慢查询时间:<br>long_query_time=0.1<br> 不走索引的语句也记录:<br>log_queries_not_using_indexes</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">slow_query_log=1 </span><br><span class="line">slow_query_log_file=/data/mysql/slow.log</span><br><span class="line">long_query_time=0.1</span><br><span class="line">log_queries_not_using_indexes</span><br><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><h2 id="mysqldumpslow-分析慢日志"><a href="#mysqldumpslow-分析慢日志" class="headerlink" title="mysqldumpslow 分析慢日志"></a>mysqldumpslow 分析慢日志</h2><p>c 代表次数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldumpslow -s c -t 10 /data/mysql/slow.log</span><br></pre></td></tr></table></figure><p>第三方工具(自己扩展)<br><a href="https://www.percona.com/downloads/percona-toolkit/LATEST/">https://www.percona.com/downloads/percona-toolkit/LATEST/</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest-MD5</span><br></pre></td></tr></table></figure><p>toolkit工具包中的命令:<br>./pt-query-diagest  /data/mysql/slow.log<br>Anemometer基于pt-query-digest将MySQL慢查询可视化</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-05-存储引擎</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-05-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-05-%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>相当于Linux文件系统，只不过比文件系统强大</p><h1 id="功能了解"><a href="#功能了解" class="headerlink" title="功能了解"></a>功能了解</h1><ul><li>数据读写</li><li>数据安全和一致性</li><li>提高性能</li><li>热备份</li><li>自动故障恢复</li><li>高可用方面支持等</li></ul><h1 id="存储引擎种类"><a href="#存储引擎种类" class="headerlink" title="存储引擎种类"></a>存储引擎种类</h1><h2 id="介绍-Oracle-MySQL"><a href="#介绍-Oracle-MySQL" class="headerlink" title="介绍(Oracle MySQL)"></a>介绍(Oracle MySQL)</h2><p>可以不同的表设定不同的存储引擎</p><ul><li>InnoDB：MySQL5.5版本以后默认的存储引擎。99%以上的业务表是InnoDB</li><li>MyISAM</li><li>MEMORY</li><li>ARCHIVE</li><li>FEDERATED</li><li>EXAMPLE</li><li>BLACKHOLE</li><li>MERGE</li><li>NDBCLUSTER</li><li>CSV</li></ul><h2 id="引擎种类查看"><a href="#引擎种类查看" class="headerlink" title="引擎种类查看"></a>引擎种类查看</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">存储引擎是作用在表上的，也就意味着，不同的表可以有不同的存储引擎类型。</span><br><span class="line">PerconaDB:默认是XtraDB</span><br><span class="line">MariaDB:默认是InnoDB</span><br><span class="line">其他的存储引擎支持:</span><br><span class="line">TokuDB    </span><br><span class="line">RocksDB</span><br><span class="line">MyRocks</span><br><span class="line">以上三种存储引擎的共同点:压缩比较高,数据插入性能极高</span><br><span class="line">现在很多的NewSQL,使用比较多的功能特性.</span><br></pre></td></tr></table></figure><h2 id="简历案例—zabbix监控系统架构整改"><a href="#简历案例—zabbix监控系统架构整改" class="headerlink" title="简历案例—zabbix监控系统架构整改"></a>简历案例—zabbix监控系统架构整改</h2><p>环境: zabbix 3.2    mariaDB 5.5  centos 7.3<br>现象 : zabbix卡的要死 ,  每隔3-4个月,都要重新搭建一遍zabbix,存储空间经常爆满.<br>问题 :</p><ol><li>zabbix 版本 </li><li>数据库版本</li><li>zabbix数据库500G,存在一个文件里<br>优化建议:<br>1.数据库版本升级到5.7版本,zabbix升级更高版本<br>2.存储引擎改为tokudb<br>3.监控数据按月份进行切割(二次开发:zabbix 数据保留机制功能重写,数据库分表)<br>4.关闭binlog和双1<br>5.参数调整….<br>优化结果:<br>监控状态良好</li></ol><p>为什么?</p><ol><li>原生态支持TokuDB,另外经过测试环境,5.7要比5.5 版本性能 高  2-3倍</li><li>TokuDB:insert数据比Innodb快的多，数据压缩比要Innodb高<br>3.监控数据按月份进行切割,为了能够truncate每个分区表,立即释放空间<br>4.关闭binlog —–&gt;减少无关日志的记录.<br>5.参数调整…—–&gt;安全性参数关闭,提高性能.</li></ol><h2 id="InnoDB个MyISAM存储引擎的替换"><a href="#InnoDB个MyISAM存储引擎的替换" class="headerlink" title="InnoDB个MyISAM存储引擎的替换"></a>InnoDB个MyISAM存储引擎的替换</h2><p>环境: centos 5.8 ,MySQL 5.0版本,MyISAM存储引擎,网站业务(LNMP),数据量50G左右<br>现象问题: 业务压力大的时候,非常卡;经历过宕机,会有部分数据丢失.<br>问题分析:<br>1.MyISAM存储引擎表级锁,在高并发时,会有很高锁等待<br>2.MyISAM存储引擎不支持事务,在断电时,会有可能丢失数据<br>职责<br>1.监控锁的情况:有很多的表锁等待<br>2.存储引擎查看:所有表默认是MyISAM<br>解决方案:</p><ol><li><p>升级MySQL 5.6.10版本</p></li><li><p>迁移所有表到新环境</p></li><li><p>开启双1安全参数</p></li></ol><h1 id="InnoDB存储引擎介绍"><a href="#InnoDB存储引擎介绍" class="headerlink" title="InnoDB存储引擎介绍"></a>InnoDB存储引擎介绍</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-a2c9c97b5ccd84ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/919/format/webp" alt="img"></p><p>在MySQL5.5版本之后，默认的存储引擎，提供高可靠性和高性能。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>事务（Transaction）</li><li>MVCC（Multi-Version Concurrency Control多版本并发控制）</li><li>Clustered index 聚簇索引</li><li>多缓冲池</li><li>行级锁(Row-level Lock)</li><li>ACSR（Auto Crash Safey Recovery）自动的故障安全恢复</li><li>更多复制特性</li><li>支持热备份(Hot Backup)</li><li>Replication: Group Commit , GTID (Global Transaction ID) ,多线程(Multi-Threads-SQL ) </li></ol><h1 id="存储引擎查看"><a href="#存储引擎查看" class="headerlink" title="存储引擎查看"></a>存储引擎查看</h1><h2 id="使用-SELECT-确认会话存储引擎"><a href="#使用-SELECT-确认会话存储引擎" class="headerlink" title="使用 SELECT 确认会话存储引擎"></a>使用 SELECT 确认会话存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT @@default_storage_engine;</span><br></pre></td></tr></table></figure><h2 id="存储引擎-不代表生产操作"><a href="#存储引擎-不代表生产操作" class="headerlink" title="存储引擎(不代表生产操作)"></a>存储引擎(不代表生产操作)</h2><p>会话级别:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set default_storage_engine&#x3D;myisam;</span><br></pre></td></tr></table></figure><p>全局级别(仅影响新会话):</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set global default_storage_engine&#x3D;myisam;</span><br></pre></td></tr></table></figure><p>重启之后,所有参数均失效.<br>如果要永久生效:<br>写入配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">default_storage_engine&#x3D;myisam</span><br></pre></td></tr></table></figure><p>存储引擎是表级别的,每个表创建时可以指定不同的存储引擎,但是建议统一为innodb.</p><h2 id="SHOW-确认每个表的存储引擎"><a href="#SHOW-确认每个表的存储引擎" class="headerlink" title="SHOW 确认每个表的存储引擎"></a>SHOW 确认每个表的存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE TABLE City\G;</span><br><span class="line">SHOW TABLE STATUS LIKE &#39;CountryLanguage&#39;\G</span><br></pre></td></tr></table></figure><h2 id="INFORMATION-SCHEMA-确认每个表的存储引擎"><a href="#INFORMATION-SCHEMA-确认每个表的存储引擎" class="headerlink" title="INFORMATION_SCHEMA 确认每个表的存储引擎"></a>INFORMATION_SCHEMA 确认每个表的存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[world]&gt;select table_schema,table_name ,engine from information_schema.tables where table_schema not in (&#39;sys&#39;,&#39;mysql&#39;,&#39;information_schema&#39;,&#39;performance_schema&#39;);</span><br><span class="line">Master [world]&gt;show table status;</span><br><span class="line">Master [world]&gt;show create table city;</span><br></pre></td></tr></table></figure><h2 id="修改一个表的存储引擎"><a href="#修改一个表的存储引擎" class="headerlink" title="修改一个表的存储引擎"></a>修改一个表的存储引擎</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table t1 engine innodb;</span><br><span class="line">注意：此命令我们经常使用，进行innodb表的碎片整理</span><br></pre></td></tr></table></figure><h2 id="平常处理过的MySQL问题–碎片处理"><a href="#平常处理过的MySQL问题–碎片处理" class="headerlink" title="平常处理过的MySQL问题–碎片处理"></a>平常处理过的MySQL问题–碎片处理</h2><p>环境:centos7.4,MySQL 5.7.20,InnoDB存储引擎</p><p>业务特点:数据量级较大,经常需要按月删除历史数据.<br>问题:磁盘空间占用很大,不释放</p><p>处理方法:<br>以前:将数据逻辑导出,手工drop表,然后导入进去</p><p>现在:<br>对表进行按月进行分表(partition,中间件)<br>业务替换为truncate方式</p><h2 id="扩展-如何批量修改"><a href="#扩展-如何批量修改" class="headerlink" title="扩展:如何批量修改"></a>扩展:如何批量修改</h2><p>需求1:将zabbix库中的所有表,innodb替换为tokudb</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(&quot;alter table zabbix.&quot;,table_name,&quot; engine tokudb;&quot;) from</span><br><span class="line">information_schema.tables where table_schema&#x3D;&#39;zabbix&#39; into outfile &#39;&#x2F;tmp&#x2F;tokudb.sql&#39;;</span><br></pre></td></tr></table></figure><p>需求2:将所有非InnoDB业务表查询出来并修改为InnoDB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select concat(&quot;alter table &quot;,table_schema, &quot;.&quot;,table_name,&quot; engine&#x3D;innodb;&quot; from information_schema.tables</span><br><span class="line">where engine !&#x3D; &#39;InnoDB&#39;</span><br><span class="line">and table_schema not in (&#39;sys&#39;, &#39;performance_schema &#39; , &#39; information_schema&#39; , &#39;mysql&#39;)</span><br><span class="line">into outfile &#39;&#x2F;tmp&#x2F;alter.sql&#39; ;</span><br></pre></td></tr></table></figure><h1 id="InnoDB存储引擎物理存储结构"><a href="#InnoDB存储引擎物理存储结构" class="headerlink" title="InnoDB存储引擎物理存储结构"></a>InnoDB存储引擎物理存储结构</h1><h2 id="最直观的存储方式-data-mysql-data"><a href="#最直观的存储方式-data-mysql-data" class="headerlink" title="最直观的存储方式(/data/mysql/data)"></a>最直观的存储方式(/data/mysql/data)</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807153806207.png" alt="image-20200807153806207"></p><ul><li>ibdata1：系统数据字典信息(统计信息)，UNDO表空间等数据</li><li>ib_logfile0 ~ ib_logfile1: REDO日志文件，事务日志文件。</li><li>ibtmp1： 临时表空间磁盘位置，存储临时表</li><li>frm：存储表的列信息</li><li>ibd：表的数据行和索引</li><li>ib_buffer_pool：正常关库的时候，存储缓冲区的热数据</li></ul><p>所以，仅仅拷贝ibd和frm文件到新的数据库是无法正常使用的</p><h2 id="表空间-Tablespace"><a href="#表空间-Tablespace" class="headerlink" title="表空间(Tablespace)"></a>表空间(Tablespace)</h2><p>什么是表空间：</p><p>表空间概念是引入于Oracle数据库。起初为了解决存储空间拓展的问题。MySQL5.5版本引入了共享表空间模式</p><h3 id="共享表空间"><a href="#共享表空间" class="headerlink" title="共享表空间"></a>共享表空间</h3><p>需要将所有数据存储到同一个表空间中 ，管理比较混乱<br>5.5版本出现的管理模式，也是默认的管理模式，用来存储系统数据、日志、undo、临时表、用户数据和索引<br>5.6版本以后，共享表空间保留，只用来存储:数据字典信息,undo,临时表。<br>5.7 版本,临时表被独立出来了<br>8.0版本,undo也被独立出去了</p><p>具体变化参考官方文档:<br> <a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html">https://dev.mysql.com/doc/refman/5.6/en/innodb-architecture.html</a><br> <a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html">https://dev.mysql.com/doc/refman/5.7/en/innodb-architecture.html</a><br> <a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html">https://dev.mysql.com/doc/refman/5.8/en/innodb-architecture.html</a></p><h3 id="共享表空间设置"><a href="#共享表空间设置" class="headerlink" title="共享表空间设置"></a>共享表空间设置</h3><p>共享表空间设置(在搭建MySQL时，初始化数据之前设置到参数文件中)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[(none)]&gt;select @@innodb_data_file_path;</span><br><span class="line">[(none)]&gt;show variables like &#39;%extend%&#39;;</span><br><span class="line">innodb_data_file_path&#x3D;ibdata1:512M:ibdata2:512M:autoextend</span><br><span class="line">innodb_autoextend_increment&#x3D;64</span><br></pre></td></tr></table></figure><p>如何拓展共享表空间大小和个数</p><p>方法1：</p><p>初始化之前，需要在my.cnf 加入以下配置即可:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path&#x3D;ibdatal:1G;ibdata2:1G:autoextend</span><br></pre></td></tr></table></figure><p>方法2：已运行的数据库上拓展多个ibdata文件</p><p>错误的方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path&#x3D;ibdata2:128M; ibdata3:128M:autoextend</span><br><span class="line"></span><br><span class="line">2020-2-21T08:31:14.2615622 O[ERROR] InnoDB: The innodb_system data file &#39;.&#x2F;ibdatal&#39; is of a</span><br><span class="line">different size 4864 pages (rounded down to MB) than the 8192 pages specified in the .cnf file!</span><br></pre></td></tr></table></figure><p>解决办法，在设置innodb_data_file_path参数时，已有的ibdata1文件大小应该和磁盘上真实大小一致，而不是随便指定的</p><p>正确的调整方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path&#x3D;ibdata1:76M; ibdata2:128M; ibdata3:128M:autoextend</span><br></pre></td></tr></table></figure><h3 id="独立表空间"><a href="#独立表空间" class="headerlink" title="独立表空间"></a>独立表空间</h3><p>从5.6，默认表空间不再使用共享表空间，替换为独立表空间。<br>主要存储的是用户数据<br>存储特点为：一个表一个ibd文件，存储数据行和索引信息<br>基本表结构元数据存储：<br>xxx.frm<br>最终结论：<br>      元数据            数据行+索引<br>mysql表数据    =（ibdataX+frm）+ibd(段、区、页)<br>        DDL             DML+DQL</p><p>MySQL的存储引擎日志：<br>Redo Log: ib_logfile0  ib_logfile1，重做日志<br>Undo Log: ibdata1 ibdata2(存储在共享表空间中)，回滚日志<br>临时表:ibtmp1，在做join union操作产生临时数据，用完就自动</p><h3 id="独立表空间设置问题"><a href="#独立表空间设置问题" class="headerlink" title="独立表空间设置问题"></a>独立表空间设置问题</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;select @@innodb_file_per_table;</span><br><span class="line">+-------------------------+</span><br><span class="line">| @@innodb_file_per_table |</span><br><span class="line">+-------------------------+</span><br><span class="line">|                      1 |</span><br><span class="line">+-------------------------+</span><br><span class="line">alter table city dicard tablespace;</span><br><span class="line">alter table city import tablespace;</span><br></pre></td></tr></table></figure><p>1代表独立表空间，0代表共享表空间模式</p><p>如何切换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set @@innodb_file_per_table&#x3D;0;</span><br></pre></td></tr></table></figure><p>重新登陆会话即可</p><p>说明：修改完成之后，之影响新创建的表，永久需要在my.cnf加入<code>innodb_file_per_table=0;</code></p><h3 id="真实案例"><a href="#真实案例" class="headerlink" title="真实案例"></a>真实案例</h3><p>案例背景:</p><p>硬件及软件环境:<br>联想服务器（IBM）<br>磁盘500G 没有raid<br>centos 6.8<br>mysql 5.6.33  innodb引擎  独立表空间<br>备份没有，日志也没开</p><p>开发用户专用库:<br>jira(bug追踪) 、 confluence(内部知识库)    ——&gt;LNMT</p><p>故障描述:</p><p>断电了，启动完成后“/” 只读<br>fsck  重启,系统成功启动,mysql启动不了。<br>结果：confulence库在  ， jira库不见了</p><p>求助内容:<br>这种情况怎么恢复？<br>连二进制日志都没有，没有备份，没有主从<br>jira问题拉倒中关村了<br>能不能暂时把confulence库先打开用着<br>将生产库confulence，拷贝到1:1虚拟机上/var/lib/mysql,直接访问时访问不了的</p><p>办法：</p><p>表空间迁移:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.创建一个一模一样的空表</span><br><span class="line">create table xxx</span><br><span class="line">2.删掉空表的表空间</span><br><span class="line">alter table  confulence.t1 discard tablespace;</span><br><span class="line">3.拷贝准备好的idb，改权限，导入表空间到刚才建立的表</span><br><span class="line">alter table confulence.t1 import tablespace;</span><br><span class="line">虚拟机测试可行。</span><br></pre></td></tr></table></figure><p>处理问题思路:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">confulence库中一共有107张表。</span><br><span class="line">1、创建107和和原来一模一样的表。</span><br><span class="line">他有2016年的历史库，我让他去他同时电脑上 mysqldump备份confulence库</span><br><span class="line">mysqldump -uroot -ppassw0rd -B  confulence --no-data &gt;test.sql</span><br><span class="line">拿到你的测试库，进行恢复</span><br><span class="line">到这步为止，表结构有了。</span><br><span class="line">2、表空间删除。</span><br><span class="line">select concat(&#39;alter table &#39;,table_schema,&#39;.&#39;table_name,&#39; discard tablespace;&#39;) from information_schema.tables where table_schema&#x3D;&#39;confluence&#39; into outfile &#39;&#x2F;tmp&#x2F;discad.sql&#39;;</span><br><span class="line">source &#x2F;tmp&#x2F;discard.sql</span><br><span class="line">执行过程中发现，有20-30个表无法成功。主外键关系</span><br><span class="line">很绝望，一个表一个表分析表结构，很痛苦。</span><br><span class="line">set foreign_key_checks&#x3D;0 跳过外键检查。</span><br><span class="line">把有问题的表表空间也删掉了。</span><br><span class="line">3、拷贝生产中confulence库下的所有表的ibd文件拷贝到准备好的环境中</span><br><span class="line">select concat(&#39;alter table &#39;,table_schema,&#39;.&#39;table_name,&#39; import tablespace;&#39;) from information_schema.tables where table_schema&#x3D;&#39;confluence&#39; into outfile &#39;&#x2F;tmp&#x2F;import.sql&#39;;</span><br><span class="line">4、验证数据</span><br><span class="line">表都可以访问了，数据挽回到了出现问题时刻的状态（2-8）</span><br></pre></td></tr></table></figure><h1 id="事务的ACID特性"><a href="#事务的ACID特性" class="headerlink" title="事务的ACID特性"></a>事务的ACID特性</h1><p><strong>Atomic（原子性）</strong></p><p>UNDO,REDO</p><p>所有语句作为一个单元全部成功执行或全部取消。不能出现中间状态。</p><p><strong>Consistent（一致性）</strong></p><p>如果数据库在事务开始时处于一致状态，则在执行该事务期间将保留一致状态。数据完整性必须一致。MySQL的各项功能的设计，都是最终要保证一致性。</p><p><strong>Isolated（隔离性）</strong></p><p>ISOLATION Level，Lock，MVCC (UNDO )</p><p>MySQL可以支持多事务并发工作的系统。</p><p>事务之间不相互影响。</p><p><strong>Durable（持久性）</strong></p><p>Redo (WAL）</p><p>事务成功完成后，所做的所有更改都会准确地记录在数据库中。所做的更改不会丢失。</p><h1 id="事务的生命周期（事务控制语句）"><a href="#事务的生命周期（事务控制语句）" class="headerlink" title="事务的生命周期（事务控制语句）"></a>事务的生命周期（事务控制语句）</h1><h2 id="事务的开始"><a href="#事务的开始" class="headerlink" title="事务的开始"></a>事务的开始</h2><p>begin<br>说明:在5.5 以上的版本，不需要手工begin，只要你执行的是一个DML，会自动在前面加一个begin命令。</p><h2 id="事务的结束"><a href="#事务的结束" class="headerlink" title="事务的结束"></a>事务的结束</h2><p>commit：提交事务<br>完成一个事务，一旦事务提交成功 ，就说明具备ACID特性了。</p><p>rollback ：回滚事务<br>将内存中，已执行过的操作，回滚回去</p><h2 id="自动提交策略（autocommit）"><a href="#自动提交策略（autocommit）" class="headerlink" title="自动提交策略（autocommit）"></a>自动提交策略（autocommit）</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">db01 [(none)]&gt;select @@autocommit;</span><br><span class="line">db01 [(none)]&gt;set autocommit&#x3D;0;</span><br><span class="line">db01 [(none)]&gt;set global autocommit&#x3D;0;</span><br><span class="line">注：</span><br><span class="line">自动提交是否打开，一般在有事务需求的MySQL中，将其关闭</span><br><span class="line">不管有没有事务需求，我们一般也都建议设置为0，可以很大程度上提高数据库性能</span><br><span class="line">(1)</span><br><span class="line">set autocommit&#x3D;0;   </span><br><span class="line">set global autocommit&#x3D;0;</span><br><span class="line">(2)</span><br><span class="line">vim &#x2F;etc&#x2F;my.cnf</span><br><span class="line">autocommit&#x3D;0     </span><br></pre></td></tr></table></figure><h2 id="隐式提交语句"><a href="#隐式提交语句" class="headerlink" title="隐式提交语句"></a>隐式提交语句</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">用于隐式提交的 SQL 语句：</span><br><span class="line">begin </span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">SET AUTOCOMMIT &#x3D; 1</span><br><span class="line"></span><br><span class="line">导致提交的非事务语句：</span><br><span class="line">DDL语句： （ALTER、CREATE 和 DROP）</span><br><span class="line">DCL语句： （GRANT、REVOKE 和 SET PASSWORD）</span><br><span class="line">锁定语句：（LOCK TABLES 和 UNLOCK TABLES）</span><br><span class="line">导致隐式提交的语句示例：</span><br><span class="line">TRUNCATE TABLE</span><br><span class="line">LOAD DATA INFILE</span><br><span class="line">SELECT FOR UPDATE</span><br></pre></td></tr></table></figure><h2 id="隐式回滚"><a href="#隐式回滚" class="headerlink" title="隐式回滚"></a>隐式回滚</h2><ul><li>会话关闭</li><li>数据库宕机</li><li>事务语句执行失败</li></ul><h2 id="开始事务流程"><a href="#开始事务流程" class="headerlink" title="开始事务流程"></a>开始事务流程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">1、检查autocommit是否为关闭状态</span><br><span class="line">select @@autocommit;</span><br><span class="line">或者：</span><br><span class="line">show variables like &#39;autocommit&#39;;</span><br><span class="line">2、开启事务,并结束事务</span><br><span class="line">begin</span><br><span class="line">delete from student where name&#x3D;&#39;alexsb&#39;;</span><br><span class="line">update student set name&#x3D;&#39;alexsb&#39; where name&#x3D;&#39;alex&#39;;</span><br><span class="line">rollback;</span><br><span class="line"></span><br><span class="line">begin</span><br><span class="line">delete from student where name&#x3D;&#39;alexsb&#39;;</span><br><span class="line">update student set name&#x3D;&#39;alexsb&#39; where name&#x3D;&#39;alex&#39;;</span><br><span class="line">commit;</span><br></pre></td></tr></table></figure><h1 id="InnoDB-事务的ACID如何保证"><a href="#InnoDB-事务的ACID如何保证" class="headerlink" title="InnoDB 事务的ACID如何保证?"></a>InnoDB 事务的ACID如何保证?</h1><h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><ul><li>redo log —&gt; 重做日志 ib_logfile0~1   48M   , 轮询使用，记录的是数据页的变化</li><li>redo log buffer —&gt; redo内存区域</li><li>ibd     —-&gt; 存储数据行和索引 </li><li>buffer pool —&gt;缓冲区池,数据和索引的缓冲</li><li>LSN : 日志序列号<br>磁盘数据页,redo文件,buffer pool,redo buffer<br>MySQL 每次数据库启动,都会比较磁盘数据页和redolog的LSN,必须要求两者LSN一致数据库才能正常启动</li><li>WAL : write ahead log 日志优先写的方式实现持久化</li><li>脏页: 内存脏页,内存中发生了修改,没写入到磁盘之前,我们把内存页称之为脏页.</li><li>CKPT:Checkpoint,检查点,就是将脏页刷写到磁盘的动作</li><li>TXID: 事务号,InnoDB会为每一个事务生成一个事务号,伴随着整个事务.</li><li>undo: ibdata1，存储了事务工作过程中的回滚信息</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/16956686-babda887346b7427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/767/format/webp" alt="img"></p><p>image</p><h2 id="redo-log"><a href="#redo-log" class="headerlink" title="redo log"></a>redo log</h2><h3 id="Redo是什么"><a href="#Redo是什么" class="headerlink" title="Redo是什么"></a>Redo是什么</h3><p>redo,顾名思义“重做日志”，是事务日志的一种。</p><h3 id="作用是什么"><a href="#作用是什么" class="headerlink" title="作用是什么"></a>作用是什么</h3><p>在事务ACID过程中，实现的是“D”持久化的作用。对于A C也有相应的作用</p><h3 id="redo日志位置"><a href="#redo日志位置" class="headerlink" title="redo日志位置"></a>redo日志位置</h3><p>redo的日志文件：iblogfile0 iblogfile1</p><h3 id="redo-buffer"><a href="#redo-buffer" class="headerlink" title="redo buffer"></a>redo buffer</h3><p>redo的buffer:数据页的变化信息+数据页当时的LSN号<br>LSN：日志序列号  磁盘数据页、内存数据页、redo buffer、redolog</p><h3 id="redo的刷新策略"><a href="#redo的刷新策略" class="headerlink" title="redo的刷新策略"></a>redo的刷新策略</h3><p>commit;<br>刷新当前事务的redo buffer到磁盘<br>还会顺便将一部分redo buffer中没有提交的事务日志也刷新到磁盘</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p>redo存储的是在事务工作过程中，数据页变化。commit时会立即写入磁盘（默认），日志落盘成功commit。正常MysQL工作过程中，主要的工作是提供快速D的功能。MySQL出现crash异常宕机时，主要提供的是前滚功能。</p><h3 id="MySQL-CSR——前滚"><a href="#MySQL-CSR——前滚" class="headerlink" title="MySQL CSR——前滚"></a>MySQL CSR——前滚</h3><p>MySQL : 在启动时,必须保证redo日志文件和数据文件LSN必须一致, 如果不一致就会触发CSR,最终保证一致<br>情况一:<br>我们做了一个事务,begin;update;commit.</p><ol><li>在begin ,会立即分配一个TXID=tx_01.</li><li>update时,会将需要修改的数据页(dp_01,LSN=101),加载到data buffer中</li><li>DBWR线程,会进行dp_01数据页修改更新,并更新LSN=102</li><li>LOGBWR日志写线程,会将dp_01数据页的变化+LSN+TXID存储到redobuffer</li><li>执行commit时,LGWR日志写线程会将redobuffer信息写入redolog日志文件中,基于WAL原则,<br>在日志完全写入磁盘后,commit命令才执行成功,(会将此日志打上commit标记)</li><li>假如此时宕机,内存脏页没有来得及写入磁盘,内存数据全部丢失</li><li>MySQL再次重启时,必须要redolog和磁盘数据页的LSN是一致的.但是,此时dp_01,TXID=tx_01磁盘是LSN=101,dp_01,TXID=tx_01,redolog中LSN=102<br>MySQL此时无法正常启动,MySQL触发CSR.在内存追平LSN号,触发ckpt,将内存数据页更新到磁盘,从而保证磁盘数据页和redolog LSN一值.这时MySQL正长启动以上的工作过程,我们把它称之为基于REDO的”前滚操作”</li></ol><p>innodb_flush_log_at_trx_commit=0/1/2</p><ul><li>1：在每次事务提交时，会立即刷新redo buffer到磁盘，commit才能成功</li><li>0：每秒刷新redo buffer到os cache，再fsync()到磁盘，异常宕机时，有可能会丢失1s内的事务</li><li>2：每次事务提交，会立即刷新redo buffer到oscache，再每秒fsync()到磁盘，异常宕机时，有可能会丢失1s内的事务</li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200808084931982.png" alt="image-20200808084931982"></p><p>目前默认是1。</p><p>另外：</p><ol><li>redo buffer还和操作系统缓存机制有关，所以刷写策略可能和innodb flush method参数有一定关系</li><li>redo也有group commit；可以理解为在每次刷新已提交的redo时，顺便可以将一些未提交的事务redo也一次性刷写到磁盘。此时为了区分不同状态的redo，会加一些比较特殊的标记(是否提交的标记)</li></ol><h2 id="undo-回滚日志"><a href="#undo-回滚日志" class="headerlink" title="undo 回滚日志"></a>undo 回滚日志</h2><h3 id="undo是什么"><a href="#undo是什么" class="headerlink" title="undo是什么"></a>undo是什么</h3><p>undo,顾名思义“回滚日志”</p><h3 id="作用是什么-1"><a href="#作用是什么-1" class="headerlink" title="作用是什么"></a>作用是什么</h3><p>在事务ACID过程中，实现的是“A” 原子性的作用<br>另外CI也依赖于Undo<br>在rollback时,将数据恢复到修改之前的状态<br>在CSR实现的是,先redo前滚，再undo回滚</p><p>什么是一致性快照？</p><p>每个事务开启时，都会通过undo生成一个一致性快照</p><p>undo提供快照技术,保存事务修改之前的数据状态.保证了MVCC,隔离性,mysqldump的热备</p><p>undo在生成过程中，也会记录redo信息</p><h2 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h2><p>“锁”顾名思义就是锁定的意思。<br>“锁”的作用是什么？<br>在事务ACID过程中，“锁”和“隔离级别”一起来实现“I”隔离性和”C” 一致性 (redo也有参与).<br>悲观锁:行级锁定(行锁)<br>谁先操作某个数据行,就会持有&lt;这行&gt;的(X)锁.<br>乐观锁: 没有锁</p><p>作用</p><p>保证事务之间的隔离性，也保证了数据的一致性</p><p>保证资源不会争用，锁是属于资源的，不是某个事务的特性。每次事务需要资源的时候，需要申请持有资源的锁。</p><p>锁类型：</p><p>资源</p><ul><li>内存锁：mutex，latch，保存内存数据页资源不被争用，不被置换</li><li>对象锁：<ul><li>MDL(元数据锁)：修改元数据时。DDL—&gt;alter，备份</li><li>Table(row) lock：表锁，DDL，备份(FTWRL全局表锁)，lock tables tl read,也可以能升级为表锁。</li><li>record(row) lock :行锁，索引锁，锁定聚簇索引。</li><li>GAP：间隙锁，RR级别，普通铺助索引间隙锁。</li><li>Next-lock：下一键锁，GAP+record lock，普通辅助索引的范围锁</li></ul></li></ul><p>功能分类：</p><ul><li>IS：意向共享锁，表级别</li><li>S：共享锁，读锁，行级别</li><li>IX：意向排他锁，表级别</li><li>X：排他锁，写锁，行级别</li></ul><h2 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h2><p>影响到数据的读取,默认的级别是 RR模式.<br>transaction_isolation   隔离级别(参数)<br>负责的是,MVCC,读一致性问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@transaction_isolation;</span><br></pre></td></tr></table></figure><p>修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global transaction_isolation&#x3D;&#39;read-uncommitted&#39;;</span><br></pre></td></tr></table></figure><p>这里的读不是SQL层的数据行的select，而指的是存储引擎的读，是page的读取。</p><ul><li><p>RU(READ UNCOMMITTED)  : 读未提交</p><p>出现的问题：脏页读，不可重复读，幻读</p></li><li><p>RC(READ COMMITTED)  : 读已提交</p><p>出现的问题：不可重复读，幻读</p></li><li><p>RR(REPEATABLE READ)  : 可重复读</p><p>功能是防止”不可重复读”现象 ,也解决了99%以上的幻读。利用的是undo的快照技术+GAP(间隙锁)+NextLock(下键锁)</p><p>出现的问题：有可能出现幻读，但是可以通过其他手段防止幻读出现</p></li><li><p>SR(SERIALIZABLE)  : 可串行化</p><p>以上问题都能规避,但是并发事务性能较差</p></li></ul><p>脏读：在session2事务中读取到了，session1未提交数据的脏数据。这个现象就是脏读。对于脏读，在生产业务中是一般不允许出现的。</p><p>不可重复读：session2中的事务中，执行相同查询命令时读到了session1正在发生变化的数据。对于事务的隔离性和数据最终一致性要求比较高的业务，不允许出现的，如果业务能容忍，也是可以出现的</p><p>幻读：在一个事务窗口中，更新操作出现了别的插入数据的插入。</p><p>补充: 在RC级别下,可以减轻GAP+NextLock锁的问题,但是会出现幻读现象,一般在为了读一致性会在正常select后添加for update语句.但是,请记住执行完一定要commit 否则容易出现所等待比较严重.<br>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[world]&gt;select * from city where id&#x3D;999 for update;</span><br><span class="line">[world]&gt;commit;</span><br></pre></td></tr></table></figure><h2 id="架构改造项目"><a href="#架构改造项目" class="headerlink" title="架构改造项目"></a>架构改造项目</h2><p>项目背景:<br>2台  IBM X3650   32G  ,原来主从关系,2年多没有主从了,”小问题”不断(锁,宕机后的安全)<br>MySQL 5.1.77   默认存储引擎 MyISAM<br>数据量: 60G左右 ,每周全备,没有开二进制日志<br>架构方案:<br>     1. 升级数据库版本到5.7.20<br>        2. 更新所有业务表的存储引擎为InnoDB<br>        3. 重新设计备份策略为热备份,每天全备,并备份日志<br>            4. 重新构建主从<br>结果:<br>        1.性能<br>        2.安全方面<br>        3.快速故障处理</p><h1 id="InnoDB存储引擎核心特性-参数补充"><a href="#InnoDB存储引擎核心特性-参数补充" class="headerlink" title="InnoDB存储引擎核心特性-参数补充"></a>InnoDB存储引擎核心特性-参数补充</h1><h2 id="存储引擎相关"><a href="#存储引擎相关" class="headerlink" title="存储引擎相关"></a>存储引擎相关</h2><h3 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show engines;</span><br><span class="line">show variables like &#39;default_storage_engine&#39;;</span><br><span class="line">select @@default_storage_engine;</span><br></pre></td></tr></table></figure><h3 id="如何指定和修改存储引擎"><a href="#如何指定和修改存储引擎" class="headerlink" title="如何指定和修改存储引擎"></a>如何指定和修改存储引擎</h3><p>(1) 通过参数设置默认引擎<br>(2) 建表的时候进行设置<br>(3) alter table t1 engine=innodb;</p><h2 id="表空间"><a href="#表空间" class="headerlink" title="表空间"></a>表空间</h2><h3 id="共享表空间-1"><a href="#共享表空间-1" class="headerlink" title="共享表空间"></a>共享表空间</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">innodb_data_file_path</span><br><span class="line">一般是在初始化数据之前就设置好</span><br><span class="line">例子:</span><br><span class="line">innodb_data_file_path&#x3D;ibdata1:512M:ibdata2:512M:autoextend</span><br></pre></td></tr></table></figure><h3 id="独立表空间-1"><a href="#独立表空间-1" class="headerlink" title="独立表空间"></a>独立表空间</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> variables like <span class="string">&#x27;innodb_file_per_table&#x27;</span>;</span><br></pre></td></tr></table></figure><h2 id="缓冲区池"><a href="#缓冲区池" class="headerlink" title="缓冲区池"></a>缓冲区池</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select @@innodb_buffer_pool_size;</span><br><span class="line">作用:数据缓冲区的总天小。缓冲数据页和索引页。是MySQL最大的内存区域。</span><br><span class="line">show engine innodb status\G</span><br><span class="line">innodb_buffer_pool_size </span><br><span class="line">默认：128M</span><br><span class="line">一般建议最多是物理内存的 75-80%</span><br></pre></td></tr></table></figure><h2 id="innodb-flush-log-at-trx-commit-双一标准之一"><a href="#innodb-flush-log-at-trx-commit-双一标准之一" class="headerlink" title="innodb_flush_log_at_trx_commit  (双一标准之一)"></a>innodb_flush_log_at_trx_commit  (双一标准之一)</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>主要控制了innodb将log buffer中的数据写入日志文件并flush磁盘的时间点，取值分别为0、1、2三个。</p><h3 id="查询-1"><a href="#查询-1" class="headerlink" title="查询"></a>查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select @@innodb_flush_log_at_trx_commit;</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明:"></a>参数说明:</h3><p>1，每次事物的提交都会引起日志文件写入、flush磁盘的操作，确保了事务的ACID；flush  到操作系统的文件系统缓存  fsync到物理磁盘.<br>0，表示当事务提交时，不做日志写入操作，而是每秒钟将log buffer中的数据写入文件系统缓存并且秒fsync磁盘一次；<br>2，每次事务提交引起写入文件系统缓存,但每秒钟完成一次fsync磁盘操作。</p><p>The default setting of 1 is required for full ACID compliance. Logs are written and flushed to disk at each transaction commit.<br>With a setting of 0, logs are written and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.<br>With a setting of 2, logs are written after each transaction commit and flushed to disk once per second. Transactions for which logs have not been flushed can be lost in a crash.</p><h2 id="Innodb-flush-method-O-DIRECT-fdatasync"><a href="#Innodb-flush-method-O-DIRECT-fdatasync" class="headerlink" title="Innodb_flush_method=(O_DIRECT, fdatasync)"></a>Innodb_flush_method=(O_DIRECT, fdatasync)</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-b557f16a20a5dad2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/679/format/webp" alt="img"></p><p><a href="https://links.jianshu.com/go?to=https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html%23sysvar_innodb_flush_method">https://dev.mysql.com/doc/refman/5.7/en/innodb-parameters.html#sysvar_innodb_flush_method</a></p><h3 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h3><p>控制的是,log buffer 和data buffer,刷写磁盘的时候是否经过文件系统缓存</p><h3 id="查看-1"><a href="#查看-1" class="headerlink" title="查看"></a>查看</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show variables like &#39;%innodb_flush%&#39;;</span><br></pre></td></tr></table></figure><h3 id="参数值说明"><a href="#参数值说明" class="headerlink" title="参数值说明"></a>参数值说明</h3><ul><li>O_DIRECT  :数据缓冲区写磁盘,不走OS buffer</li><li>fsync :日志和数据缓冲区写磁盘,都走OS buffer</li><li>O_DSYNC  :日志缓冲区写磁盘,不走 OS buffer</li></ul><h3 id="使用建议"><a href="#使用建议" class="headerlink" title="使用建议"></a>使用建议</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">最高安全模式</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;1</span><br><span class="line">Innodb_flush_method&#x3D;O_DIRECT</span><br><span class="line">最高性能:</span><br><span class="line">innodb_flush_log_at_trx_commit&#x3D;0</span><br><span class="line">Innodb_flush_method&#x3D;fsync</span><br></pre></td></tr></table></figure><h2 id="redo日志有关的参数"><a href="#redo日志有关的参数" class="headerlink" title="redo日志有关的参数"></a>redo日志有关的参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">innodb_log_buffer_size&#x3D;16777216</span><br><span class="line">innodb_log_file_size&#x3D;50331648</span><br><span class="line">innodb_log_files_in_group &#x3D; 3</span><br></pre></td></tr></table></figure><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p>RR模式(对索引进行删除时):<br>GAP:          间隙锁<br>next-lock:    下一键锁定</p><p>例子:<br>id（有索引）<br>1 2 3 4 5 6<br>GAP：<br>在对3这个值做变更时，会产生两种锁，一种是本行的行级锁，另一种会在2和4索引键上进行枷锁<br>next-lock：<br>对第六行变更时，一种是本行的行级锁，在索引末尾键进行加锁，6以后的值在这时是不能被插入的。<br>总之：<br>GAP、next lock都是为了保证RR模式下，不会出现幻读，降低隔离级别或取消索引，这两种锁都不会产生。<br>IX IS X S是什么?</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-04-索引及执行计划</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-04-%E7%B4%A2%E5%BC%95%E5%8F%8A%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-04-%E7%B4%A2%E5%BC%95%E5%8F%8A%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h1 id="索引作用"><a href="#索引作用" class="headerlink" title="索引作用"></a>索引作用</h1><p>提供了类似于书中目录的作用,目的是为了优化查询</p><h1 id="索引的种类-算法"><a href="#索引的种类-算法" class="headerlink" title="索引的种类(算法)"></a>索引的种类(算法)</h1><ul><li>B树索引</li><li>Hash索引</li><li>R树</li><li>Full text 全文索引</li><li>GIS 地理位置索引</li></ul><h1 id="B树-基于不同的查找算法分类介绍"><a href="#B树-基于不同的查找算法分类介绍" class="headerlink" title="B树 基于不同的查找算法分类介绍"></a>B树 基于不同的查找算法分类介绍</h1><p><img src="https://upload-images.jianshu.io/upload_images/16956686-0408e2dc5dbd0a54.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><ul><li>B-tree</li><li>B+Tree 在范围查询方面提供了更好的性能(&gt; &lt; &gt;= &lt;= like)</li><li>B*Tree(B+Tree优化过的)</li></ul><h1 id="在功能上的分类"><a href="#在功能上的分类" class="headerlink" title="在功能上的分类"></a>在功能上的分类</h1><h2 id="辅助索引-S-怎么构建B树结构的"><a href="#辅助索引-S-怎么构建B树结构的" class="headerlink" title="辅助索引(S)怎么构建B树结构的?"></a>辅助索引(S)怎么构建B树结构的?</h2><ol><li>索引是基于表中,列(索引键)的值生成的B树结构</li><li>首先提取此列所有的值,进行自动排序</li><li>将排好序的值,均匀的分布到索引树的叶子节点中(16K)</li><li>然后生成此索引键值所对应得后端数据页的指针</li><li>生成枝节点和根节点,根据数据量级和索引键长度,生成合适的索引树高度<br>id  name  age  gender<br>select  *  from  t1 where id=10;<br>问题: 基于索引键做where查询,对于id列是顺序IO,但是对于其他列的查询,可能是随机IO.</li></ol><h2 id="聚集索引-C"><a href="#聚集索引-C" class="headerlink" title="聚集索引(C)"></a>聚集索引(C)</h2><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>(1)表中设置了主键,主键列就会自动被作为聚集索引.<br>(2)如果没有主键,会选择唯一键作为聚集索引.<br>(3)聚集索引必须在建表时才有意义,一般是表的无关列(ID)</p><h3 id="辅助索引-S-怎么构建B树结构的-1"><a href="#辅助索引-S-怎么构建B树结构的-1" class="headerlink" title="辅助索引(S)怎么构建B树结构的?"></a>辅助索引(S)怎么构建B树结构的?</h3><p>(1) 在建表时,设置了主键列(ID)<br>(2) 在将来录入数据时,就会按照ID列的顺序存储到磁盘上.(我们又称之为聚集索引组织表)<br>(3) 将排好序的整行数据,生成叶子节点.可以理解为,磁盘的数据页就是叶子节点</p><h3 id="聚集索引和辅助索引构成区别"><a href="#聚集索引和辅助索引构成区别" class="headerlink" title="聚集索引和辅助索引构成区别"></a>聚集索引和辅助索引构成区别</h3><p>聚集索引只能有一个,非空唯一,一般是主键<br>辅助索引,可以有多个,时配合聚集索引使用的<br>聚集索引叶子节点,就是磁盘的数据行存储的数据页<br>MySQL是根据聚集索引,组织存储数据,数据存储时就是按照聚集索引的顺序进行存储数据<br>辅助索引,只会提取索引键值,进行自动排序生成B树结构</p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-e9678b5133528566.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1085/format/webp" alt="img"></p><h1 id="MySQL-B-TREE索引构建过程"><a href="#MySQL-B-TREE索引构建过程" class="headerlink" title="MySQL B+TREE索引构建过程"></a>MySQL B+TREE索引构建过程</h1><h2 id="聚簇素引BTREE结构（InnoDB独有）"><a href="#聚簇素引BTREE结构（InnoDB独有）" class="headerlink" title="聚簇素引BTREE结构（InnoDB独有）"></a>聚簇素引BTREE结构（InnoDB独有）</h2><p>区====&gt;簇<br>构建前提:</p><ol><li><p>建表时，指定了主键列，MySQL InnoDB 会将主键作为聚簇索引列，比如ID not null primary key</p></li><li><p>没有指定主键，自动选择唯一键（unique）的列，作为聚簇索引。</p></li><li><p>以上都没有，生隐藏聚簇索引。</p></li></ol><p>作用:<br>有了聚簇索引之后，将来插入的数据行，在同一个区内，都会按照ID值的顺序，有序在磁盘存储数据。</p><p>聚簇索引BTREE构建过程</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200806153126612.png" alt="image-20200806153126612"></p><h2 id="辅助索引BTREE结构"><a href="#辅助索引BTREE结构" class="headerlink" title="辅助索引BTREE结构"></a>辅助索引BTREE结构</h2><p>使用普通列作为条件构建的索引。</p><p>作用：优化非聚簇索引列之外的查询条件的优化。需要手工创建。</p><p>辅助索引细分</p><p>1.普通的单列辅助索引<br>2.联合索引<br>多个列作为索引条件,生成索引树,理论上设计的好的,可以减少大量的回表<br>查询</p><p>联合索引，注意最左原则   idx(a,b,c)  -&gt; a ab abc</p><ol><li>查询条件中，必须要包含最左列，上面例子就是a列</li><li>建立联合索引时，一定要选择重复值少的列，作为最左列。</li></ol><p>回表会带来什么影响？</p><ol><li>IO量级变大</li><li>IOPS会增大</li><li>随机IO会增大</li></ol><p>怎么减少回表？</p><ol><li><p>将查询尽可能用ID主键查询</p></li><li><p>设计合理的联合索引</p><p>完全覆盖</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select name,age,gender from t1 where name&#x3D;&#39;zs&#39;</span><br></pre></td></tr></table></figure></li><li><p>更精确的查询条件+联合索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 where name&#x3D;&#39;zs&#39; and gender&#x3D;&#39;m&#39;</span><br></pre></td></tr></table></figure></li><li><p>优化器算法：MRR(拓展内容)</p></li></ol><p>3.前缀索引</p><p>前缀索引是针对于选择的索引列值长度过长，会导致索引树高度增高。会导致索引应用时，需要读取更多的索引数据页。MySQL中建议索引树高度3-4层。所以可以选择大字段的前面部分字符作为索引生成的条件</p><h2 id="聚簇索引和辅助索引构成区别"><a href="#聚簇索引和辅助索引构成区别" class="headerlink" title="聚簇索引和辅助索引构成区别"></a>聚簇索引和辅助索引构成区别</h2><ul><li>聚集索引只能有一个,非空唯一,一般是主键</li><li>辅助索引,可以有多个,时配合聚集索引使用的</li><li>聚集索引叶子节点,就是磁盘的数据行存储的数据页</li><li>MySQL是根据聚集索引,组织存储数据,数据存储时就是按照聚集索引的顺序进行存储数据</li><li>辅助索引,只会提取索引键值,进行自动排序生成B树结构</li></ul><h1 id="索引树的高度受影响因素"><a href="#索引树的高度受影响因素" class="headerlink" title="索引树的高度受影响因素"></a>索引树的高度受影响因素</h1><ol><li>数据量级过大, 解决方法:分表,分库,分布式架构</li><li>索引列值过长 , 解决方法:前缀索引</li><li>数据类型:<br>变长长度字符串,使用了char,解决方案:变长字符串使用varchar<br>enum类型的使用enum (‘山东’,’河北’,’黑龙江’,’吉林’,’辽宁’,’陕西’……)</li></ol><h1 id="索引的基本管理"><a href="#索引的基本管理" class="headerlink" title="索引的基本管理"></a>索引的基本管理</h1><h2 id="什么时候创建索引"><a href="#什么时候创建索引" class="headerlink" title="什么时候创建索引"></a>什么时候创建索引</h2><p>按照业务语句的需求创建合适的索引，并不是将所有列都建立索引，索引不是越多越好。</p><p>一般将索引建立在 where  group by  order by  join on ..</p><h2 id="为什么不能乱建索引"><a href="#为什么不能乱建索引" class="headerlink" title="为什么不能乱建索引"></a>为什么不能乱建索引</h2><ol><li>如果冗余索引过多，表的数据变化的时候，很有可能导致索引的频繁更新。会阻塞很多正常的业务更新请求。</li><li>索引过多，会导致优化器选择出现偏差。</li></ol><h2 id="管理命令"><a href="#管理命令" class="headerlink" title="管理命令"></a>管理命令</h2><ol><li><p>查询表的索引情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; desc city;</span><br><span class="line">db01 [world]&gt;desc city;</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| Field      | Type    | Null | Key | Default | Extra          |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">| ID          | int(11)  | NO  | PRI | NULL    | auto_increment |</span><br><span class="line">| Name        | char(35) | NO  |    |        |                |</span><br><span class="line">| CountryCode | char(3)  | NO  | MUL |        |                |</span><br><span class="line">| District    | char(20) | NO  |    |        |                |</span><br><span class="line">| Population  | int(11)  | NO  |    | 0      |                |</span><br><span class="line">+-------------+----------+------+-----+---------+----------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">Field :列名字</span><br><span class="line">key  :有没有索引,索引类型</span><br><span class="line">PRI: 主键索引</span><br><span class="line">UNI: 唯一索引</span><br><span class="line">MUL: 辅助索引(单列,联和,前缀)</span><br><span class="line">key:PRI 聚簇索引  MUL辅助索引  UNI唯一索引</span><br><span class="line"></span><br><span class="line">mysql&gt; show index from city;</span><br></pre></td></tr></table></figure></li><li><p>建立索引</p><p>分析业务语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt;select * from city where name&#x3D;&#39;wuhan&#39;;</span><br><span class="line">mysql&gt;alter table city add index idx_na(name);</span><br><span class="line"></span><br><span class="line">mysql&gt;create index idx_name1 on city(name);</span><br></pre></td></tr></table></figure></li><li><p>删除索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; alter table city drop index idx_na;</span><br></pre></td></tr></table></figure></li></ol><h3 id="覆盖索引-联合索引"><a href="#覆盖索引-联合索引" class="headerlink" title="覆盖索引(联合索引)"></a>覆盖索引(联合索引)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Master [world]&gt;alter table city add index idx_co_po(countrycode,population);</span><br></pre></td></tr></table></figure><h3 id="前缀索引"><a href="#前缀索引" class="headerlink" title="前缀索引"></a>前缀索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;alter table city add index idx_di(district(5));</span><br><span class="line">注意：数字列不能用作前缀索引。</span><br></pre></td></tr></table></figure><h3 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db01 [world]&gt;alter table city add unique index idx_uni1(name);</span><br><span class="line">ERROR 1062 (23000): Duplicate entry &#39;San Jose&#39; for key &#39;idx_uni1&#39;</span><br></pre></td></tr></table></figure><p>统计city表中，以省的名字为分组，统计组的个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select district,count(id) from city group by district;</span><br><span class="line">需求: 找到world下,city表中 name列有重复值的行,最后删掉重复的行</span><br><span class="line">db01 [world]&gt;select name,count(id) as cid from city group by name  having cid&gt;1 order by cid desc;</span><br><span class="line">db01 [world]&gt;select * from city where name&#x3D;&#39;suzhou&#39;;</span><br></pre></td></tr></table></figure><h1 id="执行计划获取及分析"><a href="#执行计划获取及分析" class="headerlink" title="执行计划获取及分析"></a>执行计划获取及分析</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>(1)<br>获取到的是优化器选择完成的认为代价最小的执行计划.<br>作用: 语句执行前,先看执行计划信息,可以有效的防止性能较差的语句带来的性能问题.<br>如果业务中出现了慢语句，我们也需要借助此命令进行语句的评估，分析优化方案。<br>(2) select 获取数据的方法</p><ol><li>全表扫描(应当尽量避免,因为性能低)</li><li>索引扫描</li><li>获取不到数据</li></ol><h2 id="执行计划获取"><a href="#执行计划获取" class="headerlink" title="执行计划获取"></a>执行计划获取</h2><p>获取优化器选择后的执行计划</p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-54b2b99aaf0b2783.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/873/format/webp" alt="img"></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-03030eb1a5dc92de.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p><h2 id="执行计划分析"><a href="#执行计划分析" class="headerlink" title="执行计划分析"></a>执行计划分析</h2><h3 id="重点关注的信息"><a href="#重点关注的信息" class="headerlink" title="重点关注的信息"></a>重点关注的信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">table: city                              ----&gt;查询操作的表，针对多表时，精确到问题表</span><br><span class="line">possible_keys: CountryCode,idx_co_po     ----&gt;可能会走的索引</span><br><span class="line">key: CountryCode                         ----&gt;真正走的索引</span><br><span class="line">key_len:NULL ----&gt;联合索引覆盖长度</span><br><span class="line">type: ref                                ----&gt;索引类型  </span><br><span class="line">rows: 997261 ----&gt;此次查询需要扫描的行数</span><br><span class="line">Extra: Using index condition             ----&gt;额外信息    </span><br></pre></td></tr></table></figure><h3 id="type详解"><a href="#type详解" class="headerlink" title="type详解"></a>type详解</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">ALL  :  </span><br><span class="line">全表扫描,不走索引</span><br><span class="line">例子:</span><br><span class="line">1. 查询条件列,没有索引</span><br><span class="line">SELECT * FROM t_100w WHERE k2&#x3D;&#39;780P&#39;;  </span><br><span class="line">2. 查询条件出现以下语句(辅助索引列)</span><br><span class="line">USE world </span><br><span class="line">DESC city;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode &lt;&gt; &#39;CHN&#39;;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode NOT IN (&#39;CHN&#39;,&#39;USA&#39;);</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode LIKE &#39;%CH%&#39;;</span><br><span class="line">注意:对于聚集索引列,使用以上语句,依然会走索引</span><br><span class="line">DESC SELECT * FROM city WHERE id &lt;&gt; 10;</span><br><span class="line"></span><br><span class="line">索引扫描</span><br><span class="line">index &lt; range &lt; ref &lt; eq_ref &lt; const(system)</span><br><span class="line">从左到右性能依次变好</span><br><span class="line"></span><br><span class="line">INDEX  :</span><br><span class="line">全索引扫描</span><br><span class="line">1. 查询需要获取整个索引树中的值时:</span><br><span class="line">DESC  SELECT countrycode  FROM city;</span><br><span class="line"></span><br><span class="line">2. 联合索引中,任何一个非最左列作为查询条件时:</span><br><span class="line">idx_a_b_c(a,b,c)  ---&gt; a  ab  abc</span><br><span class="line"></span><br><span class="line">SELECT * FROM t1 WHERE b </span><br><span class="line">SELECT * FROM t1 WHERE c    </span><br><span class="line"></span><br><span class="line">RANGE :</span><br><span class="line">索引范围扫描 </span><br><span class="line">辅助索引&gt; &lt; &gt;&#x3D; &lt;&#x3D; LIKE IN OR BETWEEN AND</span><br><span class="line">主键 &lt;&gt;  NOT IN</span><br><span class="line">例子:</span><br><span class="line">1. </span><br><span class="line">DESC SELECT * FROM city WHERE id&lt;5;</span><br><span class="line">2. </span><br><span class="line">DESC SELECT * FROM city WHERE countrycode LIKE &#39;CH%&#39;;</span><br><span class="line">3. </span><br><span class="line">DESC SELECT * FROM city WHERE countrycode IN (&#39;CHN&#39;,&#39;USA&#39;);</span><br><span class="line">注意: </span><br><span class="line">1和2例子中,可以享受到B+树的优势,但是3例子中是不能享受的.</span><br><span class="line">所以,我们可以将3号列子改写:</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">UNION ALL </span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;USA&#39;;</span><br><span class="line"></span><br><span class="line">ref: </span><br><span class="line">非唯一性索引,等值查询</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;;</span><br><span class="line"></span><br><span class="line">eq_ref: </span><br><span class="line">在多表连接时,非驱动表连接条件使用了唯一索引(uk  pK)</span><br><span class="line"></span><br><span class="line">DESC SELECT b.name,a.name FROM city AS a </span><br><span class="line">JOIN country AS b </span><br><span class="line">ON a.countrycode&#x3D;b.code </span><br><span class="line">WHERE a.population &lt;100;</span><br><span class="line">DESC country</span><br><span class="line"></span><br><span class="line">system,const :</span><br><span class="line">唯一索引的等值查询</span><br><span class="line">DESC SELECT * FROM city WHERE id&#x3D;10;</span><br></pre></td></tr></table></figure><h3 id="key-len解释"><a href="#key-len解释" class="headerlink" title="key_len解释"></a>key_len解释</h3><p>对于联合索引index(a,b,c)，我们希望将来的查询语句，对于联合索引应用越充分越好。<br>key_len可以帮助我们判断，此次查询，走了联合索引的几部分。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">全部覆盖:</span><br><span class="line">select * from t1 where a&#x3D; and b&#x3D; and c&#x3D;</span><br><span class="line">select * from t1 where a in and b in and c in</span><br><span class="line">select * from t1 where b&#x3D; and c&#x3D; and a&#x3D;</span><br><span class="line">部分覆盖:</span><br><span class="line">select *from t1 where a&#x3D;and b&#x3D;</span><br><span class="line">select * from t1 where a&#x3D;</span><br><span class="line">select * from t1 where a&#x3D; and c&#x3D;</span><br><span class="line">select * from t1 where a&#x3D; and b &gt; &lt; &gt;&#x3D; &lt;&#x3D; like and c&#x3D;</span><br><span class="line">select xxxfrom t1 where a order by b</span><br><span class="line">不覆盖:</span><br><span class="line">b</span><br><span class="line">bc</span><br><span class="line">c</span><br></pre></td></tr></table></figure><p>key_len的计算：idx(a,b,c)</p><p>假设某条查询可以完全覆盖三列联合索引。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from t1 where a&#x3D; and b&#x3D; and c&#x3D;</span><br></pre></td></tr></table></figure><p>key_len=a长度+b长度+c长度</p><p>长度指的是什么？</p><p>长度受到：数据类型，字符集影响</p><p>长度指的是：列的最大储值字节长度</p><p>数字：</p><p>​                        not null                      没有not null</p><ul><li>tinyint    1                                      1+1</li><li>int           4                                     4+1</li><li>bigint     8                                     8+1</li></ul><p>字符：utf8 —–&gt; 一个字符最大占3个字节</p><p>​                                not null                 没有not null</p><ul><li>char(10)       3*10                         3*10+1</li><li>vchar(10)     3*10+2                   3*10+2+1</li></ul><p>例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table t1 (</span><br><span class="line">a int not null,</span><br><span class="line">b int,</span><br><span class="line">c int char(10) not null,</span><br><span class="line">d varchar (10)</span><br><span class="line">) charset &#x3D; utf8mb4</span><br><span class="line">index(a,b,c,d)</span><br><span class="line"></span><br><span class="line">问：查询中完全覆盖4列索引，key_len是多少？</span><br><span class="line">答：4+5+40+43&#x3D;92</span><br></pre></td></tr></table></figure><h3 id="其他字段解释"><a href="#其他字段解释" class="headerlink" title="其他字段解释"></a>其他字段解释</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">extra: </span><br><span class="line">filesort ,文件排序.</span><br><span class="line">SHOW INDEX FROM city;</span><br><span class="line">ALTER TABLE city ADD INDEX CountryCode(CountryCode);</span><br><span class="line">ALTER TABLE city DROP INDEX idx_c_p;</span><br><span class="line"></span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line"></span><br><span class="line">ALTER TABLE city ADD INDEX idx_(population);</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line">ALTER TABLE city ADD INDEX idx_c_p(countrycode,population);</span><br><span class="line">ALTER TABLE city DROP INDEX idx_;</span><br><span class="line">ALTER TABLE city DROP INDEX CountryCode;</span><br><span class="line">DESC SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;  ORDER BY population </span><br><span class="line"></span><br><span class="line">结论: </span><br><span class="line">1.当我们看到执行计划extra位置出现filesort,说明由文件排序出现</span><br><span class="line">2.观察需要排序(ORDER BY,GROUP BY ,DISTINCT )的条件,有没有索引</span><br><span class="line">3. 根据子句的执行顺序,去创建联合索引</span><br><span class="line"></span><br><span class="line">索引优化效果测试:</span><br><span class="line">优化前:</span><br><span class="line">[root@db01 ~]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf \</span><br><span class="line">&gt; --concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;oldboy&#39; \</span><br><span class="line">&gt; --query&#x3D;&quot;select * from oldboy.t_100w where k2&#x3D;&#39;780P&#39;&quot; engine&#x3D;innodb \</span><br><span class="line">&gt; --number-of-queries&#x3D;2000 -uroot -p123 -verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine rbose</span><br><span class="line">    Average number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 701.743 seconds</span><br><span class="line">    Number of clients running queries: 100</span><br><span class="line">    Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">优化后:</span><br><span class="line">[root@db01 ~]# mysqlslap --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf --concurrency&#x3D;100 --iterations&#x3D;1 --create-schema&#x3D;&#39;oldboy&#39; --query&#x3D;&quot;select * from oldboy.t_100w where k2&#x3D;&#39;780P&#39;&quot; engine&#x3D;innodb --number-of-queries&#x3D;2000 -uroot -p123 -verbose</span><br><span class="line">mysqlslap: [Warning] Using a password on the command line interface can be insecure.</span><br><span class="line">Benchmark</span><br><span class="line">    Running for engine rbose</span><br><span class="line">    Average number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Minimum number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Maximum number of seconds to run all queries: 0.190 seconds</span><br><span class="line">    Number of clients running queries: 100</span><br><span class="line">    Average number of queries per client: 20</span><br><span class="line"></span><br><span class="line">联合索引:</span><br><span class="line">1. SELECT * FROM t1  WHERE a&#x3D;    b&#x3D;   </span><br><span class="line">我们建立联合索引时:</span><br><span class="line">ALTER TABLE t1 ADD INDEX idx_a_b(a,b);  </span><br><span class="line">ALTER TABLE t1 ADD INDEX idx_b_a(b,a);  </span><br><span class="line">以上的查询不考虑索引的顺序,优化器会自动调整where的条件顺序</span><br><span class="line">注意: 索引,我们在这种情况下建索引时,需要考虑哪个列的唯一值更多,哪个放在索引左边.</span><br><span class="line"></span><br><span class="line">2.  如果出现where 条件中出现不等值查询条件</span><br><span class="line">DESC  SELECT * FROM t_100w WHERE num &lt;1000 AND k2&#x3D;&#39;DEEF&#39;;</span><br><span class="line">我们建索引时:</span><br><span class="line">ALTER TABLE t_100w ADD INDEX idx_2_n(k2,num);</span><br><span class="line">语句书写时</span><br><span class="line">DESC  SELECT * FROM t_100w WHERE  k2&#x3D;&#39;DEEF&#39;  AND  num &lt;1000 ;</span><br><span class="line">3. 如果查询中出现多子句</span><br><span class="line">我们要按照子句的执行顺序进行建立索引.</span><br></pre></td></tr></table></figure><h3 id="explain-desc-使用场景（面试题）"><a href="#explain-desc-使用场景（面试题）" class="headerlink" title="explain(desc)使用场景（面试题）"></a>explain(desc)使用场景（面试题）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">题目意思:  我们公司业务慢,请你从数据库的角度分析原因</span><br><span class="line">1.mysql出现性能问题,我总结有两种情况:</span><br><span class="line">（1）应急性的慢：突然夯住</span><br><span class="line">应急情况:数据库hang(卡了,资源耗尽)</span><br><span class="line">处理过程:</span><br><span class="line">1.show processlist;  获取到导致数据库hang的语句</span><br><span class="line">2. explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">3. 建索引,改语句</span><br><span class="line">（2）一段时间慢(持续性的):</span><br><span class="line">(1)记录慢日志slowlog,分析slowlog</span><br><span class="line">(2)explain 分析SQL的执行计划,有没有走索引,索引的类型情况</span><br><span class="line">(3)建索引,改语句</span><br></pre></td></tr></table></figure><h1 id="索引应用规范"><a href="#索引应用规范" class="headerlink" title="索引应用规范"></a>索引应用规范</h1><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">业务</span><br><span class="line"><span class="number">1</span>.产品的功能</span><br><span class="line"><span class="number">2</span>.用户的行为</span><br><span class="line"><span class="string">&quot;热&quot;</span>查询语句 ---&gt;较慢---&gt;slowlog</span><br><span class="line"><span class="string">&quot;热&quot;</span>数据</span><br></pre></td></tr></table></figure><h2 id="建立索引的原则（DBA运维规范）"><a href="#建立索引的原则（DBA运维规范）" class="headerlink" title="建立索引的原则（DBA运维规范）"></a>建立索引的原则（DBA运维规范）</h2><h3 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h3><p>为了使索引的使用效率更高，在创建索引时，必须考虑在哪些字段上创建索引和创建什么类型的索引。那么索引设计原则又是怎样的?</p><h3 id="必须的-建表时一定要有主键-一般是个无关列"><a href="#必须的-建表时一定要有主键-一般是个无关列" class="headerlink" title="(必须的) 建表时一定要有主键,一般是个无关列"></a>(必须的) 建表时一定要有主键,一般是个无关列</h3><p>略.回顾一下,聚集索引结构.</p><h3 id="选择唯一性索引"><a href="#选择唯一性索引" class="headerlink" title="选择唯一性索引"></a>选择唯一性索引</h3><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。<br>例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。<br>如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><p>优化方案:<br>(1) 如果非得使用重复值较多的列作为查询条件(例如:男女),可以将表逻辑拆分<br>(2) 可以将此列和其他的查询类,做联和索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select count(*) from world.city;</span><br><span class="line">select count(distinct countrycode) from world.city;</span><br><span class="line">select count(distinct countrycode,population ) from world.city;</span><br></pre></td></tr></table></figure><h3 id="必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，"><a href="#必须的-为经常需要where-、ORDER-BY、GROUP-BY-join-on等操作的字段，" class="headerlink" title="(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，"></a>(必须的) 为经常需要where 、ORDER BY、GROUP BY,join on等操作的字段，</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">排序操作会浪费很多时间。</span><br><span class="line">where  A B C      ----》 A  B  C</span><br><span class="line">in </span><br><span class="line">where A   group by B  order by C</span><br><span class="line">A,B，C</span><br><span class="line"></span><br><span class="line">如果为其建立索引，优化查询</span><br><span class="line">注：如果经常作为条件的列，重复值特别多，可以建立联合索引。</span><br></pre></td></tr></table></figure><h3 id="尽量使用前缀来索引"><a href="#尽量使用前缀来索引" class="headerlink" title="尽量使用前缀来索引"></a>尽量使用前缀来索引</h3><p>如果索引字段的值很长，最好使用值的前缀来索引。</p><h3 id="限制索引的数目"><a href="#限制索引的数目" class="headerlink" title="限制索引的数目"></a>限制索引的数目</h3><p>索引的数目不是越多越好。<br>可能会产生的问题:<br>(1) 每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。<br>(2) 修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。<br>(3) 优化器的负担会很重,有可能会影响到优化器的选择.<br>percona-toolkit中有个工具,专门分析索引是否有用</p><h3 id="删除不再使用或者很少使用的索引-percona-toolkit"><a href="#删除不再使用或者很少使用的索引-percona-toolkit" class="headerlink" title="删除不再使用或者很少使用的索引(percona toolkit)"></a>删除不再使用或者很少使用的索引(percona toolkit)</h3><p>pt-duplicate-key-checker</p><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理<br>员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h3 id="大表加索引-要在业务不繁忙期间操作"><a href="#大表加索引-要在业务不繁忙期间操作" class="headerlink" title="大表加索引,要在业务不繁忙期间操作"></a>大表加索引,要在业务不繁忙期间操作</h3><h3 id="尽量少在经常更新值的列上建索引"><a href="#尽量少在经常更新值的列上建索引" class="headerlink" title="尽量少在经常更新值的列上建索引"></a>尽量少在经常更新值的列上建索引</h3><h3 id="建索引原则"><a href="#建索引原则" class="headerlink" title="建索引原则"></a>建索引原则</h3><p>(1) 必须要有主键,如果没有可以做为主键条件的列,创建无关列<br>(2) 经常做为where条件列  order by  group by  join on, distinct 的条件(业务:产品功能+用户行为)<br>(3) 最好使用唯一值多的列作为索引,如果索引列重复值较多,可以考虑使用联合索引<br>(4) 列值长度较长的索引列,我们建议使用前缀索引.<br>(5) 降低索引条目,一方面不要创建没用索引,不常使用的索引清理,percona toolkit(xxxxx)<br>(6) 索引维护要避开业务繁忙期</p><h2 id="不走索引的情况（开发规范）"><a href="#不走索引的情况（开发规范）" class="headerlink" title="不走索引的情况（开发规范）"></a>不走索引的情况（开发规范）</h2><h3 id="没有查询条件，或者查询条件没有建立索引"><a href="#没有查询条件，或者查询条件没有建立索引" class="headerlink" title="没有查询条件，或者查询条件没有建立索引"></a>没有查询条件，或者查询条件没有建立索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select * from tab;       全表扫描。</span><br><span class="line">select  * from tab where 1&#x3D;1;</span><br><span class="line">在业务数据库中，特别是数据量比较大的表。</span><br><span class="line">是没有全表扫描这种需求。</span><br><span class="line">1、对用户查看是非常痛苦的。</span><br><span class="line">2、对服务器来讲毁灭性的。</span><br><span class="line">（1）</span><br><span class="line">select * from tab;</span><br><span class="line">SQL改写成以下语句：</span><br><span class="line">select  * from  tab  order by  price  limit 10 ;    需要在price列上建立索引</span><br><span class="line">（2）</span><br><span class="line">select  * from  tab where name&#x3D;&#39;zhangsan&#39;          name列没有索引</span><br><span class="line">改：</span><br><span class="line">1、换成有索引的列作为查询条件</span><br><span class="line">2、将name列建立索引</span><br></pre></td></tr></table></figure><h3 id="查询结果集是原表中的大部分数据，应该是25％以上"><a href="#查询结果集是原表中的大部分数据，应该是25％以上" class="headerlink" title="查询结果集是原表中的大部分数据，应该是25％以上"></a>查询结果集是原表中的大部分数据，应该是25％以上</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">查询的结果集，超过了总数行数25%，优化器觉得就没有必要走索引了。</span><br><span class="line"></span><br><span class="line">假如：tab表 id，name    id:1-100w  ，id列有(辅助)索引</span><br><span class="line">select * from tab  where id&gt;500000;</span><br><span class="line">如果业务允许，可以使用limit控制。</span><br><span class="line">怎么改写 ？</span><br><span class="line">结合业务判断，有没有更好的方式。如果没有更好的改写方案</span><br><span class="line">尽量不要在mysql存放这个数据了。放到redis里面。</span><br></pre></td></tr></table></figure><h3 id="索引本身失效，统计数据不真实"><a href="#索引本身失效，统计数据不真实" class="headerlink" title="索引本身失效，统计数据不真实"></a>索引本身失效，统计数据不真实</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">索引有自我维护的能力。</span><br><span class="line">对于表内容变化比较频繁的情况下，有可能会出现索引失效。</span><br><span class="line">一般是删除重建</span><br><span class="line">现象:</span><br><span class="line">有一条select语句平常查询时很快,突然有一天很慢,会是什么原因</span><br><span class="line">select?  ---&gt;索引失效,，统计数据不真实</span><br><span class="line">DML ?   ---&gt;锁冲突</span><br><span class="line"></span><br><span class="line">可以通过optimize table xxx;</span><br></pre></td></tr></table></figure><h3 id="查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等"><a href="#查询条件使用函数在索引列上，或者对索引列进行运算，运算包括-，-，-，-，-等" class="headerlink" title="查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)"></a>查询条件使用函数在索引列上，或者对索引列进行运算，运算包括(+，-，*，/，! 等)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">例子：</span><br><span class="line">错误的例子：select * from test where id-1&#x3D;9;</span><br><span class="line">正确的例子：select * from test where id&#x3D;10;</span><br><span class="line">算术运算</span><br><span class="line">函数运算</span><br><span class="line">子查询</span><br></pre></td></tr></table></figure><h3 id="隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误"><a href="#隐式转换导致索引失效-这一点应当引起重视-也是开发中经常会犯的错误" class="headerlink" title="隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误."></a>隐式转换导致索引失效.这一点应当引起重视.也是开发中经常会犯的错误.</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">这样会导致索引失效. 错误的例子：</span><br><span class="line">mysql&gt; alter table tab add index inx_tel(telnum);</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br><span class="line">Records: 0  Duplicates: 0  Warnings: 0</span><br><span class="line">mysql&gt;</span><br><span class="line">mysql&gt; desc tab;</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| Field  | Type        | Null | Key | Default | Extra |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">| id    | int(11)    | YES  |    | NULL    |      |</span><br><span class="line">| name  | varchar(20) | YES  |    | NULL    |      |</span><br><span class="line">| telnum | varchar(20) | YES  | MUL | NULL    |      |</span><br><span class="line">+--------+-------------+------+-----+---------+-------+</span><br><span class="line">3 rows in set (0.01 sec)</span><br><span class="line">mysql&gt; select * from tab where telnum&#x3D;&#39;1333333&#39;;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; select * from tab where telnum&#x3D;1333333;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;&#39;1333333&#39;;</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref  | rows | Extra                |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line"></span><br><span class="line">|  1 | SIMPLE      | tab  | ref  | inx_tel      | inx_tel | 63      | const |    1 | Using index condition |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;1333333;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra      |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ALL  | inx_tel      | NULL | NULL    | NULL |    2 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;1555555;</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows | Extra      |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ALL  | inx_tel      | NULL | NULL    | NULL |    2 | Using where |</span><br><span class="line">+----+-------------+-------+------+---------------+------+---------+------+------+-------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain  select * from tab where telnum&#x3D;&#39;1555555&#39;;</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">| id | select_type | table | type | possible_keys | key    | key_len | ref  | rows | Extra                |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">|  1 | SIMPLE      | tab  | ref  | inx_tel      | inx_tel | 63      | const |    1 | Using index condition |</span><br><span class="line">+----+-------------+-------+------+---------------+---------+---------+-------+------+-----------------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><h3 id="lt-gt-，not-in-不走索引（辅助索引）"><a href="#lt-gt-，not-in-不走索引（辅助索引）" class="headerlink" title="&lt;&gt;  ，not in 不走索引（辅助索引）"></a>&lt;&gt;  ，not in 不走索引（辅助索引）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  &lt;&gt; &#39;110&#39;;</span><br><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  NOT IN (&#39;110&#39;,&#39;119&#39;);</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from tab where telnum &lt;&gt; &#39;1555555&#39;;</span><br><span class="line">+------+------+---------+</span><br><span class="line">| id  | name | telnum  |</span><br><span class="line">+------+------+---------+</span><br><span class="line">|    1 | a    | 1333333 |</span><br><span class="line">+------+------+---------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line">mysql&gt; explain select * from tab where telnum &lt;&gt; &#39;1555555&#39;;</span><br><span class="line"></span><br><span class="line">单独的&gt;,&lt;,in 有可能走，也有可能不走，和结果集有关，尽量结合业务添加limit</span><br><span class="line">or或in  尽量改成union</span><br><span class="line">EXPLAIN  SELECT * FROM teltab WHERE telnum  IN (&#39;110&#39;,&#39;119&#39;);</span><br><span class="line">改写成：</span><br><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum&#x3D;&#39;110&#39;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM teltab WHERE telnum&#x3D;&#39;119&#39;</span><br></pre></td></tr></table></figure><h3 id="like-“-”-百分号在最前面不走"><a href="#like-“-”-百分号在最前面不走" class="headerlink" title="like “%_” 百分号在最前面不走"></a>like “%_” 百分号在最前面不走</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE &#39;31%&#39;  走range索引扫描</span><br><span class="line">EXPLAIN SELECT * FROM teltab WHERE telnum LIKE &#39;%110&#39;  不走索引</span><br><span class="line">%linux%类的搜索需求，可以使用elasticsearch+mongodb 专门做搜索服务的数据库产品</span><br></pre></td></tr></table></figure><h1 id="优化器针对索引的算法"><a href="#优化器针对索引的算法" class="headerlink" title="优化器针对索引的算法"></a>优化器针对索引的算法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">| @@optimizer_switch                                                                                                 index_merge&#x3D;on,index_merge_union&#x3D;on,index_merge_sort_union&#x3D;on,index_merge_intersection&#x3D;on,engine_condition_pushdown&#x3D;on,index_condition_pushdown&#x3D;on,mrr&#x3D;on,mrr_cost_based&#x3D;on,block_nested_loop&#x3D;on,batched_key_access&#x3D;off,materialization&#x3D;on,semijoin&#x3D;on,loosescan&#x3D;on,firstmatch&#x3D;on,duplicateweedout&#x3D;on,subquery_materialization_cost_based&#x3D;on,use_index_extensions&#x3D;on,condition_fanout_filter&#x3D;on,derived_merge&#x3D;on,use_invisible_indexes&#x3D;off,skip_scan&#x3D;on,hash_join&#x3D;on |</span><br></pre></td></tr></table></figure><p>如何修改</p><ol><li>my.cnf</li><li>set global optimizer_switch=’xxx’</li><li>hints</li></ol><h2 id="MySQL索引的自优化-AHI-自适应哈希索引"><a href="#MySQL索引的自优化-AHI-自适应哈希索引" class="headerlink" title="MySQL索引的自优化-AHI(自适应哈希索引)"></a>MySQL索引的自优化-AHI(自适应哈希索引)</h2><p>MySQL的InnoDB引擎能够创建的只有Btree</p><p>AHI作用：自动评估”热”内存索引page，生成HASH索引表。帮助InnoDB快速读取索引页，加快索引的读取，相当于索引的索引</p><h2 id="MySQL的自优化-Change-buffer"><a href="#MySQL的自优化-Change-buffer" class="headerlink" title="MySQL的自优化-Change buffer"></a>MySQL的自优化-Change buffer</h2><p>比如insert，update，delete数据。对于聚簇索引会立即更新。对于辅助索引，不是实时更新的。<br>在InnoDB内存结构中，加入了insert buffer（会话），现在版本叫change 。Change buffer功能是临时缓冲辅助索引需要的数据更新。当我们需要查询新insert的数据，会在内存中进行merge(合并)操作，此时辅助索引就是最新的。</p><h2 id="ICP"><a href="#ICP" class="headerlink" title="ICP"></a>ICP</h2><p>作用：</p><p>解决了联合索引只能部分应用情况。</p><p>为了减少没必要的数据页被扫描，将不走索引的条件在engine层取数据之前先做二次过滤</p><p>索引下推</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">index(a,b,c)</span><br><span class="line">select * from t1 where a&#x3D; and c&#x3D;</span><br></pre></td></tr></table></figure><p>在Server先做a列过滤条件的索引优化，将c列的过滤下推到engine层先做过虑，加载数据页。</p><h2 id="MRR"><a href="#MRR" class="headerlink" title="MRR"></a>MRR</h2><p>muti range read</p><p>辅助索引 ————-&gt; 聚簇索引</p><p>转化为</p><p>辅助索引 ————&gt; sort id –回表–&gt; 聚簇索引</p><h2 id="SNLJ"><a href="#SNLJ" class="headerlink" title="SNLJ"></a>SNLJ</h2><p>例子:<br>A join B on A.xx=B.yy where …<br>伪代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">for each row in A matching range &#123;</span><br><span class="line">for each row in B &#123;</span><br><span class="line">A.xx&#x3D; B.yy , send to client</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上例子，可以通过left join 强制驱动表</p><h2 id="BNLJ"><a href="#BNLJ" class="headerlink" title="BNLJ"></a>BNLJ</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807143725152.png" alt="image-20200807143725152"></p><p>在A和B关联条件匹配时，不再一次一次进行循环。而是采用一次性将驱动表的关联值和非驱动表匹配，一次性返回结果。</p><p>主要优化了CPU消耗和减少了IO次数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In EXPLAIN output,</span><br><span class="line">use ofBNL for a table is signified</span><br><span class="line">when the Extra value contains using join buffer(Block Nested Loop)</span><br></pre></td></tr></table></figure><h2 id="BKA"><a href="#BKA" class="headerlink" title="BKA"></a>BKA</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807143649253.png" alt="image-20200807143649253"></p><p>作用：用来优化非驱动表的关联列有辅助索引</p><p>依赖于MRR</p><p>开启方式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; set global optimizer_switch&#x3D;&#39;mrr&#x3D;on,mrr_cost_based&#x3D;off&#39;;</span><br><span class="line">mysql&gt; set global optimizer_switch&#x3D;&#39;batched_key_access&#x3D;on &#39;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-DBA-03-SQL基础应用</title>
      <link href="2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-03-SQL%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/"/>
      <url>2020/09/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-03-SQL%E5%9F%BA%E7%A1%80%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="SQL介绍"><a href="#SQL介绍" class="headerlink" title="SQL介绍"></a>SQL介绍</h1><ul><li>结构化查询语言，关系型数据库中通用的一类语言</li><li>5.7 以后符合SQL92严格模式</li><li>通过sql_mode参数来控制</li></ul><h1 id="常用SQL分类"><a href="#常用SQL分类" class="headerlink" title="常用SQL分类"></a>常用SQL分类</h1><p>MySQL客户端自带的功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; help</span><br></pre></td></tr></table></figure><p>Server端分类命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; help contents</span><br></pre></td></tr></table></figure><ul><li>DDL：数据定义语言</li><li>DCL：数据控制语言</li><li>DML：数据操作语言</li><li>DQL：数据的查询语言</li></ul><h1 id="SQL的各种名词"><a href="#SQL的各种名词" class="headerlink" title="SQL的各种名词"></a>SQL的各种名词</h1><h2 id="sql-mode-SQL模式"><a href="#sql-mode-SQL模式" class="headerlink" title="sql_mode SQL模式"></a>sql_mode SQL模式</h2><p>作用：规范SQL语句的书写方式，符合逻辑</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select @@sql_mode;</span><br><span class="line">ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION </span><br></pre></td></tr></table></figure><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>保证数据的准确性和标准性。</p><h3 id="种类"><a href="#种类" class="headerlink" title="种类"></a>种类</h3><p><strong>数值类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-6cb8cf2c0c681252.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/639/format/webp" alt="img"><br>说明：手机号是无法存储到int的。一般是使用char类型来存储收集号</p><p><strong>字符类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-599be7ba0c7040a9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/609/format/webp" alt="img"></p><p>char(11) ：<br>定长的字符串类型,在存储字符串时，最大字符长度11个，立即分配11个字符长度的存储空间，如果存不满，空格填充。<br>varchar(11):<br>变长的字符串类型看，最大字符长度11个。在存储字符串时，会先判断字符长度，按需分配存储空间。除了会存储字符串之外，还会额外使用1-2字节存储字符长度</p><p>以上两种数据类型选择需考虑周全，会影响到索引应用。括号中，设置的是字符的个数，无关字符类型。但是，不同种类的字符，占用的存储空间是不一样的，对于英文和数字，每个字符占1个字节长度，对于中文，占用空间大小要考虑字符集</p><hr><p>enum(‘bj’,’js’,’sz’) 枚举类型</p><p>​              1     2    3    “下标索引”</p><p>枚举类型，比较适合于将来此列的值是固定范围内的特点，可以使用enum,可以很大程度的优化我们的索引结构。</p><p><strong>时间类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-7abec7820bfb10cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/645/format/webp" alt="img"></p><p>DATETIME(8个字节)<br>范围为从 1000-01-01 00:00:00.000000 至 9999-12-31 23:59:59.999999。<br>TIMESTAMP(4个字节)<br>1970-01-01 00:00:00.000000 至 2038-01-19 03:14:07.999999。<br>timestamp会受到时区的影响</p><p><strong>二进制类型</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-f69aa8a185589451.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/637/format/webp" alt="img"></p><p><strong>json类型</strong></p><h2 id="列属性"><a href="#列属性" class="headerlink" title="列属性"></a>列属性</h2><p>列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空。可以设置默认值为0</p><p>约束(一般建表时添加):</p><ul><li><strong>primary key</strong> ：主键约束<br>设置为主键的列，此列的值必须非空且唯一，主键在一个表中只能有一个，但是可以有多个列一起构成。</li><li><strong>not null</strong>      ：非空约束<br>列值不能为空，也是表设计的规范，尽可能将所有的列设置为非空。可以设置默认值为0</li><li><strong>unique key</strong> ：唯一键<br>列值不能重复</li><li><strong>unsigned</strong> ：无符号<br>针对数字列，非负数。</li></ul><p>其他属性:</p><ul><li><strong>key</strong> :索引<br>可以在某列上建立索引，来优化查询,一般是根据需要后添加</li><li><strong>default</strong> :默认值<br>列中，没有录入值时，会自动使用default的值填充</li><li><strong>auto_increment</strong>:自增长<br>针对数字列，顺序的自动填充数据（默认是从1开始，将来可以设定起始点和偏移量）</li><li>**comment ** : 注释</li></ul><h2 id="字符集和校对规则"><a href="#字符集和校对规则" class="headerlink" title="字符集和校对规则"></a>字符集和校对规则</h2><h3 id="字符集-charset"><a href="#字符集-charset" class="headerlink" title="字符集(charset)"></a>字符集(charset)</h3><p>查看当前mysql版本支持的字符集</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show charset;</span><br></pre></td></tr></table></figure><ul><li>utf8</li><li>utf8mb4(支持的编码比utf8更多，如emoji)，8.0+默认</li></ul><h3 id="校对规则-collation"><a href="#校对规则-collation" class="headerlink" title="校对规则(collation)"></a>校对规则(collation)</h3><p>查看当前mysql版本支持的校对规则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show collation;</span><br></pre></td></tr></table></figure><p>作用：影响到排序的操作，简单来说就是对大小写是否敏感</p><h1 id="SQL应用"><a href="#SQL应用" class="headerlink" title="SQL应用"></a>SQL应用</h1><h2 id="client"><a href="#client" class="headerlink" title="client"></a>client</h2><ul><li><p>help|?：查看帮助</p></li><li><p>\c：结束上条命令运行，类似ctrl+c</p></li><li><p>\G：格式化输出</p></li><li><p>exit|\q：退出MySQL会话(ctrl+d)</p></li><li><p>source：导入SQL脚本，类似&lt;</p></li><li><p>system：执行shell命令</p></li></ul><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><h3 id="DDL应用"><a href="#DDL应用" class="headerlink" title="DDL应用"></a>DDL应用</h3><p>数据定义语言</p><p>注意：在MySQL中，DDL语句在对表进行操作时，是要锁”元数据表”(类似于Linux的Inode信息)的。此时，所有修改类命令无法正常进行</p><p>所以：</p><ul><li>在对于大表，业务繁忙的表，进行DDL操作时，要谨慎</li><li>尽量避开业务繁忙期</li></ul><h4 id="库定义"><a href="#库定义" class="headerlink" title="库定义"></a>库定义</h4><p><strong>创建数据库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create database school;</span><br><span class="line">create schema sch;</span><br><span class="line">show charset;</span><br><span class="line">show collation;</span><br><span class="line">create DATABASE test CHARSET utf8;</span><br><span class="line">create database xyz charset utf8mb4 collate utf8mb4_bin;</span><br></pre></td></tr></table></figure><p>建库规范：<br>1.库名不能有大写字母   </p><p>2.建库要加字符集         </p><p>3.库名不能有数字开头</p><p>4.库名要和业务相关</p><p>建库标准语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; create database db charset utf8mb4;</span><br><span class="line">mysql&gt; show create database xuexiao;</span><br></pre></td></tr></table></figure><p><strong>删除(生产中禁止使用)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; drop database kinmfer;</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHOW CREATE DATABASE school;</span><br><span class="line">ALTER DATABASE school CHARSET utf8mb4;</span><br></pre></td></tr></table></figure><p>注意：修改字符集，修改后的字符集一定是原字符集的严格超集</p><p><strong>查询库</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">show databases；</span><br><span class="line">show create database kinmfer；</span><br></pre></td></tr></table></figure><h4 id="表定义"><a href="#表定义" class="headerlink" title="表定义"></a>表定义</h4><p><strong>创建</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table 库.表(</span><br><span class="line">列1  属性（数据类型、约束、其他属性） ，</span><br><span class="line">列2  属性，</span><br><span class="line">列3  属性</span><br><span class="line">)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USE school;</span><br><span class="line">CREATE TABLE stu(</span><br><span class="line">id      INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">sname   VARCHAR(255) NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">sage    TINYINT UNSIGNED NOT NULL DEFAULT 0 COMMENT &#39;年龄&#39;,</span><br><span class="line">sgender ENUM(&#39;m&#39;,&#39;f&#39;,&#39;n&#39;) NOT NULL DEFAULT &#39;n&#39; COMMENT &#39;性别&#39; ,</span><br><span class="line">sfz     CHAR(18) NOT NULL UNIQUE  COMMENT &#39;身份证&#39;,</span><br><span class="line">intime  TIMESTAMP NOT NULL DEFAULT NOW() COMMENT &#39;入学时间&#39;</span><br><span class="line">) ENGINE&#x3D;INNODB CHARSET&#x3D;utf8 COMMENT &#39;学生表&#39;;</span><br></pre></td></tr></table></figure><p>建表规范：</p><ol><li>表名小写(多平台兼容性问题)</li><li>不能是数字开头</li><li>注意字符集和存储引擎</li><li>表名和业务有关</li><li>选择合适的数据类型</li><li>每个列都要有注释</li><li>列名不要太长</li><li>每个列设置为非空，无法保证非空，用0来填充。</li><li>不能使用关键字</li><li>必须要有主键</li></ol><p><strong>删除(生产中禁用命令)</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table t1;</span><br></pre></td></tr></table></figure><p><strong>查询</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">show tables；</span><br><span class="line">desc stu;</span><br><span class="line">show create table stu；</span><br></pre></td></tr></table></figure><p><strong>修改</strong></p><p>在stu表中添加qq列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">DESC stu;</span><br><span class="line">ALTER TABLE stu ADD qq VARCHAR(20) NOT NULL UNIQUE COMMENT &#39;qq号&#39;;</span><br></pre></td></tr></table></figure><p>在sname后加微信列</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD wechat VARCHAR(64) NOT NULL UNIQUE  COMMENT &#39;微信号&#39; AFTER sname ;</span><br></pre></td></tr></table></figure><p>在id列前加一个新列num</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu ADD num INT NOT NULL COMMENT &#39;数字&#39; FIRST;</span><br><span class="line">DESC stu;</span><br></pre></td></tr></table></figure><p>把刚才添加的列都删掉(危险)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu DROP num;</span><br><span class="line">ALTER TABLE stu DROP qq;</span><br><span class="line">ALTER TABLE stu DROP wechat;</span><br></pre></td></tr></table></figure><p>修改sname数据类型的属性</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu MODIFY sname VARCHAR(128)  NOT NULL ;</span><br></pre></td></tr></table></figure><p>将sgender 改为 sg  数据类型改为 CHAR 类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE stu CHANGE sgender sg CHAR(1) NOT NULL DEFAULT &#39;n&#39; ;</span><br><span class="line">DESC stu;</span><br></pre></td></tr></table></figure><p>修改表名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table ts01 rename to ts01_new;</span><br></pre></td></tr></table></figure><p>…</p><h3 id="DCL应用"><a href="#DCL应用" class="headerlink" title="DCL应用"></a>DCL应用</h3><ul><li>grant </li><li>revoke</li></ul><h3 id="DML应用"><a href="#DML应用" class="headerlink" title="DML应用"></a>DML应用</h3><p><strong>作用</strong></p><p>对表中的数据行进行增、删、改</p><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--- 最标准的insert语句</span><br><span class="line">INSERT INTO stu(id,sname,sage,sg,sfz,intime) </span><br><span class="line">VALUES</span><br><span class="line">(1,&#39;zs&#39;,18,&#39;m&#39;,&#39;123456&#39;,NOW());</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line"></span><br><span class="line">--- 省事的写法</span><br><span class="line">INSERT INTO stu </span><br><span class="line">VALUES</span><br><span class="line">(2,&#39;ls&#39;,18,&#39;m&#39;,&#39;1234567&#39;,NOW());</span><br><span class="line"></span><br><span class="line">--- 针对性的录入数据</span><br><span class="line">INSERT INTO stu(sname,sfz)</span><br><span class="line">VALUES (&#39;w5&#39;,&#39;34445788&#39;);</span><br><span class="line"></span><br><span class="line">--- 同时录入多行数据</span><br><span class="line">INSERT INTO stu(sname,sfz)</span><br><span class="line">VALUES </span><br><span class="line">(&#39;w55&#39;,&#39;3444578d8&#39;),</span><br><span class="line">(&#39;m6&#39;,&#39;1212313&#39;),</span><br><span class="line">(&#39;aa&#39;,&#39;123213123123&#39;);</span><br><span class="line">SELECT * FROM stu;</span><br></pre></td></tr></table></figure><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DESC stu;</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line">UPDATE stu SET sname&#x3D;&#39;zhao4&#39; WHERE id&#x3D;2;</span><br><span class="line">注意：update语句必须要加where。</span><br></pre></td></tr></table></figure><h4 id="delete（危险！！）"><a href="#delete（危险！！）" class="headerlink" title="delete（危险！！）"></a>delete（危险！！）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM stu  WHERE id&#x3D;3;</span><br></pre></td></tr></table></figure><p>全表删除:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DELETE FROM stu;</span><br><span class="line">drop table stu;</span><br><span class="line">truncate table stu;</span><br><span class="line">区别:</span><br><span class="line">delete: DML操作, 是逻辑性质删除,逐行进行删除,速度慢.HWM不会降低</span><br><span class="line">drop: 将表结构(元数据)和数据行物理层次删除</span><br><span class="line">truncate: DDL操作,对与表段中的数据页进行清空,速度快，磁盘空间立即释放，HWM高水位线会降低</span><br></pre></td></tr></table></figure><p>常规办法：</p><p>都可以通过备份+日志恢复数据。</p><p>灵活办法：</p><p>delete可以通过反转日志(binlog)，也可以通过延时从库进行恢复</p><p>伪删除：用update来替代delete，最终保证业务中查不到（select）即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.添加状态列</span><br><span class="line">ALTER TABLE stu ADD state TINYINT NOT NULL DEFAULT 1 ;</span><br><span class="line">SELECT * FROM stu;</span><br><span class="line">2. UPDATE 替代 DELETE</span><br><span class="line">UPDATE stu SET state&#x3D;0 WHERE id&#x3D;6;</span><br><span class="line">3. 业务语句查询</span><br><span class="line">SELECT * FROM stu WHERE state&#x3D;1;</span><br></pre></td></tr></table></figure><h3 id="DQL应用-select"><a href="#DQL应用-select" class="headerlink" title="DQL应用(select )"></a>DQL应用(select )</h3><p>获取表中的数据行</p><h4 id="单独使用"><a href="#单独使用" class="headerlink" title="单独使用"></a>单独使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">-- select @@xxx 查看系统参数</span><br><span class="line">SELECT @@port;</span><br><span class="line">SELECT @@basedir;</span><br><span class="line">SELECT @@datadir;</span><br><span class="line">SELECT @@socket;</span><br><span class="line">SELECT @@server_id;</span><br></pre></td></tr></table></figure><p>– select 函数();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT NOW();</span><br><span class="line">SELECT DATABASE();</span><br><span class="line">SELECT version();</span><br><span class="line">SELECT USER();</span><br><span class="line">SELECT CONCAT(&quot;hello world&quot;);</span><br><span class="line">SELECT CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br><span class="line">SELECT GROUP_CONCAT(USER,&quot;@&quot;,HOST) FROM mysql.user;</span><br></pre></td></tr></table></figure><p><a href="https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html?tdsourcetag=s_pcqq_aiomsg">https://dev.mysql.com/doc/refman/5.7/en/func-op-summary-ref.html?tdsourcetag=s_pcqq_aiomsg</a></p><hr><p><strong>select默认执行顺序</strong></p><ol><li>from表1，表2</li><li>where过滤条件1，过滤条件2</li><li>group_by条件列1，条件列2</li><li>having过滤条件1 过滤条件2</li><li>order_by条件列1，条件列2</li><li>limit限制</li></ol><h4 id="单表子句-from"><a href="#单表子句-from" class="headerlink" title="单表子句-from"></a>单表子句-from</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT 列1,列2 FROM 表</span><br><span class="line">SELECT  *  FROM 表</span><br></pre></td></tr></table></figure><p>例子:<br> – 查询stu中所有的数据(不要对大表进行操作)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM stu ;</span><br></pre></td></tr></table></figure><p>– 查询stu表中,学生姓名和入学时间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT sname,intime FROM stu;</span><br></pre></td></tr></table></figure><h4 id="单表子句-where"><a href="#单表子句-where" class="headerlink" title="单表子句-where"></a>单表子句-where</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT col1,col2 FROM TABLE WHERE colN 条件;</span><br></pre></td></tr></table></figure><p><strong>where配合等值查询</strong></p><p>例子:<br> – 查询中国(CHN)所有城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;;</span><br></pre></td></tr></table></figure><p>– 查询北京市的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE NAME&#x3D;&#39;peking&#39;;</span><br></pre></td></tr></table></figure><p>– 查询甘肃省所有城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE district&#x3D;&#39;gansu&#39;;</span><br></pre></td></tr></table></figure><p><strong>where配合比较操作符(&gt; &lt; &gt;= &lt;= &lt;&gt;)</strong></p><p>例子:<br> – 查询世界上少于100人的城市</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE population&lt;100;</span><br></pre></td></tr></table></figure><p><strong>where配合逻辑运算符(and  or )</strong></p><p>例子:<br> – 中国人口数量大于500w</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; AND population&gt;5000000;</span><br></pre></td></tr></table></figure><p>– 中国或美国城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; OR countrycode&#x3D;&#39;USA&#39;;</span><br></pre></td></tr></table></figure><p><strong>where配合模糊查询</strong></p><p>例子:<br> – 查询省的名字前面带guang开头的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE district LIKE &#39;guang%&#39;;    </span><br><span class="line">注意:%不能放在前面,因为不走索引.</span><br></pre></td></tr></table></figure><p><strong>where配合in语句并且人口数量大于500w</strong></p><p>– 中国或美国城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode IN(&#39;CHN&#39;,&#39;USA&#39;) AND population&gt;5000000;</span><br></pre></td></tr></table></figure><p><strong>where配合between and</strong></p><p>例子:<br> – 查询世界上人口数量大于100w小于200w的城市信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city  WHERE population &gt;1000000 AND population &lt;2000000;</span><br><span class="line">SELECT * FROM city  WHERE population BETWEEN 1000000 AND 2000000;</span><br></pre></td></tr></table></figure><h4 id="group-by-常用聚合函数"><a href="#group-by-常用聚合函数" class="headerlink" title="group by + 常用聚合函数"></a>group by + 常用聚合函数</h4><p>作用</p><p>根据 by后面的条件进行分组，方便统计，by后面跟一个列或多个列</p><p>常用聚合函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">**max()**      ：最大值</span><br><span class="line">**min()**      ：最小值</span><br><span class="line">**avg()**      ：平均值</span><br><span class="line">**sum()**      ：总和</span><br><span class="line">**count()**    ：个数</span><br><span class="line">group_concat() : 列转行</span><br></pre></td></tr></table></figure><p>例子1：统计世界上每个国家的总人口数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">USE world</span><br><span class="line">SELECT countrycode ,SUM(population)    FROM  city  GROUP BY countrycode;</span><br></pre></td></tr></table></figure><p>例子2： 统计中国各个省的总人口数量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT district,SUM(Population) FROM city  WHERE countrycode&#x3D;&#39;chn&#39; GROUP BY district;</span><br></pre></td></tr></table></figure><p>例子3：统计中国，每个省的总人口，城市个数，城市名列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select district,SUM(Population),count(id),name FROM city WHERE countrycode&#x3D;&#39;chn&#39; GROUP BY district;</span><br></pre></td></tr></table></figure><p><strong>会报错！！！</strong></p><p><strong>说明：select list中的列，要么是group by的条件，要么就在聚合函数中出现</strong></p><p><strong>原理：MySQL不支持结果集是一对多行的显示方式</strong></p><p><strong>解决办法</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select district,SUM(Population),count(id),group_concat(name) FROM city WHERE countrycode&#x3D;&#39;chn&#39; GROUP BY district;</span><br></pre></td></tr></table></figure><h4 id="having"><a href="#having" class="headerlink" title="having"></a>having</h4><p>作用：与where子句类型，having属于后过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">where|group|having</span><br></pre></td></tr></table></figure><p>例子4：统计中国每个省的总人口数，只打印总人口数小于100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT district,SUM(Population)</span><br><span class="line">FROM city</span><br><span class="line">WHERE countrycode&#x3D;&#39;chn&#39;</span><br><span class="line">GROUP BY district</span><br><span class="line">HAVING SUM(Population) &lt; 1000000 ;</span><br></pre></td></tr></table></figure><h4 id="order-by-limit"><a href="#order-by-limit" class="headerlink" title="order by + limit"></a>order by + limit</h4><p>作用</p><p>实现先排序，by后添加条件列</p><p>应用案例</p><p>查看中国所有的城市，并按人口数进行排序(从大到小)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39; ORDER BY population DESC;</span><br></pre></td></tr></table></figure><p>统计中国各个省的总人口数量，按照总人口从大到小排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT district AS 省 ,SUM(Population) AS 总人口</span><br><span class="line">FROM city</span><br><span class="line">WHERE countrycode&#x3D;&#39;chn&#39;</span><br><span class="line">GROUP BY district</span><br><span class="line">ORDER BY 总人口 DESC ;</span><br></pre></td></tr></table></figure><p>统计中国,每个省的总人口,找出总人口大于500w的,并按总人口从大到小排序,只显示前三名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">SELECT  district, SUM(population)  FROM  city </span><br><span class="line">WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">GROUP BY district </span><br><span class="line">HAVING SUM(population)&gt;5000000</span><br><span class="line">ORDER BY SUM(population) DESC</span><br><span class="line">LIMIT 3 ;</span><br><span class="line"></span><br><span class="line">LIMIT N ,M ---&gt;跳过N,显示一共M行</span><br><span class="line">LIMIT 5,5</span><br><span class="line"></span><br><span class="line">SELECT  district, SUM(population)  FROM  city </span><br><span class="line">WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">GROUP BY district </span><br><span class="line">HAVING SUM(population)&gt;5000000</span><br><span class="line">ORDER BY SUM(population) DESC</span><br><span class="line">LIMIT 5,5;</span><br></pre></td></tr></table></figure><h4 id="distinct：去重复"><a href="#distinct：去重复" class="headerlink" title="distinct：去重复"></a>distinct：去重复</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT countrycode FROM city ;</span><br><span class="line">SELECT DISTINCT(countrycode) FROM city;</span><br></pre></td></tr></table></figure><h4 id="联合查询-union-all"><a href="#联合查询-union-all" class="headerlink" title="联合查询- union all"></a>联合查询- union all</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-- 中国或美国城市信息</span><br><span class="line"></span><br><span class="line">SELECT * FROM city </span><br><span class="line">WHERE countrycode IN (&#39;CHN&#39; ,&#39;USA&#39;);</span><br><span class="line"></span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;CHN&#39;</span><br><span class="line">UNION ALL</span><br><span class="line">SELECT * FROM city WHERE countrycode&#x3D;&#39;USA&#39;</span><br><span class="line"></span><br><span class="line">说明:一般情况下,我们会将 IN 或者 OR 语句 改写成 UNION ALL,来提高性能</span><br><span class="line">UNION     去重复</span><br><span class="line">UNION ALL 不去重复</span><br></pre></td></tr></table></figure><h4 id="join-多表连接查询"><a href="#join-多表连接查询" class="headerlink" title="join 多表连接查询"></a>join 多表连接查询</h4><p>案例准备</p><p>按需求创建一下表结构:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">use school</span><br><span class="line">student ：学生表</span><br><span class="line">sno：    学号</span><br><span class="line">sname：学生姓名</span><br><span class="line">sage： 学生年龄</span><br><span class="line">ssex： 学生性别</span><br><span class="line"></span><br><span class="line">teacher ：教师表</span><br><span class="line">tno：     教师编号</span><br><span class="line">tname：教师名字</span><br><span class="line"></span><br><span class="line">course ：课程表</span><br><span class="line">cno：  课程编号</span><br><span class="line">cname：课程名字</span><br><span class="line">tno：  教师编号</span><br><span class="line"></span><br><span class="line">score  ：成绩表</span><br><span class="line">sno：  学号</span><br><span class="line">cno：  课程编号</span><br><span class="line">score：成绩</span><br><span class="line"></span><br><span class="line">-- 项目构建</span><br><span class="line">drop database school;</span><br><span class="line">CREATE DATABASE school CHARSET utf8;</span><br><span class="line">USE school</span><br><span class="line"></span><br><span class="line">CREATE TABLE student(</span><br><span class="line">sno INT NOT NULL PRIMARY KEY AUTO_INCREMENT COMMENT &#39;学号&#39;,</span><br><span class="line">sname VARCHAR(20) NOT NULL COMMENT &#39;姓名&#39;,</span><br><span class="line">sage TINYINT UNSIGNED  NOT NULL COMMENT &#39;年龄&#39;,</span><br><span class="line">ssex  ENUM(&#39;f&#39;,&#39;m&#39;) NOT NULL DEFAULT &#39;m&#39; COMMENT &#39;性别&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE course(</span><br><span class="line">cno INT NOT NULL PRIMARY KEY COMMENT &#39;课程编号&#39;,</span><br><span class="line">cname VARCHAR(20) NOT NULL COMMENT &#39;课程名字&#39;,</span><br><span class="line">tno INT NOT NULL  COMMENT &#39;教师编号&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE sc (</span><br><span class="line">sno INT NOT NULL COMMENT &#39;学号&#39;,</span><br><span class="line">cno INT NOT NULL COMMENT &#39;课程编号&#39;,</span><br><span class="line">score INT  NOT NULL DEFAULT 0 COMMENT &#39;成绩&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET&#x3D;utf8;</span><br><span class="line"></span><br><span class="line">CREATE TABLE teacher(</span><br><span class="line">tno INT NOT NULL PRIMARY KEY COMMENT &#39;教师编号&#39;,</span><br><span class="line">tname VARCHAR(20) NOT NULL COMMENT &#39;教师名字&#39;</span><br><span class="line">)ENGINE&#x3D;INNODB CHARSET utf8;</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES (1,&#39;zhang3&#39;,18,&#39;m&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sno,sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(2,&#39;zhang4&#39;,18,&#39;m&#39;),</span><br><span class="line">(3,&#39;li4&#39;,18,&#39;m&#39;),</span><br><span class="line">(4,&#39;wang5&#39;,19,&#39;f&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student</span><br><span class="line">VALUES</span><br><span class="line">(5,&#39;zh4&#39;,18,&#39;m&#39;),</span><br><span class="line">(6,&#39;zhao4&#39;,18,&#39;m&#39;),</span><br><span class="line">(7,&#39;ma6&#39;,19,&#39;f&#39;);</span><br><span class="line"></span><br><span class="line">INSERT INTO student(sname,sage,ssex)</span><br><span class="line">VALUES</span><br><span class="line">(&#39;oldboy&#39;,20,&#39;m&#39;),</span><br><span class="line">(&#39;oldgirl&#39;,20,&#39;f&#39;),</span><br><span class="line">(&#39;oldp&#39;,25,&#39;m&#39;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">INSERT INTO teacher(tno,tname) VALUES</span><br><span class="line">(101,&#39;oldboy&#39;),</span><br><span class="line">(102,&#39;hesw&#39;),</span><br><span class="line">(103,&#39;oldguo&#39;);</span><br><span class="line"></span><br><span class="line">DESC course;</span><br><span class="line">INSERT INTO course(cno,cname,tno)</span><br><span class="line">VALUES</span><br><span class="line">(1001,&#39;linux&#39;,101),</span><br><span class="line">(1002,&#39;python&#39;,102),</span><br><span class="line">(1003,&#39;mysql&#39;,103);</span><br><span class="line"></span><br><span class="line">DESC sc;</span><br><span class="line">INSERT INTO sc(sno,cno,score)</span><br><span class="line">VALUES</span><br><span class="line">(1,1001,80),</span><br><span class="line">(1,1002,59),</span><br><span class="line">(2,1002,90),</span><br><span class="line">(2,1003,100),</span><br><span class="line">(3,1001,99),</span><br><span class="line">(3,1003,40),</span><br><span class="line">(4,1001,79),</span><br><span class="line">(4,1002,61),</span><br><span class="line">(4,1003,99),</span><br><span class="line">(5,1003,40),</span><br><span class="line">(6,1001,89),</span><br><span class="line">(6,1003,77),</span><br><span class="line">(7,1001,67),</span><br><span class="line">(7,1003,82),</span><br><span class="line">(8,1001,70),</span><br><span class="line">(9,1003,80),</span><br><span class="line">(10,1003,96);</span><br><span class="line"></span><br><span class="line">SELECT * FROM student;</span><br><span class="line">SELECT * FROM teacher;</span><br><span class="line">SELECT * FROM course;</span><br><span class="line">SELECT * FROM sc;</span><br></pre></td></tr></table></figure><p>简单理解：多表连接实际上是将多张表中有关联的数据合并成一张表，在新表中再去做where group having order by limit</p><p>语法</p><p><img src="https://upload-images.jianshu.io/upload_images/16956686-764e2f0b3601f6ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/760/format/webp" alt="img"></p><p>笛卡尔乘积</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from teacher,course;</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| tno | tname  | cno  | cname  | tno |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| 103 | oldguo | 1001 | linux  | 101 |</span><br><span class="line">| 102 | hesw   | 1001 | linux  | 101 |</span><br><span class="line">| 101 | oldboy | 1001 | linux  | 101 |</span><br><span class="line">| 103 | oldguo | 1002 | python | 102 |</span><br><span class="line">| 102 | hesw   | 1002 | python | 102 |</span><br><span class="line">| 101 | oldboy | 1002 | python | 102 |</span><br><span class="line">| 103 | oldguo | 1003 | mysql  | 103 |</span><br><span class="line">| 102 | hesw   | 1003 | mysql  | 103 |</span><br><span class="line">| 101 | oldboy | 1003 | mysql  | 103 |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">9 rows in set (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from teacher join course;</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| tno | tname  | cno  | cname  | tno |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| 103 | oldguo | 1001 | linux  | 101 |</span><br><span class="line">| 102 | hesw   | 1001 | linux  | 101 |</span><br><span class="line">| 101 | oldboy | 1001 | linux  | 101 |</span><br><span class="line">| 103 | oldguo | 1002 | python | 102 |</span><br><span class="line">| 102 | hesw   | 1002 | python | 102 |</span><br><span class="line">| 101 | oldboy | 1002 | python | 102 |</span><br><span class="line">| 103 | oldguo | 1003 | mysql  | 103 |</span><br><span class="line">| 102 | hesw   | 1003 | mysql  | 103 |</span><br><span class="line">| 101 | oldboy | 1003 | mysql  | 103 |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">9 rows in set (0.03 sec)</span><br></pre></td></tr></table></figure><p>内连接(最广泛)</p><p>A join B on A.xx=B.yy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select * from teacher join course on teacher.tno&#x3D;course.tno;</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| tno | tname  | cno  | cname  | tno |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">| 101 | oldboy | 1001 | linux  | 101 |</span><br><span class="line">| 102 | hesw   | 1002 | python | 102 |</span><br><span class="line">| 103 | oldguo | 1003 | mysql  | 103 |</span><br><span class="line">+-----+--------+------+--------+-----+</span><br><span class="line">3 rows in set (0.04 sec)</span><br></pre></td></tr></table></figure><p>外连接</p><p>left join:左表所有数据，右表满足条件的数据</p><p>right join:右表所有数据，左表满足条件的数据</p><p>驱动表是什么？</p><p>在多表连接当中，承当for循环中外层循环的角色。<br>此时，MySQL会拿着驱动表的每个满足条件的关联列的值，去依次找到for循环内循环中的关联值一一进行判断和匹配。</p><p>建议:将结果集小的表设置为驱动表更加合适。可以降低next loop的次数。<br>对于内连接来讲，我们是没法控制驱动表是谁，完全由优化器决定。<br>如果，需要人为干预，需要将内连接写成外连接的方式。left join可以强制左表为驱动表</p><hr><p>查询张三的家庭住址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT A.name,B.address FROM</span><br><span class="line">A JOIN  B</span><br><span class="line">ON A.id&#x3D;B.id</span><br><span class="line">WHERE A.name&#x3D;&#39;zhangsan&#39;</span><br></pre></td></tr></table></figure><p>例子：</p><p>查询一下世界上人口数量小于100人的城市名和国家名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT b.name ,a.name ,a.population</span><br><span class="line">FROM  city  AS a</span><br><span class="line">JOIN  country AS b</span><br><span class="line">ON    b.code&#x3D;a.countrycode</span><br><span class="line">WHERE  a.Population&lt;100</span><br></pre></td></tr></table></figure><p>查询城市shenyang，城市人口，所在国家名（name）及国土面积（SurfaceArea）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT a.name,a.population,b.name ,b.SurfaceArea</span><br><span class="line">FROM city  AS a JOIN country AS b</span><br><span class="line">ON a.countrycode&#x3D;b.code</span><br><span class="line">WHERE a.name&#x3D;&#39;shenyang&#39;;</span><br></pre></td></tr></table></figure><p>别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">列别名,表别名</span><br><span class="line">SELECT </span><br><span class="line">a.Name AS an ,</span><br><span class="line">b.name AS bn ,</span><br><span class="line">b.SurfaceArea AS bs,</span><br><span class="line">a.Population AS bp</span><br><span class="line">FROM city AS a  JOIN country AS b</span><br><span class="line">ON a.CountryCode&#x3D;b.Code</span><br><span class="line">WHERE a.name &#x3D;&#39;shenyang&#39;;</span><br></pre></td></tr></table></figure><p>多表SQL练习题</p><p>统计zhang3,学习了几门课</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT st.sname , COUNT(sc.cno)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN</span><br><span class="line">sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">WHERE st.sname&#x3D;&#39;zhang3&#39;</span><br></pre></td></tr></table></figure><p>查询zhang3,学习的课程名称有哪些?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT st.sname , GROUP_CONCAT(co.cname)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON sc.cno&#x3D;co.cno</span><br><span class="line">WHERE st.sname&#x3D;&#39;zhang3&#39;</span><br></pre></td></tr></table></figure><p>查询oldguo老师教的学生名.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname ,GROUP_CONCAT(st.sname)</span><br><span class="line">FROM student AS st</span><br><span class="line">JOIN sc</span><br><span class="line">ON st.sno&#x3D;sc.sno</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON sc.cno&#x3D;co.cno</span><br><span class="line">JOIN teacher AS te</span><br><span class="line">ON co.tno&#x3D;te.tno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39;;</span><br></pre></td></tr></table></figure><p>查询oldguo所教课程的平均分数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,AVG(sc.score)</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39;</span><br></pre></td></tr></table></figure><p>每位老师所教课程的平均分,并按平均分排序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,AVG(sc.score)</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">GROUP BY te.tname</span><br><span class="line">ORDER BY AVG(sc.score) DESC ;</span><br></pre></td></tr></table></figure><p>查询oldguo所教的不及格的学生姓名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,st.sname,sc.score</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course  AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">JOIN student AS st</span><br><span class="line">ON sc.sno&#x3D;st.sno</span><br><span class="line">WHERE te.tname&#x3D;&#39;oldguo&#39; AND sc.score&lt;60;</span><br></pre></td></tr></table></figure><p>查询所有老师所教学生不及格的信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">SELECT te.tname,st.sname,sc.score</span><br><span class="line">FROM teacher AS te</span><br><span class="line">JOIN course  AS co</span><br><span class="line">ON te.tno&#x3D;co.tno</span><br><span class="line">JOIN sc</span><br><span class="line">ON co.cno&#x3D;sc.cno</span><br><span class="line">JOIN student AS st</span><br><span class="line">ON sc.sno&#x3D;st.sno</span><br><span class="line">WHERE sc.score&lt;60;</span><br></pre></td></tr></table></figure><h4 id="case-when-判断-then-结果-end"><a href="#case-when-判断-then-结果-end" class="headerlink" title="case when 判断 then 结果 end"></a>case when 判断 then 结果 end</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; select concat(teacher .tname, &quot;_&quot;,teacher.tno) ,concat(count(case when score.score&gt;60 then 1 end)&#x2F;count(score.sno)*100,&quot;%&quot;) as 及格率</span><br><span class="line">from teacher</span><br><span class="line">join course</span><br><span class="line">on teacher.tno&#x3D;course.tno</span><br><span class="line">join score</span><br><span class="line">on course.cno&#x3D;score.cno</span><br><span class="line">group by teacher.tno,teacher.tname;</span><br><span class="line">+-----------------------------------------+-----------+</span><br><span class="line">| concat(teacher .tname, &quot;_&quot;,teacher.tno) | 及格率    |</span><br><span class="line">+-----------------------------------------+-----------+</span><br><span class="line">| oldboy_101                              | 100.0000% |</span><br><span class="line">| hesw_102                                | 66.6667%  |</span><br><span class="line">| oldguo_103                              | 75.0000%  |</span><br><span class="line">+-----------------------------------------+-----------+</span><br><span class="line">3 rows in set (0.09 sec)</span><br></pre></td></tr></table></figure><h1 id="information-schema-tables视图"><a href="#information-schema-tables视图" class="headerlink" title="information_schema.tables视图"></a>information_schema.tables视图</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DESC information_schema.TABLES</span><br><span class="line">TABLE_SCHEMA    ----&gt;库名</span><br><span class="line">TABLE_NAME      ----&gt;表名</span><br><span class="line">ENGINE          ----&gt;引擎</span><br><span class="line">TABLE_ROWS      ----&gt;表的行数（不是特别实时）</span><br><span class="line">AVG_ROW_LENGTH  ----&gt;表中行的平均行（字节）</span><br><span class="line">INDEX_LENGTH    ----&gt;索引的占用空间大小（字节）</span><br><span class="line">DATA_LENGTH     ----&gt;表使用的存储空间大小（不是特别实时）</span><br><span class="line">DATA_FREE       ----&gt;表中是否有碎片</span><br></pre></td></tr></table></figure><p>查询整个数据库中所有库和所对应的表信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,GROUP_CONCAT(table_name)</span><br><span class="line">FROM  information_schema.tables</span><br><span class="line">GROUP BY table_schema;</span><br></pre></td></tr></table></figure><p>统计所有库下的表个数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,COUNT(table_name)</span><br><span class="line">FROM information_schema.TABLES</span><br><span class="line">GROUP BY table_schema</span><br></pre></td></tr></table></figure><p>查询所有innodb引擎的表及所在的库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_schema,table_name,ENGINE FROM information_schema.&#96;TABLES&#96;</span><br><span class="line">WHERE ENGINE&#x3D;&#39;innodb&#39;;</span><br></pre></td></tr></table></figure><p>统计world数据库下每张表的磁盘空间占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT table_name,CONCAT((TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&quot; KB&quot;) AS size_KB</span><br><span class="line">FROM information_schema.tables WHERE TABLE_SCHEMA&#x3D;&#39;world&#39;;</span><br></pre></td></tr></table></figure><p>统计所有数据库的总的磁盘空间占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">TABLE_SCHEMA,</span><br><span class="line">CONCAT(SUM(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&quot; KB&quot;) AS Total_KB</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">GROUP BY table_schema;</span><br><span class="line">mysql -uroot -p123 -e &quot;SELECT TABLE_SCHEMA,CONCAT(SUM(TABLE_ROWS*AVG_ROW_LENGTH+INDEX_LENGTH)&#x2F;1024,&#39; KB&#39;) AS Total_KB FROM information_schema.tables GROUP BY table_schema;&quot;</span><br></pre></td></tr></table></figure><p>生成整个数据库下的所有表的单独备份语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">模板语句：</span><br><span class="line">mysqldump -uroot -p123 world city &gt;&#x2F;tmp&#x2F;world_city.sql</span><br><span class="line">SELECT CONCAT(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; &gt;&#x2F;tmp&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot; )</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">WHERE table_schema NOT IN(&#39;information_schema&#39;,&#39;performance_schema&#39;,&#39;sys&#39;)</span><br><span class="line">INTO OUTFILE &#39;&#x2F;tmp&#x2F;bak.sh&#39; ;</span><br><span class="line"></span><br><span class="line">CONCAT(&quot;mysqldump -uroot -p123 &quot;,table_schema,&quot; &quot;,table_name,&quot; &gt;&#x2F;tmp&#x2F;&quot;,table_schema,&quot;_&quot;,table_name,&quot;.sql&quot; )</span><br></pre></td></tr></table></figure><p>107张表，都需要执行以下2条语句</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE world.city DISCARD TABLESPACE;</span><br><span class="line">ALTER TABLE world.city IMPORT TABLESPACE;</span><br><span class="line">SELECT CONCAT(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; discard tablespace&quot;)</span><br><span class="line">FROM information_schema.tables</span><br><span class="line">WHERE table_schema&#x3D;&#39;world&#39;</span><br><span class="line">INTO OUTFILE &#39;&#x2F;tmp&#x2F;dis.sql&#39;;</span><br></pre></td></tr></table></figure><p>查询业务数据库（系统库除外），所有非InnoDB表。将非InnoDB表转化为InnoDB</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select concat(&quot;alter table &quot;,table_schema,&quot;.&quot;,table_name,&quot; engine&#x3D;innodb;&quot; )</span><br><span class="line">from information_schema.tables</span><br><span class="line">where engine !&#x3D; &#39;InnoDB&#39;</span><br><span class="line">and table_schema not in (&#39;sys&#39; , &#39;performance_schema&#39; , &#39;information_schema &#39; ,&#39;mysql&#39;) into outfile &#39;&#x2F;tmp&#x2F;alter.sql&#39;;</span><br></pre></td></tr></table></figure><p>但是要在my.cnf中加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">secure-file-priv&#x3D;&#x2F;tmp</span><br></pre></td></tr></table></figure><h1 id="show-命令"><a href="#show-命令" class="headerlink" title="show 命令"></a>show 命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">show  databases;                          #查看所有数据库</span><br><span class="line">show tables;                              #查看当前库的所有表</span><br><span class="line">SHOW TABLES FROM                          #查看某个指定库下的表</span><br><span class="line">show create database world                #查看建库语句</span><br><span class="line">show create table world.city              #查看建表语句</span><br><span class="line">show  grants for  root@&#39;localhost&#39;        #查看用户的权限信息</span><br><span class="line">show charset                              #查看字符集</span><br><span class="line">show collation                            #查看校对规则</span><br><span class="line">show processlist;                         #查看数据库连接情况</span><br><span class="line">show index from                           #表的索引情况</span><br><span class="line">show status                               #数据库状态查看</span><br><span class="line">SHOW STATUS LIKE &#39;%lock%&#39;;           #模糊查询数据库某些状态</span><br><span class="line">SHOW VARIABLES                            #查看所有配置信息</span><br><span class="line">SHOW variables LIKE &#39;%lock%&#39;;             #查看部分配置信息</span><br><span class="line">show engines                              #查看支持的所有的存储引擎</span><br><span class="line">show engine innodb status\G               #查看InnoDB引擎相关的状态信息</span><br><span class="line">show binary logs                          #列举所有的二进制日志</span><br><span class="line">show master status                        #查看数据库的日志位置信息</span><br><span class="line">show binlog events in                     #查看二进制日志事件</span><br><span class="line">show slave status \G                      #查看从库状态</span><br><span class="line">SHOW RELAYLOG EVENTS                      #查看从库relaylog事件信息</span><br><span class="line">desc  (show colums from city)             #查看表的列定义信息</span><br><span class="line">http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;5.7&#x2F;en&#x2F;show.html</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DBA-02-MySQL体系结构</title>
      <link href="2020/09/21/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-02-MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/"/>
      <url>2020/09/21/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-02-MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="C-S-客户端-服务端-模型介绍"><a href="#C-S-客户端-服务端-模型介绍" class="headerlink" title="C/S(客户端/服务端)模型介绍"></a>C/S(客户端/服务端)模型介绍</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-301b140a033d0dd2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/712/format/webp" alt="img"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">TCP&#x2F;IP方式（远程、本地）：</span><br><span class="line">mysql -uroot -p123456 -h 10.0.0.51 -P3306</span><br><span class="line">Socket方式(仅本地)：</span><br><span class="line">mysql -uroot -p123456 -S &#x2F;tmp&#x2F;mysql.sock</span><br></pre></td></tr></table></figure><h2 id="实例介绍"><a href="#实例介绍" class="headerlink" title="实例介绍"></a>实例介绍</h2><p>实例=mysqld后台守护进程+Master Thread +干活的Thread+预分配的内存<br>公司=老板+经理+员工+办公室</p><h2 id="mysqld程序运行原理"><a href="#mysqld程序运行原理" class="headerlink" title="mysqld程序运行原理"></a>mysqld程序运行原理</h2><h3 id="mysqld程序结构"><a href="#mysqld程序结构" class="headerlink" title="mysqld程序结构"></a>mysqld程序结构</h3><p><img src="https://upload-images.jianshu.io/upload_images/16956686-7824255ca53f23e5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/645/format/webp" alt="img"></p><h3 id="一条SQL语句的执行过程"><a href="#一条SQL语句的执行过程" class="headerlink" title="一条SQL语句的执行过程"></a>一条SQL语句的执行过程</h3><h4 id="连接层"><a href="#连接层" class="headerlink" title="连接层"></a>连接层</h4><p>（1）提供连接协议：TCP/IP 、SOCKET<br>（2）提供验证：用户、密码，IP，SOCKET<br>（3）提供专用连接线程：接收用户SQL，返回结果<br>通过以下语句可以查看到连接线程基本情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show processlist;</span><br></pre></td></tr></table></figure><h4 id="SQL层"><a href="#SQL层" class="headerlink" title="SQL层"></a>SQL层</h4><ol><li>接收上层传送的SQL语句</li><li>语法验证模块：验证语句语法,是否满足SQL_MODE</li><li>语义检查：判断SQL语句的类型<ul><li>DDL ：数据定义语言</li><li>DCL ：数据控制语言</li><li>DML ：数据操作语言</li><li>DQL： 数据查询语言<br>…</li></ul></li><li>权限检查：用户对库表有没有权限</li><li>解析器：对语句执行前,进行预处理，生成解析树(执行计划),说白了就是生成多种执行方案.</li><li>优化器：根据解析器得出的多种执行计划，进行判断，选择最优的执行计划<br>代价模型：资源（CPU IO MEM）的耗损评估性能好坏</li><li>执行器：根据最优执行计划，执行SQL语句，产生执行结果<br>执行结果：在磁盘的xxxx位置上</li><li>提供查询缓存（默认是没开启的），会使用redis tair替代查询缓存功能</li><li>提供日志记录（日志管理章节）：binlog，默认是没开启的。</li></ol><h4 id="存储引擎层（类似于Linux中的文件系统）"><a href="#存储引擎层（类似于Linux中的文件系统）" class="headerlink" title="存储引擎层（类似于Linux中的文件系统）"></a>存储引擎层（类似于Linux中的文件系统）</h4><p>负责根据SQL层执行的结果，从磁盘上拿数据。<br>将16进制的磁盘数据，交由SQL结构化化成表，<br>连接层的专用线程返回给用户。</p><h2 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-127fff46fdb7fea9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/505/format/webp" alt="img"></p><h3 id="库"><a href="#库" class="headerlink" title="库"></a>库</h3><p>库名，库属性</p><h3 id="表"><a href="#表" class="headerlink" title="表"></a>表</h3><p>表名<br>属性<br>列:列名(字段),列属性(数据类型,约束等)<br>数据行(记录)</p><h2 id="物理存储结构引入"><a href="#物理存储结构引入" class="headerlink" title="物理存储结构引入"></a>物理存储结构引入</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-bfd40838aef7971b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/973/format/webp" alt="img"></p><h3 id="库的物理存储结构"><a href="#库的物理存储结构" class="headerlink" title="库的物理存储结构"></a>库的物理存储结构</h3><p>用文件系统的目录来存储</p><h3 id="表的物理存储结构"><a href="#表的物理存储结构" class="headerlink" title="表的物理存储结构"></a>表的物理存储结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">MyISAM（一种引擎）的表：</span><br><span class="line">-rw-r----- 1 mysql mysql   10816 Apr 18 11:37 user.frm</span><br><span class="line">-rw-r----- 1 mysql mysql     396 Apr 18 12:20  user.MYD</span><br><span class="line">-rw-r----- 1 mysql mysql    4096 Apr 18 14:48 user.MYI</span><br><span class="line"></span><br><span class="line">InnoDB(默认的存储引擎)的表：</span><br><span class="line">-rw-r----- 1 mysql mysql    8636 Apr 18 11:37 time_zone.frm</span><br><span class="line">-rw-r----- 1 mysql mysql   98304 Apr 18 11:37 time_zone.ibd</span><br><span class="line">time_zone.frm：存储列相关信息</span><br><span class="line">time_zone.ibd：数据行+索引</span><br></pre></td></tr></table></figure><h3 id="表的段、区、页（16k）"><a href="#表的段、区、页（16k）" class="headerlink" title="表的段、区、页（16k）"></a>表的段、区、页（16k）</h3><p>段：一个表就是一个段，可以由1个或多个区构成</p><p>区：一个区(簇)，默认1M，连续的64个pages</p><p>页：一个页，默认16KB，连续的4个OS block，最小的IO单元</p><h1 id="基础管理"><a href="#基础管理" class="headerlink" title="基础管理"></a>基础管理</h1><h2 id="用户、权限管理"><a href="#用户、权限管理" class="headerlink" title="用户、权限管理"></a>用户、权限管理</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>作用：</p><p>登录，管理数据库逻辑对象</p><p>定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">用户名@&#39;白名单&#39;</span><br><span class="line">白名单支持的方式？</span><br><span class="line">wordpress@&#39;10.0.0.%&#39;    </span><br><span class="line">wordpress@&#39;%&#39;</span><br><span class="line">wordpress@&#39;10.0.0.200&#39;</span><br><span class="line">wordpress@&#39;localhost&#39;</span><br><span class="line">wordpress@&#39;db02&#39;</span><br><span class="line">wordpress@&#39;10.0.0.5%&#39;</span><br><span class="line">wordpress@&#39;10.0.0.0&#x2F;255.255.254.0&#39;</span><br></pre></td></tr></table></figure><p>管理操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">增：</span><br><span class="line">mysql&gt; create user kinmfer@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br><span class="line">查：</span><br><span class="line">mysql&gt; desc mysql.user;    ----&gt;  authentication_string</span><br><span class="line">mysql&gt; select user ,host ,authentication_string from mysql.user</span><br><span class="line">改:</span><br><span class="line">mysql&gt; alter user kinmfer@&#39;10.0.0.%&#39; identified by &#39;456&#39;;</span><br><span class="line">删：</span><br><span class="line">mysql&gt; drop user kinmfer@&#39;10.0.0.%&#39;;</span><br></pre></td></tr></table></figure><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>权限管理操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on wordpress.* to wordpress@&#39;10.0.0.%&#39; identified  by &#39;123&#39;;</span><br></pre></td></tr></table></figure><p>常用权限介绍:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ALL:</span><br><span class="line">SELECT,INSERT, UPDATE, DELETE, CREATE, DROP, RELOAD, SHUTDOWN, PROCESS, FILE, REFERENCES, INDEX, ALTER, SHOW DATABASES, SUPER, CREATE TEMPORARY TABLES, LOCK TABLES, EXECUTE, REPLICATION SLAVE, REPLICATION CLIENT, CREATE VIEW, SHOW VIEW, CREATE ROUTINE, ALTER ROUTINE, CREATE USER, EVENT, TRIGGER, CREATE TABLESPACE</span><br><span class="line">ALL : 以上所有权限，一般是普通管理员拥有的</span><br><span class="line"></span><br><span class="line">with grant option：超级管理员才具备的，给别的用户授权的功能</span><br></pre></td></tr></table></figure><p>权限作用范围:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">*.*                  ----&gt;管理员用户</span><br><span class="line">wordpress.*          ----&gt;开发和应用用户</span><br><span class="line">wordpress.t1</span><br></pre></td></tr></table></figure><p>需求1：windows机器的navicat登录到linux中的MySQL，管理员用户。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant all on *.* to root@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br></pre></td></tr></table></figure><p>需求2：创建一个应用用户app用户，能从windows上登录mysql，并能操作app库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; grant select ,update,insert,delete on app.* to app@&#39;10.0.0.%&#39; identified by &#39;123&#39;;</span><br></pre></td></tr></table></figure><h3 id="开发人员用户授权流程"><a href="#开发人员用户授权流程" class="headerlink" title="开发人员用户授权流程"></a>开发人员用户授权流程</h3><p>1.权限<br>2.对谁操作<br>3.你从哪来<br>4.密码要求</p><h3 id="提示：8-0在grant命令添加新特性"><a href="#提示：8-0在grant命令添加新特性" class="headerlink" title="提示：8.0在grant命令添加新特性"></a>提示：8.0在grant命令添加新特性</h3><p>建用户和授权分开了<br>grant 不再支持自动创建用户了，不支持改密码授权之前，必须要提前创建用户。</p><h3 id="查看授权"><a href="#查看授权" class="headerlink" title="查看授权"></a>查看授权</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show grants for app@&#39;10.0.0.%&#39;;</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from mysql.user \G;</span><br></pre></td></tr></table></figure><p>拓展</p><p>mysql库下</p><table><thead><tr><th>MySQL授权表</th><th>授权范围</th></tr></thead><tbody><tr><td>user</td><td>*.*，存放创的用户和密码包括全局实例级别管理权限设置</td></tr><tr><td>db</td><td>app.*，存放设置的数据库级别的权限设置</td></tr><tr><td>tables_priv</td><td>app.t1，存放表级别的权限设置</td></tr><tr><td>column_priv</td><td>字段，存放字段级别的权限设置</td></tr><tr><td>procs_ priv</td><td>存放存储过程中的权限设置</td></tr></tbody></table><h3 id="回收权限"><a href="#回收权限" class="headerlink" title="回收权限"></a>回收权限</h3><p>注意: MySQL中不能通过重复授权，修改权限，只能通过回收权限方式进行修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">revoke  delete on app.*  from app@&#39;10.0.0.%&#39;；</span><br></pre></td></tr></table></figure><h3 id="本地管理员用户密码忘记"><a href="#本地管理员用户密码忘记" class="headerlink" title="本地管理员用户密码忘记"></a>本地管理员用户密码忘记</h3><p>–skip-grant-tables: 跳过授权表<br>– skip-networking:跳过TCP/IP连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# mysqld_safe --skip-grant-tables --skip-networking &amp;</span><br><span class="line">mysql&gt; flush privileges;</span><br><span class="line">mysql&gt;  alter user root@&#39;localhost&#39; identified by &#39;123456&#39;;</span><br><span class="line">[root@db01 ~]# pkill mysqld</span><br><span class="line">[root@db01 ~]# systemctl start  mysqld</span><br></pre></td></tr></table></figure><h2 id="连接管理"><a href="#连接管理" class="headerlink" title="连接管理"></a>连接管理</h2><p>（1） 本地socket链接方式</p><p>socket=/tmp/mysql.sock</p><p>mysql -S /tmp/mysql.sock</p><p>前提：数据库中必须实现授权xxx@’localhost’用户</p><p>说明：只能在本地使用，不依赖与IP和端口</p><p>（2）远程TCP/IP链接方式</p><p>mysql -uroot -p123 -h 192.168.242.51 -P 3306</p><p>前提：必须提前创建好可以远程连接的用户(例如：xxx@’192.168.242.%’)</p><p>（3）程序链接<br>yum install -y php-mysql<br>pip3 install pymysql</p><h3 id="自带客户端命令"><a href="#自带客户端命令" class="headerlink" title="自带客户端命令"></a>自带客户端命令</h3><p>mysql  常用参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">-u                   用户</span><br><span class="line">-p                   密码</span><br><span class="line">-h                   IP</span><br><span class="line">-P                   端口</span><br><span class="line">-S                   socket文件</span><br><span class="line">-e                   免交互执行命令</span><br><span class="line">&lt;                    导入SQL脚本</span><br><span class="line"></span><br><span class="line">[root@db01 ~]# mysql -uroot -p -h 10.0.0.51 -P3306</span><br><span class="line">Enter password:</span><br><span class="line">mysql&gt; select @@socket;</span><br><span class="line">+-----------------+</span><br><span class="line">| @@socket        |</span><br><span class="line">+-----------------+</span><br><span class="line">| &#x2F;tmp&#x2F;mysql.sock |</span><br><span class="line">[root@db01 ~]# mysql -uroot -p -S &#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">Enter password:</span><br><span class="line">[root@db01 ~]# mysql -uroot -p -e &quot;select user,host from mysql.user;&quot;</span><br><span class="line">Enter password:</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| user          | host      |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">| abc          | 10.0.0.%  |</span><br><span class="line">| app          | 10.0.0.%  |</span><br><span class="line">| root          | 10.0.0.%  |</span><br><span class="line">| mysql.session | localhost |</span><br><span class="line">| mysql.sys    | localhost |</span><br><span class="line">| root          | localhost |</span><br><span class="line">+---------------+-----------+</span><br><span class="line">[root@db01 ~]#</span><br><span class="line">[root@db01 ~]# mysql -uroot -p &lt;world.sql</span><br><span class="line">Enter password:</span><br><span class="line">[root@db01 ~]#</span><br></pre></td></tr></table></figure><h2 id="多种启动方式介绍"><a href="#多种启动方式介绍" class="headerlink" title="多种启动方式介绍"></a>多种启动方式介绍</h2><p><img src="https://upload-images.jianshu.io/upload_images/16956686-54becae60bf4ca48.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/860/format/webp" alt="img"></p><p>以上多种方式，都可以单独启动MySQL服务<br>mysqld_safe和mysqld一般是在临时维护时使用。<br>另外，从Centos 7系统开始，支持systemd直接调用mysqld的方式进行启动数据库</p><p>mysql_safe和mysqld可以在启动数据库时，加入自己执行的参数</p><p>例如<code>--skip-grant-tables</code></p><p><code>--skip-networking</code></p><p><code>--defaults-file=/opt/my.cnf</code></p><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><ul><li>控制MySQL的启动</li><li>影响到客户端的连接</li></ul><h3 id="初始化配置的方法"><a href="#初始化配置的方法" class="headerlink" title="初始化配置的方法"></a>初始化配置的方法</h3><ul><li>预编译</li><li><strong>配置文件(所有启动方式)</strong></li><li>命令行参数 (仅限于 mysqld_safe mysqld)</li></ul><h3 id="初始配置文件"><a href="#初始配置文件" class="headerlink" title="初始配置文件"></a>初始配置文件</h3><p>[服务器端]：影响数据库服务端运行</p><p>[客户端]：影响本地客户端连接，不影响远程客户端连接</p><p>初始化配置文件的默认读取路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@db01 ~]# mysqld --help --verbose |grep my.cnf</span><br><span class="line">&#x2F;etc&#x2F;my.cnf &#x2F;etc&#x2F;mysql&#x2F;my.cnf &#x2F;usr&#x2F;local&#x2F;mysql&#x2F;etc&#x2F;my.cnf ~&#x2F;.my.cnf</span><br><span class="line">注:</span><br><span class="line">默认情况下，MySQL启动时，会依次读取以上配置文件，如果有重复选项，会以最后一个文件设置的为准。</span><br><span class="line">但是，如果启动时加入了--defaults-file&#x3D;xxxx时，以上的所有文件都不会读取.</span><br></pre></td></tr></table></figure><p>配置文件的书写方式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[标签]</span><br><span class="line">配置项&#x3D;xxxx</span><br><span class="line"></span><br><span class="line">标签类型：服务端、客户端</span><br><span class="line">服务器端标签：</span><br><span class="line">[mysqld]</span><br><span class="line">[mysqld_safe]</span><br><span class="line">[server]</span><br><span class="line"></span><br><span class="line">客户端标签：</span><br><span class="line">[mysql]</span><br><span class="line">[mysqldump]</span><br><span class="line">[client]</span><br><span class="line"></span><br><span class="line">配置文件的示例展示：</span><br><span class="line">[root@db01 ~]# cat &#x2F;etc&#x2F;my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">basedir&#x3D;&#x2F;app&#x2F;mysql</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;mysql</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">server_id&#x3D;6</span><br><span class="line">port&#x3D;3306</span><br><span class="line">log_error&#x3D;&#x2F;data&#x2F;mysql&#x2F;mysql.log</span><br><span class="line">[mysql]</span><br><span class="line">socket&#x3D;&#x2F;tmp&#x2F;mysql.sock</span><br><span class="line">prompt&#x3D;Master [\\d]&gt;</span><br></pre></td></tr></table></figure><h2 id="多实例的应用"><a href="#多实例的应用" class="headerlink" title="多实例的应用"></a>多实例的应用</h2><h3 id="准备多个目录"><a href="#准备多个目录" class="headerlink" title="准备多个目录"></a>准备多个目录</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /<span class="keyword">data</span>/<span class="number">330</span>&#123;<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;/<span class="keyword">data</span></span><br></pre></td></tr></table></figure><h3 id="准备配置文件"><a href="#准备配置文件" class="headerlink" title="准备配置文件"></a>准备配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /data/3307/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3307/data</span></span><br><span class="line"><span class="string">socket=/data/3307/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3307/mysql.log</span></span><br><span class="line"><span class="string">port=3307</span></span><br><span class="line"><span class="string">server_id=7</span></span><br><span class="line"><span class="string">log_bin=/data/3307/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt; /data/3308/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3308/data</span></span><br><span class="line"><span class="string">socket=/data/3308/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3308/mysql.log</span></span><br><span class="line"><span class="string">port=3308</span></span><br><span class="line"><span class="string">server_id=8</span></span><br><span class="line"><span class="string">log_bin=/data/3308/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br><span class="line"></span><br><span class="line">cat &gt; /data/3309/my.cnf &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">[mysqld]</span></span><br><span class="line"><span class="string">basedir=/app/mysql</span></span><br><span class="line"><span class="string">datadir=/data/3309/data</span></span><br><span class="line"><span class="string">socket=/data/3309/mysql.sock</span></span><br><span class="line"><span class="string">log_error=/data/3309/mysql.log</span></span><br><span class="line"><span class="string">port=3309</span></span><br><span class="line"><span class="string">server_id=9</span></span><br><span class="line"><span class="string">log_bin=/data/3309/mysql-bin</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure><h3 id="初始化三套数据"><a href="#初始化三套数据" class="headerlink" title="初始化三套数据"></a>初始化三套数据</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mv /etc/my.cnf /etc/my.cnf.bak</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3307/data --basedir=/app/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3308/data --basedir=/app/mysql</span><br><span class="line">mysqld --initialize-insecure  --user=mysql --datadir=/data/3309/data --basedir=/app/mysql</span><br></pre></td></tr></table></figure><h3 id="systemd管理多实例"><a href="#systemd管理多实例" class="headerlink" title="systemd管理多实例"></a>systemd管理多实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/systemd/system</span><br><span class="line">cp mysqld.service mysqld3307.service</span><br><span class="line">cp mysqld.service mysqld3308.service</span><br><span class="line">cp mysqld.service mysqld3309.service</span><br><span class="line"></span><br><span class="line">vim mysqld3307.service</span><br><span class="line">ExecStart=/app/mysql/bin/mysqld  --defaults-file=/data/3307/my.cnf</span><br><span class="line">vim mysqld3308.service</span><br><span class="line">ExecStart=/app/mysql/bin/mysqld  --defaults-file=/data/3308/my.cnf</span><br><span class="line">vim mysqld3309.service</span><br><span class="line">ExecStart=/app/mysql/bin/mysqld  --defaults-file=/data/3309/my.cnf</span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R mysql.mysql /data/*</span><br></pre></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start mysqld3307.service</span><br><span class="line">systemctl start mysqld3308.service</span><br><span class="line">systemctl start mysqld3309.service</span><br></pre></td></tr></table></figure><h3 id="验证多实例"><a href="#验证多实例" class="headerlink" title="验证多实例"></a>验证多实例</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">netstat -lnp|grep 330</span><br><span class="line">mysql -S /data/3307/mysql.sock -e <span class="string">&quot;select @@server_id&quot;</span></span><br><span class="line">mysql -S /data/3308/mysql.sock -e <span class="string">&quot;select @@server_id&quot;</span></span><br><span class="line">mysql -S /data/3309/mysql.sock -e <span class="string">&quot;select @@server_id&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DBA-01-MySQL简介和安装</title>
      <link href="2020/09/21/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-01-MySQL%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/"/>
      <url>2020/09/21/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-DBA-01-MySQL%E7%AE%80%E4%BB%8B%E5%92%8C%E5%AE%89%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是数据"><a href="#什么是数据" class="headerlink" title="什么是数据"></a>什么是数据</h1><p>数据：文字、图片、视频。。。人类认知的数据表现方式<br>计算机：二进制、16进制的机器语言<br>基于数据的重要性和复杂性的不同，我们可能有不同的管理方式。</p><p>哪些数据是适合存储到数据库的呢？<br>重要性比较高的<br>关系较复杂的数据</p><h1 id="什么是数据库管理系统（DBMS）"><a href="#什么是数据库管理系统（DBMS）" class="headerlink" title="什么是数据库管理系统（DBMS）"></a>什么是数据库管理系统（DBMS）</h1><ul><li><p>RDBMS: 关系型数据库管理系统<br>比较适合于,安全级别要求高的数据以及关系较复杂的数据</p></li><li><p>NoSQL:非关系型数据库管理系统<br>适合于高性能存取数据,一般是配合RDBMS进行使用的<br>针对大数据处理分析,分布式架构更加擅长</p></li></ul><h1 id="数据库管理系统种类"><a href="#数据库管理系统种类" class="headerlink" title="数据库管理系统种类"></a>数据库管理系统种类</h1><ul><li><p>RDBMS  ：</p><ul><li>MySQL</li><li>Oracle</li><li>MSSQL（SQL Server）</li><li>PG</li></ul></li><li><p>NoSQL：Not Only SQL</p><ul><li>键-值（key-value）<ul><li>Redis</li><li>memcached</li></ul></li><li>文档（document）<ul><li>Mongodb</li></ul></li></ul></li></ul><h1 id="MySQL二进制安装"><a href="#MySQL二进制安装" class="headerlink" title="MySQL二进制安装"></a>MySQL二进制安装</h1><h2 id="创建软件目录和用户"><a href="#创建软件目录和用户" class="headerlink" title="创建软件目录和用户"></a>创建软件目录和用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建mysql用户</span></span><br><span class="line">useradd mysql -s /sbin/nologin</span><br><span class="line"><span class="comment"># 创建软件目录</span></span><br><span class="line">mkdir -p /app/database</span><br><span class="line"><span class="comment"># 创建数据目录</span></span><br><span class="line">mkdir -p /data/3306</span><br><span class="line"><span class="comment"># 创建日志目录</span></span><br><span class="line">mkdir -p /binlog/3306</span><br><span class="line"><span class="comment"># 授予权限</span></span><br><span class="line">chown -R mysql.mysql /data/ /app/ /binlog/</span><br></pre></td></tr></table></figure><h2 id="上传完软件解压"><a href="#上传完软件解压" class="headerlink" title="上传完软件解压"></a>上传完软件解压</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL01 database]$ ln -s mysql-8.0.20-linux-glibc2.12-x86_64 mysql</span><br></pre></td></tr></table></figure><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL01 database]$ vim /etc/profile</span><br><span class="line"><span class="built_in">export</span> PATH=/app/database/mysql/bin:<span class="variable">$PATH</span></span><br><span class="line">[root@MySQL01 database]$ <span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@MySQL01 database]$ mysqld --initialize-insecure  --user=mysql --basedir=/app/database/mysql --datadir=/data/3306</span><br></pre></td></tr></table></figure><blockquote><p>5.7初始化方式<br>(1) mysqld –initialize<br>1.初始化完成后,会生成临时密码(显示到屏幕上,并且会往日志中记一份)<br>2.密码复杂度:长度:超过12位? 复杂度:字符混乱组合<br>3.密码过期时间180天</p><p>5.6初始化区别</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/application/mysql/scripts/mysql_install_db  --user=mysql --datadir=/application/mysql/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure></blockquote><p>若报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">报错原因: Linux系统中缺少libaio-devel 软件包</span><br><span class="line">解决:</span><br><span class="line">yum install -y libaio-devel</span><br></pre></td></tr></table></figure><p><strong>注释：5.6初始化的区别</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/application/mysql/scripts/mysql_install_db  --user=mysql --datadir=/application/mysql/data --basedir=/application/mysql</span><br></pre></td></tr></table></figure><h2 id="编写默认配置文件"><a href="#编写默认配置文件" class="headerlink" title="编写默认配置文件"></a>编写默认配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">basedir=/app/mysql</span><br><span class="line">datadir=/data/mysql</span><br><span class="line">server_id=6</span><br><span class="line">port=3306</span><br><span class="line">socket=/tmp/mysql.sock</span><br><span class="line">[mysql]</span><br><span class="line">socket=/tmp/mysql.sock</span><br></pre></td></tr></table></figure><h2 id="使用systemd管理mysql"><a href="#使用systemd管理mysql" class="headerlink" title="使用systemd管理mysql"></a>使用systemd管理mysql</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;systemd&#x2F;system&#x2F;mysqld.service </span><br><span class="line">[Unit]</span><br><span class="line">Description&#x3D;MySQL Server</span><br><span class="line">Documentation&#x3D;man:mysqld(8)</span><br><span class="line">Documentation&#x3D;http:&#x2F;&#x2F;dev.mysql.com&#x2F;doc&#x2F;refman&#x2F;en&#x2F;using-systemd.html</span><br><span class="line">After&#x3D;network.target</span><br><span class="line">After&#x3D;syslog.target</span><br><span class="line">[Install]</span><br><span class="line">WantedBy&#x3D;multi-user.target</span><br><span class="line">[Service]</span><br><span class="line">User&#x3D;mysql</span><br><span class="line">Group&#x3D;mysql</span><br><span class="line">ExecStart&#x3D;&#x2F;app&#x2F;mysql&#x2F;bin&#x2F;mysqld --defaults-file&#x3D;&#x2F;etc&#x2F;my.cnf</span><br><span class="line">LimitNOFILE &#x3D; 5000</span><br></pre></td></tr></table></figure><p>注意：将原来模式启动mysqld先关闭，然后再用systemd管理。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Description:描述服务</span><br><span class="line">After描述服务类别</span><br><span class="line">[Service]服务运行参数的设置</span><br><span class="line">Type &#x3D;forking是后台运行的形式</span><br><span class="line">ExecStart为服务的具体运行命令</span><br><span class="line">ExecReload为重启命令</span><br><span class="line">ExecStop为停止命令</span><br><span class="line">PrivateTmp&#x3D; True表示给服务分配独立的临时空间</span><br><span class="line">注意: [Service]的启动、 重启、停止命令全部要求使用绝对路径</span><br><span class="line">[Install)运行级别下服务安装的相关设置，可设置为多用户，即系统运行级别为3</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> DBA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DBA </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-06-资源限制&amp;可视化面板</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-06-%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6&amp;%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-06-%E8%B5%84%E6%BA%90%E9%99%90%E5%88%B6&amp;%E5%8F%AF%E8%A7%86%E5%8C%96%E9%9D%A2%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker资源限制"><a href="#Docker资源限制" class="headerlink" title="Docker资源限制"></a>Docker资源限制</h1><p>默认情况下，容器没有资源限制，会在宿主机内核调度允许的情况下，尽可能多的占用给的资源。Docker提供了能控制容器使用CPU、内存、IO等的方法。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730084811476.png" alt="image-20200730084811476"></p><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><p>一旦发生OOME，任何进程都有可能被杀死，包括docker daemon在内<br>为此，Docker特地调整了docker daemon的OOM优选级，以免它被内核“正法，但容器的优选级并未被调整</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730085617072.png" alt="image-20200730085617072"></p><p><strong>–memory-swap</strong></p><p>设置<code>--memory-swap</code>时要先设置<code>-m</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730090124479.png" alt="image-20200730090124479"></p><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730085725522.png" alt="image-20200730085725522"></p><h2 id="常用小结"><a href="#常用小结" class="headerlink" title="常用小结"></a>常用小结</h2><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td>-m,–memory</td><td>容器可以使用的最大内存量</td></tr><tr><td>–memory-swap</td><td>允许交换到磁盘的内存量</td></tr><tr><td>–memory-swappiness=&lt;0-100&gt;</td><td>容器使用swap分区交换的百分比(0-100，默认为-1)</td></tr><tr><td>–oom-kill-disable</td><td>禁用OOM Killer</td></tr><tr><td>–cpus</td><td>可以使用的CPU数量</td></tr><tr><td>–cpuset-cpus</td><td>限制容器使用特定的CPU核心，如(0-3，0，1)</td></tr><tr><td>–cpu-shares</td><td>CPU共享(相对权重)</td></tr></tbody></table><h1 id="Docker-可视化面板"><a href="#Docker-可视化面板" class="headerlink" title="Docker 可视化面板"></a>Docker 可视化面板</h1><ul><li>Portainer:基于Go,是一个轻量级的图形化界面管理工具，可轻松管理Docker主机。</li><li>Rancher:开源的企业级容器管理平台,Rancher提供了在生产环境中使用管理Docker和Kubernetes的全栈化容器部署与管理平台。(CI/CD)</li><li>cAdvisor:Google开发的容器监控工具, 会显示当前容器的资源使用情况，包括 CPU、内存、网络、文件系统等，显示容器列表。</li></ul><h2 id="portainer"><a href="#portainer" class="headerlink" title="portainer"></a>portainer</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8088:9000 --restart=always -v /var/run/docker.sock:/var/run/docker.sock --privileged=<span class="literal">true</span> portainer/portainer</span><br></pre></td></tr></table></figure><p>访问8088端口 <a href="http://192.168.0.10:8088/">http://192.168.0.10:8088</a></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730111557493.png" alt="image-20200730111557493"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730111616787.png" alt="image-20200730111616787"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730111636904.png" alt="image-20200730111636904"></p><h2 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h2><p><code>Rancher</code>是一个开源的企业级容器管理平台。通过<code>Rancher</code>，企业不必自己使用一系列的开源软件去从头搭建容器服务平台。<code>Rancher</code>提供了在生产环境中使用管理<code>Docker</code>和<code>Kubernetes</code>的全栈化容器部署与管理平台。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --restart=unless-stopped -p 81:80 -p 443:443 rancher/rancher:v2.0.0</span><br><span class="line">docker logs -f rancher</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730111744329.png" alt="image-20200730111744329"></p><h2 id="cAdvisor"><a href="#cAdvisor" class="headerlink" title="cAdvisor"></a>cAdvisor</h2><p><code>cAdvisor</code>是<code>Google</code>开发的容器监控工具。</p><ul><li>监控 Docker Host cAdvisor 会显示当前 host 的资源使用情况，包括 CPU、内存、网络、文件系统等。</li><li>监控容器 点击 Docker Containers 链接，显示容器列表。点击某个容器，比如 sysdig，进入该容器的监控页面。</li></ul><p>以上就是 cAdvisor 的主要功能，总结起来主要两点：</p><ul><li>展示 Host 和容器两个层次的监控数据。</li><li>展示历史变化数据。</li></ul><p>由于<code>cAdvisor</code>提供的操作界面略显简陋，而且需要在不同页面之间跳转，并且只能监控一个 host，这不免会让人质疑它的实用性。但 cAdvisor 的一个亮点是它可以将监控到的数据导出给第三方工具，由这些工具进一步加工处理。</p><p>我们可以把<code> cAdvisor</code> 定位为一个监控数据收集器，收集和导出数据是它的强项，而非展示数据。 cAdvisor 支持很多第三方工具，其中就包括<code>Prometheus</code>。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/20200717093343535.png" alt="20200717093343535"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-05-Docker Registry&amp;Docker Hub</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-05-Docker%20Registry&amp;Docker%20Hub/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-05-Docker%20Registry&amp;Docker%20Hub/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker-Registry"><a href="#Docker-Registry" class="headerlink" title="Docker Registry"></a>Docker Registry</h1><p>Docker Registry作为Docker的核心组件之一负责镜像内容的存储与分发，客户端的docker pull以及push命令都将直接与registry进行交互,最初版本的registry由Python实现,由于设计初期在安全性,性能以及API的设计上有着诸多的缺陷，该版本在0.9之后停止了开发，由新的项目distribution(新的docker register被称为Distribution）来重新设计并开发下一代registry，新的项目由go 语言开发，所有的 API，底层存储方式，系统架构都进行了全面的重新设计已解决上一代registry中存在的问题，2016年4月份rgistry 2.0正式发布，docker 1.6版本开始支持registry 2.0，而八月份随着docker 1.8发布，docker hub正式启用2.1版本registry全面替代之前版本registry，新版registry对镜像存储格式进行了重新设计并和旧版不兼容，docker 1.5和之前的版本无法读取2.0的镜像，另外，Registry2.4版本之后支持了回收站机制，也就是可以删除镜像了，在2.4版本之前是无法支持删除镜像的，所以如果你要使用最好是大于Registry 2.4版本的，目前最新版本为2.7.x</p><p>官方文档地址: <a href="https://docs.docker.com/registry/">https://docs.docker.com/registry/</a></p><p>官方github地址: <a href="https://github.com/docker/distribution/">https://github.com/docker/distribution/</a></p><p>本部分将介绍通过官方提供的docker registry镜像来简单搭建一套本地私有仓库环境。</p><h2 id="下载Docker-Registry镜像"><a href="#下载Docker-Registry镜像" class="headerlink" title="下载Docker Registry镜像"></a>下载Docker Registry镜像</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker pull registry</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727163336809.png" alt="image-20200727163336809"></p><h2 id="搭建单机仓库"><a href="#搭建单机仓库" class="headerlink" title="搭建单机仓库"></a>搭建单机仓库</h2><h3 id="创建授权使用目录"><a href="#创建授权使用目录" class="headerlink" title="创建授权使用目录"></a>创建授权使用目录</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ mkdir /docker/auth -p</span><br></pre></td></tr></table></figure><h3 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 docker]$ docker run --entrypoint htpasswd registry -Bbn kinmfer 123456 &gt; /docker/auth/htpasswd</span><br></pre></td></tr></table></figure><h3 id="启动Docker-Registry"><a href="#启动Docker-Registry" class="headerlink" title="启动Docker Registry"></a>启动Docker Registry</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 docker]$ docker run -d -p 5000:5000 --name registry1 -v /docker/auth:/auth -e <span class="string">&quot;REGISTRY_AUTH=htpasswd&quot;</span> -e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm&quot;</span> -e <span class="string">&quot;REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd&quot;</span> registry</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727171750488.png" alt="image-20200727171750488"></p><h3 id="测试登陆仓库"><a href="#测试登陆仓库" class="headerlink" title="测试登陆仓库"></a>测试登陆仓库</h3><p>会报错如下</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727172119125.png" alt="image-20200727172119125"></p><p>添加不安全的registry</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Docker02 ~]$ vim /lib/systemd/system/docker.service</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727172445326.png" alt="image-20200727172445326"></p><p>再次登陆成功</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727173540434.png" alt="image-20200727173540434"></p><hr><p><strong>或者</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修改daemon.json   </span><br><span class="line">vim /etc/docker/daemon.json    </span><br><span class="line"><span class="comment"># 在上述文件中添加一个key，保存退出。此步用于让 docker 信任私有仓库地址；注意将私有仓库服务器ip修改为自己私有仓库服务器真实ip </span></span><br><span class="line">&#123;<span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;私有仓库服务器ip:5000&quot;</span>]&#125; </span><br><span class="line"><span class="comment"># 5、重启docker 服务 </span></span><br><span class="line">systemctl restart docker</span><br><span class="line">docker start registry</span><br></pre></td></tr></table></figure><h3 id="上传镜像"><a href="#上传镜像" class="headerlink" title="上传镜像"></a>上传镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@Docker02 ~]$ docker tag nginx:1.16.1 192.168.242.100:5000/docker02/nginx:1.16.1</span><br><span class="line">[root@Docker02 ~]$ docker push 192.168.242.100:5000/docker02/nginx:1.16.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727174213816.png" alt="image-20200727174213816"></p><h3 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h3><p>在另一台主机下载镜像，前提是也得添加不安全的registry</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]$ docker pull 192.168.242.100:5000/docker02/nginx:1.16.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728081937231.png" alt="image-20200728081937231"></p><h1 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h1><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器,由vmware开源，其通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制,镜像全部保存在私有Registry中，确保数据和知识产权在公司内部网络中管控，另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><p>vmware官方开源服务列表地址: <a href="https://vmware.github.io/harbor/cn/">https://vmware.github.io/harbor/cn/</a><br>harbor官方github地址: <a href="https://github.com/vmware/harbors">https://github.com/vmware/harbors</a><br>harbor官方网址: <a href="https://goharbor.io/">https://goharbor.io/</a></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728082753247.png" alt="image-20200728082753247"></p><h2 id="Habor功能官方介绍"><a href="#Habor功能官方介绍" class="headerlink" title="Habor功能官方介绍"></a>Habor功能官方介绍</h2><p>基于角色的访问控制:用户与Docker镜像仓库通过“项目”进行组织管理，一个用户可以对多个镜像仓库在同一命名空间(project）里有不同的权限。镜像复制:镜像可以在多个Registry实例中复制(同步)。尤其适合于负载均衡，高可用，混合云和多云的场景。 </p><p>图形化用户界面:用户可以通过浏览器来浏览，检索当前Docker镜像仓库，管理项目和命名空间。</p><p>AD/LDAP支: Harbor可以集成企业内部已有的AD/LDAP，用于鉴权认证管理。</p><p>审计管理:所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</p><p>国际化:已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来</p><p>AD/LDAP支:Harbor可以集成企业内部已有的AD/LDAP，用于鉴权认证管理。</p><p>审计管理:所有针对镜像仓库的操作都可以被记录追溯，用于审计管理。</p><p>国际化:已拥有英文、中文、德文、日文和俄文的本地化版本。更多的语言将会添加进来。</p><p>RESTfulAPI︰提供给管理员对于Harbor更多的操控，使得与其它管理软件集成变得更容易。</p><p>部署简单:提供在线和离线两种安装工具，也可以安装到vSphere平台(OVA方式)虚拟设备。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">nginx: harbor的一个反向代理组件，代理registry、ui、token等服务。这个代理会转发harbor web和 docker client的各种请求到后端服务上。</span><br><span class="line">harbor-adminserver: harbor系统管理接口，可以修改系统配置以及获取系统信息。</span><br><span class="line">harbor-db:存储项目的元数据、用户、规则、复制策略等信息。</span><br><span class="line">harbor-jobservice: harbor里面主要是为了镜像仓库之前同步使用的。</span><br><span class="line">harbor-log:收集其他harbor的日志信息。</span><br><span class="line">harbor-ui:一个用户界面模块，用来管理registry。</span><br><span class="line">registry:存储docker images的服务，并且提供 pull&#x2F;push服务。</span><br><span class="line">redis:存储缓存信息</span><br><span class="line">webhook:当registry中的image状态发生变化的时候去记录更新日志、复制等操作。</span><br><span class="line">token service:在 docker client进行pull&#x2F;push 的时候负责token 的发放。</span><br></pre></td></tr></table></figure><h2 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h2><p>下载地址:<a href="https://github.com/vmware/harbor/releases/">https://github.com/vmware/harbor/releases/</a><br>安装文档:<br><a href="https://github.com/vmware/harbor/blob/master/docs/installation_guide.md/">https://github.com/vmware/harbor/blob/master/docs/installation_guide.md/</a></p><blockquote><p>前提得安装Docker</p></blockquote><p>下载离线安装完整包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]$ <span class="built_in">cd</span> /usr/loacl/src</span><br><span class="line">[root@docker03 ~]$ wget https://github.com/goharbor/harbor/releases/download/v1.10.4/harbor-offline-installer-v1.10.4.tgz</span><br></pre></td></tr></table></figure><p>下载在线安装包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 ~]$ <span class="built_in">cd</span> /usr/loacl/src</span><br><span class="line">[root@docker03 ~]$ wget https://github.com/goharbor/harbor/releases/download/v1.10.4/harbor-online-installer-v1.10.4.tgz</span><br></pre></td></tr></table></figure><h2 id="配置Harbor"><a href="#配置Harbor" class="headerlink" title="配置Harbor"></a>配置Harbor</h2><p>解压并配置habor.cfg</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 src]$ tar xf harbor-offline-installer-v1.10.4_2.tgz</span><br><span class="line">[root@docker03 src]$ dnf install python3-pip -y</span><br><span class="line">[root@docker03 harbor]$ docker-compose --version</span><br><span class="line">docker-compose version 1.26.2, build unknown</span><br><span class="line">[root@docker03 harbor]$ ./install.sh</span><br></pre></td></tr></table></figure><h2 id="官方方式启动Harbor"><a href="#官方方式启动Harbor" class="headerlink" title="官方方式启动Harbor"></a>官方方式启动Harbor</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 src]$ dnf install python3-pip -y</span><br><span class="line">[root@docker03 src]$ pip3 install docker-compose</span><br><span class="line">[root@docker03 src]$ ./install.sh</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker03 harbor]$ docker-compose stop</span><br><span class="line">[root@docker03 harbor]$ docker-compose start</span><br><span class="line">[root@docker03 harbor]$ docker-compose pause</span><br><span class="line">[root@docker03 harbor]$ docker-compose unpause</span><br><span class="line">[root@docker03 harbor]$ docker-compose restart</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728093447342.png" alt="image-20200728093447342"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728093528709.png" alt="image-20200728093528709"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728094646777.png" alt="image-20200728094646777"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728094701641.png" alt="image-20200728094701641"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728094739325.png" alt="image-20200728094739325"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-04-镜像与制作</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-04-%E9%95%9C%E5%83%8F%E4%B8%8E%E5%88%B6%E4%BD%9C/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-04-%E9%95%9C%E5%83%8F%E4%B8%8E%E5%88%B6%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="手动制作"><a href="#手动制作" class="headerlink" title="手动制作"></a>手动制作</h1><p><strong>Docker镜像有没有内核？</strong></p><p>从镜像大小上面来说，一个比较小的镜像只有十几MB，而内核文件需要一百多兆，因此镜像里面是没有内核的，镜像在被启动为容器后将直接使用宿主机的内核，而镜像本身则只提供相应的rootfs，即系统正常运行所必须的用户空间的文件系统，比如/dev/ , /proc,/bin,/etc等目录，所以容器当中基本是没有/boot目录的，而/boot当中保存的就是与内核相关的文件和目录。</p><p><strong>为什么没有内核?</strong><br>由于容器启动和运行过程中是直接使用了宿主机的内核,所以没有直接调用过物理硬件，所以也不会涉及到硬件驱动，因此也用不上内核和驱动，另外有内核的那是虚拟机。</p><h2 id="手动制作yum版nginx镜像"><a href="#手动制作yum版nginx镜像" class="headerlink" title="手动制作yum版nginx镜像"></a>手动制作yum版nginx镜像</h2><p>Docker制作类似于虚拟机的模板制作，即按照公司的实际业务务求将需要安装的软件、相关配置等基础环境配置完成，然后将虚拟机再提交为模板，最后再批量从模板批量创建新的虚拟机,这样可以极大的简化业务中相同环境的虚拟机运行环境的部署工作，Docker的镜像制作分为手动制作和自动制作(基于DockerFile)，企业通常都是基于Dockerfile制作镜像，其中手动制作镜像步骤具体如下：</p><h3 id="下载镜像并初始化系统"><a href="#下载镜像并初始化系统" class="headerlink" title="下载镜像并初始化系统"></a>下载镜像并初始化系统</h3><p>基于某个基础镜像之上重新制作，因此需要先有一个基础镜像，本次使用官方提供的centos镜像为基础:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker pull centos</span><br><span class="line">[root@docker01 ~]$ docker run -it centos bash</span><br><span class="line">[root@d08b9898e6b3 /]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># rm -rf ./*</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># sed -i &#x27;s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|&#x27; /etc/yum.repos.d/epel*</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># sed -i &#x27;s|^metalink|#metalink|&#x27; /etc/yum.repos.d/epel*</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># dnf makecache</span></span><br><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># dnf install -y vim wget pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop</span></span><br></pre></td></tr></table></figure><h3 id="yum安装并配置nginx"><a href="#yum安装并配置nginx" class="headerlink" title="yum安装并配置nginx"></a>yum安装并配置nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@d08b9898e6b3 yum.repos.d]<span class="comment"># dnf install nginx -y #安装nginx</span></span><br><span class="line">[root@d08b9898e6b3 html]<span class="comment"># cat /usr/share/nginx/html/index.html</span></span><br><span class="line">I love Linux!</span><br></pre></td></tr></table></figure><h3 id="关闭nginx后台运行"><a href="#关闭nginx后台运行" class="headerlink" title="关闭nginx后台运行"></a>关闭nginx后台运行</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@d08b9898e6b3 /]# vim /etc/nginx/nginx.conf</span><br><span class="line"><span class="attribute">user</span> nginx;</span><br><span class="line"><span class="attribute">worker_processes</span> auto;</span><br><span class="line"><span class="attribute">error_log</span> /var/log/nginx/error.log;</span><br><span class="line"><span class="attribute">pid</span> /run/nginx.pid;</span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">off</span>;</span><br></pre></td></tr></table></figure><h3 id="提交为镜像"><a href="#提交为镜像" class="headerlink" title="提交为镜像"></a>提交为镜像</h3><p>不要退出容器，另起一个宿主机终端操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker commit --help</span><br><span class="line">Usage:  docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line">Create a new image from a container&#39;s changes</span><br><span class="line">Options:</span><br><span class="line">  -a, --author string    Author (e.g., &quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;)</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image</span><br><span class="line">  -m, --message string   Commit message</span><br><span class="line">  -p, --pause            Pause container during commit (default true)</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker commit -a <span class="string">&quot;kinmfer kinmfer@foxmail.com&quot;</span> -c <span class="string">&quot;EXPOSE 80&quot;</span> -m <span class="string">&quot;Nginx yum v1&quot;</span> d08b9898e centos-nginx-v1:1.16.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725155740149.png" alt="image-20200725155740149"></p><h3 id="验证镜像"><a href="#验证镜像" class="headerlink" title="验证镜像"></a>验证镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it -p 8001:80 centos-nginx-v1:1.16.1  nginx</span><br></pre></td></tr></table></figure><p>如果在配置nginx时未加入<code>daemon off</code>，则应以如下命令启动</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it -p 8001:80 centos-nginx-v1:1.16.1  nginx <span class="string">&quot;-g daemon off;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725160234056.png" alt="image-20200725160234056"></p><h2 id="手动制作编译版本nginx镜像"><a href="#手动制作编译版本nginx镜像" class="headerlink" title="手动制作编译版本nginx镜像"></a>手动制作编译版本nginx镜像</h2><p>过程为在centos基础镜像之上手动编译安装nginx，然后再提交为镜像</p><h3 id="下载镜像并初始化系统-1"><a href="#下载镜像并初始化系统-1" class="headerlink" title="下载镜像并初始化系统"></a>下载镜像并初始化系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker pull centos</span><br><span class="line">[root@docker01 ~]$ docker run -it centos bash</span><br><span class="line">[root@84ac00d2d9d2 /]<span class="comment"># cd /etc/yum.repos.d/</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># rm -rf ./*</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># sed -i &#x27;s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|&#x27; /etc/yum.repos.d/epel*</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># sed -i &#x27;s|^metalink|#metalink|&#x27; /etc/yum.repos.d/epel*</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># dnf makecache</span></span><br><span class="line">[root@84ac00d2d9d2 yum.repos.d]<span class="comment"># dnf install -y vim wget make tree gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop</span></span><br></pre></td></tr></table></figure><h3 id="编译安装nginx"><a href="#编译安装nginx" class="headerlink" title="编译安装nginx"></a>编译安装nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@84ac00d2d9d2 src]<span class="comment"># wget http://nginx.org/download/nginx-1.18.0.tar.gz</span></span><br><span class="line">[root@84ac00d2d9d2 src]<span class="comment"># tar -xf nginx-1.18.0.tar.gz</span></span><br><span class="line">[root@84ac00d2d9d2 src]<span class="comment"># cd nginx-1.18.0</span></span><br><span class="line">[root@84ac00d2d9d2 nginx-1.18.0]<span class="comment"># ./configure --prefix=/apps/nginx</span></span><br><span class="line">[root@84ac00d2d9d2 nginx-1.18.0]<span class="comment"># make</span></span><br><span class="line">[root@84ac00d2d9d2 nginx-1.18.0]<span class="comment"># make install</span></span><br><span class="line">[root@84ac00d2d9d2 nginx-1.18.0]<span class="comment"># cd /apps/nginx</span></span><br><span class="line">[root@84ac00d2d9d2 nginx]<span class="comment"># vim html/index.html</span></span><br><span class="line">I love Docker!</span><br></pre></td></tr></table></figure><p><strong>这里将nginx命令设置了软链接，这样就可以直接以<code>nginx</code>命令启动容器，否则在启动容器时需要写成<code>/app/nginx/sbin/nginx</code>，有类似情况需要注意</strong></p><h3 id="提交为镜像-1"><a href="#提交为镜像-1" class="headerlink" title="提交为镜像"></a>提交为镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker commit -a <span class="string">&quot;kinmfer kinmfer@foxmail.com&quot;</span> -m <span class="string">&quot;Nginx make v1&quot;</span> 84ac00d2d9d2 centos-nginx:v1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725163054478.png" alt="image-20200725163054478"></p><h3 id="验证镜像-1"><a href="#验证镜像-1" class="headerlink" title="验证镜像"></a>验证镜像</h3><p>由于没有在nginx配置文件里加入<code>daemon off</code>，所以启动容器的时候要加入参数<code>nginx &quot;-g daemon off;&quot;</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it -p 8002:80 centos-nginx:v1 nginx <span class="string">&quot;-g daemon off;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725163803500.png" alt="image-20200725163803500"></p><p>Docker不建议再通过这种方式构建镜像；具体原因如下</p><ul><li>手工创建,容易出错,效率低并且可重复性弱。</li><li>无法对镜像进行审计，存在安全隐患。</li></ul><h1 id="Dockfile制作"><a href="#Dockfile制作" class="headerlink" title="Dockfile制作"></a>Dockfile制作</h1><h2 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h2><p>DockerFile可以说是一种可以被Docker程序解释的脚本，DockerFile是由一条条的命令组成的，每条命令对应Linux下面的一条命令，Docker程序将这些DockerFile指令再翻译成真正的Linux命令，其有自己的书写方式和支持的命令，Docker程序读取DockerFile并根据指令生成Docker镜像，相比手动制作镜像的方式，DockerFile更能直观的展示镜像是怎么产生的，有了写好的各种各样DockerFile文件，当后期某个镜像有额外的需求时，只要在之前的DockerFile添加或者修改相应的操作即可重新生成新的Docker镜像，避免了重复手动制作镜像的麻烦，具体如下:</p><p><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a></p><p><strong>注意：Dockerfile里涉及到的Linux命令需要FROM的基础镜像中有</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">FROM<span class="comment"># 基础镜像，一切从这里开始构建</span></span><br><span class="line">LABEL<span class="comment"># kv对</span></span><br><span class="line">RUN<span class="comment"># 镜像构建的时候需要运行的命令</span></span><br><span class="line">ADD<span class="comment"># 添加内容</span></span><br><span class="line">WORKDIR<span class="comment"># 镜像的工作目录</span></span><br><span class="line">VOLUME<span class="comment"># 挂载的目录</span></span><br><span class="line">EXPOSE          <span class="comment"># 暴露端口配置，跟 -p 是一个道理</span></span><br><span class="line">ONBUILD<span class="comment"># 当构建一个被继承DockerFile 这个时候就会运行ONBUILD的指令。触发指令</span></span><br><span class="line">COPY<span class="comment"># 类似ADD,将我们文件拷贝到镜像中</span></span><br><span class="line">ENV<span class="comment"># 构建的时候设置环境变量，跟 -e 是一个意思</span></span><br><span class="line">CMD<span class="comment"># 指定这个容器启动时要执行的命令,只有最后一个命令会生效，可被替代</span></span><br><span class="line">ENTRYPOINT<span class="comment"># 指定这个容器启动的时候要执行的命令，可以追加命令</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CMD 和 ENTRYPOINT 的区别说明：（后面也会介绍）</span></span><br><span class="line"><span class="comment"># 若CMD 和 ENTRYPOINT 后跟的都是 ls -a 这个命令，当docker run 一个容器时，添加了 -l 选项，则CMD里的ls -a 命令就会被替换成-l;而ENTRYPOINT中的 ls -a会追加-l变成 ls -a -l  </span></span><br></pre></td></tr></table></figure><p><strong>FROM</strong></p><ul><li>FROM指令是最重的一个且必须为Dockerfile文件开篇的第一个非注释行，用于为映像文件构建过程指定基准镜像，后续的指令运行于此基准镜像所提供的运行环境</li><li>实践中，基准镜像可以是任何可用镜像文件，默认情况下，docker build会在docker主机上查找指定的镜像文件，在其不存在时，则会从Docker Hub Registry上拉取所需的镜像文件。如果找不到指定的镜像文件，docker build会返回一个错误信息</li><li>Syntax<br><code>FROM&lt;repository&gt;[:&lt;tag&gt;]</code>或<br><code>FROM&lt;resository&gt;@&lt;digest&gt;</code><ul><li>reposotiry :指定作为base inage的名称;</li><li>&lt;tag&gt;: base inage的标签，为可选项，省咯时默认为latest;</li></ul></li></ul><hr><p><strong>MAINTAINER(现以 LABEL +kv对来实现)</strong></p><ul><li><p>用于让Dockerfile制作者提供本人的详细信息</p></li><li><p>Dockerfile并不限制MAINTAINER指令可在出现的位置，但推荐将其放置于FROM指令之后</p></li><li><p>Syntax<br><code>MAINTAINER &lt;authtor&#39;s detail&gt;</code><br><code>MAINTAINER &quot;kinmfer&lt;kinmfer@foxmail.com&gt;&quot;</code></p></li><li><p>&lt;author’s detail&gt;可是任何文本信息，但约定俗成地使用作者名称及邮件地址</p></li><li><p>现被<code>LABEL maintainer=&quot;kinimfer &lt;kinmfer@foxmail.com&gt;&quot;</code>代替</p></li></ul><hr><p><strong>LABEL</strong></p><ul><li><p>用来在镜像中添加元数据，一个镜像可以有多个LABEL，可以在一行定义</p></li><li><p>一个LABEL标签是一个kv对</p></li><li><p>要在标签值中包含空格，请像在命令行分析中那样使用引号和反斜杠。</p></li><li><p>Syntax:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LABEL&lt;key&gt;&#x3D;&lt;value&gt; &lt;key&gt;&#x3D;&lt;value&gt; &lt;key&gt;&#x3D;&lt;value&gt;...</span><br></pre></td></tr></table></figure></li></ul><hr><p><strong>COPY</strong></p><ul><li>用于从Docker主机复制文件至创建的新映像文件</li><li>Syntax<br><code>COPY &lt;src&gt; ...&lt;dest&gt;</code>或<br><code>COPY [&quot;&lt;src&gt;&quot;,...&quot;&lt;dest&gt;&quot;]</code><ul><li>&lt;src&gt;:要复制的源文件或目录，支持使用通配符</li><li>&lt;dest&gt;:目标路径，即正在创建的image的文件系统路径;建议为&lt;dest&gt;使用绝对路径，否则，COPY指定则以WORKDIR为其起始路径;</li><li>注意:在路径中有空白字符时，通常使用第二种格式</li></ul></li><li>文件复制准则<ul><li>&lt;src&gt;必须是build上下文中的路径，不能是其父目录中的文件</li><li>如果&lt;src&gt;是目录，则其内部文件或子目录会被递归复制，但&lt;src&gt;目录自身不会被复制</li><li>如果指定了多个&lt;src&gt;，或在&lt;src&gt;中使用了通配符，则&lt;dest&gt;必须是一个目录，且必须以/结尾</li><li>如果&lt;dest&gt;事先不存在，它将会被自动创建，这包括其父目录路径</li></ul></li></ul><hr><p><strong>ADD</strong></p><ul><li>ADD指令类似于COPY指令，ADD支持使用TAR文件和URL路径</li><li>Syntax<br><code>ADD&lt;src&gt; ..&lt;dest&gt;</code>或<br><code>ADD[&quot;&lt;src&gt;&quot;,... &quot;&lt;dest&gt;&quot;]</code></li><li>操作准则<ul><li>同COPY指令</li><li>如果&lt;src&gt;为URL且&lt;dest&gt;不以/结尾，则&lt;src&gt;指定的文件将被下载并直接被创建为&lt;dest&gt;;如果&lt;dest&gt;以/结尾，则文件名URL指定的文件将被直接下载并保存为&lt;dest&gt;/&lt;filename&gt;</li><li>如果&lt;src&gt;是一个本地系统上的压缩格式的tar文件，它将被展开为一个目录，其行为类似于“tar -x”命令;然而，通过URL获取到的tar文件将不会自动展开;</li><li>如果&lt;rc&gt;有多个，或其间接或直接使用了通配符，则&lt;dest&gt;必须是一个以/结尾的目录路径;如果&lt;dest&gt;不以/结尾，则其被视作一个普通文件，&lt;src&gt;的内容将被直接写入到&lt;dest&gt;;</li></ul></li></ul><hr><p><strong>WORKDIR</strong></p><ul><li>用于为Dockerfile中所有的RUN、CMD、ENTRYPOINT、COPY和ADD指定设定工作目录</li><li>Syntax<ul><li>WORKDIR&lt;dirpath&gt;<ul><li>在Dockerfile文件中，WORKDIR指令可出现多次，其路径也可以为相对路径，不过，其是相对此前一个WORKDIR指令指定的路径</li><li>另外，WORKDIR也可调用由ENV指定定义的变量</li></ul></li><li>例如<ul><li>WORKDIR /var/log</li><li>WORKD1R $STATEPATH</li></ul></li></ul></li></ul><hr><p><strong>VOLUMN</strong></p><ul><li>用于在image中创建一个挂载点目录，以挂载Docker host上的卷或其它容器上的卷</li><li>Syntax<ul><li><code>VOLUME &lt;mountpoint≥</code>或<br><code>VOLUME[&quot;&lt;mountpoint&gt;&quot;]</code></li></ul></li><li>如果挂载点目录路径下此前在文件存在，docker run命令会在卷挂载完成后将此前的所有文件复制到新挂载的卷中</li></ul><hr><p><strong>EXPOSE</strong></p><ul><li>用于为容器打开指定要监听的端口以实现与外部通信，只有在运行容器时加<code>-P</code>选项才会真正暴露端口</li><li>Syntax<br><code>EXPOSE&lt;port&gt;[&lt;protocol&gt;][[]...]</code><ul><li>&lt;protocol&gt;用于指定传输层协议，可为tcp或udp二者之一，默认为TCP协议</li></ul></li><li>EXPOSE指令可一次指定多个端口，例如<ul><li>EXPOSE 11211/udp 11211/tcp</li></ul></li></ul><hr><p><strong>ENV</strong></p><ul><li>用于为镜像定义所需的环境变量，并可被Dockerfile文件中位于其后的其它指令(如ENV、ADD、COPY等）调用</li><li>调用格式为$variable_name或${variable_name}</li><li>Syntax<br><code>ENV &lt;key&gt; &lt;value&gt;</code>或<br><code>ENV &lt;key&gt;=&lt;value&gt; ...</code></li><li>第一种格式中，&lt;key&gt;之后的所有内容均会被视作其&lt;value&gt;的组成部分，因此，一次只能设置一个变量;</li><li>第二种格式可用一次设置多个变量，每个变量为一个”&lt;key&gt;=&lt;value&gt;”的键值对，如果&lt;value&gt;中包含空格，可以以反斜线(N)进行转义，也可通过对&lt;value&gt;加引号进行标识;另外，反斜线也可用于续行;</li><li>定义多个变量时，建议使用第二种方式，以便在同一层中完成所有功能</li></ul><hr><p><strong>RUN</strong></p><ul><li>用于指定docker build过程中运行的程序，其可以是任何命令</li><li>Syntax<br><code>RUN &lt;command&gt;</code>或<br><code>RUN [&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code>，<strong>注意：要使用双引号</strong></li><li>第一种格式中，&lt;command&gt;通常是一个shell命令，且以”/bin/sh -c”来运行它，这意味着此进程在容器中的PID不为1，不能接收Unix信号，因此，当使用docker stop &lt;container&gt;命令停止容器时，此进程接收不到SIGTERM信号;</li><li>第二种语法格式中的参数是一个JSON格式的数组，其中&lt;executable&gt;为要运行的命令，后面的&lt;paramN&gt;为传递给命令的选项或参数;然而，此种格式指定的命令不会以”/bin/sh-c”来发起，因此常见的shell操作如变量替换以及通配符(?,*等)替换将不会进行;不过，如果要运行的命令依赖于此shell特性的话，可以将其替换为类似下面的格式。<br><code>RUN[&quot;/bin/bash&quot;, &quot;-c&quot;,&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;]</code></li></ul><hr><p><strong>CMD</strong></p><ul><li>类似于RUN指令，CMD指令也可用于运行任何命令或应用程序，不过，二者的运行时间点不同<ul><li>RUN指令运行于映像文件构建过程中，而CMD指令运行于基于Dockerfile构建出的新镜像文件启动一个容器时</li><li>CMD指令的首要目的在于为启动的容器指定默认要运行的程序，且其运行结束后，容器也将终止;不过，CMD指定的命令其可以被docker run的命令行选项所覆盖</li><li>在Dockerfilc中可以存在多个CMD指令，但仅最后一个会生效</li></ul></li><li>Syntax<ul><li><code>CMD &lt;command&gt;</code>或<br><code>CMD[&quot;&lt;executable&gt;&quot;,&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;]</code>或<br><code>CMD[&quot;&lt;param1&gt;&quot;,&quot;&lt;param2&gt;&quot;]</code></li><li>前两种语法格式的意义同RUN</li><li>第三种则用于为ENTRYPOINT指今提供默认参数</li></ul></li></ul><hr><p><strong>ENTRYPOINT</strong></p><ul><li>类似CMD指令的功能，用于为容器指定默认运行程序，从而使得容器像是一个单独的可执行程序</li><li>与CMD不同的是，由ENTRYPOINT启动的程序不会被docker run命令行指定的参数覆盖，而且，这些命令行参数会被当作参数传递给ENTRYPOINT指定指定的程序<ul><li>不过，docker run命令的–entrypoint选项的参数可覆盖ENTRYPOINT指令指定的程序</li></ul></li><li>Syntax<br><code>ENTRYPOINT&lt;command&gt;</code><br><code>ENTRYPOINT[&quot;&lt;executable&gt;&quot;, &quot;&lt;param1&gt;&quot;, &quot;&lt;param2&gt;&quot;]</code></li><li>docker run命令传入的命令参数会覆盖CMD指令的内容并且附加到ENTRYPOINT命令最后做为其参数使用</li><li>Dockerfile文件中也可以存在多个ENTRYPOINT指令，但仅有最后一个会生效</li></ul><hr><p><strong>USER</strong></p><ul><li>用于指定运行image时的或运行Dockerfile中任何RUN、CMD或ENTRYPOINT<br>指令指定的程序时的用户名或UID</li><li>默认情况下，container的运行身份为root用户</li><li>Syntax<br><code>USER &lt;UID&gt;|&lt;UserName&gt;</code></li><li>需要注意的是，&lt;UID&gt;可以为任意数字，但实践中其必须为!etc/passwd中某用户的有效UID，否则，docker run命令将运行失败</li></ul><hr><p><strong>ONBUILD</strong></p><ul><li>用于在Dockerfile中定义一个触发器</li><li>Dockerfile用于build映像文件，此映像文件亦可作为base image被另一个Dockerfile用作FROM指令的参数，并以之构建新的映像文件</li><li>在后面的这个Dockerfile中的FROM指令在build过程中被执行时，将会”触发”创建其base image的Dockerfile文件中的ONBUILD指令定义的触发器</li><li>Syntax<br><code>ONBUILD &lt;INSTRUCTION&gt;</code></li><li>尽管任何指令都可注册成为触发器指令，但ONBUILD不能自我嵌套，且不会触发FROM和MAINTAINER指令</li><li>使用包含ONBUILD指令的Dockerfile构建的镜像应该使用特殊的标签，例如ruby:2.0-onbuild</li><li>在ONBUILD指令中使用ADD或COPY指令应该格外小心，因为新构建过程的上下文在缺少指定的源文件时会失败</li></ul><h2 id="DockerFile制作编译版nginx1-18-0镜像"><a href="#DockerFile制作编译版nginx1-18-0镜像" class="headerlink" title="DockerFile制作编译版nginx1.18.0镜像"></a>DockerFile制作编译版nginx1.18.0镜像</h2><h3 id="下载镜像并初始化系统-2"><a href="#下载镜像并初始化系统-2" class="headerlink" title="下载镜像并初始化系统"></a>下载镜像并初始化系统</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker pull centos</span><br><span class="line">[root@docker01 ~]$ docker run -it centos bash</span><br><span class="line">[root@docker01 opt]$ <span class="built_in">cd</span> /opt</span><br><span class="line">[root@docker01 opt]$ mkdir -p dockfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,system/&#123;centos,ubuntu,redhat&#125; &#125;<span class="comment">#目录结构按照业务类型或系统类型等方式划分，方便后期镜像比较多的时候进行分类。</span></span><br></pre></td></tr></table></figure><p>进入到指定目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 dockfile]$ <span class="built_in">cd</span> web/nginx/</span><br><span class="line">[root@docker01 nginx]$ <span class="built_in">pwd</span></span><br><span class="line">/opt/dockfile/web/nginx</span><br></pre></td></tr></table></figure><h3 id="编写Dockfile文件"><a href="#编写Dockfile文件" class="headerlink" title="编写Dockfile文件"></a>编写Dockfile文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 nginx]$ vim ./Dockerfile</span><br></pre></td></tr></table></figure><p>生成的镜像的时候会在执行命令的当前目录查找Dockerfile文件，所以名称不可写错，而且D必须大写</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># My Dockerfile</span></span><br><span class="line"><span class="comment"># &quot;#&quot;为注释，等于shell脚本的中#</span></span><br><span class="line"><span class="comment"># 除了注释行之外的第一行，必须是From xxx (xxx是基础镜像)</span></span><br><span class="line"><span class="keyword">FROM</span> centos<span class="comment">#第一行先定义基础镜像，后面的本地有效的镜像名，如果本地没有会从远程仓库下载，第一行很重要</span></span><br><span class="line"><span class="comment"># 镜像维护者的信息</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"><span class="comment"># 或者这样写</span></span><br><span class="line"><span class="comment"># MAINTAINER kinmfer kinmfer@foxmail.com</span></span><br><span class="line"><span class="comment">########################## 其他可选参数</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"><span class="comment">#USER  #指定该容器运行时的用户名和UID，后续的RUN命令也会使用这面指定的用户执行</span></span><br><span class="line"><span class="comment">#WORKDIR /a</span></span><br><span class="line"><span class="comment">#WORKDIR b  #指定工作目录，最终为/a/b</span></span><br><span class="line"><span class="comment">#VOLUME[&quot;/dir_1&quot;, &quot;/dir_2&quot; ..]设置容器挂载主机目录。</span></span><br><span class="line"><span class="comment">#ENV name kinmfer#设置容器变量，常用于想容器内传递用户密码等</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"><span class="comment">###############################################</span></span><br><span class="line"><span class="comment">#执行的命令，将编译安装nginx的步骤执行一遍。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|&#x27;</span> /etc/yum.repos.d/epel*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s|^metalink|#metalink|&#x27;</span> /etc/yum.repos.d/epel*</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dnf makecache</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> dnf install -y vim wget make tree unzip  gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.18.0.tar.gz /usr/<span class="built_in">local</span>/src <span class="comment"># .tar.gz的文件会直接解压，但是.zip的文件不会，因此需要提前安装unzip。nginx-1.18.0.tar.gz文件在Dockfile同级目录</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.18.0 &amp;&amp; ./configure --prefix=/apps/nginx &amp;&amp; make &amp;&amp; make install &amp;&amp; rm -rf nginx-1.18.0.tar.gz nginx-1.18.0</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> static.zip /apps/nginx/html <span class="comment"># 模拟导包格式为.zip。static.zip文件在Dockfile同级目录</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /apps/nginx/html &amp;&amp; unzip static.zip &amp;&amp; rm -rf static.zip</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span> <span class="comment">#向外开放的端口，多个端口用空格做间隔，启动容器时候-p需要使用此端向外映射.如:-D8081:80，则80就是这里的80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/apps/nginx/sbin/nginx&quot;</span>,<span class="string">&quot;-g&quot;</span>,<span class="string">&quot;daemon off;&quot;</span>] <span class="comment"># 容器启动时运行的命令，每个Dockfile只能有一条，如果有多条则只有最后一条被执行。</span></span></span><br></pre></td></tr></table></figure><p>如果在从该镜像启动容器的时候也指定了命令，那么该指定的命令会覆盖Dockfile构建的镜像里的CMD命令，即指定的命令优先级更高</p><h3 id="准备源码包和配置文件"><a href="#准备源码包和配置文件" class="headerlink" title="准备源码包和配置文件"></a>准备源码包和配置文件</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726101527438.png" alt="image-20200726101527438"></p><h3 id="执行镜像构建"><a href="#执行镜像构建" class="headerlink" title="执行镜像构建"></a>执行镜像构建</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 nginx]$ docker build -t nginx-1.18.0:v1 .</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726093027167.png" alt="image-20200726093027167"></p><h3 id="构建完成"><a href="#构建完成" class="headerlink" title="构建完成"></a>构建完成</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726093536435.png" alt="image-20200726093536435"></p><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726093622987.png" alt="image-20200726093622987"></p><h3 id="访问web界面"><a href="#访问web界面" class="headerlink" title="访问web界面"></a>访问web界面</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726093819788.png" alt="image-20200726093819788"></p><h2 id="自定义Tomcat镜像"><a href="#自定义Tomcat镜像" class="headerlink" title="自定义Tomcat镜像"></a>自定义Tomcat镜像</h2><p>基于官方提供的centos、debain、ubuntu、alpine等基础镜像构建JDK(Java环境)，然后再基于自定义的JDK镜像构建出业务需要的tomcat镜像。</p><h3 id="构建JDK镜像"><a href="#构建JDK镜像" class="headerlink" title="构建JDK镜像"></a>构建JDK镜像</h3><p>先基于官方提供的基础镜像，制作出安装了常用命令的自定义基础镜像，然后在基础镜像的基础之上，再制作JDK镜像、Tomcat镜像等。</p><p>自定义CentOS基础镜像</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker pull centos</span><br><span class="line">[root@docker01 ~]$ docker run -it centos bash</span><br><span class="line">[root@docker01 opt]$ <span class="built_in">cd</span> /opt</span><br><span class="line">[root@docker01 opt]$ mkdir -p dockfile/&#123;web/&#123;nginx,tomcat,jdk,apache&#125;,system/&#123;centos,ubuntu,alpine,debian&#125; &#125;</span><br><span class="line">[root@docker01 centos]$ vim Dockerfile</span><br><span class="line"><span class="comment">#CentOS 8.2 Base Image</span></span><br><span class="line">FROM centos</span><br><span class="line">LABEL maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span><br><span class="line">RUN curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">RUN yum install -y https://mirrors.aliyun.com/epel/epel-release-latest-8.noarch.rpm</span><br><span class="line">RUN sed -i <span class="string">&#x27;s|^#baseurl=https://download.fedoraproject.org/pub|baseurl=https://mirrors.aliyun.com|&#x27;</span> /etc/yum.repos.d/epel*</span><br><span class="line">RUN sed -i <span class="string">&#x27;s|^metalink|#metalink|&#x27;</span> /etc/yum.repos.d/epel*</span><br><span class="line">RUN dnf makecache</span><br><span class="line">RUN dnf install -y vim wget make tree unzip  gcc gcc-c++ automake pcre pcre-devel zlib zlib-devel openssl openssl-devel iproute net-tools iotop diffutils systemd-devel</span><br><span class="line">RUN groupadd www -g 2020 &amp;&amp; useradd www -u 2020 -g www &amp;&amp; groupadd nginx -g 2021 &amp;&amp; useradd nginx -u 2021 -g nginx</span><br><span class="line">[root@docker01 centos]$ vim build-command.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker build -t centos-base:v1 .</span><br><span class="line">[root@docker01 centos]$ bash build-command.sh <span class="comment">#通过脚本进行镜像构建</span></span><br></pre></td></tr></table></figure><h3 id="执行构建JDK镜像"><a href="#执行构建JDK镜像" class="headerlink" title="执行构建JDK镜像"></a>执行构建JDK镜像</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 8.2 jdk-8u261</span></span><br><span class="line"><span class="keyword">FROM</span> centos-base:v1</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jdk-8u261-linux-x64.tar.gz /usr/<span class="built_in">local</span>/src/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sv /usr/<span class="built_in">local</span>/src/jdk1.8.0_261 /usr/<span class="built_in">local</span>/jdk</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> profile /etc/profile</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/jdk</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/:$JRE_HOME/lib/</span><br><span class="line"><span class="keyword">ENV</span> PATH $PATH:$JAVA_HOME/bin</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> rm -rf /etc/localtime &amp;&amp; ln -snf /usr/share/zoninfo/Asia/Shanghai /etc/localtime</span></span><br></pre></td></tr></table></figure><h3 id="上传JDK压缩包和profile文件"><a href="#上传JDK压缩包和profile文件" class="headerlink" title="上传JDK压缩包和profile文件"></a>上传JDK压缩包和profile文件</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726135450463.png" alt="image-20200726135450463"></p><h3 id="执行构建自定义JDK基础镜像"><a href="#执行构建自定义JDK基础镜像" class="headerlink" title="执行构建自定义JDK基础镜像"></a>执行构建自定义JDK基础镜像</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 jdk-8u261]$ vim docker-command.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker build -t centos-jdk:8u261 .</span><br></pre></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726135837505.png" alt="image-20200726135837505"></p><h2 id="构建Tomcat9镜像"><a href="#构建Tomcat9镜像" class="headerlink" title="构建Tomcat9镜像"></a>构建Tomcat9镜像</h2><p>基于自定义的JDK基础镜像，构建出通用的自定义Tomcat基础镜像，此镜像后期会被多个业务的多个服务共同引用(相同的JDK版本和Tomcat版本)。</p><h3 id="编写Dockfile"><a href="#编写Dockfile" class="headerlink" title="编写Dockfile"></a>编写Dockfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># CentOS 8.2 tomcat9.0.37</span></span><br><span class="line"><span class="keyword">FROM</span> centos-jdk:<span class="number">8</span>u261</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer kinmfer@foxmail.com&quot;</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> apache-tomcat-9.0.37.tar.gz /apps</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -sv /apps/apache-tomcat-9.0.37 /apps/tomcat</span></span><br></pre></td></tr></table></figure><h3 id="上传Tomcat9源码包"><a href="#上传Tomcat9源码包" class="headerlink" title="上传Tomcat9源码包"></a>上传Tomcat9源码包</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726140540560.png" alt="image-20200726140540560"></p><h3 id="执行构建自定义JDK基础镜像-1"><a href="#执行构建自定义JDK基础镜像-1" class="headerlink" title="执行构建自定义JDK基础镜像"></a>执行构建自定义JDK基础镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 jdk-8u261]$ vim docker-command.sh</span><br><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line">docker build -t centos-tomcat:9.0.37 .</span><br></pre></td></tr></table></figure><h3 id="验证-1"><a href="#验证-1" class="headerlink" title="验证"></a>验证</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726140705488.png" alt="image-20200726140705488"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726140818418.png" alt="image-20200726140818418"></p><h2 id="构建业务镜像1"><a href="#构建业务镜像1" class="headerlink" title="构建业务镜像1"></a>构建业务镜像1</h2><p>创建app1和app2两个目录，表示基于tomcat自定义基础镜像构建出不同业务的tomcat app镜像。</p><h3 id="准备Dockerfile1"><a href="#准备Dockerfile1" class="headerlink" title="准备Dockerfile1"></a>准备Dockerfile1</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Tomcat Web Image</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> centos-tomcat:<span class="number">9.0</span>.<span class="number">37</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> mantainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> server.xml /apps/tomcat/conf/server.xml</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> app1.tar.gz /data/tomcat/webapps</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown www.www /apps -R</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span> <span class="number">8005</span> <span class="number">8009</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;/apps/tomcat/bin/run_tomcat.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="准备自定义app1界面"><a href="#准备自定义app1界面" class="headerlink" title="准备自定义app1界面"></a>准备自定义app1界面</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 tomcat-app1]$ mkdir app1</span><br><span class="line">[root@docker01 tomcat-app1]$ <span class="built_in">echo</span> <span class="string">&quot;I Love Docker!&quot;</span> &gt; app1/index.html</span><br><span class="line">[root@docker01 tomcat-app1]$ tar zxf app1.tar.gz app1/</span><br></pre></td></tr></table></figure><h3 id="准备容器启动执行脚本"><a href="#准备容器启动执行脚本" class="headerlink" title="准备容器启动执行脚本"></a>准备容器启动执行脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 tomcat-app1]$ cat run_tomcat.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># 模拟操作</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1.1.1.1   test1.kinmfer.com&quot;</span> &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;namesercer        223.5.5.5&quot;</span> &gt;&gt; /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">su - www -c <span class="string">&quot;/apps/tomcat/bin/catalina.sh start&quot;</span></span><br><span class="line">tail -f /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="执行构建"><a href="#执行构建" class="headerlink" title="执行构建"></a>执行构建</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 tomcat-app1]$ cat build_command.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker build -t centos-tomcat-app1:v1 .</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726161342634.png" alt="image-20200726161342634"></p><h3 id="验证-2"><a href="#验证-2" class="headerlink" title="验证"></a>验证</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726161412272.png" alt="image-20200726161412272"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726161514735.png" alt="image-20200726161514735"></p><h2 id="构建业务镜像2"><a href="#构建业务镜像2" class="headerlink" title="构建业务镜像2"></a>构建业务镜像2</h2><p>有了之前的app1，则app2可以很快的部署</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 tomcat]$ cp -rf tomcat-app1/ tomcat-app2</span><br><span class="line">[root@docker01 tomcat]$ <span class="built_in">cd</span> tomcat-app2/</span><br><span class="line">[root@docker01 tomcat-app2]$ <span class="built_in">echo</span> <span class="string">&quot;I Love Linux and Docker!&quot;</span> &gt; app1/index.html &amp;&amp; mv app1 app2</span><br><span class="line"></span><br><span class="line">[root@docker01 tomcat-app2]$ rm -f app1.tar.gz &amp;&amp; tar zcf app2.tar.gz app2/</span><br><span class="line"><span class="comment">#Tomcat Web Image</span></span><br><span class="line">FROM centos-tomcat:9.0.37</span><br><span class="line">LABEL mantainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span><br><span class="line">ADD server.xml /apps/tomcat/conf/server.xml</span><br><span class="line">ADD app2.tar.gz /data/tomcat/webapps</span><br><span class="line">ADD run_tomcat.sh /apps/tomcat/bin/run_tomcat.sh</span><br><span class="line">RUN chown www.www /apps -R</span><br><span class="line">EXPOSE 8080 8005 8009</span><br><span class="line">CMD [<span class="string">&quot;/apps/tomcat/bin/run_tomcat.sh&quot;</span>]</span><br><span class="line"></span><br><span class="line">[root@docker01 tomcat-app2]$ vim build_command.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">docker build -t centos-tomcat-app2:v1 .</span><br><span class="line">[root@docker01 tomcat-app2]$ bash build_command.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726162157369.png" alt="image-20200726162157369"></p><p><img src="C:\Users\kinmfer\AppData\Roaming\Typora\typora-user-images\image-20200726162302495.png" alt="image-20200726162302495"></p><p>接下来将app1和app2同时开启验证</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200726162429019.png" alt="image-20200726162429019"></p><h2 id="基于官方alpine基础镜像制作自定义镜像"><a href="#基于官方alpine基础镜像制作自定义镜像" class="headerlink" title="基于官方alpine基础镜像制作自定义镜像"></a>基于官方alpine基础镜像制作自定义镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> repositories /etc/apk/repositories <span class="comment"># 换阿里源</span></span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update &amp;&amp; apk addiotopgcc libgcc libc-dev libcurl libc-utils pcre-dev zlib-dev libnfs make pcre pcre2 zip unzip net-tools pstree wget libevent libevent-dev iproute2</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.18.0.tar.gz /opt/</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /opt/nginx-1.18.0 &amp;&amp; ./configure --prefix=/apps/nginx &amp;&amp; make &amp;&amp; make</span></span><br><span class="line">install &amp;&amp; ln -sv/apps/nginx/sbin/nginx /usr/bin/</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> addgroup -g 2020 -S nginx &amp;&amp; adduser -s /sbin/nologin -S -D -u 2020 -G nginx nginx</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> nginx.conf /apps/nginx/conf/nginx.conf</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> static.tar.gz /data/nginx/html</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown nginx.nginx /data/nginx/ /apps/nginx/ -R</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>]</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727080954752.png" alt="image-20200727080954752"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727081209741.png" alt="image-20200727081209741"></p><h2 id="基于官方Ubuntu基础镜像制作自定义镜像"><a href="#基于官方Ubuntu基础镜像制作自定义镜像" class="headerlink" title="基于官方Ubuntu基础镜像制作自定义镜像"></a>基于官方Ubuntu基础镜像制作自定义镜像</h2><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Docker image for nginx</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> ubuntu:<span class="number">18.04</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> password <span class="number">123456</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> sources.list /etc/apt</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt update &amp;&amp;   apt install -y iproute2 ntpdate tcpdump telnet traceroute nfs-kernel-server nfs-common lrzsz tree openssl libssl-dev libpcre3 libpcre3-dev zlib1g-dev  tcpdump  gcc openssh-server tree iotop unzip zip make</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> nginx-1.18.0.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/nginx-1.18.0 &amp;&amp; ./configure --prefix=/apps/nginx &amp;&amp; make &amp;&amp; make install &amp;&amp; ln -sv /apps/nginx/sbin/nginx /usr/bin/nginx &amp;&amp; rm -rf nginx-1.18.0.tar.gz nginx-1.18.0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> static.zip /apps/nginx/html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /apps/nginx/html &amp;&amp; unzip static.zip &amp;&amp; rm -rf static.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> groupadd -g 2020  nginx &amp;&amp; useradd -g nginx -s /sbin/nologin  -u 2020  nginx</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chown nginx.nginx /apps/nginx -R</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">443</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">&quot;nginx&quot;</span>]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727091014983.png" alt="image-20200727091014983"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727091129662.png" alt="image-20200727091129662"></p><h2 id="构建HAProxy镜像"><a href="#构建HAProxy镜像" class="headerlink" title="构建HAProxy镜像"></a>构建HAProxy镜像</h2><p>构建出haproxy镜像，将haproxy通过容器的方式运行。</p><h3 id="准备Dockfile"><a href="#准备Dockfile" class="headerlink" title="准备Dockfile"></a>准备Dockfile</h3><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos-base:v1</span><br><span class="line"></span><br><span class="line"><span class="keyword">LABEL</span><span class="bash"> maintainer=<span class="string">&quot;kinmfer &lt;kinmfer@foxmail.com&gt;&quot;</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> haproxy-2.2.1.tar.gz /usr/<span class="built_in">local</span>/src</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> <span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src/haproxy-2.2.1 &amp;&amp; make ARCH=x86_64 TARGET=linux-glibc USE_PCRE=1 USE_OPENSSL=1 USE_ZLIB=1 USE_SYSTEMD=1 USE_CPU_AFFINITY=1 PREFIX=/usr/<span class="built_in">local</span>/haproxy &amp;&amp;  make install PREFIX=/usr/<span class="built_in">local</span>/haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> haproxy.cfg /etc/haproxy</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> run_haproxy.sh/usr/bin</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span> <span class="number">9999</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="bash">[<span class="string">&quot;/usr/bin/run_haproxy.sh&quot;</span>]</span></span><br></pre></td></tr></table></figure><h3 id="准备HAProxy源码和配置文件"><a href="#准备HAProxy源码和配置文件" class="headerlink" title="准备HAProxy源码和配置文件"></a>准备HAProxy源码和配置文件</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727104843557.png" alt="image-20200727104843557"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 haproxy-centos]$ cat haproxy.cfg</span><br><span class="line">global</span><br><span class="line">chroot /usr/<span class="built_in">local</span>/haproxy</span><br><span class="line"><span class="comment">#stats socket /var/lib/haproxy/haproxy.sock mode 600 level admin</span></span><br><span class="line">uid 99</span><br><span class="line">gid 99</span><br><span class="line">daemon</span><br><span class="line">nbproc 1</span><br><span class="line">pidfile /usr/<span class="built_in">local</span>/haproxy/run/haproxy.pid</span><br><span class="line"><span class="built_in">log</span> 127.0.0.1 local3 info</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">option http-keep-alive</span><br><span class="line">option forwardfor</span><br><span class="line">mode http</span><br><span class="line">timeout connect 300000ms</span><br><span class="line">timeout client  300000ms</span><br><span class="line">timeout server  300000ms</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:9999</span><br><span class="line">  stats <span class="built_in">enable</span></span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  stats uri /haproxy-status</span><br><span class="line">  stats auth haadmin:123456</span><br><span class="line"></span><br><span class="line">listen web_port</span><br><span class="line">  <span class="built_in">bind</span> 0.0.0.0:80</span><br><span class="line">  mode http</span><br><span class="line">  <span class="built_in">log</span> global</span><br><span class="line">  balance roundrobin</span><br><span class="line">  server web1 192.168.242.100:8080 check inter 3000 fall 2 rise 5</span><br><span class="line">  server web2 192.168.242.101:8080 check inter 3000 fall 2 rise 5</span><br><span class="line">  </span><br><span class="line">[root@docker01 haproxy-centos]$ cat run_haproxy.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/usr/<span class="built_in">local</span>/haproxy/sbin/haproxy -f /etc/haproxy/haproxy.cfg</span><br><span class="line">tail -f /etc/hosts</span><br></pre></td></tr></table></figure><h3 id="启动容器-1"><a href="#启动容器-1" class="headerlink" title="启动容器"></a>启动容器</h3><p>192.168.242.100(HAProxy+Tomcat)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727133618308.png" alt="image-20200727133618308"></p><p>192.168.242.101(Tomcat)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727133718338.png" alt="image-20200727133718338"></p><h3 id="验证-3"><a href="#验证-3" class="headerlink" title="验证"></a>验证</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727133743739.png" alt="image-20200727133743739"></p><p>会在两个页面之间切换</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727133923184.png" alt="image-20200727133923184"></p><hr><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727133904354.png" alt="image-20200727133904354"></p><h1 id="本地镜像上传到官方docker仓库"><a href="#本地镜像上传到官方docker仓库" class="headerlink" title="本地镜像上传到官方docker仓库"></a>本地镜像上传到官方docker仓库</h1><p>将自制的镜像上传至docker仓库;<a href="https://hub.docker.com/%EF%BC%8C%E5%AE%9E%E7%8E%B0%E9%95%9C%E5%83%8F%E8%B7%A8%E4%B8%BB%E6%9C%BA%E5%A4%87%E4%BB%BD%E3%80%82">https://hub.docker.com/，实现镜像跨主机备份。</a></p><h2 id="注册账户并配置相关信息"><a href="#注册账户并配置相关信息" class="headerlink" title="注册账户并配置相关信息"></a>注册账户并配置相关信息</h2><p>略</p><h2 id="在虚拟机上用自己的账号登陆"><a href="#在虚拟机上用自己的账号登陆" class="headerlink" title="在虚拟机上用自己的账号登陆"></a>在虚拟机上用自己的账号登陆</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker login docker.io</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727134949834.png" alt="image-20200727134949834"></p><h2 id="设置tag并上传"><a href="#设置tag并上传" class="headerlink" title="设置tag并上传"></a>设置tag并上传</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727153025431.png" alt="image-20200727153025431"></p><h1 id="本地镜像上传到阿里云"><a href="#本地镜像上传到阿里云" class="headerlink" title="本地镜像上传到阿里云"></a>本地镜像上传到阿里云</h1><h2 id="将镜像推送到Registry"><a href="#将镜像推送到Registry" class="headerlink" title="将镜像推送到Registry"></a>将镜像推送到Registry</h2><p>将本地镜像上传至阿里云，实现镜像备份与统一分发的功能。<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a></p><p>注册账户、创建namespace、创建仓库、修改镜像tag及上传镜像</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727162135690.png" alt="image-20200727162135690"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727160445640.png" alt="image-20200727160445640"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727162037308.png" alt="image-20200727162037308"></p><h2 id="验证-4"><a href="#验证-4" class="headerlink" title="验证"></a>验证</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200727162354708.png" alt="image-20200727162354708"></p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-03-网络部分</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-03-%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-03-%E7%BD%91%E7%BB%9C%E9%83%A8%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li>None：不为容器配置任何网络功能，–net=none</li><li><strong>Bridge：Docker设计的NAT网络模型(默认)</strong></li><li>Container：与另一个运行中的容器共享Network Namespace，–net=container:containerID（K8S）</li><li>Host：与宿主机共享Network Namespace，–network=host 性能最高</li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728171247040.png" alt="image-20200728171247040"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动一台容器</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker run -d -P --name tomcat01 tomcat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看容器的网卡信息</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat01 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: eth0@if22: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># linux宿主机可以ping通容器内部</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># ping 172.17.0.2</span></span><br><span class="line">PING 172.17.0.2 (172.17.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=1 ttl=64 time=0.060 ms</span><br><span class="line">64 bytes from 172.17.0.2: icmp_seq=2 ttl=64 time=0.053 ms</span><br></pre></td></tr></table></figure><p><strong>原理：</strong></p><ul><li>每启动一个docker容器，docker都会给容器分配一个ip，我们只要安装了docker，就会有一个网卡docker0，Bridge桥接模式使用的技术是<code>evth-pair</code>技术。</li><li>evth-pair 就是一对虚拟设备接口，他们都是成对出现的，一段连着协议，一段彼此相连，正因为有这个特性，evth-pair充当一个桥梁，专门连接各种虚拟网络设备。每开启运行一个容器，就会增加一对 对应的网卡。</li><li>Openstack、Docker、OVS都是使用的 evth-pair技术。</li><li>容器删除，对应的网桥也被删除</li></ul><h1 id="None模式"><a href="#None模式" class="headerlink" title="None模式"></a>None模式</h1><p>使用<code>none</code>模式，Docker 容器拥有自己的 Network Namespace，但是，并不为Docker 容器进行任何网络配置。也就是说，这个 Docker 容器没有网卡、IP、路由等信息。需要我们自己为 Docker 容器添加网卡、配置 IP 等。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行一个none模式的容器</span></span><br><span class="line">docker run -it -d --name centos-none --network none centos</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入容器查看网卡发现没有ip地址</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it centos-none ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h1 id="Bridge模式"><a href="#Bridge模式" class="headerlink" title="Bridge模式"></a>Bridge模式</h1><p>当<code>Docker</code>进程启动时，会在主机上创建一个名为<code>docker0</code>的虚拟网桥，此主机上启动的<code>Docker</code>容器会连接到这个虚拟网桥上。虚拟网桥的工作方式和物理交换机类似，这样主机上的所有容器就通过交换机连在了一个二层网络中。从<code>docker0</code>子网中分配一个 IP 给容器使用，并设置 <code>docker0</code> 的 IP 地址为容器的<strong>默认网关</strong>。在主机上创建一对虚拟网卡<code>veth pair</code>设备，Docker 将 veth pair 设备的一端放在新创建的容器中，并命名为<code>eth0</code>（容器的网卡），另一端放在主机中，以<code>vethxxx</code>这样类似的名字命名，并将这个网络设备加入到 docker0 网桥中。可以通过<code>brctl show</code>命令查看。</p><p><code>bridge</code>模式是 docker 的默认网络模式，不写<code>–net</code>参数，就是<code>bridge</code>模式。使用<code>docker run -p</code>时，docker 实际是在<code>iptables</code>做了<code>DNAT</code>规则，实现端口转发功能。可以使用<code>iptables -t nat -vnL</code>查看。</p><h2 id="自定义网络"><a href="#自定义网络" class="headerlink" title="自定义网络"></a>自定义网络</h2><p>查看网络</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]<span class="comment"># docker network ls</span></span><br><span class="line">NETWORK ID          NAME                DRIVER              SCOPE</span><br><span class="line">1eda1ef538b0        bridge              bridge              <span class="built_in">local</span></span><br><span class="line">208c3474ff10        host                host                <span class="built_in">local</span></span><br><span class="line">b4129f3c1c5e        none                null                <span class="built_in">local</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清除测试的所有容器</span></span><br><span class="line">docker rm -f $(docker ps -aq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一台容器; --network brigde 就是docker0</span></span><br><span class="line">docker run  -d -P --name tomcat01 --network bridge tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个网络mynet</span></span><br><span class="line"><span class="comment"># --driver  : 网络模式</span></span><br><span class="line"><span class="comment"># --subnet  : 子网地址</span></span><br><span class="line"><span class="comment"># --gateway : 子网的网关地址</span></span><br><span class="line">docker network create --driver  bridge --subnet 172.20.0.0/16 --gateway 172.20.0.1 mynet</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看自己创建的网络详细信息</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker network inspect mynet </span></span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;mynet&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Id&quot;</span>: <span class="string">&quot;ea720ae53f20b83193bca0c1dbb6296165539aa4c547f1ef37028e705b87da6c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Created&quot;</span>: <span class="string">&quot;2020-06-29T14:33:22.194817791+08:00&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Scope&quot;</span>: <span class="string">&quot;local&quot;</span>,</span><br><span class="line">        <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;bridge&quot;</span>,</span><br><span class="line">        <span class="string">&quot;EnableIPv6&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;IPAM&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Driver&quot;</span>: <span class="string">&quot;default&quot;</span>,</span><br><span class="line">            <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">            <span class="string">&quot;Config&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;Subnet&quot;</span>: <span class="string">&quot;172.20.0.0/16&quot;</span>,<span class="comment">#子网</span></span><br><span class="line">                    <span class="string">&quot;Gateway&quot;</span>: <span class="string">&quot;172.20.0.1&quot;</span><span class="comment">#网关</span></span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;Internal&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Attachable&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Ingress&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;ConfigFrom&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;Network&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;ConfigOnly&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Options&quot;</span>: &#123;&#125;,</span><br><span class="line">        <span class="string">&quot;Labels&quot;</span>: &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>启动两台容器；指定创建的自定义网络</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -P --name tomcat-net01 --net mynet tomcat</span><br><span class="line">docker run -d -P --name tomcat-net02 --net mynet tomcat</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 再次查看网络详情，可以看到启动的容器的IP</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker network inspect mynet</span></span><br><span class="line">....</span><br><span class="line">        <span class="string">&quot;Containers&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;2767e468d20157e43b67174eeef94267ce2b3a5b9f66446b24fd17c06549fdb3&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net01&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;abadd831f2591a0d2aed089abac60292cfc0925193d6f3394131955140118750&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:14:00:02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.20.0.2/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;4a70bba89baf3e98b4f3e35de9ee19d5363f06c592dff2bf81134fbc187ac0a0&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;Name&quot;</span>: <span class="string">&quot;tomcat-net02&quot;</span>,</span><br><span class="line">                <span class="string">&quot;EndpointID&quot;</span>: <span class="string">&quot;8cdf9df77303ec7c3562e4b216d09ac5c5a39a7d7a5a1563b93ea7f5fd4d5060&quot;</span>,</span><br><span class="line">                <span class="string">&quot;MacAddress&quot;</span>: <span class="string">&quot;02:42:ac:14:00:03&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv4Address&quot;</span>: <span class="string">&quot;172.20.0.3/16&quot;</span>,</span><br><span class="line">                <span class="string">&quot;IPv6Address&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 再次测试ping连接; ping主机名也可以ping通了</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat-net01 ping 172.20.0.3</span></span><br><span class="line">PING 172.20.0.3 (172.20.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from 172.20.0.3: icmp_seq=1 ttl=64 time=0.111 ms</span><br><span class="line"></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat-net01 ping tomcat-net02</span></span><br><span class="line">PING tomcat-net02 (172.20.0.3) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net02.mynet (172.20.0.3): icmp_seq=1 ttl=64 time=0.042 ms</span><br><span class="line"></span><br><span class="line">--------------------------------------</span><br><span class="line"><span class="comment">##现在不使用--link也可以ping通主机名了</span></span><br></pre></td></tr></table></figure><h2 id="自定义Docker0桥"><a href="#自定义Docker0桥" class="headerlink" title="自定义Docker0桥"></a>自定义Docker0桥</h2><p>自定义docker0桥的网络属性信息:/etc/docker/daemon.json文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="string">&quot;bip&quot;</span> :<span class="string">&quot;192.168.1.5/24&quot;</span></span><br><span class="line"><span class="string">&quot;fixed-cidr&quot;</span> : <span class="string">&quot;10.20.0.0/16&quot;</span>,</span><br><span class="line"><span class="string">&quot;fixed-cidr-v6&quot;</span> :m2001:db8: :/64<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>mtu<span class="string">&quot; : 1500,</span></span><br><span class="line"><span class="string">&quot;</span>default-gateway<span class="string">&quot; : &quot;</span>10.20.1.1<span class="string">&quot;.</span></span><br><span class="line"><span class="string">&quot;</span>default-gateway-v6<span class="string">&quot; : &quot;</span>2001:db8:abcd : :89<span class="string">&quot;,</span></span><br><span class="line"><span class="string">&quot;</span>dns<span class="string">&quot; : [ &quot;</span>i0.20.1.2<span class="string">&quot;, &quot;</span>10.20.1.3<span class="string">&quot;]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>核心选项为bip，即bridge ip之意，用于指定dockerO桥自身的IP地址;其它选项可通过此地址计算得出。</p><h1 id="Container-模式"><a href="#Container-模式" class="headerlink" title="Container 模式"></a>Container 模式</h1><p>这个模式指定新创建的容器和已经存在的一个容器共享一个 Network Namespace，而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。两个容器的进程可以通过lo网卡设备通信。</p><p>具体解释：</p><ul><li>联盟式容器是指使用某个已存在容器的网络接口的容器，接口被联盟内的各容器共享使用;因此，联盟式容器彼此间完全无隔离，例如<ul><li>创建一个监听于2222端口的http服务容器<br>~]# docker run-d -it –rm -p 2222 busybox:latest /bin/httpd-p 2222-f</li><li>创建一个联盟式容器，并查看其监听的端口<br>~]# docker run -it –rm –net container:web –name joined busybox:latest netstat -tan</li></ul></li><li>联盟式容器彼此间虽然共享同一个网络名称空间，但其它名称空间如User、Mount等还是隔离的</li><li>联盟式容器彼此间存在端口冲突的可能性，因此，通常只会在多个容器上的程序需要程序loopback接口互相通信、或对某已存的容器的网络属性进行监控时才使用此种模式的网络模型</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行一个centos镜像容器</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker run -it -d --name centos01  centos</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it centos01 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">28: eth0@if29: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 运行一个Container模式的容器; 指定centos01容器;查看网络</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker run -it -d --name centos-container --network container:centos01 centos</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it centos-container ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">28: eth0@if29: &lt;BROADCAST,MULTICAST,UP,LOWER_UP,M-DOWN&gt; mtu 1500 qdisc noqueue state UP </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h1 id="Host-模式"><a href="#Host-模式" class="headerlink" title="Host 模式"></a>Host 模式</h1><p>如果启动容器的时候使用<code>host</code>模式，那么这个容器将不会获得一个独立的<code>Network Namespace</code>，而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡，配置自己的 IP 等，而是使用宿主机的 IP 和端口。但是，容器的其他方面，如文件系统、进程列表等还是和宿主机隔离的。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行一个host网络的容器</span></span><br><span class="line">docker run -it -d -P --name tomcat-host01 --net host tomcat</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看此容器的ip地址和宿主机一致</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat-host01 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 ::1/128 scope host </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:8a:1a:eb brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 192.168.0.10/24 brd 192.168.0.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe8a:1aeb/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">3: eth1: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000</span><br><span class="line">    link/ether 00:0c:29:8a:1a:f5 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.16.0.10/24 brd 172.16.0.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::20c:29ff:fe8a:1af5/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">4: docker0: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:8d:a8:1d:4b brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.17.0.1/16 brd 172.17.255.255 scope global docker0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:8dff:fea8:1d4b/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">21: br-45945e527658: &lt;NO-CARRIER,BROADCAST,MULTICAST,UP&gt; mtu 1500 qdisc noqueue state DOWN group default </span><br><span class="line">    link/ether 02:42:16:06:bd:c9 brd ff:ff:ff:ff:ff:ff</span><br><span class="line">    inet 172.20.0.1/16 brd 172.20.255.255 scope global br-45945e527658</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">    inet6 fe80::42:16ff:fe06:bdc9/64 scope link </span><br><span class="line">       valid_lft forever preferred_lft forever</span><br></pre></td></tr></table></figure><h1 id="网络联通"><a href="#网络联通" class="headerlink" title="网络联通"></a>网络联通</h1><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730122834771.png" alt="image-20200730122834771"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730122902119.png" alt="image-20200730122902119"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用bridge模式的容器去ping自定义网络的容器；发现ping不通，因为网络不同</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat01 ping tomcat-net01</span></span><br><span class="line">ping: tomcat-net01: Name or service not known</span><br></pre></td></tr></table></figure><p>测试 将默认 bridge 模式的容器 tomcat01 和 自定义 mynet 网络打通</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network connect mynet tomcat01</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730124916203.png" alt="image-20200730124916203"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一个容器 两个ip地址！</span></span><br><span class="line">root@docker01 ~]<span class="comment"># docker exec -it tomcat01 ip a</span></span><br><span class="line">1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000</span><br><span class="line">    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00</span><br><span class="line">    inet 127.0.0.1/8 scope host lo</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">32: eth0@if33: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:11:00:02 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.17.0.2/16 brd 172.17.255.255 scope global eth0</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line">40: eth1@if41: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc noqueue state UP group default </span><br><span class="line">    link/ether 02:42:ac:14:00:04 brd ff:ff:ff:ff:ff:ff link-netnsid 0</span><br><span class="line">    inet 172.20.0.4/16 brd 172.20.255.255 scope global eth1</span><br><span class="line">       valid_lft forever preferred_lft forever</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以ping通了</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat01 ping tomcat-net01</span></span><br><span class="line">PING tomcat-net01 (172.20.0.2) 56(84) bytes of data.</span><br><span class="line">64 bytes from tomcat-net01.mynet (172.20.0.2): icmp_seq=1 ttl=64 time=0.045 ms</span><br><span class="line"></span><br><span class="line"><span class="comment"># 而其他的是依旧ping不通的</span></span><br><span class="line">[root@docker01 ~]<span class="comment"># docker exec -it tomcat02 ping tomcat-net01</span></span><br><span class="line">ping: tomcat-net01: Name or service not known</span><br></pre></td></tr></table></figure><p>总结：如果要跨网络操作其他容器，就需要使用 <code>docker network connect</code>连通。</p>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-02-数据管理</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-02-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-02-%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="查看镜像、容器、数据卷所占用的空间"><a href="#查看镜像、容器、数据卷所占用的空间" class="headerlink" title="查看镜像、容器、数据卷所占用的空间"></a>查看镜像、容器、数据卷所占用的空间</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker system df</span><br></pre></td></tr></table></figure><h1 id="为什么要用存储卷"><a href="#为什么要用存储卷" class="headerlink" title="为什么要用存储卷"></a>为什么要用存储卷</h1><ul><li>Docker镜像由多个只读层叠加而成，启动容器时，Docker会加载只读镜像层并在镜像栈顶部添加一个读写层</li><li>如果运行中的容器修改了现有的一个已经存在的文件，那该文件将会从读写层下面的只读层复制到读写层，该文件的只读版本仍然存在，只是已经被读写层中该文件的副本所隐藏，此即“写时复制(COW)”机制</li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729092446874.png" alt="image-20200729092446874"></p><p>类似的</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200611164322267.png" alt="image-20200611164322267"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200611164442349.png" alt="image-20200611164442349"></p><ul><li>关闭并重启容器，其数据不受影响;但删除Docker容器，则其更改将会全部丢失</li><li>存在的问题<ul><li>存储于联合文件系统中，不易于宿主机访问;</li><li>容器间数据共享不便</li><li>删除容器其数据会丢失</li></ul></li><li>解决方案:“卷(volume)”<ul><li>“卷”是容器上的一个或多个”目录”，此类目录可绕过联合文件系统，与宿主机<br>上的某目录“绑定(关联)”</li></ul></li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729093905335.png" alt="image-20200729093905335"></p><h1 id="数据卷"><a href="#数据卷" class="headerlink" title="数据卷"></a>数据卷</h1><ul><li><p>Data volumes provide several useful features for persistent or shared data</p><ul><li><p>Volume于容器初始化之时即会创建，由base image提供的卷中的数据会于此期间完成复制</p></li><li><p>Data volumes can be shared and reused among containers</p></li><li><p>Changes to a data volume are made directly</p></li><li><p>Changes to a data volume will not be included when you update an image</p></li><li><p>Data volumes persist even if the container itself is deleted</p></li></ul></li><li><p>Volume的初衷是独立于容器的生命周期实现数据持久化，因此删除容器之时既不会删除卷，也不会对哪怕未被引用的卷做垃圾回收操作;</p></li><li><p>卷为docker提供了独立于容器的数据管理机制</p><ul><li>可以把“镜像”想像成静态文件，例如”程序”，把卷类比为动态内容，例如“数据”;于是，镜像可以重用，而卷可以共享;</li><li>卷实现了“程序(镜像)”和“数据(卷)”分离，以及“程序(镜像)”和“制作镜像的主机”分离，用户制作镜像时无须再考虑镜像运行的容器所在的主机的环境;</li></ul></li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729094556022.png" alt="image-20200729094556022"></p><h2 id="创建数据卷"><a href="#创建数据卷" class="headerlink" title="创建数据卷"></a>创建数据卷</h2><p>创建数据卷之后，默认会存放在一个目录下<code>/var/lib/docker/volumes/数据卷名称/_data</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volumn create 数据卷名称</span><br></pre></td></tr></table></figure><h2 id="查看数据卷详情"><a href="#查看数据卷详情" class="headerlink" title="查看数据卷详情"></a>查看数据卷详情</h2><p>查看数据卷的详细信息，可以查询到存放路径，创建时间等</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volumn inspect 数据卷名称</span><br></pre></td></tr></table></figure><h2 id="查看全部数据卷"><a href="#查看全部数据卷" class="headerlink" title="查看全部数据卷"></a>查看全部数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volumn ls</span><br></pre></td></tr></table></figure><h2 id="删除数据卷"><a href="#删除数据卷" class="headerlink" title="删除数据卷"></a>删除数据卷</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volumn rm 数据卷名称</span><br></pre></td></tr></table></figure><h1 id="卷类型"><a href="#卷类型" class="headerlink" title="卷类型"></a>卷类型</h1><ul><li>Docker有两种类型的卷，每种类型都在容器中存在一个挂载点，但其在宿主机上的位置有所不同;<ul><li>Bind mount volume<ul><li>a volume that points to a user-specified location on the host file system</li></ul></li><li>Docker-managed volume<ul><li>the Docker daemon creates managed volumes in a portion of the host’s file system that’s owned by Docker</li></ul></li></ul></li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729094935005.png" alt="image-20200729094935005"></p><h1 id="在容器中使用Volumes"><a href="#在容器中使用Volumes" class="headerlink" title="在容器中使用Volumes"></a>在容器中使用Volumes</h1><ul><li><p>docker run命令使用-v选项即可使用Volume</p><ul><li><p>Docker-managed volume</p><ul><li>～]# docker run -it –name busybox1 -v /data busybox</li><li>～]# docker inspect -f { {.Mounts} } busybox1<ul><li>查着bbox1容器的卷、卷标识符及挂载的主机目录</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]<span class="comment"># docker run -it -v /data alpine:latest</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729095935953.png" alt="image-20200729095935953"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729101022867.png" alt="image-20200729101022867"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729100325323.png" alt="image-20200729100325323"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729100345744.png" alt="image-20200729100345744"></p></li><li><p>Bind-mount Volume</p><ul><li>~]# docker run -it -v HOSTDIR:VOLUMEDIR –name busybox2 busybox</li><li>~]# docker inspect -f { {.Mounts} } busybox2</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]<span class="comment"># docker run -it -v /data/alpine-volumn:/data  alpine:latest</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729101235622.png" alt="image-20200729101235622"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729101301059.png" alt="image-20200729101301059"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729101330494.png" alt="image-20200729101330494"></p></li><li><pre><code class="sh"># 如何确定是具名挂载还是匿名挂载,还是指定路径挂载？-v 容器内路径                     #匿名挂载-v 卷名:容器内路径                    #具名挂载-v /宿主机路径:容器内路径              #指定路径挂载<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 拓展</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  # 通过 -v 容器内路径：ro 或 rw 改变读写权限</span><br><span class="line">  ro #readonly 只读</span><br><span class="line">  rw #readwrite 可读可写</span><br><span class="line">  # 一旦创建容器时设置了容器权限，容器对我们挂载出来的内容就有限定了！</span><br><span class="line">  docker run -d -P --name nginx05 -v &#x2F;data:&#x2F;etc&#x2F;nginx:ro nginx</span><br><span class="line">  docker run -d -P --name nginx05 -v &#x2F;data:&#x2F;etc&#x2F;nginx:rw nginx</span><br><span class="line">  # 默认是 rw</span><br><span class="line">  # ro 只要看到ro就说明这个路径只能通过宿主机来操作，容器内部是无法操作！</span><br></pre></td></tr></table></figure></code></pre></li></ul></li></ul><h1 id="共享卷"><a href="#共享卷" class="headerlink" title="共享卷"></a>共享卷</h1><ul><li>There are two ways to share volumes between containers<ul><li>多个容器的卷使用同一个主机目录，例如<ul><li>~]# docker run -it –name c1 -v /docker/volumes/v1:/data busybox</li><li>~]# docker run -it –name c2 -v /docker/volumes/v1:/data busybox</li></ul></li><li>复制使用其它容器的卷，为docker run命令使用——volumes-from选项<ul><li>~]#docker run-it –name busybox1 -v/docker/volumes/v1:/data busybox</li><li>~]# docker run -it –name busybox2 –volumes-from busybox1 busybox</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker-01-基础</title>
      <link href="2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-01-%E5%9F%BA%E7%A1%80/"/>
      <url>2020/07/30/%E4%BA%91%E8%AE%A1%E7%AE%97-Docker-01-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker简介"><a href="#Docker简介" class="headerlink" title="Docker简介"></a>Docker简介</h1><h2 id="Docker是什么"><a href="#Docker是什么" class="headerlink" title="Docker是什么"></a>Docker是什么</h2><ul><li>Docker是一个开源的应用容器引擎，基于LXC（Linux Container）内核虚拟化技术实现，提供一系列更强的功能，比如镜像、Dockerfile等；</li><li>Docker理念是将应用及依赖包打包到一个可移植的容器中，可发布到任意Linux发行版Docker引擎上。使用沙箱机制运行程序，程序之间相互隔离；</li><li>Docker使用Go语言开发。</li></ul><h2 id="Docker思想"><a href="#Docker思想" class="headerlink" title="Docker思想"></a>Docker思想</h2><p>Docker采用C/S架构，Dcoker daemon作为服务端接受来自客户端请求，并处理这些请求，比如创建、运行容器等。客户端为用户提供一系列指令与Docker daemon交互。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200610145818895.png" alt="image-20200610145818895"></p><ul><li>集装箱∶会将所有需要的内容放到不同的集装箱中，谁需要这些环境就直接拿到这个集装箱就可以了。</li><li>标准化:<ul><li>运输的标准化:Docker有一个码头，所有上传的集装箱都放在了这个码头上，当谁需要某一个境，就直接指派大海疼去搬运这个集装箱就可以了。</li><li>命令的标准化:Docker提供了一些列的命令，帮助我们去获取集装箱等等操作。</li><li>提供了REST的API:衍生出了很多的图形化界面，Rancher。</li></ul></li><li>隔离性:Docker在运行集装箱内的内容时，会在Linux的内核中，单独的开辟一片空间，这片空间不会影响到其他程序。</li><li>中央仓库|注册中心:超级码头，上面放的就是集装箱</li><li>镜像:就是集装箱，好比是一个目标，可以通过这个目标来创建容器服务，tomcat镜像&gt;run&gt;容器（提供服务器），通过这个镜像可以创建多个容器（最终服务运行或者项目运行就是在容器中的）。</li><li>容器:独立运行一个或者一组应用，通过镜像来创建的（运行起来的镜像）</li></ul><h2 id="Docker对比虚拟机"><a href="#Docker对比虚拟机" class="headerlink" title="Docker对比虚拟机"></a>Docker对比虚拟机</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730095405498.png" alt="image-20200730095405498"></p><ul><li>Docker有着比虚拟机更少的抽象层</li><li>Docker利用的是宿主机的内核，vm需要Guest OS。</li><li>所以说，新建一个容器的时候，docker不需要像虚拟机一样重新加载一个操作系统内核，避免引导。虚拟机是加载Guest OS，分钟级别的，而docker是利用当前宿主机的操作系统，省略了复杂的过程，秒级的！</li></ul><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200610161845790.png" alt="image-20200610161845790"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730105719336.png" alt="image-20200730105719336"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730105727032.png" alt="image-20200730105727032"></p><p>但是，如上围一个宿主机运行了N个容器，多个容器带来的以下问题怎么解决:</p><ol><li>怎么样保证每个容器都有不同的文件系统并且能互不影响?·</li><li>一个docker主进程内的各个容器都是其子进程，那么实现同一个主进程下不同类型的子进程?各个进程间通信能相互访问(内存数据)吗?</li><li>每个容器怎么解决IP及端口分配的问题?·</li><li>多个容器的主机名能一样吗?</li><li>每个容器都要不要有root用户?怎么解决账户重名问题?</li></ol><p>以上问题怎么解决?·</p><h2 id="Linux-Namespace"><a href="#Linux-Namespace" class="headerlink" title="Linux Namespace"></a>Linux Namespace</h2><p>Namespace是Linux系统的底层概念，在内核层实现，即有一些不同类型的命名空间被部署在核内，各个docker容器运行在同一个docker主进程并且共用同一个宿主机系统内核，各docker容器运行在宿主机的用户空间，每个容器都要有类似于虚拟机一样的相互隔离的运行空间，但是容器技术是在一个进程内实现运行指定服务的运行环境，并且还可以保护宿主机内核不受其他进程的干扰和影响，如文件系统空间、网络空间、进程空间等，目前主要通过以下技术实现</p><p>容器运行空间的相互隔离:.</p><table><thead><tr><th>隔离类型</th><th>隔离内容</th><th>系统调用参数</th><th>内核版本</th></tr></thead><tbody><tr><td>MNT Namespace(mount)</td><td>磁盘挂载点和文件系统</td><td>CLONE_NEWNS</td><td>Linux 2.4.19</td></tr><tr><td>IPC Namespace(Inter-Progress Communication)</td><td>信号量、消息队列、共享内存</td><td>CLONE_NEWIPC</td><td>Linux 2.6.19</td></tr><tr><td>UTS Namespace(Unix Timesharing System)</td><td>主机名和域名</td><td>CLONE_NEWUTS</td><td>Linux 2.6.19</td></tr><tr><td>PID Namespace(Progress Identification)</td><td>进程编号</td><td>CLONE_NEWIPD</td><td>Linux 2.6.24</td></tr><tr><td>Net Namespace(network)</td><td>网络设备、网络栈、端口等</td><td>CLONE_NEWNET</td><td>Linux 2.6.29</td></tr><tr><td>User Namespace(user)</td><td>用户和用户组</td><td>CLONE_NEWUSER</td><td>Linux 3.8</td></tr></tbody></table><h3 id="MNT-Namespace"><a href="#MNT-Namespace" class="headerlink" title="MNT Namespace"></a>MNT Namespace</h3><p>每个容器都要有独立的根文件系统，有独立的用户空间，以实现在容器里面启动服务并且使用容器的运行环境，即一个宿主机是ubuntu的服务器，可以在里面启动一个centos运行环境的容器并且在容器里面启动一个Nginx服务，此 Nginx运行时使用的运行环境就是centos系统目录的运行环境，但是在容器里面是不能访问宿主机的资源，宿主机是使用了chroot技术把容器锁定到一个指定的运行目录里面。</p><p>例如：<code>/var/lib/containerd/io.containerd.runtime.v1.linux/moby/容器ID</code></p><h3 id="IPC-Namespace"><a href="#IPC-Namespace" class="headerlink" title="IPC Namespace"></a>IPC Namespace</h3><p>一个容器内的进程间通信，允许一个容器内的不同进程的(内存、缓存等)数据访问，但是不能跨容器访问其他容器的数据。</p><h3 id="UTS-Namespace"><a href="#UTS-Namespace" class="headerlink" title="UTS Namespace"></a>UTS Namespace</h3><p>UTS namespace(UNIX Timesharing System包含了运行内核的名称、版本、底层体系结构类型等信息）用于系统标识，其中包含了hostname和域名domainname ,它使得一个容器拥有属于自己hostname标识，这个主机名标识独立于宿主机系统和其上的其他容器。</p><h3 id="PID-Namespace"><a href="#PID-Namespace" class="headerlink" title="PID Namespace"></a>PID Namespace</h3><p>Linux系统中，有一个PID为1的进程(init/systemd)是其他所有进程的父进程，那么在每个容器内也要有一个父进程来管理其下属的子进程，那么多个容器的进程通PID namespace进程隔离(比如PID编号重复、努内的主进程生成与回收子进程等)。</p><h3 id="Net-Namespace"><a href="#Net-Namespace" class="headerlink" title="Net Namespace"></a>Net Namespace</h3><p>每一个容器都类似于虚拟机一样有自己的网卡、监听端口、TCP/IP协议栈等，Docker使用network namespace启动一个vethX接口，这样你的容器将拥有它自己的桥接ip地址，通常是docker0，而docker0实质就是Linux的虚拟网桥,网桥是在OSI七层模型的数据链路层的网络设备，通过mac地址对网络进行划分，并且在不同网络直接传递数据。</p><h3 id="User-Namespace"><a href="#User-Namespace" class="headerlink" title="User Namespace"></a>User Namespace</h3><p>各个容器内可能会出现重名的用户和用户组名称，或重复的用户UID或者GID，那么怎么隔离各个容器内的用户空间呢?User Namespace允许在各个宿主机的各个容器空间内创建相同的用户名以及相同的用户UID和 GID，只是会把用户的作用范围限制在每个容器内，即A容器和B容器可以有相同的用户名称和ID的账户，但是此用户的有效范围仅是当前容器内，不能访问另外一个容器内的文件系统，即相互隔离、互补影响、永不相见。</p><h2 id="Linux-Control-Groups"><a href="#Linux-Control-Groups" class="headerlink" title="Linux Control Groups"></a>Linux Control Groups</h2><p>在一个容器，如果不对其做任何资源限制，则宿主机会允许其占用无限大的内存空间，有时候会因为代码bug程序会一直申请内存，直到把宿主机内存占完，为了避免此类的问题出现，宿主机有必要对容器进行资源分配限制，比如CPU、内存等，Linux Cgroups的全称是Linux Control Groups，它最主要的作用，就是限制一个进程组能够使用的资源上限，包括CPU、内存、磁盘、网络带宽等等。此外，还能够对进程进行优先级设置，以及将进程挂起和恢复等操作。</p><p><strong>具体实现</strong></p><ul><li>blkio:块设备IO限制。</li><li>cpu:使用调度程序为cgroup任务提供cpu的访问。</li><li>cpuacct:产生 cgroup任务的cpu资源报告。</li><li>cpuset:如果是多核心的cpu，这个子系统会为cgroup任务分配单独的cpu和内存。</li><li>devices:允许或拒绝cgroup任务对设备的访问。</li><li>freezer:暂停和恢复 cgroup任务。</li><li>memory:设置每个cgroup的内存限制以及产生内存资源报告。</li><li>net_cls:标记每个网络包以供 cgroup 方便使用。</li><li>ns:命名空间子系统。</li><li>perf_event:增加了对每group的监测跟踪的能力，可以监测属于某个特定的group的所有线程以及运行在特定 CPU上的线程。</li></ul><p><strong>查看系统cgroups</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ ll /sys/fs/cgroup/</span><br><span class="line">总用量 0</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 blkio</span><br><span class="line">lrwxrwxrwx 1 root root 11 7月  20 09:09 cpu -&gt; cpu,cpuacct</span><br><span class="line">lrwxrwxrwx 1 root root 11 7月  20 09:09 cpuacct -&gt; cpu,cpuacct</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 cpu,cpuacct</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 cpuset</span><br><span class="line">dr-xr-xr-x 4 root root  0 7月  20 09:09 devices</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 freezer</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 hugetlb</span><br><span class="line">dr-xr-xr-x 4 root root  0 7月  20 09:09 memory</span><br><span class="line">lrwxrwxrwx 1 root root 16 7月  20 09:09 net_cls -&gt; net_cls,net_prio</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 net_cls,net_prio</span><br><span class="line">lrwxrwxrwx 1 root root 16 7月  20 09:09 net_prio -&gt; net_cls,net_prio</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 perf_event</span><br><span class="line">dr-xr-xr-x 4 root root  0 7月  20 09:09 pids</span><br><span class="line">dr-xr-xr-x 2 root root  0 7月  20 09:09 rdma</span><br><span class="line">dr-xr-xr-x 5 root root  0 7月  20 09:09 systemd</span><br></pre></td></tr></table></figure><p>有了以上的chroot、namespace、cgroups就具备了基础的客器运行环境，但是还需要有相应的容器创建与删除的管理工具、以及怎么样把容器运行起来、容器数据怎么处理、怎么进行启动与关闭等问题需要解决，于是容器管理技术出现了。</p><h2 id="容器管理工具"><a href="#容器管理工具" class="headerlink" title="容器管理工具"></a>容器管理工具</h2><p>目前使用docker，早期有使用LXC。</p><h3 id="LXC"><a href="#LXC" class="headerlink" title="LXC"></a>LXC</h3><p>LXC为Linux Container的简写。可以提供轻量级的虚拟化，以便隔离进程和资源，官方网站: <a href="https://linuxcontainers.org/">https://linuxcontainers.org/</a></p><p>LXC启动容器依赖于模板，清华模板源:<a href="https://mirrors.tuna.tsinghua.edu.cn/help/Ixc-images/">https://mirrors.tuna.tsinghua.edu.cn/help/Ixc-images/</a><br>但是做模板相对较难，需要手动一步步创构建文件系统、准备基础目录及可执行程序等，而且在大规模使用容器的场景很难横向扩展，另外后期代码升级也需要重新从头构建模板，基于以上种种原因便有了docker。</p><h3 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h3><p>Docker启动一个容器也需要一个外部模板，docke的镜像可以保存在一个公共的地方共享使用，只要把镜像下载下来就可以使用，最主要的是可以在镜像基础之上做自定义配置并且可以再把其提交为一个镜像，一个镜像可以被启动为多个容器。</p><p>Docker的镜像是分层的，镜像底层为库文件且只读层即不能写入也不能删除数据，从镜像加载启动为一个容器后会生成一个可写层，其写入的数据会复制到容器目录，但是容器内的数据在删除容器后也会被随之删除。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200720093339523.png" alt="image-20200720093339523"></p><h3 id="Pouch"><a href="#Pouch" class="headerlink" title="Pouch"></a>Pouch</h3><p><a href="https://www.infoq.cn/article/alibaba-pouch/">https://www.infoq.cn/article/alibaba-pouch/</a><br><a href="https://github.com/alibaba/pouch/">https://github.com/alibaba/pouch/</a></p><h3 id="Podman"><a href="#Podman" class="headerlink" title="Podman"></a>Podman</h3><p><a href="https://podman.io/">https://podman.io</a></p><h2 id="Docker优点"><a href="#Docker优点" class="headerlink" title="Docker优点"></a>Docker优点</h2><ul><li>快速部署:短时间内可以部署成百上千个应用，更快速交付到线上。</li><li>高效虚拟化:不需要额外的hypervisor支持，直接基于linux实现应用虚拟化，相比虚拟机大幅提高性能和效率。</li><li>节省开支:提高服务器利用率，降低IT支出。</li><li>简化配置:将运行环境打包保存至容器，使用时直接启动即可。</li><li>快速迁移和扩展:可跨平台运行在物理机、虚拟机、公有云等环境，良好的兼容性可以方便将应用从A宿主机迁移到B宿主机，甚至是A平台迁移到B平台。</li></ul><h2 id="Docker缺点"><a href="#Docker缺点" class="headerlink" title="Docker缺点"></a>Docker缺点</h2><ul><li>隔离性:各应用之间的隔离不如虚拟机彻底。</li></ul><h2 id="Docker-容器-的核心技术"><a href="#Docker-容器-的核心技术" class="headerlink" title="Docker(容器)的核心技术"></a>Docker(容器)的核心技术</h2><p><strong>容器规范</strong></p><p>容器技术除了的docker之外，还有coreOS的rkt，还有阿里的Pouch，为了保证容器生态的标准性和健康可持续发展，包括Linux基金会、Docker、微软、红帽谷歌和IBM等公司在2015年6月共同成立了一个叫opencontainer(oci)的组织，其目的就是制定开放的标准的容器规范,目前OCI一共发布了两个规范，分别是runtime spec和image format spec，有了这两个规范，不同的容器公司开发的容器只要兼容这两个规范，就可以保证容器的可移植性和相互可操作性。</p><p><strong>容器runtime</strong></p><p>runtime是真正运行容器的地方，因此为了运行不同的容器，runtime需要和操作系统内核紧密合作相互在支持，以便为容器提供相应的运行环境。<br>目前主流的三种runtime: </p><ul><li>Lxc: linux上早期的runtime，Docker早期就是采用Lxc作为runtime。</li><li>runc:目前Docker默认的runtime，runc遵守OCI规范，因此可以兼容Ixc。.</li><li>rkt:是CoreOS开发的容器runtime，也符合OCI规范，所以使用rktruntime也可以运行Docker容器。</li></ul><p><strong>容器管理工具</strong><br>管理工具连接runtime与用户，对用户提供图形或命令方式操作，然后管理工具将用户操作传递给runtime执行。</p><p>lxc是lxd的管理工具。</p><p>Runc的管理工具是docker engine，docker engine包含后台deamon和cli两部分，大家经常提到的Docker 就是指的docker engine。</p><p>Rkt的管理工具是rkt cli。</p><p><strong>容器定义工具</strong><br>容器定义工具允许用户定义容器的属性和内容，以方便容器能够被保存、共享和重建。<br>Docker image:是docker容器的模板，runtime依据docker image创建容器。<br>Dockerfile:包含N个命令的文本文件，通过dockerfile创建出docker image<br>ACI(App container image):与docker image类似，是CoreOS开发的rkt容器的镜像格式。</p><p><strong>Registry</strong></p><p>统一保存镜像而且是多个不同镜像版本的地方，叫做镜像仓库。<br>lmage registry: docker官方提供的私有仓库部署工具。<br>Docker hub: docker官方的公共仓库，已经保存了大量的常用镜像，可以方便大家直接使用。<br>Harbor: vmware提供的自带web界面自带认证功能的镜像仓库，目前有很多公司使用。</p><p><strong>编排工具</strong></p><p>当多个容器在多个主机运行的时候,单独管理容器是相当复杂而且很容易出错，而且也无法实现某一台主机宕机后容器自动迁移到其他主机从而实现高可用的目的，也无法实现动态伸缩的功能，因此需要有一种工具可以实现统一管理、动态伸缩、故障自愈、批量执行等功能，这就是容器编排引擎。</p><p>容器编排通常包括容器管理、调度、集群定义和服务发现等功能。</p><ul><li>Docker swarm: docker开发的容器编排引擎。</li><li>Kubernetes: google领导开发的容器编排引擎，内部项目为Borg，且其同时支持docker和 Coreos。</li><li>Mesos+Marathon:通用的集群组员调度平台，mesos(资源分配)与marathon(容器编排平台)一起提供容器编排引擎功能。</li></ul><h2 id="Docker-容器-的依赖技术"><a href="#Docker-容器-的依赖技术" class="headerlink" title="Docker(容器)的依赖技术"></a>Docker(容器)的依赖技术</h2><p><strong>容器网络</strong></p><p>docker自带的网络docker network仅支持管理单机上的容器网络，当多主机运行的时候需要使用第三方开源网络，例如calico、flannel等。</p><p><strong>服务发现</strong></p><p>容器的动态扩容特性决定了容器IP也会随之变化，因此需要有一种机制可以自动识别并将用户请求动态转发到新创建的容器上，kubernetes自带服务发现功能，需要结合kube-dns服务解析内部域名。</p><p><strong>容器监控</strong><br>可以通过原生命令<code>docker ps/top/stats</code>查看容器运行状态，另外也可以使heapster/ Prometheus等第三方监控工具监控容器的运行状态。</p><p><strong>数据管理</strong><br>容器的动态迁移会导致其在不同的Host之间迁移，因此如何保证与容器相关的数据也能随之迁移或随时访问，可以使用逻辑卷/存储挂载等方式解决。</p><p><strong>日志收集</strong></p><p>docker原生的日志查看工具<code>docker logs</code>,但是容器内部的日志需要通过ELK等专门的日志收集分析和展示工具进行处理。</p><h1 id="Docker安装及基础命令介绍"><a href="#Docker安装及基础命令介绍" class="headerlink" title="Docker安装及基础命令介绍"></a>Docker安装及基础命令介绍</h1><blockquote><p>较旧的Docker版本称为<code>docker</code>或<code>docker-engine</code>。如果已安装这些程序，请卸载它们以及相关的依赖项。</p></blockquote><p>官方网址: <a href="https://www.docker.com/">https://www.docker.com/</a></p><p><strong>系统版本选择</strong></p><p>Docker目前已经支持多种操作系统的安装运行，比如Ubuntu、CentOS、Redhat、Debian、Fedora，甚至还支持了Mac和Windows，在linux系统上需要内核版本在3.10或以上，docker版本号之前一直是0.X版本或1.X版本，但是从2017年3月1号开始改为每个季度发布一次稳版，其版本号规则也统一变更为YY.MM，例如17.09表示是2017年9月份发布的，本次演示的操作系统使用Centos 8.2为例。</p><p><strong>Docker版本选择</strong></p><p>Docker之前没有区分版本，但是2017年初推出(将docker更名为)新的项目Moby，github地址: <a href="https://github.com/moby/moby%EF%BC%8CMoby%E9%A1%B9%E7%9B%AE%E5%B1%9E%E4%BA%8EDocker%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%85%A8%E6%96%B0%E4%B8%8A%E6%B8%B8%EF%BC%8CDocker%E5%B0%86%E6%98%AF%E4%B8%80%E4%B8%AA%E9%9A%B6%E5%B1%9E%E4%BA%8E%E7%9A%84Moby%E7%9A%84%E5%AD%90%E4%BA%A7%E5%93%81%EF%BC%8C%E8%80%8C%E4%B8%94%E4%B9%8B%E5%90%8E%E7%9A%84%E7%89%88%E6%9C%AC%E4%B9%8B%E5%90%8E%E5%BC%80%E5%A7%8B%E5%8C%BA%E5%88%86%E4%B8%BACE%E7%89%88%E6%9C%AC%EF%BC%88%E7%A4%BE%E5%8C%BA%E7%89%88%E6%9C%AC%EF%BC%89%E5%92%8CEE%EF%BC%88%E4%BC%81%E4%B8%9A%E6%94%B6%E8%B4%B9%E7%89%88)%EF%BC%8CCE%E7%A4%BE%E5%8C%BA%E7%89%88%E6%9C%AC%E5%92%8CEE%E4%BC%81%E4%B8%9A%E7%89%88%E6%9C%AC%E9%83%BD%E6%98%AF%E6%AF%8F%E4%B8%AA%E5%AD%A3%E5%BA%A6%E5%8F%91%E5%B8%83%E4%B8%80%E4%B8%AA%E6%96%B0%E7%89%88%E6%9C%AC%EF%BC%8C%E4%BD%86%E6%98%AFEE%E7%89%88%E6%9C%AC%E6%8F%90%E4%BE%9B%E5%90%8E%E6%9C%9F%E5%AE%89%E5%85%A8%E7%BB%B4%E6%8A%A41%E5%B9%B4%EF%BC%8C%E8%80%8CCE%E7%89%88%E6%9C%AC%E6%98%AF4%E4%B8%AA%E6%9C%88%EF%BC%8C%E6%9C%AC%E6%AC%A1%E6%BC%94%E7%A4%BA%E7%9A%84Docker%E7%89%88%E6%9C%AC%E4%B8%BA18.03%E4%BB%A5%E4%B8%8B%E4%B8%BA%E5%AE%98%E6%96%B9%E5%8E%9F%E6%96%87">https://github.com/moby/moby，Moby项目属于Docker项目的全新上游，Docker将是一个隶属于的Moby的子产品，而且之后的版本之后开始区分为CE版本（社区版本）和EE（企业收费版)，CE社区版本和EE企业版本都是每个季度发布一个新版本，但是EE版本提供后期安全维护1年，而CE版本是4个月，本次演示的Docker版本为18.03以下为官方原文</a>:<br><a href="https://blog.docker.com/2017/03/docker-enterprise-edition/">https://blog.docker.com/2017/03/docker-enterprise-edition/</a></p><p>kubernetes结合使用的时候，要安装经过kubernetes官方测试通过的docker版本，避免出现不兼容等未知的及不可预估的问题发生</p><h2 id="下载rpm包安装"><a href="#下载rpm包安装" class="headerlink" title="下载rpm包安装"></a>下载rpm包安装</h2><p><strong>官方rpm包下载地址</strong></p><p><a href="https://download.docker.com/linux/centos/7/x86_64/stable/Packages/">https://download.docker.com/linux/centos/7/x86_64/stable/Packages/</a></p><p><strong>二进制下载地址</strong></p><p><a href="https://download.docker.com/">https://download.docker.com/</a><br><a href="https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/">https://mirrors.aliyun.com/docker-ce/linux/static/stable/x86_64/</a></p><p><strong>阿里镜像下载地址</strong></p><p><a href="https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/">https://mirrors.aliyun.com/docker-ce/linux/centos/7/x86_64/stable/Packages/</a></p><h2 id="通过修改yum源安装"><a href="#通过修改yum源安装" class="headerlink" title="通过修改yum源安装"></a>通过修改yum源安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -O /etc/yum.repos.d/docker.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line">dnf install -y docker-ce</span><br></pre></td></tr></table></figure><h2 id="验证Docker信息"><a href="#验证Docker信息" class="headerlink" title="验证Docker信息"></a>验证Docker信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker info</span><br><span class="line">Containers: 2<span class="comment">#当前主机运行的容器总数</span></span><br><span class="line">Running: 1<span class="comment">#有几个容器是正在运行的</span></span><br><span class="line">Paused: O<span class="comment">#有几个容器是暂停的</span></span><br><span class="line">Stopped:1<span class="comment">#有几个容器是停止的</span></span><br><span class="line">lmages: 3<span class="comment">#当前服务器的镜像数</span></span><br><span class="line">Server Version: 18.09.9 <span class="comment">#服务端版本</span></span><br><span class="line">Storage Driver: overlay2<span class="comment">#正在使用的存储引擎</span></span><br><span class="line">Backing Filesystem: xfs <span class="comment">#后端文件系统，即服务器的磁盘文件系统</span></span><br><span class="line">Supports d_type: <span class="literal">true</span> <span class="comment">#是否支持d_type</span></span><br><span class="line">Native Overlay Diff: <span class="literal">true</span> <span class="comment">#是否支持差异数据存储</span></span><br><span class="line">Logging Driver: json-file <span class="comment">#日志类型</span></span><br><span class="line">Cgroup Driver: cgroupfs <span class="comment">#Cgroups类型</span></span><br><span class="line">Plugins:<span class="comment">#插件</span></span><br><span class="line">volume: <span class="built_in">local</span><span class="comment">#卷</span></span><br><span class="line">Network: bridge host macvlan null overlay<span class="comment"># overlay跨主机通信</span></span><br><span class="line">Log: awslogs fluentd gcplogs gelf journald json-file <span class="built_in">local</span> logentries splunk syslog<span class="comment">#日志类型</span></span><br><span class="line">Swarm: inactive <span class="comment">#是否支持swarmw</span></span><br><span class="line">Runtimes: runc<span class="comment">#已安装的容器运行时</span></span><br><span class="line">Default Runtime: runc<span class="comment">#默认使用的容器运行时</span></span><br><span class="line">Init Binary: docker-init<span class="comment">#初始化容器的守护进程，即 pid为1的进程</span></span><br><span class="line">containerd version:894b81a4b802e4eb2a91d1ce216b8817763c29fb<span class="comment">#版本</span></span><br><span class="line">runc version:425e105d5a03fabd737a126ad93d62a9eeede87f<span class="comment"># runc版本</span></span><br><span class="line">init version: fec3683 <span class="comment">#init版本</span></span><br><span class="line">Security Options:<span class="comment">#安全选项</span></span><br><span class="line">  Apparmor<span class="comment">#安全模块 https://docs.docker.com/engine/security/apparmor/</span></span><br><span class="line">  seccomp<span class="comment">#审计(操作) https://docs.docker.com/engine/security/seccomp/</span></span><br><span class="line">   Profile: default<span class="comment">#默认的配置文件</span></span><br><span class="line"> Kernel Version: 4.18.0-193.el8.x86_64<span class="comment"># 宿主机内核版本</span></span><br><span class="line"> Operating System: CentOS Linux 8 (Core)<span class="comment">#宿主机操作系统</span></span><br><span class="line"> OSType: linux<span class="comment">#宿主机操作系统类型</span></span><br><span class="line"> Architecture: x86_64<span class="comment">#宿主机架构</span></span><br><span class="line"> CPUs: 4<span class="comment">#宿主机CPU数量</span></span><br><span class="line"> Total Memory: 952.1MiB<span class="comment">#宿主机总内存</span></span><br><span class="line"> Name: docker01 <span class="comment">#宿主机hostname</span></span><br><span class="line"> ID: 3A2H:67TW:HNSU:D3AQ:MPLB:SY2G:GPNH:HG7U:4IHC:JLIK:TXRH:IJM7<span class="comment">#宿主机ID</span></span><br><span class="line"> Docker Root Dir: /var/lib/docker<span class="comment">#宿主机数据保存目录</span></span><br><span class="line"> Debug Mode: <span class="literal">false</span><span class="comment">#端是否开启debug</span></span><br><span class="line"> Registry: https://index.docker.io/v1/ <span class="comment">#镜像仓库</span></span><br><span class="line"> Labels:<span class="comment">#其他标签</span></span><br><span class="line"> Experimental: <span class="literal">false</span> <span class="comment">#是否是测试版</span></span><br><span class="line"> Insecure Registries:<span class="comment"># 非安全的镜像仓库</span></span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: <span class="literal">false</span><span class="comment">#是否开启活动重启(重启docker-daemon 不关闭容器)</span></span><br><span class="line"> Product License: Community Engine<span class="comment"># 产品许可信息</span></span><br></pre></td></tr></table></figure><h2 id="Docker存储引擎"><a href="#Docker存储引擎" class="headerlink" title="Docker存储引擎"></a>Docker存储引擎</h2><p>目前docker的默认存储引擎为overlay2，不同的存储引擎需要相应的系统支持，如需要磁盘分区的时候传递d-type文件分层功能，即需要传递内核参数开启格式化磁盘的时候的指定功能。</p><p>历史更新信息：</p><p><a href="https://github.com/moby/moby/blob/master/CHANGELOG.md">https://github.com/moby/moby/blob/master/CHANGELOG.md</a></p><p>官方文档关于存储引擎的选择文档:<br><a href="https://docs.docker.com/storage/storagedriver/select-storage-driver/">https://docs.docker.com/storage/storagedriver/select-storage-driver/</a></p><p>存储驱动类型:</p><ul><li><p>AUFS (AnotherUnionFS）是一种Union FS，是文件级的存储驱动。所谓UnionFS就是把不同物理位置的目录合并mount到同一个目录中。简单来说就是支持将不同目录挂载到同一个虚拟文件系统下的文件系统。这种文件系统可以一层一层地叠加修改文件。无论底下有多少层都是只读的，只有最上层的文件系统是可写的。当需要修改一个文件时，AUFS创建该文件的一个副本，使用CoW(写时复制)将文件从只读层复制到可写层进行修改，结果也保存在可写层。在Docker中，底下的只读层就是image，可写层就是Container，是 Docker 18.06及更早版本的首选存储驱动程序，在内核3.13上运行Ubuntu 14.04时不支持overlay2。</p></li><li><p>Overlay:一种Union FS文件系统，Linux内核3.18后支持。</p></li><li><p>Overlay2: Overlay的升级版，到目前为止，所有Linux发行版推荐使用的存储类型。</p></li><li><p>Devicemapper:是CentOS和RHEL的推荐存储驱动程序，因为之前的内核版本不支持overlay2，但是当前较新版本的CentOS和RHEL现在已经支持overlay2,因此推荐使用overlay2</p></li><li><p>ZFS(Sun-2005)/btrfs(Oracle-2007):目前没有广泛使用。</p></li><li><p>Vfs:用于测试环境，适用于无法使用copy-on-write文件系统的情况。此存储驱动程序的性能很差．通常不建议用于生产。</p></li></ul><p>Docker官方推荐首选存储引擎为overlay2，devicemapper存在使用空间方面的一些限制，虽然可以通过后期配置解决，但是官方依然推荐使用overlay2，以下是网上查到的部分资料:.</p><p><a href="https://www.cnblogs.com/youruncloud/p/5736718.html">https://www.cnblogs.com/youruncloud/p/5736718.html</a></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722090703775.png" alt="image-20200722090703775"></p><p>如果docker数据目录是一块单独的磁盘分区而且是xfs格式的，那么需要在格式化的时候加上参数-n ftype=1，否则后期在启动容器的时候会报错不支持d-type。</p><h2 id="Docker服务进程"><a href="#Docker服务进程" class="headerlink" title="Docker服务进程"></a>Docker服务进程</h2><p>有四个进程:</p><ul><li>dockerd:被client直接访问，其父进程为宿主机的systemd守护进程</li><li>docker-proxy:实现容器通信，其父进程为dockerd</li><li>containerd:被dockerd进程调用以实现与runc交互</li><li>containerd-shim:真正运行容器的载体，其父进程为containerd</li></ul><p>容器的创建与管理过程</p><ol><li>dockerd通过grpc和 containerd模块通信(runc)交换，dockerd 和 containerd通信的socket文件:frun/containerd/containerd.sock</li><li>containerd在 dockerd启动时被启动，然后containerd启动grpc请求监听，<br>containerd处理grpc 请求，根据请求做相应动作。<br>/usr/bin/dockerd -H fd:// –containerd=/run/containerd/containerd.sock</li><li>若是创建容器，containerd拉起一个container-shim容器进程，并进行相应的创建操作。</li><li>container-shim被拉起后，start/exec/create拉起runC进程，通过exit、control文件和 containerd 通信，通过父子进程关系和SIGCHLD(信号)监控容器中进程状态。</li><li>在整个容器生命周期中，containerd通过epoll监控容器文件，监控容器事件。</li></ol><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722100745633.png" alt="image-20200722100745633"></p><h1 id="Docker镜像加速配置"><a href="#Docker镜像加速配置" class="headerlink" title="Docker镜像加速配置"></a>Docker镜像加速配置</h1><p>国内下载国外的镜像有时候会很慢，因此可以更改docker配置文件添加一个加速器，可以通过加速器达到加速下载镜像的目的。</p><p>浏览器打开<a href="http://cr.console.aliyun.com,注册或登录阿里云账号,点击左侧的镜像加速器,将会得到一个专属的加速地址,官方会有对应步骤/">http://cr.console.aliyun.com，注册或登录阿里云账号，点击左侧的镜像加速器，将会得到一个专属的加速地址，官方会有对应步骤</a></p><h1 id="Docker镜像管理"><a href="#Docker镜像管理" class="headerlink" title="Docker镜像管理"></a>Docker镜像管理</h1><p>Docker镜像含有启动容器所需要的文件系统及所需要的内容，因此镜像主要用于创建并启动docker容器。</p><p>Docker镜像里面是一层层文件系统,叫做Union File System (Union FS联合文件系统)，2004年由纽约州立大学石溪分校开发，联合文件系统可以将多个目录挂载到一起从而形成一整个虚拟文件系统，该虚拟文件系统的目录结构就像普通linux的目录结构一样，docker通过这些文件再加上宿主机的内核提供了一个linux的虚拟环境,每一层文件系统我们叫做一层layer，联合文件系统可以对每一层文件系统设置三种权限，只读（readonly)、读写(readwrite）和写出(whiteout-able)，但是 docker镜像中每一层文件系统都是只读的,构建镜像的时候,从一个最基本的操作系统开始,每个构建的操作都相当于做一层的修改,增加了一层文件系统,一层层往上叠加,上层的修改会覆盖底层该位置的可见性，这也很容易理解，就像上层把底层遮住了一样,当使用镜像的时候，我们只会看到一个完全的整体，不知道里面有几层也不需要知道里面有几层，结构如下:</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200720093339523.png" alt="image-20200720093339523"></p><p>演示aufs联合挂载：<br><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722111051035.png" alt="image-20200722111051035"></p><p>一个典型的Linux文件系统由bootfs 和 rootfs两部分组成，bootfs(boot file system)主要包含bootloader和 kernel，bootloader主要用于引导加载kernel,当kernel被加载到内存中后bootfs会被umount掉，rootfs (root file system)包含的就是典型Linux系统中的/dev，/proc，/bin，/etc等标准目录和文件，下图就是 docker image中最基础的两层结构，不同的linux发行版（如ubuntu和CentoS )在rootfs这一层会有所区别。但是对于docker镜像通常都比较小，官方提供的centos基础镜像在200MB左右，一些其他版本的镜像甚至只有几MB，docker镜像直接调用宿主机的内核，镜像中只提供rootfs，也就是只需要包括最基本的命令、工具和程序库就可以了，比如 alpine镜像，在5M左右。<br>下图就是有两个不同的镜像在一个宿主机内核上实现不同的rootfs。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722111531886.png" alt="image-20200722111531886"></p><p>容器、镜像父镜像</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722112309432.png" alt="image-20200722112309432"></p><p>docker命令是最常使用的docker客户端命令，其后面可以加不同的参数以实现相应的功能，常用的命令如下</p><h2 id="搜索镜像"><a href="#搜索镜像" class="headerlink" title="搜索镜像"></a>搜索镜像</h2><p>在官方的docker仓库中搜索指定名称的docker镜像，也会有很多镜像。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker search centos:7.6<span class="comment">#指定版本号</span></span><br><span class="line">[root@docker01 ~]$ docker search centos <span class="comment">#不指定版本号默认为latest</span></span><br></pre></td></tr></table></figure><h2 id="下载镜像"><a href="#下载镜像" class="headerlink" title="下载镜像"></a>下载镜像</h2><p>从docker仓库将镜像下裁到本地，命令格式如下:<br><code>docker pull 仓库服务器:端口/项目名称/镜像名称:tag(版本)号</code></p><p>例如:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker images pull https://image.kinmfer.com:80/linux/centos:v1 自定义版本</span><br><span class="line">docker pull https://image.kinmfer.com:80/linux/centos:7.6.1511</span><br><span class="line">docker pull https://image.kinmfer.com:80/linux/ubuntu:git版本号</span><br><span class="line">docker pull https://image.kinmfer.com:80/linux/centos:时间戳 2020-07-22_11:55:51</span><br></pre></td></tr></table></figure><h2 id="查看本地镜像"><a href="#查看本地镜像" class="headerlink" title="查看本地镜像"></a>查看本地镜像</h2><p>下载完成的镜像比下载的大，因为下载完成后会解压</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker images</span><br><span class="line">[root@docker01 ~]$ docker image ls</span><br><span class="line">[root@docker01 ~]$ docker image ls --no-trunc</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200722120525438.png" alt="image-20200722120525438"></p><ul><li>REPOSITORY        镜像所属的仓库名称</li><li>TAG                       镜像版本号(标识符)，默认为latest</li><li>IMAGE ID              镜像唯一ID标示</li><li>CREATED              镜像创建时间。</li><li>SIZE                       镜像的大小</li></ul><h2 id="镜像导出"><a href="#镜像导出" class="headerlink" title="镜像导出"></a>镜像导出</h2><p>可以将镜像从本地导出问为一个压缩文件,然后复制到其他服务器进行导入使用。</p><p><strong>导出方法1</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker images save ubuntu -o /opt/ubuntu.tar.gz</span><br><span class="line">[root@docker01 ~]$ ll /opt/</span><br><span class="line">总用量 74484</span><br><span class="line">-rw------- 1 root root 76271616 7月  22 15:10 ubuntu.tar.gz</span><br></pre></td></tr></table></figure><p><strong>导出方法2</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker save ubuntu:latest &gt; /opt/ubuntu-latest.tar.gz</span><br><span class="line">[root@docker01 ~]$ ll /opt/</span><br><span class="line">总用量 74484</span><br><span class="line">-rw-r--r-- 1 root root 76271616 7月  22 15:13 ubuntu-latest.tar.gz</span><br></pre></td></tr></table></figure><h2 id="镜像导入"><a href="#镜像导入" class="headerlink" title="镜像导入"></a>镜像导入</h2><p><strong>导入方法1</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker images load -i /opt/ubuntu.tar.gz</span><br></pre></td></tr></table></figure><p><strong>导入方法2</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker load &lt; /opt/ubuntu.tar.gz</span><br></pre></td></tr></table></figure><h2 id="删除镜像"><a href="#删除镜像" class="headerlink" title="删除镜像"></a>删除镜像</h2><p><code>docker rmi 镜像ID/镜像名称</code></p><p>通过镜像启动容器的时候 镜像不能被删除，除非将容器全部关闭</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker rmi 5ac22cccc3ae<span class="comment"># 或者docker images rm 5ac22cccc3ae</span></span><br><span class="line">Untagged: mysql:latest</span><br><span class="line">Untagged: mysql@sha256:c455bbcaa8b9c5c636c45f6184f970caeb3d8b545a0390e1b72a253e07aef8fd</span><br><span class="line">Deleted: sha256:5ac22cccc3ae67ca42ed92b55c8fa7c68967ec6b875d15d761467d40097368b6</span><br><span class="line">Deleted: sha256:86c56823286628a66aa344188924e576c85b94b4734c418a6a0e123068170c4f</span><br><span class="line">Deleted: sha256:28f36292125ccc90319e3153c5eb83d374d2875c9e46a7538568fc32458ec034</span><br><span class="line">Deleted: sha256:291205778291931aee087875f7d1c30382db776809095e30260079f998025426</span><br></pre></td></tr></table></figure><p>获取运行参数帮助</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker daemon --help</span><br></pre></td></tr></table></figure><h1 id="容器操作基础命令"><a href="#容器操作基础命令" class="headerlink" title="容器操作基础命令"></a>容器操作基础命令</h1><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200728150227180.png" alt="image-20200728150227180"></p><p>命令格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run [选项] [镜像名] [shell命令] [参数]</span><br><span class="line">docker run [参数选项] [镜像名称，必须在所有选项的后面][/bin/<span class="built_in">echo</span> <span class="string">&#x27;hello world&#x27;</span>]<span class="comment">#单次执行，没有自定义容器名称。</span></span><br><span class="line">docker run centos /bin/<span class="built_in">echo</span> <span class="string">&#x27;hello wold’ #启动的容器在执行完shel命令就退出了</span></span><br></pre></td></tr></table></figure><h2 id="从镜像制作一个容器"><a href="#从镜像制作一个容器" class="headerlink" title="从镜像制作一个容器"></a>从镜像制作一个容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it nginx:1.16.1 bash</span><br><span class="line">root@3d1f640314b3:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><h2 id="从镜像启动一个容器"><a href="#从镜像启动一个容器" class="headerlink" title="从镜像启动一个容器"></a>从镜像启动一个容器</h2><p>会直接进入到容器，并随机生成容器ID和名称</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it nginx:1.16.1 bash</span><br><span class="line">root@3d1f640314b3:/<span class="comment">#</span></span><br></pre></td></tr></table></figure><p><code>-i</code> 选项指示 docker 要在容器上打开一个标准的输入接口</p><p><code>-t</code> 指示 docker 要创建一个伪 tty 终端，连接容器的标准输入接口，之后用户就可以通过终端进行输入。</p><p>退出容器不注销：<code>ctrl+p+q</code></p><h2 id="显示正在运行的容器"><a href="#显示正在运行的容器" class="headerlink" title="显示正在运行的容器"></a>显示正在运行的容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker ps</span><br><span class="line">[root@docker01 ~]$ docker container ls </span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725074055560.png" alt="image-20200725074055560"></p><h2 id="显示所有容器"><a href="#显示所有容器" class="headerlink" title="显示所有容器"></a>显示所有容器</h2><p>包括当前正在运行以及已经关闭的所有容器</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker ps -a</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725074142559.png" alt="image-20200725074142559"></p><p>-n, –last int        Show n last created containers (includes all states) (default -1)</p><h2 id="删除运行中的容器"><a href="#删除运行中的容器" class="headerlink" title="删除运行中的容器"></a>删除运行中的容器</h2><p>即使容正在运行当中，也会被强制删除掉</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725080544981.png" alt="image-20200725080544981"></p><p>-f：强制删除</p><p>-v：删除容器产生的卷组</p><h2 id="后台运行容器"><a href="#后台运行容器" class="headerlink" title="后台运行容器"></a>后台运行容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker container run -it -d  nginx:1.16.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725093210238.png" alt="image-20200725093210238"></p><h2 id="随机端口映射"><a href="#随机端口映射" class="headerlink" title="随机端口映射"></a>随机端口映射</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it -d -P nginx</span><br></pre></td></tr></table></figure><p>-P指定随机端口映射，从32768开始</p><h2 id="指定端口映射"><a href="#指定端口映射" class="headerlink" title="指定端口映射"></a>指定端口映射</h2><p>方式1:本地端口81-&gt;容器80端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -p 81:80 --name nginx-test-port1 nginx</span><br></pre></td></tr></table></figure><p>方式2:本地IP:本地端口-&gt;容器端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -p 192.168.10.205:82:80 --name nginx-test-port2 nginx</span><br></pre></td></tr></table></figure><p>方式3:本地IP:本地随机端口-&gt;容器端口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -p 192.168.10.205:.80 --name nginx-test-port3 nginx</span><br></pre></td></tr></table></figure><p>方式4:本机ip:本地端口:容器端口/协议，默认为tcp 协议</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -p 192.168.10.205:83:80/udp --name nginx-test-port4 nginx</span><br></pre></td></tr></table></figure><p>方式5:一次性映射多个端口+协议</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -p 86:80/tcp -p 443:443/tcp -p 53:53/udp --name nginx-test-port5 nginx</span><br></pre></td></tr></table></figure><h2 id="全部端口映射"><a href="#全部端口映射" class="headerlink" title="全部端口映射"></a>全部端口映射</h2><p>“—P”选项或”——publish-all”将容器的所有计划要暴露端口全部映射至主机端口</p><p>计划要暴露的端口使用使用——expose选项指定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -d -P --expose 2222 --expose 3333 —-name web busybox:latest /bin/httpd -p 2222 -f</span><br></pre></td></tr></table></figure><h2 id="查看容器的端口映射"><a href="#查看容器的端口映射" class="headerlink" title="查看容器的端口映射"></a>查看容器的端口映射</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker port  xxx</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725091655379.png" alt="image-20200725091655379"></p><h2 id="自定义容器名称"><a href="#自定义容器名称" class="headerlink" title="自定义容器名称"></a>自定义容器名称</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -d -it --name nginx-1.16.1 nginx:1.16.1</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725092058731.png" alt="image-20200725092058731"></p><h2 id="自定义容器主机名"><a href="#自定义容器主机名" class="headerlink" title="自定义容器主机名"></a>自定义容器主机名</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -d -it -h nginx1.16.1 nginx:1.16.1</span><br></pre></td></tr></table></figure><h2 id="注入HOST文件"><a href="#注入HOST文件" class="headerlink" title="注入HOST文件"></a>注入HOST文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -d -it --add-host www.kinmfer.com:1.1.1.1 nginx:1.16.1</span><br></pre></td></tr></table></figure><h2 id="指定容器DNS"><a href="#指定容器DNS" class="headerlink" title="指定容器DNS"></a>指定容器DNS</h2><p>DNS服务，默认采用宿主机的dns地址</p><p>一是将dns地址配置在宿主机</p><p>二是将参数配置在docker启动脚本里面–dns=1.1.1.1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it -d --dns 1.1.1.1 centos:8.2.2004</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725131843942.png" alt="image-20200725131843942"></p><h2 id="单次运行"><a href="#单次运行" class="headerlink" title="单次运行"></a>单次运行</h2><p>容器推出后自动删除</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run --rm -it  nginx:1.16.1</span><br></pre></td></tr></table></figure><h2 id="传递运行命令"><a href="#传递运行命令" class="headerlink" title="传递运行命令"></a>传递运行命令</h2><p>容器需要有一个前台运行的进程才能保持容器的运行,通过传递运行参数是一种方式，另外也可以在构建镜像的时候指定容器启动时运行的前台命令。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it nginx:1.16.1 tail -f /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725095050572.png" alt="image-20200725095050572"></p><h2 id="复制内容到容器"><a href="#复制内容到容器" class="headerlink" title="复制内容到容器"></a>复制内容到容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker cp 文件名称 容器id:容器内部路径</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run -it nginx:1.16.1 tail -f /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200730100130024.png" alt="image-20200730100130024"></p><h2 id="注入环境变量"><a href="#注入环境变量" class="headerlink" title="注入环境变量"></a>注入环境变量</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker run --rm -e WEB_SERVER_ROOT=/usr/<span class="built_in">local</span>/src nginx:1.18.0-alpine printenv</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200729145410114.png" alt="image-20200729145410114"></p><h2 id="容器的启动和关闭"><a href="#容器的启动和关闭" class="headerlink" title="容器的启动和关闭"></a>容器的启动和关闭</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker start xxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker stop xxx</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker restart xxx</span><br></pre></td></tr></table></figure><h2 id="查看容器的日志"><a href="#查看容器的日志" class="headerlink" title="查看容器的日志"></a>查看容器的日志</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker logs xxx</span><br></pre></td></tr></table></figure><ul><li>-t, –timestamps     显示时间戳</li><li>–details        显示额外细节</li><li>-f, –follow         Follow log output</li><li>–tail string    Number of lines to show from the end of the logs (default “all”)</li></ul><h2 id="查看容器中进程信息"><a href="#查看容器中进程信息" class="headerlink" title="查看容器中进程信息"></a>查看容器中进程信息</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker top 容器ID</span><br></pre></td></tr></table></figure><h2 id="查看容器运行状态"><a href="#查看容器运行状态" class="headerlink" title="查看容器运行状态"></a>查看容器运行状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker stats 容器ID</span><br></pre></td></tr></table></figure><h2 id="进入到正在运行的容器"><a href="#进入到正在运行的容器" class="headerlink" title="进入到正在运行的容器"></a>进入到正在运行的容器</h2><h3 id="使用attach命令"><a href="#使用attach命令" class="headerlink" title="使用attach命令"></a>使用attach命令</h3><p>使用方式为docker attach容器名，attach类似于vnc，操作会在各个容器界面显示，所有使用此方式进入容器的操作都是同步显示的且exit后容器将被关闭，不推荐使用。</p><h3 id="使用exec命令"><a href="#使用exec命令" class="headerlink" title="使用exec命令"></a>使用exec命令</h3><p>执行单次命令与进入容器，不是很推荐此方式，虽然exit退出容器还在运行</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker <span class="built_in">exec</span> -it 3f97e3647eda /bin/bash</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725103816019.png" alt="image-20200725103816019"></p><h3 id="使用nsenter命令"><a href="#使用nsenter命令" class="headerlink" title="使用nsenter命令"></a>使用nsenter命令</h3><p>推荐使用此方式，nsenter命令需要通过PID进入到容器内部，不过可以使用<code>docker inspect</code>获取到容器的ID</p><p>-f, –format string   Format the output using the given Go template<br>-s, –size            Display total file sizes if the type is container</p><p>获取容器的IP地址</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker inspect -f <span class="string">&quot;&#123; &#123;.NetworkSettings.IPAddress&#125; &#125;&quot;</span> 3f97e3647eda</span><br><span class="line">172.17.0.2</span><br></pre></td></tr></table></figure><p>获取容器的PID，可以通过PID进入到容器内</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker inspect -f <span class="string">&quot;&#123; &#123;.State.Pid&#125; &#125;&quot;</span> 3f97e3647eda</span><br><span class="line">81012</span><br></pre></td></tr></table></figure><p>如果没有nsenter命令，就先<code>dnf install util-linux -y</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ nsenter -t 81012 -m -u -i -n -p</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">用法：</span><br><span class="line"> nsenter [选项] [&lt;程序&gt; [&lt;参数&gt;...]]</span><br><span class="line">选项：</span><br><span class="line"> -a, --all              enter all namespaces</span><br><span class="line"> -t, --target &lt;pid&gt;     要获取名字空间的目标进程</span><br><span class="line"> -m, --mount[&#x3D;&lt;文件&gt;]   进入 mount 名字空间</span><br><span class="line"> -u, --uts[&#x3D;&lt;文件&gt;]     进入 UTS 名字空间(主机名等)</span><br><span class="line"> -i, --ipc[&#x3D;&lt;文件&gt;]     进入 System V IPC 名字空间</span><br><span class="line"> -n, --net[&#x3D;&lt;文件&gt;]     进入网络名字空间</span><br><span class="line"> -p, --pid[&#x3D;&lt;文件&gt;]     进入 pid 名字空间</span><br><span class="line"> -C, --cgroup[&#x3D;&lt;文件&gt;]  进入 cgroup 名字空间</span><br><span class="line"> -U, --user[&#x3D;&lt;文件&gt;]    进入用户名字空间</span><br><span class="line"> -S, --setuid &lt;uid&gt;     设置进入空间中的 uid</span><br><span class="line"> -G, --setgid &lt;gid&gt;     设置进入名字空间中的 gid</span><br><span class="line">     --preserve-credentials 不干涉 uid 或 gid</span><br><span class="line"> -r, --root[&#x3D;&lt;目录&gt;]     设置根目录</span><br><span class="line"> -w, --wd[&#x3D;&lt;dir&gt;]       设置工作目录</span><br><span class="line"> -F, --no-fork          执行 &lt;程序&gt; 前不 fork</span><br><span class="line"> -Z, --follow-context  根据 --target PID 设置 SELinux 环境</span><br><span class="line"> -h, --help             display this help</span><br><span class="line"> -V, --version          display version</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725110115129.png" alt="image-20200725110115129"></p><h3 id="脚本方式"><a href="#脚本方式" class="headerlink" title="脚本方式"></a>脚本方式</h3><p>将nsenter命令写入到脚本进行调用，如下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">docker_in</span></span>()&#123;</span><br><span class="line">NAME_ID=<span class="variable">$1</span></span><br><span class="line">PID=$(docker inspect -f <span class="string">&quot;&#123; &#123;if.State.Pid&#125; &#125;&quot;</span> <span class="variable">$&#123;NAME_ID&#125;</span>)</span><br><span class="line">nsenter -t <span class="variable">$&#123;PID&#125;</span> -m -u -i -n -p -u</span><br><span class="line">&#125;</span><br><span class="line">docker_in <span class="variable">$1</span></span><br></pre></td></tr></table></figure><p>使用</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725111138862.png" alt="image-20200725111138862"></p><h2 id="查看容器内部的hosts文件"><a href="#查看容器内部的hosts文件" class="headerlink" title="查看容器内部的hosts文件"></a>查看容器内部的hosts文件</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725111557072.png" alt="image-20200725111557072"></p><p>容器默认会将实例的ID添加到自己的hosts文件</p><h2 id="批量操作容器"><a href="#批量操作容器" class="headerlink" title="批量操作容器"></a>批量操作容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker COMMAND `docker ps -a -q`</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker rm -fv `docker ps -a -q` <span class="comment"># 删除所有容器</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker rm -fv `docker ps -a -q -f status=exited` <span class="comment"># 删除已退出容器</span></span><br></pre></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker stop `docker ps -a -q`</span><br></pre></td></tr></table></figure><p><strong>强制关闭</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker <span class="built_in">kill</span> `docker ps -a -q`</span><br></pre></td></tr></table></figure><p><strong>启动</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker start `docker ps -a -q`</span><br></pre></td></tr></table></figure><p><strong>重启</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@docker01 ~]$ docker restart `docker ps -a -q`</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200611085918923.png" alt="image-20200611085918923"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">attach      Attach to a running container       <span class="comment"># 当前shell下attach连接指定运行的镜像</span></span><br><span class="line">build       Build an image from a Dockerfile        <span class="comment"># 通过Dockerfile定制镜像</span></span><br><span class="line">commit      Create a new image from a container changes  <span class="comment">#提交当前容器为新的镜像</span></span><br><span class="line">cp          Copy files/folders between a container and the <span class="built_in">local</span> filesystem <span class="comment">#从容器中拷贝指定文件或目录到宿主机中</span></span><br><span class="line">create      Create a new container   <span class="comment"># 创建一个新的容器，同run,但不启动容器</span></span><br><span class="line">diff        Inspect changes to files or directories on a container<span class="string">&#x27;s filesystem #查看docker容器的变化</span></span><br><span class="line"><span class="string">events      Get real time events from the server   # 从docker服务获取容器实时事件</span></span><br><span class="line"><span class="string">exec        Run a command in a running container    # 在已存在的容器上运行命令</span></span><br><span class="line"><span class="string">export      Export a container filesystem as a tar archive # 导出容器的内容流作为一个tar归档文件[对应import]</span></span><br><span class="line"><span class="string">history     Show the history of an image            # 展示一个镜像形成历史</span></span><br><span class="line"><span class="string">images      List images                             # 列出系统当前的镜像</span></span><br><span class="line"><span class="string">import      Import the contents from a tarball to create a filesystem image # 从tar包中的内容创建一个新的文件系统镜像[对应export]</span></span><br><span class="line"><span class="string">info        Display system-wide information         # 显示系统相关信息</span></span><br><span class="line"><span class="string">inspect     Return low-level information on Docker objects # 查看容器详细信息</span></span><br><span class="line"><span class="string">kill        Kill one or more running containers     # 杀死指定的docker容器</span></span><br><span class="line"><span class="string">load        Load an image from a tar archive or STDIN # 从一个tar包加载一个镜像[对应save]</span></span><br><span class="line"><span class="string">login       Log in to a Docker registry  # 注册或者登录一个docker源服务器</span></span><br><span class="line"><span class="string">logout      Log out from a Docker registry  # 从当前Docker registry退出</span></span><br><span class="line"><span class="string">logs        Fetch the logs of a container  # 输出当前容器日志信息</span></span><br><span class="line"><span class="string">pause       Pause all processes within one or more containers      # 暂停容器</span></span><br><span class="line"><span class="string">port        List port mappings or a specific mapping for the container # 查看映射端口对应容器内部源端口</span></span><br><span class="line"><span class="string">ps          List containers  # 列出容器列表</span></span><br><span class="line"><span class="string">pull        Pull an image or a repository from a registry # 从docker镜像源服务器拉取指定镜像或库镜像</span></span><br><span class="line"><span class="string">push        Push an image or a repository to a registry   # 推送指定镜像或者库镜像至docker源服务器</span></span><br><span class="line"><span class="string">rename      Rename a container  # 给docker容器重新命名</span></span><br><span class="line"><span class="string">restart     Restart one or more containers  # 重启运行的容器</span></span><br><span class="line"><span class="string">rm          Remove one or more containers  # 移除一个或者多个容器</span></span><br><span class="line"><span class="string">rmi         Remove one or more images  # 移除一个或者多个镜像[无容器使用该镜像时才可删除，否则需删除相关容器才可继续或 -f 强制删除]</span></span><br><span class="line"><span class="string">run         Run a command in a new container  # 创建一个新的容器并运行一个命令</span></span><br><span class="line"><span class="string">save        Save one or more images to a tar archive (streamed to STDOUT by default) # 保存一个镜像为一个tar包[对应load]</span></span><br><span class="line"><span class="string">search      Search the Docker Hub for images  # 在docker hub中搜索镜像</span></span><br><span class="line"><span class="string">start       Start one or more stopped containers  # 启动容器</span></span><br><span class="line"><span class="string">stats       Display a live stream of container(s) resource usage statistics # 实时显示容器资源使用统计</span></span><br><span class="line"><span class="string">stop        Stop one or more running containers  # 停止容器</span></span><br><span class="line"><span class="string">tag         Create a tag TARGET_IMAGE that refers to SOURCE_IMAGE # 给源中镜像打标签</span></span><br><span class="line"><span class="string">top         Display the running processes of a container     # 查看容器中运行的进程信息</span></span><br><span class="line"><span class="string">unpause     Unpause all processes within one or more containers # 取消暂停容器</span></span><br><span class="line"><span class="string">update      Update configuration of one or more containers  # 更新一个或多个容器配置</span></span><br><span class="line"><span class="string">version     Show the Docker version information  # 查看docker版本号 </span></span><br><span class="line"><span class="string">wait        Block until one or more containers stop, then print their exit codes # 截取容器停止时的退出状态值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 云计算 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-01-介绍</title>
      <link href="2020/07/18/Python-01-%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/07/18/Python-01-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="Python介绍"><a href="#Python介绍" class="headerlink" title="Python介绍"></a>Python介绍</h1><h2 id="Python的出生与应用"><a href="#Python的出生与应用" class="headerlink" title="Python的出生与应用"></a>Python的出生与应用</h2><p>python的创始人为吉多·范罗苏姆（Guido van Rossum）。1989年的圣诞节期间，吉多·范罗苏姆（中文名字：龟叔）为了在阿姆斯特丹打发时间，决心开发一个新的脚本解释程序，作为ABC语言的一种继承。 </p><p>龟叔：2005年加入谷歌至2012年，2013年加入Dropbox直到现在，依然掌握着Python发展的核心方向，被称为仁慈的独裁者）。</p><p>Python可以应用于众多领域，如：数据分析、组件集成、网络服务、图像处理、数值计算和科学计算等众多领域。目前业内几乎所有大中型互联网企业都在使用Python，如：Youtube、Dropbox、BT、Quora（中国知乎）、豆瓣、知乎、Google、Yahoo!、Facebook、NASA、百度、腾讯、汽车之家、美团等。</p><p><strong>目前Python主要应用领域：</strong></p><ul><li><strong>云计算</strong>: 云计算最火的语言， 典型应用OpenStack</li><li><strong>WEB开发</strong>: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣。。。， 典型WEB框架有Django</li><li><strong>科学运算、人工智能</strong>: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas</li><li><strong>系统运维</strong>: 运维人员必备语言</li><li><strong>金融</strong>：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c,c++,java,尤其擅长策略回测</li><li><strong>图形GUI</strong>: PyQT, WxPython,TkInter</li></ul><p><strong>Python在一些公司的应用：</strong> </p><ul><li>谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、Google广告等项目都在大量使用Python开发</li><li>CIA: 美国中情局网站就是用Python开发的</li><li>NASA: 美国航天局(NASA)大量使用Python进行数据分析和运算</li><li>YouTube:世界上最大的视频网站YouTube就是用Python开发的</li><li>Dropbox:美国最大的在线云存储网站，全部用Python实现，每天网站处理10亿个文件的上传和下载</li><li>Instagram:美国最大的图片分享社交网站，每天超过3千万张照片被分享，全部用python开发</li><li>Facebook:大量的基础库均通过Python实现的</li><li>Redhat: 世界上最流行的Linux发行版本中的yum包管理工具就是用python开发的</li><li>豆瓣: 公司几乎所有的业务均是通过Python开发的</li><li>知乎: 国内最大的问答社区，通过Python开发(国外Quora)</li><li>春雨医生：国内知名的在线医疗网站是用Python开发的</li><li>除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用Python完成各种各样的任务。 </li></ul><p><strong>python发展史</strong></p><ul><li>1989年，为了打发圣诞节假期，Guido开始写Python语言的编译器。Python这个名字，来自Guido所挚爱的电视剧Monty Python’s Flying Circus。他希望这个新的叫做Python的语言，能符合他的理想：创造一种C和shell之间，功能全面，易学易用，可拓展的语言。</li><li>1991年，第一个Python编译器诞生。它是用C语言实现的，并能够调用C语言的库文件。从一出生，Python已经具有了：类，函数，异常处理，包含表和词典在内的核心数据类型，以及模块为基础的拓展系统。</li><li>Granddaddy of Python web frameworks, Zope 1 was released in 1999</li><li>Python 1.0 - January 1994 增加了 <a href="https://en.wikipedia.org/wiki/Lambda_calculus">lambda</a>, <a href="https://en.wikipedia.org/wiki/Map_(higher-order_function)">map</a>, <a href="https://en.wikipedia.org/wiki/Filter_(higher-order_function)">filter</a> and <a href="https://en.wikipedia.org/wiki/Fold_(higher-order_function)">reduce</a>.</li><li>Python 2.0 - October 16, 2000，加入了内存回收机制，构成了现在Python语言框架的基础</li><li>Python 2.4 - November 30, 2004, 同年目前最流行的WEB框架Django 诞生</li><li>Python 2.5 - September 19, 2006</li><li>Python 2.6 - October 1, 2008</li><li>Python 2.7 - July 3, 2010</li><li>In November 2014, it was announced that Python 2.7 would be supported until 2020, and reaffirmed that there would be no 2.8 release as users were expected to move to Python 3.4+ as soon as possible</li><li>Python 3.0 - December 3, 2008</li><li>Python 3.1 - June 27, 2009</li><li>Python 3.2 - February 20, 2011</li><li>Python 3.3 - September 29, 2012</li><li>Python 3.4 - March 16, 2014</li><li>Python 3.5 - September 13, 2015</li><li>Python 3.6 - December 16,2016</li></ul><h2 id="Python是什么编程语言"><a href="#Python是什么编程语言" class="headerlink" title="Python是什么编程语言"></a>Python是什么编程语言</h2><blockquote><p>编程语言主要从以下几个角度为进行分类，编译型和解释型、静态语言和动态语言、强类型定义语言和弱类型定义语言</p></blockquote><h3 id="编译型与解释型"><a href="#编译型与解释型" class="headerlink" title="编译型与解释型"></a>编译型与解释型</h3><p><strong>编译器</strong>是把源程序的每一条语句都编译成机器语言,并保存成二进制文件,这样运行时计算机可以直接以机器语言来运行此程序,速度很快; </p><p>而<strong>解释器</strong>则是只在执行程序时,才一条一条的解释成机器语言给计算机来执行,所以运行速度是不如编译后的程序运行的快的. </p><p>这是因为计算机不能直接认识并执行我们写的语句,它只能认识机器语言(是二进制的形式)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200708110723595.png" alt="image-20200708110723595"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200708110800406.png" alt="image-20200708110800406"></p><p><strong>编译型</strong><br>优点：编译器一般会有预编译的过程对代码进行优化。因为编译只做一次，运行时不需要编译，所以编译型语言的程序执行效率高。可以脱离语言环境独立运行。<br>缺点：编译之后如果需要修改就需要整个模块重新编译。编译的时候根据对应的运行环境生成机器码，不同的操作系统之间移植就会有问题，需要根据运行的操作系统环境编译不同的可执行文件。</p><p><strong>解释型</strong><br>优点：有良好的平台兼容性，在任何环境中都可以运行，前提是安装了解释器（虚拟机）。灵活，修改代码的时候直接修改就可以，可以快速部署，不用停机维护。</p><p>缺点：每次运行的时候都要解释一遍，性能上不如编译型语言。</p><h3 id="动态语言和静态语言"><a href="#动态语言和静态语言" class="headerlink" title="动态语言和静态语言"></a>动态语言和静态语言</h3><p>通常我们所说的动态语言、静态语言是指动态类型语言和静态类型语言。</p><p>（1）动态类型语言：动态类型语言是指在运行期间才去做数据类型检查的语言，也就是说，在用动态类型的语言编程时，永远也不用给任何变量指定数据类型，该语言会在你第一次赋值给变量时，在内部将数据类型记录下来。Python和Ruby就是一种典型的动态类型语言，其他的各种脚本语言如VBScript也多少属于动态类型语言。</p><p>（2）静态类型语言：静态类型语言与动态类型语言刚好相反，它的数据类型是在编译其间检查的，也就是说在写程序时要声明所有变量的数据类型，C/C++是静态类型语言的典型代表，其他的静态类型语言还有C#、JAVA等。</p><h3 id="强类型定义语言和弱类型定义语言"><a href="#强类型定义语言和弱类型定义语言" class="headerlink" title="强类型定义语言和弱类型定义语言"></a>强类型定义语言和弱类型定义语言</h3><p>（1）强类型定义语言：强制数据类型定义的语言。也就是说，一旦一个变量被指定了某个数据类型，如果不经过强制转换，那么它就永远是这个数据类型了。举个例子：如果你定义了一个整型变量a,那么程序根本不可能将a当作字符串类型处理。强类型定义语言是类型安全的语言。</p><p>（2）弱类型定义语言：数据类型可以被忽略的语言。它与强类型定义语言相反, 一个变量可以赋不同数据类型的值。</p><p>强类型定义语言在速度上可能略逊色于弱类型定义语言，但是强类型定义语言带来的严谨性能够有效的避免许多错误。另外，“这门语言是不是动态语言”与“这门语言是否类型安全”之间是完全没有联系的！<br>例如：Python是动态语言，是强类型定义语言（类型安全的语言）; VBScript是动态语言，是弱类型定义语言（类型不安全的语言）; JAVA是静态语言，是强类型定义语言（类型安全的语言）。</p><p>通过上面这些介绍，我们可以得出，<strong>python是一门动态解释性的强类型定义语言。</strong></p><h2 id="Python的优缺点"><a href="#Python的优缺点" class="headerlink" title="Python的优缺点"></a>Python的优缺点</h2><p>先看优点</p><ol><li>Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。</li><li>开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。</li><li>高级语言————当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节</li><li>可移植性————由于它的开源本质，Python已经被移植在许多平台上（经过改动使它能够工 作在不同平台上）。如果你小心地避免使用依赖于系统的特性，那么你的所有Python程序无需修改就几乎可以在市场上所有的系统平台上运行</li><li>可扩展性————如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。</li><li>可嵌入性————你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚本功能。</li></ol><p>再看缺点：</p><ol><li>速度慢，Python 的运行速度相比C语言确实慢很多，跟JAVA相比也要慢一些，因此这也是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来，比如你用C运一个程序花了0.01s,用Python是0.1s,这样C语言直接比Python快了10倍,算是非常夸张了，但是你是无法直接通过肉眼感知的，因为一个正常人所能感知的时间最小单位是0.15-0.4s左右，哈哈。其实在大多数情况下Python已经完全可以满足你对程序速度的要求，除非你要写对速度要求极高的搜索引擎等，这种情况下，当然还是建议你用C去实现的。</li><li>代码不能加密，因为PYTHON是解释性语言，它的源码都是以名文形式存放的，不过我不认为这算是一个缺点，如果你的项目要求源代码必须是加密的，那你一开始就不应该用Python来去实现。</li><li>线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是<a href="http://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80">计算机程序设计语言</a><a href="http://zh.wikipedia.org/wiki/%E8%A7%A3%E9%87%8A%E5%99%A8">解释器</a>用于<a href="http://zh.wikipedia.org/wiki/%E5%90%8C%E6%AD%A5">同步</a><a href="http://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B">线程</a>的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在Windows上为Win thread，完全由操作系统调度线程的执行。一个python解释器进程内有一条主线程，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止多线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。</li></ol><p>当我们编写Python代码时，我们得到的是一个包含Python代码的以<code>.py</code>为扩展名的文本文件。要运行代码，就需要Python解释器去执行<code>.py</code>文件。</p><p>由于整个Python语言从规范到解释器都是开源的，所以理论上，只要水平够高，任何人都可以编写Python解释器来执行Python代码（当然难度很大）。事实上，确实存在多种Python解释器。</p><h2 id="Python的种类"><a href="#Python的种类" class="headerlink" title="Python的种类"></a>Python的种类</h2><p><strong>CPython</strong></p><p>当我们从<a href="https://www.python.org/">Python官方网站</a>下载并安装好Python 3.6后，我们就直接获得了一个官方版本的解释器：CPython。这个解释器是用C语言开发的，所以叫CPython。在命令行下运行<code>python</code>就是启动CPython解释器。</p><p>CPython是使用最广的Python解释器。教程的所有代码也都在CPython下执行。</p><p><strong>IPython</strong></p><p>IPython是基于CPython之上的一个交互式解释器，也就是说，IPython只是在交互方式上有所增强，但是执行Python代码的功能和CPython是完全一样的。好比很多国产浏览器虽然外观不同，但内核其实都是调用了IE。</p><p>CPython用<code>&gt;&gt;&gt;</code>作为提示符，而IPython用<code>In [序号]:</code>作为提示符。</p><p><strong>PyPy</strong></p><p>PyPy是另一个Python解释器，它的目标是执行速度。PyPy采用<a href="http://en.wikipedia.org/wiki/Just-in-time_compilation">JIT技术</a>，对Python代码进行动态编译（注意不是解释），所以可以显著提高Python代码的执行速度。</p><p>绝大部分Python代码都可以在PyPy下运行，但是PyPy和CPython有一些是不同的，这就导致相同的Python代码在两种解释器下执行可能会有不同的结果。如果你的代码要放到PyPy下执行，就需要了解<a href="http://pypy.readthedocs.org/en/latest/cpython_differences.html">PyPy和CPython的不同点</a>。</p><p><strong>Jython</strong></p><p>Jython是运行在Java平台上的Python解释器，可以直接把Python代码编译成Java字节码执行。</p><p><strong>IronPython</strong></p><p>IronPython和Jython类似，只不过IronPython是运行在微软.Net平台上的Python解释器，可以直接把Python代码编译成.Net的字节码。</p><p><strong>小结：</strong></p><p>　　Python的解释器很多，但使用最广泛的还是CPython。如果要和Java或.Net平台交互，最好的办法不是用Jython或IronPython，而是通过网络调用来交互，确保各程序之间的独立性。</p><h1 id="Python安装"><a href="#Python安装" class="headerlink" title="Python安装"></a>Python安装</h1><p>略</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-03-session集群&amp;安全</title>
      <link href="2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-03-session%E9%9B%86%E7%BE%A4-%E5%AE%89%E5%85%A8/"/>
      <url>2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-03-session%E9%9B%86%E7%BE%A4-%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Tomcat-Session集群"><a href="#Tomcat-Session集群" class="headerlink" title="Tomcat Session集群"></a>Tomcat Session集群</h1><p>参考文档:<a href="https://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html">https://tomcat.apache.org/tomcat-9.0-doc/cluster-howto.html</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Cluster</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.tcp.SimpleTcpCluster&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">channelSendOptions</span>=<span class="string">&quot;8&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.session.DeltaManager&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">expireSessionsOnShutdown</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">notifyListenersOnReplication</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">Channel</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.group.GroupChannel&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Membership</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.membership.McastService&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">address</span>=<span class="string">&quot;228.0.0.4&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">port</span>=<span class="string">&quot;45564&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">frequency</span>=<span class="string">&quot;500&quot;</span></span></span><br><span class="line"><span class="tag">                        <span class="attr">dropTime</span>=<span class="string">&quot;3000&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Receiver</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">address</span>=<span class="string">&quot;auto&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">port</span>=<span class="string">&quot;4000&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">autoBind</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">selectorTimeout</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">                      <span class="attr">maxThreads</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">Sender</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.transport.ReplicationTransmitter&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">Transport</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.transport.nio.PooledParallelSender&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Sender</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Interceptor</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.group.interceptors.TcpFailureDetector&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Interceptor</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.group.interceptors.MessageDispatchInterceptor&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">Channel</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.tcp.ReplicationValve&quot;</span></span></span><br><span class="line"><span class="tag">                 <span class="attr">filter</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.session.JvmRouteBinderValve&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">Deployer</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.deploy.FarmWarDeployer&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">tempDir</span>=<span class="string">&quot;/tmp/war-temp/&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">deployDir</span>=<span class="string">&quot;/tmp/war-deploy/&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">watchDir</span>=<span class="string">&quot;/tmp/war-listen/&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">watchEnabled</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;<span class="name">ClusterListener</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.ha.session.ClusterSessionListener&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Cluster</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置说明</p><ul><li>Cluster集群配置</li><li>Manager会话管理器配置</li><li>Channel信道配置<ul><li>Membership成员判定。使用什么多播地址、端口多少、间隔时长ms、超时时长ms。同一<br>个多播地址和端口认为同属一个组。使用时修改这个多播地址，以防冲突</li><li>Receiver接收器，多线程接收多个其他节点的心跳、会话信息。默认会从4000到4100依次<br>尝试可用端口。<ul><li><strong>address=”auto”</strong>, auto可能绑定到127.0.0.1上，所以一定要改为可以用的IP上去</li></ul></li><li>Sender多线程发送器，内部使用了tcp连接池。</li><li>Interceptor拦截器</li></ul></li><li>Valve<ul><li>ReplicationValve检测哪些请求需要检测Session，Session数据是否有了变化，需要启动复<br>制过程</li></ul></li><li>ClusterListener<ul><li>ClusterSessionListener集群session侦听器</li></ul></li></ul><p>使用<code>&lt;cluster className=&quot;org.apache.catalina.ha.tcp.simpleTcpCluster&quot; / &gt;</code></p><p>添加到<code>&lt;Engine&gt;</code>所有虚拟主机都可以启用Session复制</p><p>添加到<code>&lt;Host&gt;</code>，该虚拟主机可以启用Session复制</p><p>最后，在应用程序内部启用了才可以使用</p><p>前提:</p><ul><li>时间同步，确保NTP或Chrony服务正常运行。<code>systemctl status chronyd</code></li><li>防火墙规则。<code>systemctl stop firewalld</code></li></ul><table><thead><tr><th>IP</th><th>主机名</th><th>服务</th><th></th></tr></thead><tbody><tr><td>192.168.142.151</td><td>t0</td><td>调度器</td><td>Nginx、Httpd</td></tr><tr><td>192.168.142.152</td><td>t1</td><td>tomcat1</td><td>JDK8、Tomcat8</td></tr><tr><td>192.168.142.153</td><td>t2</td><td>tomcat2</td><td>JDK8、Tomcat8</td></tr></tbody></table><p>本次把多播复制的配置放到缺省虚拟主机里面，即Host之下。</p><p>特别注意<strong>修改Receiver的address属性为一个本机可对外的IP地址。</strong></p><p>t2的server.xml中，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;t1.kinmfer.com&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">其他略去</span><br><span class="line"><span class="tag">&lt;<span class="name">Receiver</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">address</span>=<span class="string">&quot;192.168.142.152&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">port</span>=<span class="string">&quot;4000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">autoBind</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">selectorTimeout</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxThreads</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>t3的server.xml中，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;t2.kinmfer.com&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">其他略去</span><br><span class="line"><span class="tag">&lt;<span class="name">Receiver</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.tribes.transport.nio.NioReceiver&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">address</span>=<span class="string">&quot;192.168.142.153&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">port</span>=<span class="string">&quot;4000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">autoBind</span>=<span class="string">&quot;100&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">selectorTimeout</span>=<span class="string">&quot;5000&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">maxThreads</span>=<span class="string">&quot;6&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>Tomcat重启后，ss命令能看到tomcat监听在4000端口上</p><p>尝试使用刚才配置过得负载均衡(<strong>移除Session黏性</strong>)，测试发现Session还是变来变去。</p><p>准备web.xml</p><p>在应用中增加WEB-INF，从全局复制一个web.xml过来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp &#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;conf&#x2F;web.xml &#x2F;data&#x2F;webapps&#x2F;ROOT&#x2F;WEB-INF&#x2F;</span><br></pre></td></tr></table></figure><p>为web.xml的<code>&lt;web-app&gt;</code>标签增加子标签<code>&lt;distributable/&gt;</code>来开启该应用程序的分布式。</p><p>重启全部Tomcat，通过负载均衡调度到不同节点，返回的SessionID不变了。</p><h1 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h1><p>NoSQL是对非SQL、非传统关系型数据库的统称。<br>NoSQL一词诞生于1998年，2009年这个词汇被再次提出指非关系型、分布式、不提供ACID的数据库设<br>计模式。<br>随着互联网时代的到来，数据爆发式增长，数据库技术发展日新月异，要适应新的业务需求。<br>随着移动互联网、物联网的到来，大数据的技术中NoSQL也同样重要。<br><a href="https://db-engines.com/en/ranking">https://db-engines.com/en/ranking</a></p><p>分类</p><ul><li>Key-value Store<ul><li>redis、memcached</li></ul></li><li>Document Store<ul><li>mongodb、CouchDB</li></ul></li><li>Column Store列存数据库，Column-Oriented DB<ul><li>HBase、Cassandra</li></ul></li><li>Graph DB<ul><li>Neo4j</li></ul></li><li>Time Series时序数据库<ul><li>InfluxDB</li></ul></li></ul><h1 id="Memcached"><a href="#Memcached" class="headerlink" title="Memcached"></a>Memcached</h1><p>Memcached只支持能序列化的数据类型，不支持持久化，基于Key-Value的内存缓存系统。</p><h2 id="内存分配机制"><a href="#内存分配机制" class="headerlink" title="内存分配机制"></a>内存分配机制</h2><p>应用程序运行需要使用内存存储数据，但对于一个缓存系统来说，申请内存、释放内存将十分频繁，非<br>常容易导致大量内存碎片，最后导致无连续可用内存可用。</p><p>Memcached采用了Slab Allocator机制来分配、管理内存。</p><ul><li>Page:分配给Slab的内存空间，默认为1MB，分配后就得到一个Slab。Slab分配之后内存按照固<br>定字节大小等分成chunk。</li><li>Chunk:用于缓存记录kv值的内存空间。Memcached会根据数据大小选择存到哪一个chunk中，<br>假设chunk有128bytes、64bytes，数据只有100bytes存储在128bytes中，存在些浪费。<ul><li>Chunk最大就是Page的大小，即一个Page中就一个Chunk</li></ul></li><li>Slab Class: Slab按照大小分组，就组成不同的Slab Class</li></ul><h2 id="懒过期Lazy-Expiration"><a href="#懒过期Lazy-Expiration" class="headerlink" title="懒过期Lazy Expiration"></a>懒过期Lazy Expiration</h2><p>memcached不会监视数据是否过期，而是在取数据时才看是否过期，过期的把数据有效期限标识为0<br>并不清除该数据。以后可以覆盖该位置存储其它数据。</p><h2 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h2><p>当内存不足时，memcached会使用LRU (Least Recently Used）机制来查找可用空间，分配给新纪录使用。</p><h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>Memcached集群，称为基于客户端的分布式集群。</p><p>Memcached集群内部并不互相通信，一切都需要客户端连接到Memcached服务器后自行组织这些节点，并决定数据存储的节点。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">dnf install -y memcached</span><br><span class="line"></span><br><span class="line">rpm -ql memcached</span><br><span class="line">/etc/sysconfig/memcached</span><br><span class="line">/usr/bin/memcached</span><br><span class="line">/usr/bin/memcached-tool</span><br><span class="line">/usr/lib/systemd/system/memcached.service</span><br><span class="line">/usr/share/doc/memcached-1.4.15</span><br><span class="line">/usr/share/doc/memcached-1.4.15/AUTHORS</span><br><span class="line">/usr/share/doc/memcached-1.4.15/CONTRIBUTORS</span><br><span class="line">/usr/share/doc/memcached-1.4.15/COPYING</span><br><span class="line">/usr/share/doc/memcached-1.4.15/ChangeLog</span><br><span class="line">/usr/share/doc/memcached-1.4.15/NEWS</span><br><span class="line">/usr/share/doc/memcached-1.4.15/README.md</span><br><span class="line">/usr/share/doc/memcached-1.4.15/protocol.txt</span><br><span class="line">/usr/share/doc/memcached-1.4.15/readme.txt</span><br><span class="line">/usr/share/doc/memcached-1.4.15/threads.txt</span><br><span class="line">/usr/share/man/man1/memcached-tool.1.gz</span><br><span class="line">/usr/share/man/man1/memcached.1.gz</span><br><span class="line"></span><br><span class="line">cat /usr/lib/systemd/system/memcached.service</span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">EnvironmentFile=-/etc/sysconfig/memcached</span><br><span class="line">ExecStart=/usr/bin/memcached -u <span class="variable">$USER</span>-p <span class="variable">$PORT</span> -m <span class="variable">$CACHESIZE</span>-c <span class="variable">$MAXCONN</span> <span class="variable">$OPTIONS</span></span><br><span class="line"></span><br><span class="line">cat /etc/sysconfig/memcached</span><br><span class="line">PORT=<span class="string">&quot;11211&quot;</span></span><br><span class="line">USER=<span class="string">&quot;memcached&quot;</span></span><br><span class="line">MAXCONN=<span class="string">&quot;1024&quot;</span></span><br><span class="line">CACHESIZE=<span class="string">&quot;64&quot;</span></span><br><span class="line">OPTIONS=<span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">前台显示看看效果</span><br><span class="line">memcached -u memcached -p 11211 -f 1.25 -vv</span><br><span class="line"></span><br><span class="line">systemctl start memcached</span><br></pre></td></tr></table></figure><p>修改memcached运行参数，可以使用下面的选项修改/etc/sysconfig/memcached文件</p><ul><li>-u username memcached运行的用户身份，必须普通用户</li><li>-p 绑定的端口，默认11211</li><li>-m num最大内存，单位MB，默认64MB</li><li>-c num最大连接数，缺省1024</li><li>-d 守护进程方式运行</li><li>-f 增长因子Growth Factor，默认1.25</li><li>-v 详细信息，-vv能看到详细信息</li><li>-M 内存耗尽，不许LRU</li><li>-U 设置UDP监听端口，0表示禁用UDP</li></ul><h1 id="session共享服务器"><a href="#session共享服务器" class="headerlink" title="session共享服务器"></a>session共享服务器</h1><h2 id="msm"><a href="#msm" class="headerlink" title="msm"></a>msm</h2><p>msm (memcached session manager)提供将Tomcat的session保持到memcached或redis的程序，可以实现高可用。</p><p>目前项目托管在Github，<a href="https://github.com/magro/memcached-session-manager">https://github.com/magro/memcached-session-manager</a></p><p>支持Tomcat的6.x、7.x、8.x、9.x。</p><ul><li>Tomcat的Session管理类，Tomcat版本不同<ul><li>memcached-session-manager-2.3.2.jar</li><li>memcached-session-manager-tc8-2.3.2.jar</li></ul></li><li>Session数据的序列化、反序列化类<ul><li>官方推荐kyro</li><li>在webapp中WEB-INF/lib/下</li></ul></li><li>驱动类<ul><li>memcached(spymemcached.jar)</li><li>Redis(jedis.jar)</li></ul></li></ul><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><p><a href="https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration">https://github.com/magro/memcached-session-manager/wiki/SetupAndConfiguration</a></p><p>将spymemcached.jar、memcached-session-manage、kyro相关的jar文件都放到Tomcat的lib目录中<br>去，这个目录是<code>$CATALINA_HOME/lib/</code>，对应本次安装就是/usr/local/tomcat/lib。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">asm-5.2.jar</span><br><span class="line">kryo-3.0.3.jar</span><br><span class="line">kryo-serializers-0.45.jar</span><br><span class="line">memcached-session-manager-2.3.2.jar</span><br><span class="line">memcached-session-manager-tc8-2.3.2.jar</span><br><span class="line">minlog-1.3.1.jar</span><br><span class="line">msm-kryo-serializer-2.3.2.jar</span><br><span class="line">objenesis-2.6.jar</span><br><span class="line">reflectasm-1.11.9.jar</span><br><span class="line">spymemcached-2.12.3.jar</span><br></pre></td></tr></table></figure><h2 id="sticky模式"><a href="#sticky模式" class="headerlink" title="sticky模式"></a>sticky模式</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>当请求结束时Tomcat的session会送给memcached备份。即Tomcat session为<strong>主</strong>session,<br>memcached session为<strong>备</strong>session，使用memcached相当于备份了一份Session。</p><p>查询Session时Tomcat会优先使用自己内存的Session，Tomcat通过jvmRoute发现不是自己的<br>Session，便从memcached中找到该Session，更新本机Session，请求完成后更新memcached。</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;t1&gt;   &lt;t2&gt;</span><br><span class="line">  . \ &#x2F; .</span><br><span class="line">  .  X  .</span><br><span class="line">  . &#x2F; \ .</span><br><span class="line">&lt;m1&gt;   &lt;m2&gt;</span><br></pre></td></tr></table></figure><p>t1和m1部署在一台主机上，t2和m2部署在同一台。</p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>放到<code>$CATALINA_HOME/conf/context.xml</code> 中</p><p>特别注意，t1配置中为failoverNodes=”n1”，t2配置为failoverNodes=”n2”</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">以下是sticky的配置</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">memcachedNodes</span>=<span class="string">&quot;n1:192.168.142.152:11211,n2:192.168.142.153:11211&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">failoverNodes</span>=<span class="string">&quot;n1&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">requestUriIgnorePattern</span>=<span class="string">&quot;.*\.(ico|pnglgifljpg|cssljs)$&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">transcoderFactoryClass</span>=<span class="string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>memcachedNodes=&quot;n1:host1.yourdomain.com:11211,n2:host2.yourdomain.com:11211&quot;</code></p><p>memcached的节点们; n1、n2只是别名，可以重新命名。</p><p>failoverNodes故障转移节点，n1是备用节点，n2是主存储节点。另一台Tomcat将n1改为n2，其主节<br>点是n1，备用节点是n2。</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>如果配置成功，可以在logs/catalina.out中看到下面的内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">信息 [t1.kinmfer.com-startStop-1]</span><br><span class="line">de.javakaffee.web.msm.MemcachedSessionService.startInternal</span><br><span class="line">- finished initialization:</span><br><span class="line">- sticky: true</span><br><span class="line">- operation timeout: 1000</span><br><span class="line">- node ids: [n2]</span><br><span class="line">- failover node ids: [n1]</span><br><span class="line">- storage key prefix: null</span><br><span class="line">- locking mode: null (expiration: 5s)</span><br></pre></td></tr></table></figure><p>配置成功后，网页访问以下，页面中看到了Session。然后运行下面的Python程序，就可以看到是否存储到了memcached中了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> memcache <span class="comment"># pip install python-memcached</span></span><br><span class="line"></span><br><span class="line">mc = memcache.client([ <span class="string">&#x27;192.168.142.152:11211&#x27;</span>，<span class="string">&#x27;192.168.142.153:11211&#x27;</span>]，debug=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">stats = mc.get_stats()[<span class="number">0</span>]</span><br><span class="line">print(stats)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> stats[<span class="number">1</span>].items( ):</span><br><span class="line">print(k，v)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">&#x27;-&#x27;</span> * <span class="number">30</span>)</span><br><span class="line"><span class="comment">#查看全部key</span></span><br><span class="line">print(mc.get_stats( <span class="string">&#x27;items&#x27;</span> )) <span class="comment"># stats items返回items: 5:number 1</span></span><br><span class="line">print(<span class="string">&#x27;-·* 30)</span></span><br><span class="line"><span class="string">for x in mc.get_stats( &#x27;</span> cachedump <span class="number">5</span> <span class="number">0</span><span class="string">&#x27; ):# stats cachedump 5 0#5和上面的items返回的值有关;0表示全部</span></span><br><span class="line"><span class="string">print(×)</span></span><br></pre></td></tr></table></figure><p>t1、t2、n1、n2依次启动成功，分别使用<a href="http://t1.kinmfer.com:8080/%E5%92%8Chttp://t2.kinmfer.com:8080/%E8%A7%82%E5%AF%9F%E3%80%82">http://t1.kinmfer.com:8080/和http://t2.kinmfer.com:8080/观察。</a><br>看起负载均衡调度器，通过<a href="http://t0.kinmfer.com来访问看看效果/">http://t0.kinmfer.com来访问看看效果</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">on tomcats</span><br><span class="line">192.168.142.153:8080</span><br><span class="line">sessionID &#x3D; 2A19B1EB6D9649C9FED3E7277FDFD478-n2.Tomcat1</span><br><span class="line">wed Jun 26 16:32:11 CST 2020</span><br><span class="line"></span><br><span class="line">on tomcats</span><br><span class="line">192.168.142.152:8080</span><br><span class="line">sessionID &#x3D; 2A19B1EB6D9649C9FED3E7277FDFD478-n1.Tomcat2</span><br><span class="line">wed Jun 26 16:32:36 CST 2020</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以看到浏览器端被调度到不同Tomcat上，但是都获得了同样的SessionID。</p><h2 id="non-sticky模式"><a href="#non-sticky模式" class="headerlink" title="non-sticky模式"></a>non-sticky模式</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>从msm 1.4.0之后开始支持non-sticky模式。</p><p>Tomcat session为中转Session，如果n1为主session，n2为备session。产生的新的Session会发送给主、备memcached，并清除本地Session。</p><p>n1下线，n2转正。n1再次上线，n2依然是主Session存储节点。</p><h3 id="memcached配置"><a href="#memcached配置" class="headerlink" title="memcached配置"></a>memcached配置</h3><p>放到<code>$CATALINA_HOME/conf/context.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以下是non-sticky的配置</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">memcachedNodes</span>=<span class="string">&quot;n1:192.168.142.152:11211,n2:192.168.142.153:11211&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">sticky</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupAsync</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">lockingMode</span>=<span class="string">&quot;uriPattern:/path1|/path2&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">requestUriIgnorePattern</span>=<span class="string">&quot;.*\.(ico|pnglgifljpglcssljs)$&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">transcoderFactoryClass</span>=<span class="string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><p><strong>下载jedis.jar</strong>，放到<code>$CATALINA_HOME/lib/</code>，对应本次安装就是/usr/local/tomcat/lib。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">dnf install redis -y</span><br><span class="line"></span><br><span class="line">vim /etc/redis.conf</span><br><span class="line"><span class="built_in">bind</span> 8.8.8.0</span><br><span class="line"></span><br><span class="line">systemctl start redis</span><br></pre></td></tr></table></figure><p>放到<code>$CATALINA_HOME/conf/context.xml</code>中</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">以下是non-sticky的配置</span><br><span class="line"><span class="tag">&lt;<span class="name">Context</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">Manager</span> <span class="attr">className</span>=<span class="string">&quot;de.javakaffee.web.msm.MemcachedBackupSessionManager&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">memcachedNodes</span>=<span class="string">&quot;redis://192.168.142.152:6379&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">sticky</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">sessionBackupAsync</span>=<span class="string">&quot;false&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">lockingMode</span>=<span class="string">&quot;uriPattern:/path1|/path2&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">requestUriIgnorePattern</span>=<span class="string">&quot;.*\.(ico|pnglgifljpglcssljs)$&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">transcoderFactoryClass</span>=<span class="string">&quot;de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="Session粘性总结"><a href="#Session粘性总结" class="headerlink" title="Session粘性总结"></a>Session粘性总结</h1><p>通过多组实验，使用不同技术实现了session持久机制</p><ol><li>session绑定，基于IP或session cookie的。其部署简单，尤其基于session黏性的方式，粒度小，<br>对负载均衡影响小。但一旦后端服务器有故障，其上的session丢失。</li><li>session复制集群，基于tomcat实现多个服务器内共享同步所有session。此方法可以保证任意一<br>台后端服务器故障，其余各服务器上还都存有全部session，对业务无影响。但是它基于多播实现<br>心跳，TCP单播实现复制，当设备节点过多，这种复制机制不是很好的解决方案。且并发连接多的<br>时候，单机上的所有session占据的内存空间非常巨大，甚至耗尽内存。</li><li>session服务器，将所有的session存储到一个共享的内存空间中，使用多个冗余节点保存<br>session，这样做到session存储服务器的高可用，且占据业务服务器内存较小。是一种比较好的解<br>决session持久的解决方案。</li></ol><p>以上的方法都有其适用性。生产环境中，应根据实际需要合理选择。</p><p>不过以上这些方法都是在内存中实现了session的保持，可以使用数据库或者文件系统，把session数据<br>存储起来，持久化。这样服务器重启后，也可以重新恢复session数据。不过session数据是有时效性<br>的，是否需要这样做，视情况而定。</p><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="配置安全"><a href="#配置安全" class="headerlink" title="配置安全"></a>配置安全</h2><ol><li><p>删除webapps目录下的所有文件，禁用tomcat管理界面；</p></li><li><p>注释或删除tomcat-users.xml文件内的所有用户权限；</p></li><li><p>更改关闭tomcat指令或禁用；</p><p>Tomcat的server.xml中定义了可以直接关闭 Tomcat 实例的管理端口（默认8005）。可以通过 telnet 连接上该端口之后，输入 SHUTDOWN （此为默认关闭指令）即可关闭Tomcat 实例（注意，此时虽然实例关闭了，但是进程还是存在的）。由于默认关闭Tomcat 的端口和指令都很简单。默认端口为8005，指令为SHUTDOWN。</p><p><strong>方案一：</strong></p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">更改端口号和指令：</span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8456&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;itcast_shut&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方案二：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">禁用8005端口：</span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;‐1&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>定义错误页面</p><p>在webapps/ROOT目录下定义错误页面 404.html，500.html；<br>然后在tomcat/conf/web.xml中进行配置 ， 配置错误页面：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error‐page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error‐code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error‐code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/404.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error‐page</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">error‐page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error‐code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error‐code</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">location</span>&gt;</span>/500.html<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error‐page</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样配置之后，用户在访问资源时出现404,500这样的异常，就能看到我们自定义的错误<br>页面，而不会看到异常的堆栈信息，提高了用户体验，也保障了服务的安全性。</p></li></ol><h2 id="应用安全"><a href="#应用安全" class="headerlink" title="应用安全"></a>应用安全</h2><p>在大部分的Web应用中，特别是一些后台应用系统，都会实现自己的安全管理模块（权限模块），用于控制应用系统的安全访问，基本包含两个部分：认证（登录/单点登录）和授权（功能权限、数据权限）两个部分。对于当前的业务系统，可以自己做一套适用于自己业务系统的权限模块，也有很多的应用系统直接使用一些功能完善的安全框架，将其集成到我们的web应用中，如：SpringSecurity、Apache Shiro等。</p><h2 id="传输安全"><a href="#传输安全" class="headerlink" title="传输安全"></a>传输安全</h2><p>Tomcat支持HTTPS</p><ol><li><p>生成密钥库文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keytool -genkeypair -alias [user]  -keyalg [认证类型] -keystore [file]</span><br></pre></td></tr></table></figure><p>输入对应的密钥库密码， 秘钥密码等信息之后，会在当前文件夹中出现一个秘钥库文件：tomcatkey.keystore</p></li><li><p>将秘钥库文件 tomcatkey.keystore 复制到tomcat/conf 目录下。</p></li><li><p>配置tomcat/conf/server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8443&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">protocol</span>=<span class="string">&quot;org.apache.coyote.http11.Http11NioProtocol&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">maxThreads</span>=<span class="string">&quot;150&quot;</span> <span class="attr">schema</span>=<span class="string">&quot;https&quot;</span> <span class="attr">secure</span>=<span class="string">&quot;true&quot;</span> <span class="attr">SSLEnabled</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">SSLHostConfig</span> <span class="attr">certificateVerification</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Certificate</span></span></span><br><span class="line"><span class="tag"><span class="attr">certificateKeystoreFile</span>=<span class="string">&quot;xxx/tomcatkey.keystore&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">certificateKeystorePassword</span>=<span class="string">&quot;itcast&quot;</span> <span class="attr">type</span>=<span class="string">&quot;RSA&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">SSLHostConfig</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Connector</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>访问Tomcat，使用https协议</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-02-部署&amp;负载均衡</title>
      <link href="2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-02-%E9%83%A8%E7%BD%B2&amp;%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-02-%E9%83%A8%E7%BD%B2&amp;%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="常见部署方式"><a href="#常见部署方式" class="headerlink" title="常见部署方式"></a>常见部署方式</h1><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200716160301373.png" alt="image-20200716160301373"></p><ul><li>standalone模式，Tomcat单独运行，直接接受用户的请求，不推荐。</li><li>反向代理，单机运行，提供了一个Nginx作为反向代理，可以做到静态由nginx提供响应，动态jsp<br>代理给tomcat<ul><li>LNMT: Linux +Nginx +MySQL+Tomcat</li><li>LAMT:Linux +Apache (Httpd) +MySQL+Tomcat</li></ul></li><li>前置一台Nginx，给多台Tomcat实例做反向代理和负载均衡调度，Tomcat上部署的纯动态页面更<br>适合<ul><li>LNMT: Linux+Nginx +MySQL+Tomcat</li></ul></li><li>多级代理<ul><li>LNNMT: Linux+Nginx +Nginx+MySQL+Tomcat</li></ul></li></ul><h2 id="Nginx和Tomcat实践"><a href="#Nginx和Tomcat实践" class="headerlink" title="Nginx和Tomcat实践"></a>Nginx和Tomcat实践</h2><h3 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h3><p>略</p><h3 id="全部反向代理测试"><a href="#全部反向代理测试" class="headerlink" title="全部反向代理测试"></a>全部反向代理测试</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全部反向代理测试</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="comment"># proxy_pass http://127.0.0.1:8080;#不管什么请求，都会访问后面的localhost虚拟主机</span></span><br><span class="line"><span class="attribute">proxy_pass</span> http://tomcat.kinmfer.com:8080;<span class="comment">#修改服务器的/etc/hosts文件</span></span><br></pre></td></tr></table></figure><p><a href="http://192.168.242.81/%E6%88%96%E8%80%85http://tomcat.kinmfer.com/%E5%85%A8%E9%83%A8%E4%BB%A3%E7%90%86%E7%BB%99%E4%BA%86%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E8%99%9A%E6%8B%9F%E4%B8%BB%E6%9C%BA">http://192.168.242.81/或者http://tomcat.kinmfer.com/全部代理给了自定义的虚拟主机</a><br>注意: tomcat.kinmfer.com需要配置解析，可以通过nginx -t测试。</p><h3 id="动静分离代理"><a href="#动静分离代理" class="headerlink" title="动静分离代理"></a>动静分离代理</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span> /data/webapps/ROOT;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line"><span class="comment">#~*不区分大小写</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.jsp$</span> &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://tomcat.kinmfer.com:8080; <span class="comment"># /etc/hosts</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在/data/webapps/ROOT目录下增加一个index.html。<br><a href="http://192.168.242.81/%E5%92%8Chttp://192.168.242.81/index.jsp%E6%B5%8B%E8%AF%95%E4%B8%80%E4%B8%8B%E7%9C%8B%E7%9C%8B%E3%80%82">http://192.168.242.81/和http://192.168.242.81/index.jsp测试一下看看。</a><br>但是实际上Tomcat不太适合做动静分离，用它来管理程序的图片不好做动静分离部署。</p><h2 id="应用管理"><a href="#应用管理" class="headerlink" title="应用管理"></a>应用管理</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#全部反向代理</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://127.0.0.1:8080;<span class="comment">#不管什么请求，都会访问后面的localhost虚拟主机</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>点击Tomcat首页的右上角的”Manager App”按钮，弹出登录对话框。</p><h3 id="管理界面"><a href="#管理界面" class="headerlink" title="管理界面"></a>管理界面</h3><p>Applications应用程序管理，可以启动、停止、重加载、反部署、清理过期session<br>Deploy可以热部署，也可以部署war文件。</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200716165451568.png" alt="image-20200716165451568"></p><h3 id="Host-Manager虚拟主机管理"><a href="#Host-Manager虚拟主机管理" class="headerlink" title="Host Manager虚拟主机管理"></a>Host Manager虚拟主机管理</h3><p>配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;kinmfer&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123123&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>重启Tomcat，点击”Host Manager”按钮<br>可以新增虚拟主机。</p><h3 id="Httpd和Tomcat实践"><a href="#Httpd和Tomcat实践" class="headerlink" title="Httpd和Tomcat实践"></a>Httpd和Tomcat实践</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dnf install httpd -y</span><br><span class="line">httpd -M</span><br><span class="line">httpd -M | grep proxy</span><br><span class="line">proxy_module (shared)</span><br><span class="line">proxy_ajp_module (shared)</span><br><span class="line">proxy_balancer_module (shared)</span><br><span class="line">proxy_http_module (shared)</span><br></pre></td></tr></table></figure><p><strong>httpd配置</strong></p><p><strong>proxy_http_module</strong>模块代理配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">proxyRequestsoff</span><br><span class="line">ProxyViaon</span><br><span class="line">ProxyPreserveHost on</span><br><span class="line">ProxyPass&#x2F; http:&#x2F;&#x2F;127.8.0.1:8080&#x2F;</span><br><span class="line">ProxyPassReverse &#x2F; http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><ul><li>ProxyRequests: Off关闭正向代理。</li><li>ProxyPass:反向代理指令</li><li>ProxyPassReverse:保留代理的response头不重写（个别除外)</li><li>ProxyPreserveHost: On开启。让代理保留原请求的Host首部</li><li>ProxyVia: On开启。代理的请求响应时提供一个response的via首部</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;http-tomcat.conf</span><br><span class="line"></span><br><span class="line">httpd -t</span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line">&#x2F;usr&#x2F;local&#x2F;tomcat&#x2F;bin&#x2F;startup.sh</span><br></pre></td></tr></table></figure><p><a href="http://192.168.242.81/">http://192.168.242.81/</a><br><a href="http://tomcat.kinmfer.com/">http://tomcat.kinmfer.com/</a><br><a href="http://tomcat.kinmfer.com/index.jsp">http://tomcat.kinmfer.com/index.jsp</a><br>以上3个URL看到了不同的页面，说明ProxyPreserveHost on起了作用。</p><p><strong>proxy_ajp_module</strong>模块代理配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">ServerNametomcat.kinmfer.com</span><br><span class="line">ProxyRequestsOff</span><br><span class="line">ProxyViaOn</span><br><span class="line">ProxyPreserveHost On</span><br><span class="line">ProxyPass&#x2F; ajp:&#x2F;&#x2F;127.0.0.1:8009&#x2F;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>相对来讲，AJP协议基于二进制比使用HTTP协议的连接器效率高些。</p><blockquote><p>网站架构不是一天建成的，都是演化来的。不是最新最时髦的架构，而是最合适的，能驾驭的<br>了、成本可控的架构。</p></blockquote><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>动态服务器的问题，往往就是并发能力太弱，往往需要多台动态服务器一起提供服务。如何把并发的压<br>力分摊，这就需要调度，采用一定的调度策略，将请求分发给不同的服务器，这就是Load Balance负载<br>均衡。<br>当单机的Tomcat，演化出多机多级部署的时候，一个问题便凸显出来，这就是Session。而这个问题的<br>由来，都是由于HTTP协议在设计之初没有想到未来的发展。</p><h2 id="HTTP的无状态，有连接和短链接"><a href="#HTTP的无状态，有连接和短链接" class="headerlink" title="HTTP的无状态，有连接和短链接"></a>HTTP的无状态，有连接和短链接</h2><p>查看此篇博客：</p><h2 id="会话保持方式"><a href="#会话保持方式" class="headerlink" title="会话保持方式"></a>会话保持方式</h2><h3 id="session-sticky会话粘性"><a href="#session-sticky会话粘性" class="headerlink" title="session sticky会话粘性"></a>session sticky会话粘性</h3><p>Session绑定</p><ul><li>nginx: source ip</li><li>HAProxy: cookie</li></ul><p>优点:简单易配置</p><p>缺点:如果目标服务器故障后，如果没有做sessoin持久化，就会丢失session</p><h3 id="session复制集群"><a href="#session复制集群" class="headerlink" title="session复制集群"></a>session复制集群</h3><p>Tomcat自己的提供的多播集群，通过多播将任何一台的session同步到其它节点。</p><p>缺点</p><ul><li>Tomcat的同步节点不宜过多，互相即时通信同步session需要太多带宽</li><li>每一台都拥有全部session，内存占用太多</li></ul><h3 id="session-server"><a href="#session-server" class="headerlink" title="session server"></a>session server</h3><p>session共享服务器，使用memcached、redis做共享的Session服务器。</p><h2 id="规划"><a href="#规划" class="headerlink" title="规划"></a>规划</h2><table><thead><tr><th>IP</th><th>主机名</th><th>服务</th><th></th></tr></thead><tbody><tr><td>192.168.142.151</td><td>t0</td><td>调度器</td><td>Nginx、Httpd</td></tr><tr><td>192.168.142.152</td><td>t1</td><td>tomcat1</td><td>JDK8、Tomcat8</td></tr><tr><td>192.168.142.153</td><td>t2</td><td>tomcat2</td><td>JDK8、Tomcat8</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">每台主机的域名解析</span><br><span class="line">192.168.142.151 t0.kinmfer.com t0</span><br><span class="line">192.168.142.152 t1.kinmfer.com t1</span><br><span class="line">192.168.142.153 t2.kinmfer.com t2</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">环境变量配置</span><br><span class="line">vim /etc/profile.d/tomcat.sh</span><br><span class="line"><span class="built_in">export</span> CATALINA_HOME=/usr/<span class="built_in">local</span>/tomcat</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$CATALINA_HOME</span>/bin:<span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line">项目路径配置</span><br><span class="line">mkdir -pv /data/webapps/ROOT</span><br><span class="line"></span><br><span class="line">编写测试jsp文件，内容在下面</span><br><span class="line">vim /data/webapps/ROOT/index.jsp</span><br><span class="line"></span><br><span class="line">scp -r server.xml 192.168.142.153:/usr/ <span class="built_in">local</span>/tomcat</span><br><span class="line"></span><br><span class="line">启动Tomcat服务</span><br><span class="line">startup.sh</span><br></pre></td></tr></table></figure><h3 id="测试用jsp"><a href="#测试用jsp" class="headerlink" title="测试用jsp"></a>测试用jsp</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java. util.*&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;UTF一8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;lbjsptest&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div&gt;on  &lt;%=request.getServerName()%&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;&lt;%=request.getLocalAddr() + &quot;:&quot; +request.getLocalPort()%&gt;&lt;/div&gt;</span><br><span class="line">&lt;div&gt;SessionID = &lt;span style=&quot;color:blue&quot;&gt;&lt;%=session.getId()%&gt;&lt;/span&gt;&lt;/div&gt;</span><br><span class="line">&lt;%=<span class="keyword">new</span> Date()%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>t1虚拟主机配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;t1.kinmfer.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;t1.kinmfer.com&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure><p>t2虚拟主机配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;t2.kinmfer.com&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;t2.kinmfer.com&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Nginx调度"><a href="#Nginx调度" class="headerlink" title="Nginx调度"></a>Nginx调度</h2><p>Nginx配置如下</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> tomcats &#123;</span><br><span class="line">ip_hash;#可以先禁用看看轮询，之后开启开黏性</span><br><span class="line"><span class="attribute">server</span> t1.kinmfer.com:<span class="number">8080</span>;</span><br><span class="line"><span class="attribute">server</span> t2.kinmfer.com:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(jsp|do)$</span> &#123;</span><br><span class="line"><span class="attribute">proxy_pass</span> http://tomcats;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试<a href="http://t0.kinmfer.com/index.jsp%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E8%BD%AE%E8%AF%A2%E8%B0%83%E5%BA%A6%E6%95%88%E6%9E%9C%E3%80%82">http://t0.kinmfer.com/index.jsp，可以看到轮询调度效果。</a><br>在upstream中使用ip_hash指令，使用客户端IP地址Hash。这个hash值使用IPv4地址的前24位或全部<br>的IPv6地址。</p><h2 id="Httpd调度"><a href="#Httpd调度" class="headerlink" title="Httpd调度"></a>Httpd调度</h2><p>使用<code>httpd -M</code>可以看到proxy_balancer_module,用它来实现负载均衡</p><table><thead><tr><th>方式</th><th>依赖模块</th></tr></thead><tbody><tr><td>http负载均衡</td><td>mod_proxy<br/>mod_proxy_http<br/>mod_proxy_balancer</td></tr><tr><td>ajp负载均衡</td><td>mod_proxy<br/>mod_proxy_ajp<br/>mod_proxy_balancer</td></tr></tbody></table><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">关闭httpd默认主机</span><br><span class="line"><span class="built_in">cd</span> /etc/httpd/conf</span><br><span class="line">vim httpd.conf</span><br><span class="line">注释掉<span class="comment">#DocumentRoot &quot; /var/www/ html&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> ../conf.d</span><br><span class="line">vim vhosts.conf</span><br><span class="line"></span><br><span class="line">httpd -t</span><br><span class="line"></span><br><span class="line">systemctl start httpd</span><br></pre></td></tr></table></figure><h3 id="负载均衡配置说明"><a href="#负载均衡配置说明" class="headerlink" title="负载均衡配置说明"></a>负载均衡配置说明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">配置代理到balancer</span><br><span class="line">ProxyPass [path] !|url [key&#x3D;value [key&#x3D;value ...]]</span><br><span class="line"></span><br><span class="line">Balancer成员</span><br><span class="line">BalancerMember [balancerurl] url [key&#x3D;value [key&#x3D;value ...]]</span><br><span class="line"></span><br><span class="line">设置Balancer或参数</span><br><span class="line">ProxySet url key&#x3D;value [key&#x3D;value ...]</span><br></pre></td></tr></table></figure><p><strong>ProxyPass和BalancerMember指令参数</strong></p><table><thead><tr><th>参数</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>min</td><td>0</td><td>连接池最小容量</td></tr><tr><td>max</td><td>1-n</td><td>连接池最大容量</td></tr><tr><td>retry</td><td>60</td><td>apache请求送到后端服务器错误后等待的时间秒数。0表示立即重试</td></tr></tbody></table><p><strong>Balancer参数</strong></p><table><thead><tr><th>参数</th><th>缺省值</th><th>说明</th></tr></thead><tbody><tr><td>loadfactor</td><td></td><td>定义负载均衡后端服务器权重，取值范围1-100</td></tr><tr><td>lbmethod</td><td>byrequests</td><td>负载均衡调度方法。<br/>byrequests基于权重的统计请求个数进行调度;<br/>bytrafficz执行基于权重的流量计数调度;<br/>bybusyness通过考量每个后端服务器当前负载进行调度</td></tr><tr><td>maxattempts</td><td>1</td><td>放弃请求前实现故障转移的次数，默认为1，其最大值不应该大于总的节点数</td></tr><tr><td>nofailover</td><td>Off</td><td>如果后端服务器没有Session副本，可以设置为On不允许故障转移。<br/>Off故障可以转移</td></tr><tr><td>stickysession</td><td></td><td>调度器的sticky session名字，根据web后台编程语言不同，可以设置为]SESSIONID或PHPSESSIONID</td></tr></tbody></table><p>ProxySet指令也可以使用上面的参数</p><p>在tomcat的配置中Engine使用jvmRoute属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t1、t2的tomcat配置中分别增加jvmRoute</span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;t1.kinmfer.com&quot;</span> <span class="attr">jvmRoute</span>=<span class="string">&quot;Tomcat1&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;t2.kinmfer.com&quot;</span> <span class="attr">jvmRoute</span>=<span class="string">&quot;Tomcat2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样SessionlD，就变成了这样<code>sessionID = 9c949FA4AFCBE9337F5F0669548BD4DF.Tomcat2</code></p><p>conf.d/vhosts.conf内容如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">ProxyRequestsOff</span><br><span class="line">ProxyViaOn</span><br><span class="line">ProxyPreserveHost On</span><br><span class="line">ProxyPass/ balancer: //lbtomcats/</span><br><span class="line">ProxyPassReverse / balancer: //lbtomcats/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Proxy</span> <span class="attr">balancer:</span>//<span class="attr">lbtomcats</span>&gt;</span></span><br><span class="line">BalancerMember http://t1.kinmfer.com:8080 loadfactor=1</span><br><span class="line">BalancerMember http://t2.kinmfer.com:8080 loadfactor=2</span><br><span class="line"><span class="tag">&lt;/<span class="name">Proxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="使用session粘性"><a href="#使用session粘性" class="headerlink" title="使用session粘性"></a>使用session粘性</h3><p>修改conf.d/vhosts.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Header add Set-Cookie&quot;ROUTEID=.%&#123;BALANCER_WORKER_ROUTE&#125;e;path=/&quot;</span><br><span class="line">env=BALANCER_ROUTE_CHANGED</span><br><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">ProxyRequestsOff</span><br><span class="line">ProxyViaOn</span><br><span class="line">ProxyPreserveHost On</span><br><span class="line">ProxyPass/ balancer: //lbtomcats/</span><br><span class="line">ProxyPassReverse / balancer: //lbtomcats/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Proxy</span> <span class="attr">balancer:</span>//<span class="attr">lbtomcats</span>&gt;</span></span><br><span class="line">BalancerMember http://t1.kinmfer.com:8080 loadfactor=1 route=Tomcat1</span><br><span class="line">BalancerMember http://t2.kinmfer.com:8080 loadfactor=2 route=Tomcat2</span><br><span class="line">    ProxySet stickysession=ROUTEID</span><br><span class="line"><span class="tag">&lt;/<span class="name">Proxy</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ajp调度"><a href="#ajp调度" class="headerlink" title="ajp调度"></a>ajp调度</h3><p>修改conf.d/vhosts.conf</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">VirtualHost</span> *<span class="attr">:80</span>&gt;</span></span><br><span class="line">ProxyRequestsOff</span><br><span class="line">ProxyViaOn</span><br><span class="line">ProxyPreserveHost On</span><br><span class="line">ProxyPass/ balancer: //lbtomcats/</span><br><span class="line">ProxyPassReverse / balancer: //lbtomcats/</span><br><span class="line"><span class="tag">&lt;/<span class="name">VirtualHost</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Proxy</span> <span class="attr">balancer:</span>//<span class="attr">lbtomcats</span>&gt;</span></span><br><span class="line">BalancerMember ajp://t1.kinmfer.com:8009 loadfactor=1 route=Tomcat1</span><br><span class="line">BalancerMember ajp://t2.kinmfer.com:8009 loadfactor=2 route=Tomcat2</span><br><span class="line"><span class="tag">&lt;/<span class="name">Proxy</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虽然，上面的做法实现客户端在一段时间内找同一台Tomcat，从而避免切换后导致的Session丢失。但<br>是如果Tomcat节点挂掉，那么Session依旧丢失。</p><p>假设有A、B两个节点，都把Session做了持久化。如果TomcatA服务下线期间用户切换到了Tomcat B<br>上，就获得了Tomcat B的Session，就算持久化Session的Tomcat A上线了，也没用了。</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tomcat-01-介绍&amp;配置</title>
      <link href="2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-01-%E4%BB%8B%E7%BB%8D&amp;%E9%85%8D%E7%BD%AE/"/>
      <url>2020/07/18/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Tomcat-01-%E4%BB%8B%E7%BB%8D&amp;%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h1><p>起始于SUN的一个Servlet的参考实现项目Java Web Server,作者是James Duncan Davidson,后将项目贡献给了ASF。和ASF现有的项目合并,并开源成为顶级项目，官网<a href="http://tomcat.apache.org/">http://tomcat.apache.org</a></p><p>Tomcat仅仅实现了Java EE规范中与Servlet. JSP相关的类库，是JavaEE不完整实现。</p><p>著名图书出版商O’Reilly约稿该项目成员，Davidson希望使用一个公猫作为封面，但是公猫已经被另一<br>本书使用，书出版后封面是一只雪豹。</p><p>1999年发布初始版本是 Tomcat3.0,实现了 Servlet2.2和sP1.1规范。</p><p>Tomcat4x发布时,内建了 Catalina( Servlet容器)和 asper (SP engine)等</p><p>商用的有 BM Web Sphere、 Oracle WebLogic(原属于BEA公司)、 Oracle oc4、 Glassfish、 jBoss等。<br>开源实现有 Tomcat、 Jetty、 Resin。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>略</p><h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><table><thead><tr><th>目录</th><th>说明</th></tr></thead><tbody><tr><td>bin</td><td>服务启动、停止相关</td></tr><tr><td><strong>conf</strong></td><td>配置文件</td></tr><tr><td>lib</td><td>库目录</td></tr><tr><td>logs</td><td>日志目录</td></tr><tr><td><strong>webapps</strong></td><td>应用程序，应用部署目录</td></tr><tr><td>work</td><td>jsp编译后的结果文件</td></tr></tbody></table><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><table><thead><tr><th>文件名</th><th>说明</th></tr></thead><tbody><tr><td>server.xml</td><td>主配置文件</td></tr><tr><td>web.xml</td><td>每个webapp只有 “部署”后才能被访问，它的部署方式通常由web.xml进行定义，其存放位置为WEB-INF/目录中;此文件为所有的webapps提供默认部署相关的配置</td></tr><tr><td>content.xml</td><td>每个webapp都可以专用的配置文件，它通常由专用的配置文件context.xml来定义，其存放位置为WEB-INF/目录中;此文件为所有的webapps提供默认配置</td></tr><tr><td>tomcat-users.xml</td><td>用户认证的账号和密码文件</td></tr><tr><td>catalina.policy</td><td>当使用-security选项启动tomact时，用于为tomcat设置安全策略</td></tr><tr><td>catalina.properties</td><td>Java属性的定义文件，用于设定类加载器路径，以及一些语JVM调优相关参数</td></tr><tr><td>logging.properties</td><td>日志系统相关的配置。log4j</td></tr></tbody></table><h1 id="组件分类"><a href="#组件分类" class="headerlink" title="组件分类"></a>组件分类</h1><h2 id="顶级组件"><a href="#顶级组件" class="headerlink" title="顶级组件"></a>顶级组件</h2><p>Server，代表整个Tomcat容器</p><h2 id="服务类组件"><a href="#服务类组件" class="headerlink" title="服务类组件"></a>服务类组件</h2><p>Service，组织Engine和Connector，里面只能包含一个Engine</p><h2 id="连接器组件"><a href="#连接器组件" class="headerlink" title="连接器组件"></a>连接器组件</h2><p>Connector，有HTTP、HTTPS、AJP协议的连接器</p><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><p>Engine、Host、Context都是容器类组件，可以嵌入其它组件，内部配置如何运行应用程序。</p><h2 id="内嵌类"><a href="#内嵌类" class="headerlink" title="内嵌类"></a>内嵌类</h2><p>可以内嵌到其他组件内，valve、logger、realm、loader、manager等。以logger举例，在不同容器组件内定义。</p><h2 id="集群类组件"><a href="#集群类组件" class="headerlink" title="集群类组件"></a>集群类组件</h2><p>listener、cluster</p><h1 id="Tomcat内部组成"><a href="#Tomcat内部组成" class="headerlink" title="Tomcat内部组成"></a>Tomcat内部组成</h1><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200716083629756.png" alt="image-20200716083629756"></p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>Server</td><td>Tomcat运行的进程实例</td></tr><tr><td>Connector</td><td>负责客户端的HTTP，HTTPS，AJP等协议的连接。一个Connector只属于一个Engine</td></tr><tr><td>Service</td><td>用来组织Engine和Connector的关系</td></tr><tr><td>Engine</td><td>响应并处理用户请求。一个引擎上可以绑定多个Connector</td></tr><tr><td>Host</td><td>虚拟主机</td></tr><tr><td>Context</td><td>应用的上下文，配置路径映射path-&gt;directory</td></tr></tbody></table><p>AJP (Apache Jserv protocol)是一种基于TCP的二进制通讯协议。</p><p>核心组件</p><ul><li>Tomcat启动一个Server进程。可以启动多个Server，但一般只启动一个</li><li>创建一个Service提供服务。可以创建多个Service，但一般也只创建一个<ul><li>每个Service中，是Engine和其连接器Connector的关联配置</li></ul></li><li>可以为这个Server提供多个连接器Connector，这些Connector使用了不同的协议，绑定了不同的端口。其作用就是处理来自客户端的不同的连接请求或响应</li><li>Service内部还定义了Engine，引擎才是真正的处理请求的入口，其内部定义多个虚拟主机Host<ul><li>Engine对请求头做了分析，将请求发送给相应的虚拟主机</li><li>如果没有匹配，数据就发往Engine上的defaultHost缺省虚拟主机</li><li>Engine上的缺省虚拟主机可以修改</li></ul></li><li>Host定义虚拟主机，虚拟主机有name名称，通过名称匹配</li><li>Context定义应用程序单独的路径映射和配置</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8085&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">connectionTimeout</span>=<span class="string">&quot;20088&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">redirectPort</span>=<span class="string">&quot;8443” /&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;Connector port=&quot;</span><span class="attr">8009</span>&quot; <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span><span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">unpackWARS</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><p>举例:<br>假设来自客户的请求为: <a href="http://localhost:8080/test/index.jsp">http://localhost:8080/test/index.jsp</a></p><ul><li>浏览器端的请求被发送到服务端端口8080，Tomcat进程监听在此端口上。通过侦听的HTTP/1.1Connector获得此请求。</li><li>Connector把该请求交给它所在的Service的Engine来处理，并等待Engine的响应</li><li>Engine获得请求localhost:8080/test/index.jsp，匹配它所有虚拟主机Host</li><li>Engine匹配到名为localhost的Host。即使匹配不到也把请求交给该Host处理，因为该Host被定义为该Engine的默认主机</li><li>localhost Host获得请求/test/index.jsp，匹配它所拥有的所有Context</li><li>Host匹配到路径为/test的Context</li><li>path=/test的Context获得请求/index.jsp，在它的mapping table中寻找对应的servlet</li><li>Context匹配到URLPATTERN为*.jsp的servlet，对应于JspServlet类构造HttpServletRequest对象和HttpServletResponse对象，作为参数调用spServlet的doGet或doPost方法。</li><li>Context把执行完了之后的HttpServletResponse对象返回给Host</li><li>Host把HttpServletResponse对象返回给Engine</li><li>Engine把HttpServletResponse对象返回给Connector</li><li>Connector把HttpServletResponse对象返回给浏览器端</li></ul><h1 id="应用部署"><a href="#应用部署" class="headerlink" title="应用部署"></a>应用部署</h1><h2 id="根目录"><a href="#根目录" class="headerlink" title="根目录"></a>根目录</h2><p>Tomcat中默认网站根目录是CATALINA_BASE/webapps/<br>在Tomcat中部署主站应用程序和其他应用程序，和之前WEB服务程序不同。</p><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h3><p>假设在nginx中部署2个网站应用eshop、bbs，假设网站根目录是/var/www/html，那么部署可以是这样的。<br>eshop解压缩所有文件放到/var/www/html/目录下。<br>bbs的文件放在/var/www/html/bbs下。</p><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>Tomcat中默认网站根目录是CATALINA_BASE/webapps/<br>在Tomcat的webapps目录中，有个非常特殊的目录ROOT，它就是网站默认根目录。<br>将eshop解压后的文件放到这个ROOT中。<br>bbs解压后文件都放在CATALINA_BASE/webapps/bbs目录下。</p><p>每一个虚拟主机的目录都可以使用appBase配置自己的站点目录，里面都可以使用ROOT目录作为主站目录。</p><h2 id="JSP-WebApp目录结构"><a href="#JSP-WebApp目录结构" class="headerlink" title="JSP WebApp目录结构"></a>JSP WebApp目录结构</h2><ul><li>主页配置:一般指定为index.jsp或index.html</li><li>WEB-INF/:当前WebApp的私有资源路径，通常存储当前应用使用的web.xml和context.xml配置文件</li><li>META-INF/:类似于WEB-INF</li><li>classes/:类文件，当前webapp需要的类</li><li>lib/:当前应用依赖的jar包</li></ul><h2 id="主页实验"><a href="#主页实验" class="headerlink" title="主页实验"></a>主页实验</h2><p>默认情况下，/usr/local/tomcat/webapps/ROOT/下添加一个index.html文件，观察访问到了什么?<br>将/usr/local/tomcat/conf/web.xml中的下面<code>&lt;welcome-file-list&gt;</code>标签内容（默认页)，复制到/usr/local/tomcat/webapps/ROOT/WEB-INF/web.xml中，如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">metadata-complete</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Welcome to Tomcat<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">     Welcome to Tomcat</span><br><span class="line">  <span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.html<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.htm<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">welcome-file</span>&gt;</span>index.jsp<span class="tag">&lt;/<span class="name">welcome-file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">welcome-file-list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置修改后，观察首页变化</p><h2 id="WebApp归档格式"><a href="#WebApp归档格式" class="headerlink" title="WebApp归档格式"></a>WebApp归档格式</h2><ul><li>war: WebApp打包</li><li>jar:EJB类打包文件</li><li>rar:资源适配器类打包文件</li><li>ear:企业级WebApp打包</li></ul><p>传统应用开发测试后，通常打包为war格式，这种文件部署到了Tomcat的webapps下，还可以自动展开。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackMARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="部署Deploy"><a href="#部署Deploy" class="headerlink" title="部署Deploy"></a>部署Deploy</h2><ul><li>部署:将webapp的源文件放置到目标目录，通过web.xml和context.xml文件中配置的路径就可以访问该webapp，通过类加载器加载其特有的类和依赖的类到JVM上。<ul><li>自动部署Auto Deploy: Tomcat发现多了这个应用就把它加载并启动起来</li><li>手动部署<ul><li>冷部署:将webapp放到指定目录，才去启动Tomcat</li><li>热部署: Tomcat服务不停止，需要依赖manager、ant脚本、tcd (tomcat client deployer)等工具</li></ul></li></ul></li><li>反部署undeploy:停止webapp的运行，并从JVM上清除已经加载的类，从Tomcat应用目录中<strong>移除</strong>部署的文件</li><li>启动start:是webapp能够访问</li><li>停止stop: webapp不能访问，不能提供服务，但是JVM并不清除它</li></ul><h2 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h2><ol><li>添加一个文件，test.jsp</li></ol><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class="line"> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">&quot;utf-8&quot;</span>&gt;</span><br><span class="line">&lt;title&gt;jsp例子&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">后面的内容是服务器端动态生成字符串，最后拼接在一起</span><br><span class="line">&lt;%</span><br><span class="line">out.println( <span class="string">&quot;hello jsp&quot;</span>);</span><br><span class="line">%&gt;</span><br><span class="line">&lt;br&gt;</span><br><span class="line">&lt;%=request.getRequestURL()%&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><p>先把test.jsp放到ROOT下去，试试看，访问<a href="http://yourip:8080/test.jsp">http://YourIP:8080/test.jsp</a> 。<br>立即可以看到，这是通过路径映射找到相应的test.jsp后，转换成test_jsp.java，在编译成test_jsp.class。/usrlloca/tomcat/work/Catalina/localhost/ROOTlorg/apacheljsp下有转换后的文件。</p><ol start="2"><li>添加一个应用</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line">常见开发项目目录组成</span><br><span class="line">mkdir projects/myapp/&#123;WEB-INF,classes,lib&#125; -pv</span><br><span class="line"></span><br><span class="line">常见应用首页，内容就用上面的test.jsp</span><br><span class="line">vim projects/myapp/index.jsp</span><br><span class="line"></span><br><span class="line">手动复制项目目录到webapps目录下去</span><br><span class="line">cp -r projects/myapp/ /usr/<span class="built_in">local</span>/tomcat/webapps/</span><br><span class="line"></span><br><span class="line">使用http://YourIP:8080/myapp/访问试试看</span><br></pre></td></tr></table></figure><h2 id="配置详解"><a href="#配置详解" class="headerlink" title="配置详解"></a>配置详解</h2><p>server.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8009&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;AJP/1.3&quot;</span></span></span><br><span class="line"><span class="tag">               <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Engine</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">Service</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Server</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;SHUTDOWN&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>8005是Tomcat的管理端口，默认监听在127.0.0.1上。SHUTDOWN这个字符串接收到后就会关闭此<br>Server。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#telnet 127.0.0.1 8005</span></span><br><span class="line">Trying 127.0.0.1...</span><br><span class="line">Connected to 127.0.0.1.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">SHUTDOWN</span><br></pre></td></tr></table></figure><p>这个管理功能建议禁用，改shutdown为一串猜不出的字符串。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Server</span> <span class="attr">port</span>=<span class="string">&quot;8005&quot;</span> <span class="attr">shutdown</span>=<span class="string">&quot;44ba3c71d57f494992641b258b965f28&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">GlobalNamingResources</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Editable user database that can also be used by</span></span><br><span class="line"><span class="comment">         UserDatabaseRealm to authenticate users</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Resource</span> <span class="attr">name</span>=<span class="string">&quot;UserDatabase&quot;</span> <span class="attr">auth</span>=<span class="string">&quot;Container&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">type</span>=<span class="string">&quot;org.apache.catalina.UserDatabase&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">description</span>=<span class="string">&quot;User database that can be updated and saved&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">factory</span>=<span class="string">&quot;org.apache.catalina.users.MemoryUserDatabaseFactory&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">pathname</span>=<span class="string">&quot;conf/tomcat-users.xml&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">GlobalNamingResources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用户认证，配置文件是conf/tomcat-users.xml。<br>打开tomcat-users.xml，我们需要一个角色manager-gui。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tomcat-users</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://tomcat.apache.org/xml&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://tomcat.apache.org/xml tomcat-users.xsd&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">version</span>=<span class="string">&quot;1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;manager-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">role</span> <span class="attr">rolename</span>=<span class="string">&quot;admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">user</span> <span class="attr">username</span>=<span class="string">&quot;kinmfer&quot;</span> <span class="attr">password</span>=<span class="string">&quot;123123&quot;</span> <span class="attr">roles</span>=<span class="string">&quot;manager-gui,admin-gui&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tomcat-users</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Tomcat启动加载后，这些内容是常驻内存的。如果配置了新的用户，需要<strong>重启Tomcat</strong>。</p><p>文件路径/usr/local/tomcat/webapps/manager/META-INF/context.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">antiResourceLocking</span>=<span class="string">&quot;false&quot;</span> <span class="attr">privileged</span>=<span class="string">&quot;true&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Valve</span> <span class="attr">className</span>=<span class="string">&quot;org.apache.catalina.valves.RemoteAddrValve&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">allow</span>=<span class="string">&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Manager</span> <span class="attr">sessionAttributeValueClassNameFilter</span>=<span class="string">&quot;java\.lang\.(?:Boolean|Integer|Long|Number|String)|org\.apache\.catalina\.filters\.CsrfPreventionFilter\$LruCache(?:\$1)?|java\.util\.(?:Linked)?HashMap&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Context</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看正则表达式就知道是本地访问了，由于当前访问地址是192.168.x.x，可以修改正则为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">allow&#x3D;&quot;127\.\d+\.\d+\.\d+|::1|0:0:0:0:0:0:0:1|192.*&quot;</span><br></pre></td></tr></table></figure><p>再次测试，成功</p><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Service</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>一般情况下，一个Server实例配置一个Service，name属性相当于该Service的ID。</p><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">&quot;8080&quot;</span> <span class="attr">protocol</span>=<span class="string">&quot;HTTP/1.1&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">&quot;20000&quot;</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">&quot;8443&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>连接器配置。</p><p>redirectPort，如果访问HTTPS协议，自动转向这个连接器。但大多数时候，Tomcat并不会开启<br>HTTPS，因为Tomcat往往部署在内部，HTTPS性能较差</p><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Engine</span> <span class="attr">name</span>=<span class="string">&quot;Catalina&quot;</span> <span class="attr">defaultHost</span>=<span class="string">&quot;localhost&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引擎配置。</p><p>defaultHost指向内部定义某虚拟主机。缺省虚拟主机可以改动，默认localhost.。</p><hr><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;localhost&quot;</span><span class="attr">appBase</span>=<span class="string">&quot;webapps&quot;</span> <span class="attr">unpackWARS</span>=<span class="string">&quot;true&quot;</span><span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><p>虚拟主机配置。<br>name必须是主机名，用主机名来匹配。<br>appBase，当前主机的网页根目录，是相对于CATALINA_HOME，也可以使用绝对路径<br>unpackWARs是否自动解压war格式<br>autoDeploy热部署，自动加载并运行应用</p><h2 id="虚拟主机配置实验"><a href="#虚拟主机配置实验" class="headerlink" title="虚拟主机配置实验"></a>虚拟主机配置实验</h2><p>尝试再配置一个虚拟主机，并将myapp部署到/data/webapps目录下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;node1.kinmfer.com&quot;</span> <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps/&quot;</span> <span class="attr">unpackWARS</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">autoDeploy</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">常见虚拟主机根目录</span><br><span class="line">mkdir /data/webapps -pv</span><br><span class="line"></span><br><span class="line">cp -r ~/ projects/myapp/ /data/webapps/ROOT</span><br><span class="line"></span><br><span class="line">bin/shutdown.sh</span><br><span class="line">bin/startup.sh</span><br></pre></td></tr></table></figure><p>刚才在虚拟主机中主机名定义tomcat.kinmfer.com/，所以需要主机在本机手动配置一个<strong>域名解析</strong>。<br>如果是windows，修改在C:\Windows\System32\drivers\etc下的hosts文件，需要管理员权限。<br>使用<a href="http://tomcat.kinmfer.com:8080/%E8%AE%BF%E9%97%AE%E8%AF%95%E8%AF%95%E7%9C%8B%E3%80%82%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%9C%A8tomcat%E7%9A%84host-manager%E4%B8%AD%E8%A7%82%E5%AF%9F%E3%80%82">http://tomcat.kinmfer.com:8080/访问试试看。也可以在tomcat的host-manager中观察。</a></p><h2 id="Context配置"><a href="#Context配置" class="headerlink" title="Context配置"></a>Context配置</h2><p>Context作用:</p><ul><li>路径映射</li><li>应用独立配置，例如单独配置应用日志、单独配置应用访问控制</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/data/test&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>path指的是访问的路径<br>docBase，可以是绝对路径，也可以是相对路径（相对于Host的appBase)<br>reloadable，true表示如果WEB-NF/classes或META-INF/lib目录下.class文件有改动，就会将WEB应用重新加载，性能消耗很大。生成环境中，会使用false来禁用。</p><p>将~/projects/myapp/下面的项目文件复制到/data/下</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r ~/projects/myapp /data/myappv1</span><br><span class="line"><span class="built_in">cd</span> /data</span><br><span class="line">ln -sv myappv1 <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>可以修改一下index.jsp方便区别</p><p>Tomcat的配置文件server.xml中修改如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">&quot;tomcat.kinmfer.com&quot;</span>  <span class="attr">appBase</span>=<span class="string">&quot;/data/webapps&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">unpackWARs</span>=<span class="string">&quot;true&quot;</span> <span class="attr">autoDeploy</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Context</span> <span class="attr">path</span>=<span class="string">&quot;/test&quot;</span> <span class="attr">docBase</span>=<span class="string">&quot;/data/test&quot;</span> <span class="attr">reloadable</span>=<span class="string">&quot;false&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Host</span>&gt;</span></span><br></pre></td></tr></table></figure><p>使用<a href="http://tomcat.kinmfer.com:8080/test/">http://tomcat.kinmfer.com:8080/test/</a></p><p>**注意:**这里特别使用了软链接，原因就是以后版本升级，需要将软链接指向myappv2，重启Tomcat。<br>如果新版上线后，出现问题，重新修改软链接到上一个版本的目录，并重启，就可以实现回滚。</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Tomcat </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Tomcat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains快捷键</title>
      <link href="2020/07/17/Jetbrains%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>2020/07/17/Jetbrains%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转自<a href="https://segmentfault.com/a/1190000007206543">https://segmentfault.com/a/1190000007206543</a></p></blockquote><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><hr><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + Space</td><td>代码自动完成提示（选择）</td></tr><tr><td>Alt + Enter</td><td>显示意图动作和快速修复</td></tr><tr><td>Ctrl + P</td><td>参数信息（在调用方法参数忘记的时候，提示）</td></tr><tr><td>Ctrl + Q</td><td>快速查找文件，可以查找当前类定义的文件等</td></tr><tr><td>Ctrl + 鼠标滑过</td><td>基本信息</td></tr><tr><td>Alt + Insert</td><td>生成代码…(细节需要多次操作会发现很有意思)</td></tr><tr><td>Ctrl + O</td><td>重写方法（在PHPStorm中是重写父类方法，会有选择框）</td></tr><tr><td>Ctrl + I</td><td>实现方法（一般是指实现接口类或抽象类方法）</td></tr><tr><td>Ctrl + Alt + T</td><td>环绕代码块 (if..else, try..catch, for, 等)</td></tr><tr><td>Ctrl + /</td><td>单行注释(//)</td></tr><tr><td>Ctrl + Shift + /</td><td>块注释 (/**/)</td></tr><tr><td>Ctrl + W</td><td>选择依次递增的代码块，具体使用目前来看比较少</td></tr><tr><td>Ctrl + Shift + W</td><td>去掉当前选择返回上一个选择，类似于撤销选择，与上面的相反</td></tr><tr><td>Ctrl + Alt + L</td><td>格式化代码，一般来说，写的代码格式不整齐统一，这个很有用</td></tr><tr><td>Ctrl + Alt + I</td><td>自啮合线，这个解释不太好解释，测试结果就是会自动根据代码来进行对齐</td></tr><tr><td>Ctrl + D</td><td>复制当前行或选定的块</td></tr><tr><td>Ctrl + Y</td><td>删除插入符号所在行</td></tr><tr><td>Ctrl + Shift + J</td><td>智能线连接（HTML和JavaScript才有用）</td></tr><tr><td>Ctrl + Enter</td><td>智能分割线 (HTML 和 JavaScript 才有用)</td></tr><tr><td>Shift + Enter</td><td>开始新行，比如光标在当前行，不需要切换到行尾按Enter，直接按这个组合键即可</td></tr><tr><td>Ctrl + Shift + U</td><td>切换选中的英文文字的大小写，此处其实用到挺多的</td></tr><tr><td>Ctrl + Shift + ] 或 [</td><td>选择直到代码块的开始或结束，我之前不知道这个，其实很有用</td></tr><tr><td>Ctrl + Delete</td><td>删除从当前光标到当前单词结尾</td></tr><tr><td>Ctrl + Backspace</td><td>从光标位置删除到当前单词的开始</td></tr><tr><td>Ctrl + + 或 -</td><td>这里是ctrl和加号或者减号产生的组合，可以折叠或展开当前代码块</td></tr><tr><td>Ctrl + F4</td><td>关闭活动中的tab</td></tr><tr><td>Ctrl + Shift + V</td><td>从历史粘贴</td></tr></tbody></table><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><hr><p><em>此处我是用得很少</em></p><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>F8</td><td>跳过</td></tr><tr><td>F7</td><td>步进</td></tr><tr><td>Shift + F8</td><td>跳出</td></tr><tr><td>Alt + F8</td><td>表达式求值</td></tr><tr><td>F9</td><td>恢复程序</td></tr><tr><td>Ctrl + F8</td><td>切断断点</td></tr><tr><td>Ctrl+Shift+F8</td><td>查看断点</td></tr></tbody></table><h1 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h1><hr><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>Shift + F10</td><td>运行</td></tr><tr><td>Shift + F9</td><td>调试</td></tr><tr><td>Ctrl + Shift + F10</td><td>从编辑器运行上下文配置（Run context configuration from editor），此处可能翻译不够准确</td></tr><tr><td>Ctrl + Shift + X</td><td>在命令行运行</td></tr></tbody></table><h1 id="搜索-替换"><a href="#搜索-替换" class="headerlink" title="搜索/替换"></a>搜索/替换</h1><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + F/R</td><td>查找/替换</td></tr><tr><td>F3/Shift + F3</td><td>查找下一个/上一个</td></tr><tr><td>Ctrl + Shift + F/R</td><td>在目录中查找/替换</td></tr></tbody></table><h1 id="查找哪些地方使用"><a href="#查找哪些地方使用" class="headerlink" title="查找哪些地方使用"></a>查找哪些地方使用</h1><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>Alt + F7 / Ctrl + F7</td><td>当前文件查找被使用/在文件中查找哪些地方使用</td></tr><tr><td>Ctrl + Shift + F7</td><td>文件中搜索并在使用的地方高亮显示</td></tr><tr><td>Ctrl + Alt + F7</td><td>显示哪些地方被使用</td></tr></tbody></table><h1 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h1><hr><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>Ctrl + N</td><td>跳转到指定类</td></tr><tr><td>Ctrl + Shift + N</td><td>跳转到文件</td></tr><tr><td>Ctrl + Alt + Shift + N</td><td>跳转到符号</td></tr><tr><td>Ctrl + G</td><td>跳转到第几行</td></tr><tr><td>Alt + Right/Left</td><td>切换编辑器活动窗</td></tr><tr><td>Esc</td><td>Go to editor (from tool window)</td></tr><tr><td>Ctrl + E</td><td>弹出最近编辑文件，我也是在写这文档才知道，太方便了</td></tr><tr><td>Ctrl + Alt + Left/Right</td><td>导航前进/后退</td></tr><tr><td>Ctrl + Shift + Backspace</td><td>跳转到最近编辑的代码位置</td></tr><tr><td>Alt + F1</td><td>在任何视图中选择当前文件或符号</td></tr><tr><td>Ctrl + B 或 Ctrl + Click</td><td>跳到申明（如跳转到当前函数声明的地方，这个很常用，可以实操一下）</td></tr><tr><td>Ctrl + Alt + B</td><td>与上面相反，跳到执行位置</td></tr><tr><td>Ctrl + Shift + I</td><td>打开快速定义查找</td></tr><tr><td>Ctrl + Shift + B</td><td>跳转到类型声明</td></tr><tr><td>Ctrl + U</td><td>跳到超级方法(super-method)/超类 (super-class)</td></tr><tr><td>Alt + Up/Down</td><td>跳转到上一个或者下一个方法，在编辑一个类的时候，方便一个一个的方法进行查看</td></tr><tr><td>Ctrl + ] / [</td><td>跳转到代码块的开始或结束</td></tr><tr><td>F2 / Shift + F2</td><td>跳转到上一个或下一个高亮错误地方，这个检查代码语法错误很有用</td></tr><tr><td>F4 / Ctrl + Enter</td><td>编辑源代码/查看源代码</td></tr></tbody></table><h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><hr><table><thead><tr><th>快捷键组合</th><th>说明</th></tr></thead><tbody><tr><td>快速按两次 Shift</td><td>搜索任何一个地方</td></tr><tr><td>Ctrl + Shift + A</td><td>查找方法(Action)</td></tr><tr><td>Alt + #[0-9]</td><td>打开相应的工具窗口（这个我也没搞明白）</td></tr><tr><td>Ctrl + Alt + F11</td><td>开启或关闭全屏模式</td></tr><tr><td>Ctrl + Shift + F12</td><td>开启或关闭最大化编辑</td></tr><tr><td>Alt + Shift + F</td><td>添加到收藏列表（我觉得这个功能很神奇，不知道为啥要这么做）</td></tr><tr><td>Alt + Shift + I</td><td>检查当前文件以及当前配置文件</td></tr><tr><td>Ctrl + Alt + S</td><td>打开设置对话框（表示会与QQ默认快捷键冲突）</td></tr><tr><td>Ctrl + Tab</td><td>在 tabs 和工具窗口间切换</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jetbrains </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-06-性能优化&amp;api使用&amp;高可用</title>
      <link href="2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-06-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;api%E4%BD%BF%E7%94%A8&amp;%E9%AB%98%E5%8F%AF%E7%94%A8/"/>
      <url>2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-06-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96&amp;api%E4%BD%BF%E7%94%A8&amp;%E9%AB%98%E5%8F%AF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="zabbix性能优化-监控-myisam-innode"><a href="#zabbix性能优化-监控-myisam-innode" class="headerlink" title="zabbix性能优化(监控) myisam innode"></a>zabbix性能优化(监控) myisam innode</h1><p>监控：写多读少的应用 适合innnode，innode是行级锁</p><p>小说类型网站：读多写少 适合myisam，myisam是表级锁</p><h2 id="针对mysql，写多读少-DBA的工作内容"><a href="#针对mysql，写多读少-DBA的工作内容" class="headerlink" title="针对mysql，写多读少(DBA的工作内容)"></a>针对mysql，写多读少(DBA的工作内容)</h2><p>1.生成cnf配置文件 <a href="https://imysql.com/my-cnf-wizard.html">https://imysql.com/my-cnf-wizard.html</a></p><p>2.zabbix的主要瓶颈在于数据库</p><p>数据库中压力最大的五张表，表里带索引，所以数据量大</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/122fc384b35ea18dc4bec4d612c7745d.png"></p><p><a href="https://www.cnblogs.com/52py/p/9604381.html">https://www.cnblogs.com/52py/p/9604381.html</a></p><h2 id="去掉无用的监控项，增加监控项的间取值间隔，减少历史数据保存周期"><a href="#去掉无用的监控项，增加监控项的间取值间隔，减少历史数据保存周期" class="headerlink" title="去掉无用的监控项，增加监控项的间取值间隔，减少历史数据保存周期"></a>去掉无用的监控项，增加监控项的间取值间隔，减少历史数据保存周期</h2><h3 id="没用的，不需要的，全部去掉"><a href="#没用的，不需要的，全部去掉" class="headerlink" title="没用的，不需要的，全部去掉"></a>没用的，不需要的，全部去掉</h3><h3 id="可以增大取值间隔，不要快速取值"><a href="#可以增大取值间隔，不要快速取值" class="headerlink" title="可以增大取值间隔，不要快速取值"></a>可以增大取值间隔，不要快速取值</h3><h3 id="由于表中数据巨大，重启-意外关机-可能一天都没能起来，-或者海外业务"><a href="#由于表中数据巨大，重启-意外关机-可能一天都没能起来，-或者海外业务" class="headerlink" title="由于表中数据巨大，重启(意外关机)可能一天都没能起来，(或者海外业务)"></a>由于表中数据巨大，重启(意外关机)可能一天都没能起来，(或者海外业务)</h3><p>后台启动运行：</p><p>​    开启screen(会开启子shell在后台运行)</p><p>​    screen</p><p>输入命令</p><p>​    CMD</p><p>查看screen</p><p>​    screen -ls</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/2d8d4875863975ce4c4995ce146a0a3e.png"></p><p>恢复screen</p><p>​    screen -r ID</p><p>结束screen</p><p>​    kill ID</p><h3 id="减少保存周期"><a href="#减少保存周期" class="headerlink" title="减少保存周期"></a>减少保存周期</h3><p>监控项数量在一段时间后会自动稳定(自带一定的监控项删除)</p><p>也可以自动检测后删除</p><h2 id="把被动模式修改为主动模式，增加zabbix-proxy"><a href="#把被动模式修改为主动模式，增加zabbix-proxy" class="headerlink" title="把被动模式修改为主动模式，增加zabbix-proxy"></a>把被动模式修改为主动模式，增加zabbix-proxy</h2><h3 id="能改成主动模式的都改成主动模式"><a href="#能改成主动模式的都改成主动模式" class="headerlink" title="能改成主动模式的都改成主动模式"></a>能改成主动模式的都改成主动模式</h3><h3 id="能用zabbix-proxy的都用zabbix-proxy"><a href="#能用zabbix-proxy的都用zabbix-proxy" class="headerlink" title="能用zabbix-proxy的都用zabbix-proxy"></a>能用zabbix-proxy的都用zabbix-proxy</h3><p>请求次数汇总在zabbix-proxy这一层，但是总数据量没变</p><p>zabbix-server任务清单会发给zabbix-proxy，proxy发给anget</p><h2 id="针对zabbix-server进程调优，谁忙，就加大他的进程数量"><a href="#针对zabbix-server进程调优，谁忙，就加大他的进程数量" class="headerlink" title="针对zabbix-server进程调优，谁忙，就加大他的进程数量"></a>针对zabbix-server进程调优，谁忙，就加大他的进程数量</h2><h2 id="针对zabbix-server缓存调优，谁的剩余内存少，就加大它的缓存值"><a href="#针对zabbix-server缓存调优，谁的剩余内存少，就加大它的缓存值" class="headerlink" title="针对zabbix_server缓存调优，谁的剩余内存少，就加大它的缓存值"></a>针对zabbix_server缓存调优，谁的剩余内存少，就加大它的缓存值</h2><h3 id="先给server添加Template-App-Zabbix-Server模板，里面都是收集器"><a href="#先给server添加Template-App-Zabbix-Server模板，里面都是收集器" class="headerlink" title="先给server添加Template App Zabbix Server模板，里面都是收集器"></a>先给server添加<a href="http://192.168.1.10:56/zabbix/templates.php?form=update&templateid=10047">Template App Zabbix Server</a>模板，里面都是收集器</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/55193a515ab3d229444ea148e8a339db.png"></p><h3 id="当低于40-时，适量增大他的进程"><a href="#当低于40-时，适量增大他的进程" class="headerlink" title="当低于40%时，适量增大他的进程"></a>当低于40%时，适量增大他的进程</h3><p><code>vim /etc/zabbix/zabbix_server.conf</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/d1cb18980a843992a77361ae7d16a248.png"></p><h3 id="各种cache都可以在文件里调，每个进程数都可以在文件中找到"><a href="#各种cache都可以在文件里调，每个进程数都可以在文件中找到" class="headerlink" title="各种cache都可以在文件里调，每个进程数都可以在文件中找到"></a>各种cache都可以在文件里调，每个进程数都可以在文件中找到</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/71a0497806e8c7adacc50236f05c026c.png"></p><h3 id="zabbix繁忙程度查看"><a href="#zabbix繁忙程度查看" class="headerlink" title="zabbix繁忙程度查看"></a>zabbix繁忙程度查看</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6a8055dd084bfeef75e0c7f52f4f6de0.png"></p><h2 id="针对zabbix-历史数据和趋势图的表，进行周期性分表"><a href="#针对zabbix-历史数据和趋势图的表，进行周期性分表" class="headerlink" title="针对zabbix 历史数据和趋势图的表，进行周期性分表"></a>针对zabbix 历史数据和趋势图的表，进行周期性分表</h2><p>写触发器，进行定期分表</p><h2 id="zabbix分组报警，使用grafana对接zabbix出图"><a href="#zabbix分组报警，使用grafana对接zabbix出图" class="headerlink" title="zabbix分组报警，使用grafana对接zabbix出图"></a>zabbix分组报警，使用grafana对接zabbix出图</h2><h3 id="分组报警"><a href="#分组报警" class="headerlink" title="分组报警"></a>分组报警</h3><p><a href="https://www.cnblogs.com/ssgeek/p/9274767.html">https://www.cnblogs.com/ssgeek/p/9274767.html</a></p><p>取消垃圾报警(多采用合适的阈值，如10分钟的avg)</p><h3 id="zabbix-server默认内存可以调"><a href="#zabbix-server默认内存可以调" class="headerlink" title="zabbix-server默认内存可以调"></a>zabbix-server默认内存可以调</h3><p>可以减少因为内存不足引起的误报</p><h3 id="延迟查看"><a href="#延迟查看" class="headerlink" title="延迟查看"></a>延迟查看</h3><p>误报会占Swap空间不释放，如果报警多，会减少可用空间</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/da31a47cdf1b3d2656e165767018e256.png"></p><h3 id="查看年度报警"><a href="#查看年度报警" class="headerlink" title="查看年度报警"></a>查看年度报警</h3><p>删除所有无用报警项</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/7753192fbcc2af469836ea5364c098f9.png"></p><h3 id="5-查看修改动作"><a href="#5-查看修改动作" class="headerlink" title="5.查看修改动作"></a>5.查看修改动作</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/03b01d553d73554391336254e40c0f92.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/576ff285ef5e91922464ffa17c773586.png"></p><h1 id="zabbix-api使用"><a href="#zabbix-api使用" class="headerlink" title="zabbix-api使用"></a>zabbix-api使用</h1><p>微信报警，调用api(http curl)</p><p>顶顶报警，调用api(http curl)</p><p>zabbix api(可用二次开发，在运维平台接入zabbix)</p><p>granfana调用zabbix api</p><p><a href="http://localhost/zabbix/api_jsonrpc.php">http://localhost/zabbix/api_jsonrpc.php</a> Admin zabbix</p><p>官方文档</p><p><a href="https://www.zabbix.com/documentation/4.0/zh/manual/api">https://www.zabbix.com/documentation/4.0/zh/manual/api</a></p><h2 id="创建主机"><a href="#创建主机" class="headerlink" title="创建主机"></a>创建主机</h2><p>获取cookie</p><h3 id="发送数据"><a href="#发送数据" class="headerlink" title="发送数据"></a>发送数据</h3><p>(请求头+请求内容(json格式)+目的地址)</p><p><code>curl -X POST -H &#39;Content-Type: application/json&#39; -d &#39;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;user.login&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;user&quot;</span>: <span class="string">&quot;Admin&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;password&quot;</span>: <span class="string">&quot;zabbix&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">&quot;auth&quot;</span>: <span class="literal">null</span></span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p><a href="http://192.168.1.10:56/zabbix/api_jsonrpc.php">http://192.168.1.10:56/zabbix/api_jsonrpc.php</a></p><h3 id="拿到token"><a href="#拿到token" class="headerlink" title="拿到token"></a>拿到token</h3><p>{“jsonrpc”:”2.0”,”result”:”e0bf8ce1e015dd932ae4620609f4cbcf”,”id”:1}</p><p>token = “e0bf8ce1e015dd932ae4620609f4cbcf”</p><h3 id="创建主机-1"><a href="#创建主机-1" class="headerlink" title="创建主机"></a>创建主机</h3><p>脚本解析</p><p>批量创建进行变量替换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;host.create&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;</span><br><span class="line">        &quot;host&quot;: &quot;Linux server&quot;, #(主机名称，随便填)</span><br><span class="line">        &quot;interfaces&quot;: [#(接口内容)</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;type&quot;: 1,#(agent模式，1~4)</span><br><span class="line">                &quot;main&quot;: 1,#(默认即可，不用改)</span><br><span class="line">                &quot;useip&quot;: 1,#(1为ip地址，否则为DNS)</span><br><span class="line">                &quot;ip&quot;: &quot;192.168.1.10&quot;,</span><br><span class="line">                &quot;dns&quot;: &quot;&quot;,</span><br><span class="line">                &quot;port&quot;: &quot;10050&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;groups&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;groupid&quot;</span>: <span class="string">&quot;16&quot;</span>#(主机组ID)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;templates&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;templateid&quot;</span>: <span class="string">&quot;10317&quot;</span> #(模板ID)</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;inventory_mode&quot;: 0,#资产模式，这部分可以删除</span><br><span class="line">        &quot;inventory&quot;: &#123;</span><br><span class="line">            &quot;macaddress_a&quot;: &quot;01234&quot;,</span><br><span class="line">            &quot;macaddress_b&quot;: &quot;56768&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;auth&quot;: &quot;$token&quot;,</span><br><span class="line">    &quot;id&quot;: 1</span><br><span class="line">&#125;&#x27;</span><br></pre></td></tr></table></figure><p> <a href="http://192.168.1.10:56/zabbix/api_jsonrpc.php">http://192.168.1.10:56/zabbix/api_jsonrpc.php</a></p><h4 id="示例脚本"><a href="#示例脚本" class="headerlink" title="示例脚本"></a>示例脚本</h4><p><code>curl -X POST -H &#39;Content-Type: application/json&#39; -d &#39;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;host.create&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;host&quot;</span>: <span class="string">&quot;kunpeng&quot;</span>,</span><br><span class="line">        <span class="attr">&quot;interfaces&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;type&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;main&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;useip&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">&quot;ip&quot;</span>: <span class="string">&quot;192.168.1.10&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;dns&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">                <span class="attr">&quot;port&quot;</span>: <span class="string">&quot;10050&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;groups&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;groupid&quot;</span>: <span class="string">&quot;16&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">&quot;templates&quot;</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">&quot;templateid&quot;</span>: <span class="string">&quot;10317&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;f1a13824c6e095743be64be42b872895&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125; &#x27;</span><br></pre></td></tr></table></figure><p><a href="http://192.168.1.10:56/zabbix/api_jsonrpc.php">http://192.168.1.10:56/zabbix/api_jsonrpc.php</a></p><p><strong>返回值</strong><br>{“jsonrpc”:”2.0”,”result”:{“hostids”:[“10339”]},”id”:1}  </p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/e3aaac0096b32e0d20da2b3c085ded68.png"></p><p>运维平台只需要几个核心的运维开发，其他的都可以是小白，会点点点就行了，特别是实习生</p><h2 id="删除主机"><a href="#删除主机" class="headerlink" title="删除主机"></a>删除主机</h2><p>脚本解析</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;host.delete&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [#(主机id)</span><br><span class="line">        <span class="string">&quot;13&quot;</span>,</span><br><span class="line">        <span class="string">&quot;32&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;038e1d7b1735c6a5436ee9eae095879e&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="脚本示例"><a href="#脚本示例" class="headerlink" title="脚本示例"></a>脚本示例</h3><p><code>curl -X POST -H &#39;Content-Type: application/json&#39; -d &#39;</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;jsonrpc&quot;</span>: <span class="string">&quot;2.0&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;method&quot;</span>: <span class="string">&quot;host.delete&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;params&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;10339&quot;</span>,</span><br><span class="line">        <span class="string">&quot;10328&quot;</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">&quot;auth&quot;</span>: <span class="string">&quot;f1a13824c6e095743be64be42b872895&quot;</span>,</span><br><span class="line">    <span class="attr">&quot;id&quot;</span>: <span class="number">1</span></span><br><span class="line">&#125; &#x27;</span><br></pre></td></tr></table></figure><p><a href="http://192.168.1.10:56/zabbix/api_jsonrpc.php">http://192.168.1.10:56/zabbix/api_jsonrpc.php</a></p><h2 id="接下来就是前端写按钮，可以点点点发起请求就行了"><a href="#接下来就是前端写按钮，可以点点点发起请求就行了" class="headerlink" title="接下来就是前端写按钮，可以点点点发起请求就行了"></a>接下来就是前端写按钮，可以点点点发起请求就行了</h2><h2 id="ID查询"><a href="#ID查询" class="headerlink" title="ID查询"></a>ID查询</h2><p><strong>主机群ID查看</strong>  </p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4ebe97e5c653f0bab9641a6969eef01f.png"></p><p><strong>模板ID查看</strong>  </p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ae43be1f56867035016df837d09db1cf.png"></p><h1 id="zabbix高可用"><a href="#zabbix高可用" class="headerlink" title="zabbix高可用"></a>zabbix高可用</h1><h2 id="高可用对比"><a href="#高可用对比" class="headerlink" title="高可用对比"></a>高可用对比</h2><h3 id="传统服务"><a href="#传统服务" class="headerlink" title="传统服务"></a>传统服务</h3><p>nginx + php , keeplievd vip</p><p>nginx + php , keeplievd</p><h3 id="新服务"><a href="#新服务" class="headerlink" title="新服务"></a>新服务</h3><p>zabbix-server, keeplived vip</p><p>zabbix-server, keeplived<br>如果开启，会一直收不到数据，所以我需要用keeplived状态来实现启动和关闭</p><p>zabbix-angent vip</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.qstack.com.cn/archives/287.html">https://www.qstack.com.cn/archives/287.html</a></p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>yum install keepalived sshpass -y</code></p><h3 id="配置文件修改"><a href="#配置文件修改" class="headerlink" title="配置文件修改"></a>配置文件修改</h3><h4 id="修改zabbix-server-conf"><a href="#修改zabbix-server-conf" class="headerlink" title="修改zabbix_server.conf"></a>修改zabbix_server.conf</h4><p><code>vim /etc/zabbix/zabbix_server.conf</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ea12bfbf00bce9e1b3cd6ad5f351eb4d.png"></p><p>修改DB数据库地址</p><p>修改密码</p><p><img src="C:/Users/kinmfer/Desktop/media/e6241d03a1426a2a15161cdba1258405.png"></p><p>修改取值IP(指定多个IP时，从哪个IP取值)</p><h4 id="修改zabbix-conf-php"><a href="#修改zabbix-conf-php" class="headerlink" title="修改zabbix.conf.php"></a>修改zabbix.conf.php</h4><p>vim /etc/zabbix/web/zabbix.conf.php</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6f4a811c8bef91041a768cd102cdb414.png"></p><h4 id="优化http"><a href="#优化http" class="headerlink" title="优化http"></a>优化http</h4><p><code>vim /etc/httpd/conf/httpd.conf  </code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/91ae5eb42af13d35821f005aeadec11e.png"></p><h3 id="备份数据库"><a href="#备份数据库" class="headerlink" title="备份数据库"></a>备份数据库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -B zabbix &gt; zabbix.sql</span><br><span class="line">迁移数据</span><br><span class="line">scp -rp 192.168.1.10:&#x2F;root&#x2F;zabbix.sql</span><br><span class="line">导入数据</span><br><span class="line">mysql &lt; zabbix.sql</span><br><span class="line">授权</span><br><span class="line">grant all on zabbix.* to zabbix@&#39;192.168.1.%&#39; identified by &#39;123456&#39;;</span><br><span class="line">测试登录</span><br><span class="line">mysql -h 192.168.1.10 -uzabbix -p123456</span><br></pre></td></tr></table></figure><h3 id="编写并授权脚本"><a href="#编写并授权脚本" class="headerlink" title="编写并授权脚本"></a>编写并授权脚本</h3><h4 id="编写自启脚本"><a href="#编写自启脚本" class="headerlink" title="编写自启脚本"></a>编写自启脚本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /opt/to_master.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">sshpass -p aosatech ssh -o StrictHostKeyChecking=no root@192.168.1.92 <span class="string">&quot;systemctl stop zabbix-server.service&quot;</span></span><br><span class="line">systemctl restart zabbix-server.service</span><br></pre></td></tr></table></figure><p>参数：</p><p>-p 远程密码</p><p>/etc/init.d/zabbix-server stop cmd命令</p><p>/etc/init.d/zabbix-server start cmd命令</p><h4 id="授权执行脚本"><a href="#授权执行脚本" class="headerlink" title="授权执行脚本"></a>授权执行脚本</h4><p><code>chmod +x /opt/to_master.sh</code></p><h4 id="授权keeplived脚本"><a href="#授权keeplived脚本" class="headerlink" title="授权keeplived脚本"></a>授权keeplived脚本</h4><p><code>chmod 644 /etc/keepalived/keepalived.conf</code></p><h4 id="修改keeplived"><a href="#修改keeplived" class="headerlink" title="修改keeplived"></a>修改keeplived</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6617c64fc0d86c7280d43fdb9ef14bd5.png"></p><p>LVS 需要修改</p><p>state 需要修改</p><p>interface 需要修改</p><p>priority 需要修改</p><p>ip 需要修改</p><h5 id="keepalived脚本示例"><a href="#keepalived脚本示例" class="headerlink" title="keepalived脚本示例"></a>keepalived脚本示例</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;keepalived&#x2F;keepalived.conf</span><br><span class="line"></span><br><span class="line">! Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">router_id LVS_DEVEL 29 (这里需要修改，同一ID组里不能存在相同LVS_ID)</span><br><span class="line">&#125;</span><br><span class="line">vrrp_instance VI_1 &#123;</span><br><span class="line">state BACKUP(这里双方备机即可)</span><br><span class="line">interface eth0（根据实际网卡选填）</span><br><span class="line">virtual_router_id 51 (这里需要修改，同一网段不能存在相同ID组)</span><br><span class="line">priority 150（权重自行决定）</span><br><span class="line">advert_int 1</span><br><span class="line">authentication &#123;</span><br><span class="line">auth_type PASS</span><br><span class="line">auth_pass 1111</span><br><span class="line">&#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.56.66（ip不能有人在使用）</span><br><span class="line">&#125;</span><br><span class="line">notify_master &#x2F;opt&#x2F;to_master.sh</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="添加hosts解析-要么不加，要么全加"><a href="#添加hosts解析-要么不加，要么全加" class="headerlink" title="添加hosts解析(要么不加，要么全加)"></a>添加hosts解析(要么不加，要么全加)</h4><p>要么双方都加上解析，要么双发都不加解析，否则在验证的过程中会出现问题</p><p>192.168.1.10 node10</p><p>192.168.1.91 node91</p><h4 id="修改agent端"><a href="#修改agent端" class="headerlink" title="修改agent端"></a>修改agent端</h4><p><code>vim /etc/zabbix/zabbix_agentd.conf</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/305e3b32fd9aef89bd19204cb3617b92.png"></p><h4 id="agent日志"><a href="#agent日志" class="headerlink" title="agent日志"></a>agent日志</h4><p>zabbix日志在 /var/log/zabbix/zabbix_agentd.log</p><h2 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h2><p><a href="http://vip/zabbix/hosts.php">http://VIP/zabbix/</a></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9d448b0280bd53285fa3270d50237a00.png"></p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-05-自动发现&amp;注册&amp;agent</title>
      <link href="2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-05-%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0&amp;%E6%B3%A8%E5%86%8C&amp;agent/"/>
      <url>2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-05-%E8%87%AA%E5%8A%A8%E5%8F%91%E7%8E%B0&amp;%E6%B3%A8%E5%86%8C&amp;agent/</url>
      
        <content type="html"><![CDATA[<h1 id="自动发现和自动-主动注册"><a href="#自动发现和自动-主动注册" class="headerlink" title="自动发现和自动(主动注册)"></a>自动发现和自动(主动注册)</h1><h2 id="自动发现"><a href="#自动发现" class="headerlink" title="自动发现"></a>自动发现</h2><h3 id="添加自动监控项"><a href="#添加自动监控项" class="headerlink" title="添加自动监控项"></a>添加自动监控项</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/045a727e367ffe24d0409721d624f69e.png"></p><h3 id="创建动作"><a href="#创建动作" class="headerlink" title="创建动作"></a>创建动作</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c712c9f87700647ce443695a8eb2865d.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/644502bd461105a5185b4852ec8b55fd.png"></p><p>启用主机</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/623b73d3529e628e3189bae89900587d.png"></p><h2 id="自动-主动注册"><a href="#自动-主动注册" class="headerlink" title="自动(主动注册)"></a>自动(主动注册)</h2><h3 id="第一步，修改参数"><a href="#第一步，修改参数" class="headerlink" title="第一步，修改参数"></a>第一步，修改参数</h3><ul><li>Server：#允许谁来向我取值</li><li>ServerActive：#我主动像谁汇报</li><li>Hostname：#区分每一个agnet</li><li>Hostnamedate：#web，标签作用，主机元数据</li></ul><h3 id="第二步，添加自动注册规则"><a href="#第二步，添加自动注册规则" class="headerlink" title="第二步，添加自动注册规则"></a>第二步，添加自动注册规则</h3><h4 id="添加作动"><a href="#添加作动" class="headerlink" title="添加作动"></a>添加作动</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c44d83f6a70e980ce1e82213be8664c0.png"></p><h4 id="添加操作"><a href="#添加操作" class="headerlink" title="添加操作"></a>添加操作</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/baa05e1d21b93e844d17bee45e61a28e.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ef417b06e8e1c929ef89e03bf169e33b.png"></p><h3 id="第三步，重启"><a href="#第三步，重启" class="headerlink" title="第三步，重启"></a>第三步，重启</h3><p>重启zabbix-server</p><p>重启zabbix-agent</p><h3 id="第四步，查看"><a href="#第四步，查看" class="headerlink" title="第四步，查看"></a>第四步，查看</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c9ebc024280f5717458178313b7778f2.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/e13592782d79d858e4c6ef17f27ba5dd.png"></p><p>秒添加</p><h1 id="zabbix-agnet主动和被动的区别"><a href="#zabbix-agnet主动和被动的区别" class="headerlink" title="zabbix-agnet主动和被动的区别"></a>zabbix-agnet主动和被动的区别</h1><p>被动模式在百台和千台会达到性能瓶颈</p><h2 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/55c6406478f5942c81b994016a5b7b1a.png"></p><h2 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c9a7cccd4c6fa5e0f2f8fd31c6441875.png"></p><h2 id="将模板监控项全选更新类型为主动式，时间间隔为30s"><a href="#将模板监控项全选更新类型为主动式，时间间隔为30s" class="headerlink" title="将模板监控项全选更新类型为主动式，时间间隔为30s"></a>将模板监控项全选更新类型为主动式，时间间隔为30s</h2><p>(如果需要新的标识模板或者要对模板进行修改，则需要将进行全克隆，对克隆后的模板进行修改)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f8270b6428948659bfad3a4662b88e65.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4a1d1bf28975ba259edab49a43dfa52f.png"></p><h1 id="无zabbix-agnet客户端的监控-Zabbix-sender-crontab"><a href="#无zabbix-agnet客户端的监控-Zabbix-sender-crontab" class="headerlink" title="无zabbix-agnet客户端的监控(Zabbix-sender) + crontab"></a>无zabbix-agnet客户端的监控(Zabbix-sender) + crontab</h1><p>应用环境：如银行等特殊环境，没有安装软件的授权</p><p>参考博客：<a href="https://www.qstack.com.cn/archives/133.html">https://www.qstack.com.cn/archives/133.html</a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>rpm -ivh http://mirrors.aliyun.com/zabbix/zabbix/3.0/rhel/7/x86_64/zabbix-sender-3.0.5-1.el7.x86_64.rpm</code></p><p>查看语法</p><p><code>zabbix_sender –help</code></p><p><code>zabbix_sender -z 127.0.0.1 -s &quot;Linux DB3&quot; -k db.connections -o 43</code></p><p>参数：</p><ul><li>-z zabbix-server 服务器地址</li><li>-s host 监控指定主机的名字</li><li>-k pass</li><li>-o key的值</li></ul><p>客户端可以直接写脚本把指取出，再发送</p><h2 id="添加监控项类型"><a href="#添加监控项类型" class="headerlink" title="添加监控项类型"></a>添加监控项类型</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b6e835a3dadc4764fe6a0c37f022fb2b.png"></p><h2 id="命令行测试"><a href="#命令行测试" class="headerlink" title="命令行测试"></a>命令行测试</h2><p><code>zabbix_sender -z 192.168.1.10 -s &quot;192.168.1.92&quot; -k avaiMEM -o 220</code></p><p>脚本检测-命令行取值-主动发送效率高，但是容易造假</p><h2 id="脚本编写"><a href="#脚本编写" class="headerlink" title="脚本编写"></a>脚本编写</h2><p>命令行取值测试</p><p><code>free -m | awk &#39;/^Mem/&#123;print $NF&#125;&#39;</code></p><p>取值成功，编写脚本</p><p><code>vim /server/scripts/avaimem.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MEM=`free -m | awk <span class="string">&#x27;/^Mem/&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line">zabbix_sender -z 192.168.1.10 -s <span class="string">&quot;192.168.1.92&quot;</span> -k avaiMEM -o <span class="variable">$MEM</span></span><br></pre></td></tr></table></figure><h2 id="更新脚本"><a href="#更新脚本" class="headerlink" title="更新脚本"></a>更新脚本</h2><p>由于银行环境连sender都不能装，所以我们需要nc来传输</p><p>Nc参考脚本(因为版本更迭，不能用)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#/bin/bash</span></span><br><span class="line">host=<span class="variable">$1</span></span><br><span class="line">item=<span class="variable">$2</span></span><br><span class="line">value=<span class="variable">$3</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;&#123;&quot;request&quot; :&quot;sender data&quot;,&quot;data&quot;:[&#123;&quot;host&quot;:&#x27;</span>\&quot;<span class="variable">$host</span>\&quot;<span class="string">&#x27;,&quot;key&quot;:&#x27;</span>\&quot;<span class="variable">$item</span>\&quot;<span class="string">&#x27;,&quot;value&quot;:&#x27;</span>\&quot;<span class="variable">$value</span>\&quot;<span class="string">&#x27;&#125;]&#125;&#x27;</span>|nc 172.16.1.71 10051 &amp;&amp; <span class="built_in">echo</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">三个变量</span><br><span class="line">json格式</span><br><span class="line">传递给nc</span><br><span class="line">192.168.1.10 传输目的地</span><br><span class="line">10051 目的端口</span><br><span class="line">echo</span><br></pre></td></tr></table></figure><p>更新后的脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">MEM=`free -m | awk <span class="string">&#x27;/^Mem/&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line">/bin/bash /server/scripts/zabbix_sender.sh 192.168.1.92 avaiMEM <span class="variable">$MEMsh</span></span><br></pre></td></tr></table></figure><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>步骤复杂，而且容易出问题</p><h1 id="zabbix低级自动发现"><a href="#zabbix低级自动发现" class="headerlink" title="zabbix低级自动发现"></a>zabbix低级自动发现</h1><p>自动发现：创建监控主机</p><h2 id="低级自动发现：自动创建监控项"><a href="#低级自动发现：自动创建监控项" class="headerlink" title="低级自动发现：自动创建监控项"></a>低级自动发现：自动创建监控项</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a3a500b4be948a2c52eaa221c2002506.png"></p><p>自动发现规则其实就是一个key</p><p>名称为key名称</p><h3 id="过滤器内容"><a href="#过滤器内容" class="headerlink" title="过滤器内容"></a>过滤器内容</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/faed755da1950f8629e087299bb05ffd.png"></p><h3 id="查看正则表达式"><a href="#查看正则表达式" class="headerlink" title="查看正则表达式"></a>查看正则表达式</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/73bd690b0b46b14f7558f205230314e0.png"></p><h3 id="监控项原型"><a href="#监控项原型" class="headerlink" title="监控项原型"></a>监控项原型</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/5d94431e39c23f76ec0cc979341bb91c.png"></p><p>最后会根据过滤后剩下的值自动创建监控项</p><h2 id="mysql多实例低级自动发现"><a href="#mysql多实例低级自动发现" class="headerlink" title="mysql多实例低级自动发现"></a>mysql多实例低级自动发现</h2><p>参考<a href="https://www.qstack.com.cn/archives/108.html">https://www.qstack.com.cn/archives/108.html</a></p><h3 id="新增库"><a href="#新增库" class="headerlink" title="新增库"></a>新增库</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp /etc/my.cnf /etc/my3307.cnf</span><br><span class="line">cp /etc/my.cnf /etc/my3308.cnf</span><br><span class="line">vim /etc/my3307.cnf</span><br><span class="line">vim /etc/my3308.cnf</span><br></pre></td></tr></table></figure><p>全部替换</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">datadir&#x3D;&#x2F;data&#x2F;330*&#x2F;</span><br><span class="line">socket&#x3D;&#x2F;data&#x2F;330*&#x2F;mysql.sock</span><br><span class="line">port&#x3D;330*</span><br><span class="line">user&#x3D;mysql</span><br><span class="line">symbolic-links&#x3D;0</span><br><span class="line">[mysqld_safe]</span><br><span class="line">log-error&#x3D;&#x2F;data&#x2F;330*&#x2F;mysqld.log</span><br><span class="line">pid-file&#x3D;&#x2F;data&#x2F;330*&#x2F;mysqld.pid</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">创建文件夹</span><br><span class="line">mkdir -p /data/&#123;3307,3308&#125;</span><br><span class="line">初始化</span><br><span class="line">mysql_install_db --user=mysql --defaults-file=/etc/my3307.cnf</span><br><span class="line">mysqld_safe --defaults-file=/etc/my3307.cnf &amp; (启动)</span><br><span class="line"></span><br><span class="line">mysql_install_db --user=mysql --defaults-file=/etc/my3308.cnf</span><br><span class="line">mysqld_safe --defaults-file=/etc/my3308.cnf &amp; (启动)</span><br><span class="line"></span><br><span class="line">登录</span><br><span class="line">mysql -S /data/3307/mysql.sock</span><br><span class="line"></span><br><span class="line">自定义监控项，输出json格式</span><br></pre></td></tr></table></figure><h3 id="创建key"><a href="#创建key" class="headerlink" title="创建key"></a>创建key</h3><p>写key</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim mysql_discover.conf</span><br><span class="line">UserParameter=mysql.discovery,sh /server/scripts/mysql_discovery.sh</span><br></pre></td></tr></table></figure><p>写脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">vim /server/scripts/mysql_discovery.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#mysql low-level discovery</span></span><br><span class="line">res=`netstat -lntp|awk -F <span class="string">&quot;[ :\t]+&quot;</span> <span class="string">&#x27;/mysqld/&#123;print$5&#125;&#x27;</span>`</span><br><span class="line">port=(<span class="variable">$res</span>)</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;&quot;data&quot;:[&#x27;</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> <span class="variable">$&#123;!port[@]&#125;</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$&#123; #port[@]&#125;</span>&quot;</span> -gt 1 &amp;&amp; <span class="string">&quot;<span class="variable">$&#123;key&#125;</span>&quot;</span> -ne <span class="string">&quot;<span class="subst">$(($&#123; #port[@]&#125;-1)</span>)&quot;</span> ]];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\&quot;&#123; #MYSQLPORT&#125;\&quot;:\&quot;<span class="variable">$&#123;port[<span class="variable">$&#123;key&#125;</span>]&#125;</span>\&quot;&#125;,&quot;</span></span><br><span class="line"><span class="keyword">else</span> [[ <span class="string">&quot;<span class="variable">$&#123;key&#125;</span>&quot;</span> -eq <span class="string">&quot;((<span class="variable">$&#123; #port[@]&#125;</span>-1))&quot;</span> ]]</span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;&#123;&#x27;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&quot;\&quot;&#123; #MYSQLPORT&#125;\&quot;:\&quot;<span class="variable">$&#123;port[<span class="variable">$&#123;key&#125;</span>]&#125;</span>\&quot;&#125;&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;]&#x27;</span></span><br><span class="line"><span class="built_in">printf</span> <span class="string">&#x27;&#125;\n</span></span><br></pre></td></tr></table></figure><p>命令行测试取值</p><p><code>sh /server/scripts/mysql_discovery.sh</code></p><p>解决权限问题</p><p><code>which netstat</code></p><p><code>chmod u+s /usr/bin/netstat</code></p><h3 id="创建自动发现"><a href="#创建自动发现" class="headerlink" title="创建自动发现"></a>创建自动发现</h3><h4 id="添加规则"><a href="#添加规则" class="headerlink" title="添加规则"></a>添加规则</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/fed2a726be80b24c90948846b2c92d0b.png"></p><h4 id="添加正则表达式"><a href="#添加正则表达式" class="headerlink" title="添加正则表达式"></a>添加正则表达式</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/e50fe915be2db253862e83c0830dd054.png"></p><h4 id="添加过滤器"><a href="#添加过滤器" class="headerlink" title="添加过滤器"></a>添加过滤器</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/18fccafbb71e55d93c5b94bfceed22fb.png"></p><h5 id="变量来由"><a href="#变量来由" class="headerlink" title="变量来由"></a>变量来由</h5><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c7e8062478ee80637111c15e0c4e7c78.png"></p><h5 id="原型添加"><a href="#原型添加" class="headerlink" title="原型添加"></a>原型添加</h5><h6 id="解析原生脚本"><a href="#解析原生脚本" class="headerlink" title="解析原生脚本"></a>解析原生脚本</h6><p><code>cat /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf |grep -Ev &#39;^$|#&#39;</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/baccb19359e0d4b47ed770dc8b8e8905.png"></p><h6 id="去掉最简易的命令行"><a href="#去掉最简易的命令行" class="headerlink" title="去掉最简易的命令行"></a>去掉最简易的命令行</h6><p>取出尾部命令行(看不懂的变量可以搜索)</p><p><code>UserParameter=mysql.status[*],echo &quot;show global status where Variable_name=&#39;$1&#39;;&quot; | HOME=/var/lib/zabbix mysql -N | awk &#39;&#123;print $$2&#125;&#39;</code></p><h6 id="在原生模板中查询传入的参数，并进行测试"><a href="#在原生模板中查询传入的参数，并进行测试" class="headerlink" title="在原生模板中查询传入的参数，并进行测试"></a>在原生模板中查询传入的参数，并进行测试</h6><p><code>echo &quot;show global status where Variable_name=&#39;Com_begin&#39;;&quot; | mysql -N | awk &#39;&#123;print $2&#125;&#39;</code></p><h6 id="逐步最小化"><a href="#逐步最小化" class="headerlink" title="逐步最小化"></a>逐步最小化</h6><p><code>echo &quot;show global status where Variable_name=&#39;Com_begin&#39;;&quot; | mysql -N</code></p><h6 id="发现是打印数据库信息"><a href="#发现是打印数据库信息" class="headerlink" title="发现是打印数据库信息"></a>发现是打印数据库信息</h6><p>(简单的命令行也可以直接取头部进行测试)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/3cb818a51d94ce80d62dd1a7dfc5af49.png"></p><h6 id="进入端口"><a href="#进入端口" class="headerlink" title="进入端口"></a>进入端口</h6><p><code>mysql -h 127.0.0.1 -P 3307</code></p><h6 id="显示当前数据库"><a href="#显示当前数据库" class="headerlink" title="显示当前数据库"></a>显示当前数据库</h6><p><code>show VARIABLES like &#39;%sock%&#39;;</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9d1f8404ee719352838f9a9e2fa8bb73.png"></p><h6 id="修改angent配置文件"><a href="#修改angent配置文件" class="headerlink" title="修改angent配置文件"></a>修改angent配置文件</h6><p><code>vim /etc/zabbix/zabbix_agentd.d/userparameter_mysql.conf</code></p><h6 id="添加变量"><a href="#添加变量" class="headerlink" title="添加变量()"></a>添加变量()</h6><p><code>UserParameter=mysql.status[*],echo &quot;show global status where Variable_name=&#39;$1&#39;;&quot; | HOME=/var/lib/zabbix mysql -h 127.0.0.1 -P $2 -N | awk &#39;&#123;print $$2&#125;&#39;</code></p><h6 id="命令行测试取值"><a href="#命令行测试取值" class="headerlink" title="命令行测试取值"></a>命令行测试取值</h6><p><code>zabbix_get -s 192.168.1.91 -k mysql.status[Com_begin,3308]</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ffcab6bc3a0c7caca0eeb8b58e420acf.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a3274398cd42698a75a0c0f26d5886c9.png"></p><h6 id="参照原生原型-创造原型"><a href="#参照原生原型-创造原型" class="headerlink" title="参照原生原型,创造原型"></a>参照原生原型,创造原型</h6><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/14e9041787f2cab6fc0812ef16bd8573.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/81a4413b5c9c0e3e229df95b9b615eb7.png"></p><p>参数</p><p>mysql.status[uptime,{ #MYSQLPORT}]</p><p>mysql.status 键</p><p>uptime 传入的参数</p><p>{ #MYSQLPORT} 传入的第二个参数，触发器的宏变量</p><h6 id="添加增删改查"><a href="#添加增删改查" class="headerlink" title="添加增删改查"></a>添加增删改查</h6><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6a6420defd7c357fd79f0cb803042f74.png"></p><h6 id="监控项批量更新加入应用集"><a href="#监控项批量更新加入应用集" class="headerlink" title="监控项批量更新加入应用集"></a>监控项批量更新加入应用集</h6><p>Pass</p><h6 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h6><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a7d128a111ddaaa89d107614494697b5.png"></p><h2 id="流程总结"><a href="#流程总结" class="headerlink" title="流程总结"></a>流程总结</h2><h3 id="定义key"><a href="#定义key" class="headerlink" title="定义key"></a>定义key</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.d&#x2F;mysql_discover.conf </span><br><span class="line">UserParameter&#x3D;mysql.discovery,sh &#x2F;server&#x2F;scripts&#x2F;mysql_discovery.sh</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/490ade83ab1ee68152aaaf181dd980a3.png"></p><h3 id="定义自动发现规则来接收key"><a href="#定义自动发现规则来接收key" class="headerlink" title="定义自动发现规则来接收key"></a>定义自动发现规则来接收key</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/14efd5f5ebf2e923ff88f3a4f5d3c9c1.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a4cc05907f499e5a83863b20cf617dae.png"></p><p><img src="C:/Users/kinmfer/Desktop/media/7111bed0cd09a65af263f2a2463ce027.png"></p><h3 id="拿到监控项原型中进行创建"><a href="#拿到监控项原型中进行创建" class="headerlink" title="拿到监控项原型中进行创建"></a>拿到监控项原型中进行创建</h3><p>遍历到n个值就反复创建n遍</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/d42fb89aa23958c7a16f09282b8d87b7.png"></p><p>一个低级自动发现最少需要两个key,</p><p>1.脚本中的键值 mysql.discovery</p><p>2.监控项原型取值 mysql.status[uptime,{ #MYSQLPORT}]</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-04-监控维度&amp;拓展</title>
      <link href="2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-04-%E7%9B%91%E6%8E%A7%E7%BB%B4%E5%BA%A6&amp;%E6%8B%93%E5%B1%95/"/>
      <url>2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-04-%E7%9B%91%E6%8E%A7%E7%BB%B4%E5%BA%A6&amp;%E6%8B%93%E5%B1%95/</url>
      
        <content type="html"><![CDATA[<h1 id="监控的维度"><a href="#监控的维度" class="headerlink" title="监控的维度"></a>监控的维度</h1><h2 id="物理硬件"><a href="#物理硬件" class="headerlink" title="物理硬件"></a>物理硬件</h2><p>（cpu温度，风扇转速，主板温度，电压，功率 ipmi工具监控<br>机房巡检）ipmitool命令行云厂商，或物理环境</p><p>硬件服务器，ipmi 只能平台管理接口，戴尔 远程管理控制卡idrac，惠普 远程管理控制卡<br>ilo ibm imm</p><p>raid 5：允许坏一块盘，物理环境需要定期巡检</p><h2 id="操作系统监控"><a href="#操作系统监控" class="headerlink" title="操作系统监控"></a>操作系统监控</h2><p>（cpu负责，内存，磁盘容量io，网卡io，进程数，安全监控/etc/password）linux模板</p><p>阈值：cpu防止过载，内存防瓶颈，磁盘防饱满，进程防挖矿，安全防黑入</p><h2 id="应用软件监控"><a href="#应用软件监控" class="headerlink" title="应用软件监控"></a>应用软件监控</h2><p>（nginx，php-fpm，mysql，redis，分布式文件系统glusterFS，ceph）修改开源的模板</p><p>选用需要的就行</p><h2 id="业务监控"><a href="#业务监控" class="headerlink" title="业务监控"></a>业务监控</h2><p>（业务状态，网页速度，pv(页面浏览次数),nv(用户数量),ip监控，会员活跃(日、周、月活)数量，每天的成单量）</p><ul><li><p>网站连不上</p><ul><li>代码上线的路径错误</li><li>开发的代码错误</li></ul></li><li><p>用站长工具查询网站域名的访问速度</p></li><li><p>服务器迁移 老ip 新ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">老域名 新域名（老域名重新指向新ip，但是不要马上清空老域名）</span><br><span class="line">博瑞监控</span><br><span class="line"></span><br><span class="line">在一个公司ip地址，一百个员工，每个人都有一台电脑，一部手机，打开&quot;指定域名&quot;两次</span><br><span class="line">pv：400</span><br><span class="line">uv：200</span><br><span class="line">ip：1</span><br><span class="line"></span><br><span class="line">统计pv，uv，ip</span><br><span class="line">安装一个统计分析软件</span><br><span class="line">使用第三方：百度统计，腾讯分析，谷歌分析</span><br><span class="line">注册账号，添加站点，复制js代码，添加到站点模板文件底部（为了解决js 代码 阻塞问题）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h2 id="网络设备监控-snmp"><a href="#网络设备监控-snmp" class="headerlink" title="网络设备监控 snmp"></a>网络设备监控 snmp</h2><h2 id="ELK监控日志"><a href="#ELK监控日志" class="headerlink" title="ELK监控日志"></a>ELK监控日志</h2><p>piwik matomo js代码 用于统计分析</p><p>AWstates</p><p>dell：</p><p>戴尔售后好，价格便宜</p><p>hp：</p><p>贵，但是质量好</p><h1 id="web网站的可用性监控"><a href="#web网站的可用性监控" class="headerlink" title="web网站的可用性监控"></a>web网站的可用性监控</h1><h2 id="监控web页面"><a href="#监控web页面" class="headerlink" title="监控web页面"></a>监控web页面</h2><h3 id="curl登录zabbix-web"><a href="#curl登录zabbix-web" class="headerlink" title="curl登录zabbix_web"></a>curl登录zabbix_web</h3><h4 id="获取一个cookie"><a href="#获取一个cookie" class="headerlink" title="获取一个cookie"></a>获取一个cookie</h4><p><code>curl -b cookies -c cookies &quot;http://192.168.1.10:56/zabbix/index.php&quot;</code></p><h4 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h4><p><code>curl -b cookies -c cookies -L -d &quot;name=Admin&amp;password=123465&amp;autologin=1&amp;enter=Sign+in&quot; &quot;http://192.168.1.10:56/zabbix/index.php&quot;</code></p><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p><code>curl -b cookies -c cookies -L &quot;http://192.168.1.10:56/zabbix/hosts.php?ddreset=1&quot;</code></p><h2 id="添加场景"><a href="#添加场景" class="headerlink" title="添加场景"></a>添加场景</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b96ee37c47a361c0e18fd9b729632661.png"></p><h3 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/52cd87ffdfe76bb70de0f5a226cfe0e6.png"></p><h3 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/7a19e0b90c802efc9ab375814e954708.png"></p><h3 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/59ab81a4506d4f6dec01acdc06991359.png"></p><h3 id="第四步-添加触发器"><a href="#第四步-添加触发器" class="headerlink" title="第四步.添加触发器"></a>第四步.添加触发器</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/58db71c44dd00bd0257a7f0bca04ebc7.png"></p><h1 id="使用percona-插件监控mysql"><a href="#使用percona-插件监控mysql" class="headerlink" title="使用percona 插件监控mysql"></a>使用percona 插件监控mysql</h1><h2 id="下载插件"><a href="#下载插件" class="headerlink" title="下载插件"></a>下载插件</h2><h3 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/89d13f9ed46a3b1e7de06bf286e5f5f9.png"></p><h3 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9c9655f44b3c461bb3d68d71f86ad8bc.png"></p><h2 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>rpm -ivh percona-zabbix-templates-1.1.8-1.noarch.rpm</code></p><p>脚本路径 <code>Scripts are installed to /var/lib/zabbix/percona/scripts</code></p><p>模板文件 <code>Templates are installed to /var/lib/zabbix/percona/templates</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/90cf3238725142f5ee5dd30b9d0b22f7.png"></p><p>默认模板为2.2以下，4.4无法使用</p><h3 id="下载新模板"><a href="#下载新模板" class="headerlink" title="下载新模板"></a>下载新模板</h3><p><a href="https://www.qstack.com.cn/archives/213.html">https://www.qstack.com.cn/archives/213.html</a></p><h3 id="导入新模板"><a href="#导入新模板" class="headerlink" title="导入新模板"></a>导入新模板</h3><p>Pass</p><h3 id="将配置文件导入-190行数"><a href="#将配置文件导入-190行数" class="headerlink" title="将配置文件导入(190行数)"></a>将配置文件导入(190行数)</h3><h3 id="手动取值"><a href="#手动取值" class="headerlink" title="手动取值"></a>手动取值</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh ij</span><br><span class="line">取值失败，用sh -x 追踪脚本</span><br><span class="line">sh -x /var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh ij</span><br><span class="line">发现调用了脚本，尝试执行脚本</span><br><span class="line">/usr/bin/php -q /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php --host localhost --items gg</span><br><span class="line">会发现密码报错,修改密码</span><br><span class="line">vim /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4b0b534fa384579a02b177aad55385a4.png"></p><h3 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h3><p><code>/usr/bin/php -q /var/lib/zabbix/percona/scripts/ss_get_mysql_stats.php --host localhost --items gg</code></p><p>取值成功</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/5484788c67665b2e8c7702b3a5756c7e.png"></p><p>测试key</p><p><code>zabbix_get -s 127.0.0.1 -k MySQL.Open-files</code></p><p>取值成功</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/21733da59e24b37bf89974d017e19d5c.png"></p><p>解决权限问题，删除之前的日志文件</p><p><code>rm -rf /tmp/localhost-mysql_cacti_stats.txt</code></p><h3 id="链接模板"><a href="#链接模板" class="headerlink" title="链接模板"></a>链接模板</h3><p>服务重启后主从部分会报错，因为不是以root执行，所以我们需要修改</p><p><code>vim /var/lib/zabbix/percona/scripts/get_mysql_stats_wrapper.sh</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6ff025741df2e358ff64c5a285789c24.png"></p><p>这一行是判断IO线程和SQL线程是否都为yes</p><h3 id="显示成功"><a href="#显示成功" class="headerlink" title="显示成功"></a>显示成功</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/39b466a037305e441615152e021e476f.png"></p><h1 id="snmp监控window和linux"><a href="#snmp监控window和linux" class="headerlink" title="snmp监控window和linux"></a>snmp监控window和linux</h1><h2 id="安装snmp服务端，配置，启动"><a href="#安装snmp服务端，配置，启动" class="headerlink" title="安装snmp服务端，配置，启动"></a>安装snmp服务端，配置，启动</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>以唯一的oid监控设备(支持很多可联网设备，如打印机)</p><p>Oid：object id 每一个对象都是一个指标</p><p>MIB库中每一个oid都是唯一的</p><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><p>服务端</p><p><code>yum install net-snmp -y</code></p><h3 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h3><p>修改口令</p><p><code>vim /etc/snmp/snmpd.conf  </code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c495e1aea1312cf0895311471cd7e465.png"></p><p>添加权限</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/20913c40b1b5ac059f8c38c45012cb71.png"></p><p>设置开机自启</p><p><code>systemctl start snmpd</code></p><p><code>systemctl enable snmpd</code></p><h2 id="zabbix-server安装snmp客户端测试取值"><a href="#zabbix-server安装snmp客户端测试取值" class="headerlink" title="zabbix-server安装snmp客户端测试取值"></a>zabbix-server安装snmp客户端测试取值</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><p>客户端</p><p><code>yum install net-snmp-utils.x86_64 -y</code></p><p>安装失败的话，查询是否已存在包</p><p><code>rpm -qa | grep snm</code></p><h3 id="测试取值"><a href="#测试取值" class="headerlink" title="测试取值"></a>测试取值</h3><p><code>snmpwalk -v 2c -c aosatech 192.168.1.10 .1.3.6.1.4.1.2021.11.9</code></p><p>参数</p><ul><li>2c：版本</li><li>-c： commuity，口</li><li>Ip：pas</li><li>Oid：要查询的oid</li></ul><h3 id="将值重定向到文件"><a href="#将值重定向到文件" class="headerlink" title="将值重定向到文件"></a>将值重定向到文件</h3><p><code>snmpwalk -v 2c -c aosatech 192.168.1.10 &gt;/tmp/1.txt</code></p><h3 id="查询参数"><a href="#查询参数" class="headerlink" title="查询参数"></a>查询参数</h3><p>/参数 or 安装的包名</p><h2 id="web界面添加snmp监控"><a href="#web界面添加snmp监控" class="headerlink" title="web界面添加snmp监控"></a>web界面添加snmp监控</h2><h3 id="第一步-2"><a href="#第一步-2" class="headerlink" title="第一步"></a>第一步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/112b9a866582a71689c2094386226e7c.png"></p><h3 id="第二步-2"><a href="#第二步-2" class="headerlink" title="第二步"></a>第二步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c34e3e84ee5389c4c7a86f727e2029a0.png"></p><h3 id="第三步，配置密码-宏"><a href="#第三步，配置密码-宏" class="headerlink" title="第三步，配置密码(宏)"></a>第三步，配置密码(宏)</h3><p>注意：Linux很多模板和snmp冲突，二者不可得兼</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/fb14faadbfea1909b8c80045c36592e8.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ec66e3420082c1df0651a9db37c24155.png"></p><h3 id="第四步，更新刷新时间"><a href="#第四步，更新刷新时间" class="headerlink" title="第四步，更新刷新时间"></a>第四步，更新刷新时间</h3><p>Pass</p><h3 id="第五步，查看状态"><a href="#第五步，查看状态" class="headerlink" title="第五步，查看状态"></a>第五步，查看状态</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/16f5c38df0cf221e3f39d65cf91a91b8.png"></p><h1 id="zabbix分布式监控proxy"><a href="#zabbix分布式监控proxy" class="headerlink" title="zabbix分布式监控proxy"></a>zabbix分布式监控proxy</h1><h2 id="应用场景：全国服务器-参考docker外网映射-只不过内外网做全隔离"><a href="#应用场景：全国服务器-参考docker外网映射-只不过内外网做全隔离" class="headerlink" title="应用场景：全国服务器,参考docker外网映射(只不过内外网做全隔离)"></a>应用场景：全国服务器,参考docker外网映射(只不过内外网做全隔离)</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/2f6911b5138bd0b5dac5cf1955fa87ab.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b0ab61e2c3b330b9f9777d75b0876a01.png"></p><h2 id="部署步骤"><a href="#部署步骤" class="headerlink" title="部署步骤"></a>部署步骤</h2><h3 id="配置zabbix-repo"><a href="#配置zabbix-repo" class="headerlink" title="配置zabbix repo"></a>配置zabbix repo</h3><p><code>rpm -ivh http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</code></p><h3 id="安装zabbix-proxy"><a href="#安装zabbix-proxy" class="headerlink" title="安装zabbix-proxy"></a>安装zabbix-proxy</h3><p><code>yum install zabbix-proxy-mysql -y</code></p><h3 id="配置zabbix-proxy"><a href="#配置zabbix-proxy" class="headerlink" title="配置zabbix-proxy"></a>配置zabbix-proxy</h3><h4 id="安装并启动mariadb-proxy"><a href="#安装并启动mariadb-proxy" class="headerlink" title="安装并启动mariadb(proxy)"></a>安装并启动mariadb(proxy)</h4><p><code>yum install mariadb-server -y &amp;&gt;/dev/null</code></p><p><code>systemctl start mariadb systemctl enable mariadb</code></p><h4 id="创库授权，导入数据"><a href="#创库授权，导入数据" class="headerlink" title="创库授权，导入数据"></a>创库授权，导入数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server端：</span><br><span class="line">创建zabbix_proxy数据库</span><br><span class="line">create database zabbix_proxy;</span><br><span class="line">授权远程登录</span><br><span class="line">grant all privileges on zabbix_proxy.* to &#39;zabbix&#39;@&#39;192.168.1.87&#39; identified by &#39;123456&#39; with grant option;</span><br><span class="line">flush privileges;</span><br><span class="line">    </span><br><span class="line">proxy端:</span><br><span class="line">查询数据所在目录</span><br><span class="line">rpm -ql zabbix-proxy-mysql | grep mysql</span><br><span class="line">远程导入数据</span><br><span class="line">zcat schema.sql.gz | mysql -uzabbix -p登录密码 -h server IP地址 zabbix_proxy(库名)</span><br></pre></td></tr></table></figure><h4 id="修改zabbix-proxy-proxy端"><a href="#修改zabbix-proxy-proxy端" class="headerlink" title="修改zabbix-proxy(proxy端)"></a>修改zabbix-proxy(proxy端)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_proxy.conf</span><br><span class="line"></span><br><span class="line">Server &#x3D; 192.168.1.10(server端IP地址)</span><br><span class="line">Hostname &#x3D; sh-proxy(填写地域名称，如shanghai-proxy)</span><br><span class="line">DBHost &#x3D; 192.168.1.10(需要取消注释数据库地址)</span><br><span class="line">DBName &#x3D; zabbix_proxy</span><br><span class="line">DBUser  &#x3D; zabbix</span><br><span class="line">DBPassword &#x3D; 123456 (需要取消注释)</span><br><span class="line">HeartbeatFrequency &#x3D; 60(填写心跳检测时间，用来检测节点是否挂掉了，默认60s)</span><br><span class="line">ConfigFrequency &#x3D; 36009(填写配置同步时间，默认一小时)</span><br><span class="line">DataSenderrFrequency &#x3D; 1(数据发送频率，默认一秒一次)</span><br></pre></td></tr></table></figure><h3 id="启动zabbix-proxy"><a href="#启动zabbix-proxy" class="headerlink" title="启动zabbix-proxy"></a>启动zabbix-proxy</h3><p><code>systemctl start zabbix-proxy</code></p><p><code>systemctl enable zabbix-proxy</code></p><h3 id="web添加监控"><a href="#web添加监控" class="headerlink" title="web添加监控"></a>web添加监控</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a99df7beb910d825535eafe801b0c2d8.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807085130682.png" alt="image-20200807085130682"></p><h3 id="修改agent配置文件"><a href="#修改agent配置文件" class="headerlink" title="修改agent配置文件"></a>修改agent配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_agentd.conf</span><br><span class="line"></span><br><span class="line">ServerActive = 192.168.1.87(proxy端地址)</span><br><span class="line">Hostname=agent端IP</span><br><span class="line">Server=agent端IP</span><br></pre></td></tr></table></figure><h3 id="web手动开启proxy"><a href="#web手动开启proxy" class="headerlink" title="web手动开启proxy"></a>web手动开启proxy</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/c2176c43da2db63c22f6bd68a498bfe5.png"></p><h3 id="proxy日志查看"><a href="#proxy日志查看" class="headerlink" title="proxy日志查看"></a>proxy日志查看</h3><p><code>vim /var/log/zabbix/zabbix_proxy.log</code></p><p>在最后会发现有发现有效配置的报告</p><h1 id="zabbix监控jvm原理"><a href="#zabbix监控jvm原理" class="headerlink" title="zabbix监控jvm原理"></a>zabbix监控jvm原理</h1><p>专门用来监控java</p><p>被监控的主机条件：jdk、tomcat</p><p>zabbix-server 用c语言开发</p><p>zabbix-server zabbix-java-gateway监控java信息</p><h2 id="服务端部署"><a href="#服务端部署" class="headerlink" title="服务端部署"></a>服务端部署</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-java-gateway-4.0.9-3.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line">yum localinstall zabbix-java-gateway-4.0.9-3.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/zabbix/zabbix_java_gateway.conf</span><br><span class="line"></span><br><span class="line">START_POLLERS = 2(起多少个进程用于监控)</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/040ee7ae02d057b98b85b4bce91e55d9.png"></p><h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p><code>systemctl start zabbix-java-gateway.service</code></p><p><code>systemctl enable zabbix-java-gateway.service</code></p><h3 id="修改server配置文件"><a href="#修改server配置文件" class="headerlink" title="修改server配置文件"></a>修改server配置文件</h3><p>JavaGateway=127.0.0.1 (java业务地址)</p><p>StartJavaPollers=2(采集器数量)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f24242f0ae8992b9948c7f4551524881.png"></p><h2 id="客户端部署"><a href="#客户端部署" class="headerlink" title="客户端部署"></a>客户端部署</h2><p>开启监控页面</p><p>配置步骤，参考<a href="https://blog.csdn.net/dongdong2980/article/details/78476393">https://blog.csdn.net/dongdong2980/article/details/78476393</a></p><h3 id="停tomcat"><a href="#停tomcat" class="headerlink" title="停tomcat"></a>停tomcat</h3><p>pass</p><h3 id="加入参数"><a href="#加入参数" class="headerlink" title="加入参数"></a>加入参数</h3><p>pass</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/97b0cd411c154f33ce01c51f232f10af.png"></p><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><p>pass</p><h3 id="查看端口是否存在"><a href="#查看端口是否存在" class="headerlink" title="查看端口是否存在"></a>查看端口是否存在</h3><p><code>netstat -lntup \| grep 12345</code></p><h2 id="开始监控"><a href="#开始监控" class="headerlink" title="开始监控"></a>开始监控</h2><h3 id="第一步-3"><a href="#第一步-3" class="headerlink" title="第一步"></a>第一步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/05ec8e25c5fc125cf95ece4c59843d7b.png"></p><h3 id="第二步-3"><a href="#第二步-3" class="headerlink" title="第二步"></a>第二步</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/78a7652976b6e477fb34e1bb241d09a1.png"></p><h3 id="第三步-刷新zabbix-server"><a href="#第三步-刷新zabbix-server" class="headerlink" title="第三步,刷新zabbix-server"></a>第三步,刷新zabbix-server</h3><p><code>zabbix_server -R config_cache_reload</code></p><p>查看状态</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/5a42ff2fafad738411cd1d036ed73fa6.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4dd03a13a5db5dac6fa73799d694cf48.png"></p><h3 id="更新模板"><a href="#更新模板" class="headerlink" title="更新模板"></a>更新模板</h3><p>pass，原因是因为自带模板为tomcat6</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-03-自定义图像&amp;自定义模板</title>
      <link href="2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-03-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%83%8F&amp;%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/"/>
      <url>2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-03-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9B%BE%E5%83%8F&amp;%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义图像"><a href="#自定义图像" class="headerlink" title="自定义图像"></a>自定义图像</h1><p>grafana 安装grafana 安装zabbix插件，启动插件 数据源–zabbix数据源 导入模板</p><h2 id="划分应用集"><a href="#划分应用集" class="headerlink" title="划分应用集"></a>划分应用集</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/3f3f1dddd2b017698ff12ff9c474d7ff.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/250752301dac3e06035d2c1767d1566a.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/2172faab919fc962cb63695b507fdb7c.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/8eede0127af3aacdbf63a2a74f7899c6.jpg"></p><h2 id="查看负载图"><a href="#查看负载图" class="headerlink" title="查看负载图"></a>查看负载图</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/10ff223ee17e3f014edbae525f2385e2.jpg"></p><p>自带的饼图乱码，并且很丑</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/d25fee062d43316ea505ec1894ac870b.jpg"></p><p>乱码原因：/usr/share/zabbix/assets/fonts/graphfont.ttf 文件默认不支持中文</p><p>解决方法：</p><p>1.从C:\Windows\Fonts 中复制喜欢的字体到桌面，然后丢到上面目录</p><p>2.改名 #mv STKAITI.TTF graphfont.ttf</p><p>效果：</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/002fbc565127b95b5aa416b9cf9880b8.jpg"></p><h2 id="自定义图"><a href="#自定义图" class="headerlink" title="自定义图"></a>自定义图</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/5017058314040622462e9920097c6488.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/bf783482b2c93dfa43c5e2ed17213f92.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/38afcd90a7b7f3d6fe1c52086c8e80ef.jpg"></p><p>正常(线图)、层积(柱状图)、pie(饼图)、爆发</p><h2 id="grafana自定义图形"><a href="#grafana自定义图形" class="headerlink" title="grafana自定义图形"></a>grafana自定义图形</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>到清华源中下载</p><p><code>wget https://mirrors.tuna.tsinghua.edu.cn/grafana/yum/rpm/grafana-6.7.3-1.x86_64.rpm</code></p><p><code>rpm -ivh grafana-6.7.3-1.x86_64.rpm</code></p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p><code>systemctl start grafana-server.service</code></p><p><code>systemctl enable grafana-server.service</code></p><h3 id="查看、访问端口-3000"><a href="#查看、访问端口-3000" class="headerlink" title="查看、访问端口(3000)"></a>查看、访问端口(3000)</h3><p><code>netstat -lntup</code></p><p>官方地址：<a href="https://grafana.com/">https://grafana.com/</a></p><p>默认账号密码都是：admin</p><h3 id="安装zabbix插件"><a href="#安装zabbix插件" class="headerlink" title="安装zabbix插件"></a>安装zabbix插件</h3><p>查找zabbix插件</p><p><code>grafana-cli plugins list-remote | grep zabbix</code></p><p>安装插件</p><p><code>grafana-cli plugins install alexanderzobnin-zabbix-app</code>(也可以下zip丢进去解压)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/bb55ce31a5e60645742f74dc1d7a9fcf.jpg"></p><h3 id="重启grafana-server"><a href="#重启grafana-server" class="headerlink" title="重启grafana-server"></a>重启grafana-server</h3><p><code>systemctl restart grafana-server.service</code></p><p>在web上看到</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/04d248488ec8fd32194ca2c76377d8e5.jpg"></p><p>启用</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/429b4f6c6d5d82677d3eeeeeecff4386.jpg"></p><h3 id="添加数据源"><a href="#添加数据源" class="headerlink" title="添加数据源"></a>添加数据源</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4b83f2b7d8d21fe306491ecb4f18d28c.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/fe16c9b86ebd8f488a99481f1525c0cf.jpg"></p><p>URL可以搜索本地接口找出</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/8c403a3a71b1c7ccd9e9566e8cf98097.jpg"></p><p>账号Admin</p><p>密码zabbix</p><h3 id="导入数据"><a href="#导入数据" class="headerlink" title="导入数据"></a>导入数据</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/57e8e3a5edef94d9a6716c3dabff7297.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6cd5842cbe104ec60c30b2641a0c7d8f.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/deac75aea9ead2b089a4b0079d4b93b7.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b2c6eea9cc8bd8e9500ce653295b6e2b.jpg"></p><h3 id="下载饼图"><a href="#下载饼图" class="headerlink" title="下载饼图"></a>下载饼图</h3><p>查询饼图</p><p><code>grafana-cli plugins list-remote |grep -i pie</code></p><p>下载饼图</p><p><code>grafana-cli plugins install grafana-piechart-panel</code></p><p>压力测试</p><p><code>ab -n 次数 -c 并发 http://192.168.1.10/zabbix/index.php</code></p><h3 id="添加数据源-1"><a href="#添加数据源-1" class="headerlink" title="添加数据源"></a>添加数据源</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/21b14333cffb3c8725817b8de23ee8ee.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/83c379acf3030542f917819db78d7cdc.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/7f5697ae184174193116330b5ab296cb.jpg"></p><p>密码：可以查看 /etc/zabbix/web/zabbix.conf.php 配置文件</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/d81fbfca845e4ccbcb7c64969cd36365.jpg"></p><h1 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h1><p>利用模板可以快速添加监控项： 模板可以分享</p><p>Zabbix中，模板就是主机</p><h2 id="创建模板"><a href="#创建模板" class="headerlink" title="创建模板"></a>创建模板</h2><h3 id="7层架构"><a href="#7层架构" class="headerlink" title="7层架构"></a>7层架构</h3><p>pass</p><h3 id="自定义模板-1"><a href="#自定义模板-1" class="headerlink" title="自定义模板"></a>自定义模板</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/3ad9c55967f1d092af0c65851193a4ca.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/50efb0f464fd0a2b9613220c2adb3b9c.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807084036706.png"></p><h3 id="更新应用集"><a href="#更新应用集" class="headerlink" title="更新应用集"></a>更新应用集</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/3e5b81b8a37c771f0d0bb031a3289d7f.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/0c4f63d4125c8ef05ad28aa9cee8042d.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/5e119f7986cfe845194c19db6331f1a3.jpg"></p><h3 id="添加触发器"><a href="#添加触发器" class="headerlink" title="添加触发器"></a>添加触发器</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/1446c1890bf44b347a9a2e2e215544bc.jpg"></p><h3 id="添加图形"><a href="#添加图形" class="headerlink" title="添加图形"></a>添加图形</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/1b4971938efc97a3dd275ffa8a7a4daa.jpg"></p><h3 id="模板的导出-导入以及共享入口"><a href="#模板的导出-导入以及共享入口" class="headerlink" title="模板的导出/导入以及共享入口"></a>模板的导出/导入以及共享入口</h3><h4 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/bb2fc17b32af8b55bcef755b90f9044a.jpg"></p><h4 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/cb6057711702fcbdfe674b6ab7968134.jpg"></p><h4 id="共享模板入口"><a href="#共享模板入口" class="headerlink" title="共享模板入口"></a>共享模板入口</h4><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/47201661197f3d2fccbbf68fd8c19179.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b098ed9914ea04f3b31801655df3b996.jpg"></p><h4 id="主机链接模板"><a href="#主机链接模板" class="headerlink" title="主机链接模板"></a><strong>主机链接模板</strong></h4><h5 id="复制命令"><a href="#复制命令" class="headerlink" title="复制命令"></a>复制命令</h5><p><code>scp -rp tcp.conf </code></p><p><code>[root@192.168.1.91:pwd</code></p><h5 id="重启agnet并刷新页面"><a href="#重启agnet并刷新页面" class="headerlink" title="重启agnet并刷新页面"></a>重启agnet并刷新页面</h5><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/001757ba4295f56cced9b3991a91555d.jpg"></p><h5 id="设置恢复时间"><a href="#设置恢复时间" class="headerlink" title="设置恢复时间"></a>设置恢复时间</h5><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f56404e3a7cce4d364e60c99e2553320.jpg"></p><h5 id="重启server端服务"><a href="#重启server端服务" class="headerlink" title="重启server端服务"></a>重启server端服务</h5><h2 id="监控-nginx-模板"><a href="#监控-nginx-模板" class="headerlink" title="监控 nginx 模板"></a>监控 nginx 模板</h2><h3 id="开启监控页面"><a href="#开启监控页面" class="headerlink" title="开启监控页面"></a>开启监控页面</h3><p>在nginx在添加</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /nginx-status &#123;</span><br><span class="line"><span class="attribute">stub_status</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重启nginx并访问http-ip-nginx-status"><a href="#重启nginx并访问http-ip-nginx-status" class="headerlink" title="重启nginx并访问http://ip/nginx-status/"></a>重启nginx并访问<a href="http://ip/nginx-status/">http://ip/nginx-status/</a></h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6b1d2db2b98839617bd4828fad135729.png"></p><h3 id="编写状态脚本"><a href="#编写状态脚本" class="headerlink" title="编写状态脚本"></a>编写状态脚本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir &#x2F;etc&#x2F;zabbix&#x2F;scripts</span><br><span class="line">vim &#x2F;etc&#x2F;zabbix&#x2F;scripts&#x2F;nginx_status.sh</span><br></pre></td></tr></table></figure><p>内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">BKUP_DATE=`/bin/date +%Y%m%d`</span><br><span class="line"><span class="comment">#LOG=&quot;/data/log/zabbix/webstatus.log&quot;</span></span><br><span class="line">HOST=127.0.0.1</span><br><span class="line">PORT=80</span><br><span class="line"> </span><br><span class="line">ARGS=1</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -ne <span class="string">&quot;<span class="variable">$ARGS</span>&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Please input one arguement:&quot;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">exist)</span><br><span class="line">        result=`/sbin/pidof nginx | wc -l`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">active)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| grep <span class="string">&#x27;Active&#x27;</span> | awk <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>`</span><br><span class="line">            <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">reading)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| grep <span class="string">&#x27;Reading&#x27;</span> | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">writing)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| grep <span class="string">&#x27;Writing&#x27;</span> | awk <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">waiting)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| grep <span class="string">&#x27;Waiting&#x27;</span> | awk <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">accepts)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| awk NR==3 | awk <span class="string">&#x27;&#123;print $1&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">handled)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| awk NR==3 | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>`</span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">requests)</span><br><span class="line">        result=`/usr/bin/curl <span class="string">&quot;http://<span class="variable">$HOST</span>:<span class="variable">$PORT</span>/nginx-status&quot;</span> 2&gt;/dev/null| awk NR==3 | awk <span class="string">&#x27;&#123;print $3&#125;&#x27;</span> ` </span><br><span class="line">        <span class="built_in">echo</span> <span class="variable">$result</span></span><br><span class="line">            ;;</span><br><span class="line">*)</span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;Usage:<span class="variable">$0</span>(active|reading|writing|waiting|accepts|handled|requests)&quot;</span></span><br><span class="line">        ;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><p><code>/etc/zabbix/scripts/nginx_status.sh</code></p><h3 id="添加键值"><a href="#添加键值" class="headerlink" title="添加键值"></a>添加键值</h3><p><code>UserParameter=nginx.status[*],/etc/zabbix/scripts/nginx_status.sh \$1</code></p><h3 id="重启zabbix—agent"><a href="#重启zabbix—agent" class="headerlink" title="重启zabbix—agent"></a>重启zabbix—agent</h3><h3 id="手动取值测试"><a href="#手动取值测试" class="headerlink" title="手动取值测试"></a>手动取值测试</h3><p><code>zabbix_get -s 172.16.180.11 -k nginx.status[active]</code></p><h3 id="创建模板-1"><a href="#创建模板-1" class="headerlink" title="创建模板"></a>创建模板</h3><h3 id="触发器值填写exist"><a href="#触发器值填写exist" class="headerlink" title="触发器值填写exist"></a>触发器值填写exist</h3><h3 id="链接模板"><a href="#链接模板" class="headerlink" title="链接模板"></a>链接模板</h3><h2 id="监控-php-fpm-模板"><a href="#监控-php-fpm-模板" class="headerlink" title="监控 php-fpm 模板"></a>监控 php-fpm 模板</h2><h3 id="开启监控页面-1"><a href="#开启监控页面-1" class="headerlink" title="开启监控页面"></a>开启监控页面</h3><p>编写php-fpm配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;php-fpm.d&#x2F;www.conf</span><br><span class="line">pm.status_path &#x3D; &#x2F;php_status</span><br></pre></td></tr></table></figure><p>编写nginx配置文件(通过nginx访问)</p><p><code>vim nginx.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> \<span class="regexp">~ /php_status</span> &#123;</span><br><span class="line"><span class="attribute">root</span> /usr/local/nginx/html/;</span><br><span class="line"><span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line"><span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line"><span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /usr/local/nginx/html\<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"><span class="attribute">include</span> fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/63730f090e3eaed1953b47cbcace5758.png"></p><h3 id="导入配置文件"><a href="#导入配置文件" class="headerlink" title="导入配置文件"></a>导入配置文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fpm.conf</span><br><span class="line">UserParameter&#x3D;php-fpm[*], &#x2F;bin&#x2F;bash &#x2F;etc&#x2F;zabbix&#x2F;scripts&#x2F;php-fpm.sh $1</span><br></pre></td></tr></table></figure><p>Php-fpm.Sh</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="function"><span class="title">pool</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/pool/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;       </span><br><span class="line"><span class="function"><span class="title">process_manager</span></span>() &#123;       </span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/process manager/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="title">start_since</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^start since:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">accepted_conn</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^accepted conn:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">listen_queue</span></span>()&#123;    </span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^listen queue:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">max_listen_queue</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^max listen queue:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">listen_queue_len</span></span>()&#123; </span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^listen queue len:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">idle_processes</span></span>()&#123;</span><br><span class="line">   curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^idle processes:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">active_processes</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^active processes:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">total_processes</span></span>()&#123;</span><br><span class="line">   curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^total processes:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">max_active_processes</span></span>()&#123;</span><br><span class="line">   curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^max active processes:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="title">max_children_reached</span></span>()&#123;</span><br><span class="line">    curl -s http://127.0.0.1:8080/php_status|awk <span class="string">&#x27;/^max children reached:/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line">pool)</span><br><span class="line">pool</span><br><span class="line">;;</span><br><span class="line">process_manager)</span><br><span class="line">process_manager</span><br><span class="line">;;</span><br><span class="line">start_since)</span><br><span class="line">    start_since</span><br><span class="line">    ;;</span><br><span class="line">accepted_conn)</span><br><span class="line">    accepted_conn</span><br><span class="line">    ;;</span><br><span class="line">listen_queue)</span><br><span class="line">    listen_queue</span><br><span class="line">    ;;</span><br><span class="line">max_listen_queue)</span><br><span class="line">    max_listen_queue</span><br><span class="line">    ;;</span><br><span class="line">listen_queue_len)</span><br><span class="line">    listen_queue_len</span><br><span class="line">    ;;</span><br><span class="line">idle_processes)</span><br><span class="line">    idle_processes</span><br><span class="line">    ;;</span><br><span class="line">active_processes)</span><br><span class="line">    active_processes</span><br><span class="line">    ;;</span><br><span class="line">total_processes)</span><br><span class="line">    total_processes</span><br><span class="line">    ;;</span><br><span class="line">max_active_processes)</span><br><span class="line">    max_active_processes</span><br><span class="line">    ;;</span><br><span class="line">max_children_reached)</span><br><span class="line">    max_children_reached</span><br><span class="line">    ;;</span><br><span class="line">*)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;Usage: <span class="variable">$0</span> &#123;pool|process_manager|start_since|accepted_conn|listen_queue|max_listen_queue|listen_queue_len|idle_processes|active_processes|total_processes|max_active_processes|max_children_reached&#125;&quot;</span></span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><h3 id="测试取值"><a href="#测试取值" class="headerlink" title="测试取值"></a>测试取值</h3><p><code>zabbix_get -s 127.0.0.1 -k php-fpm[total_processes]</code></p><h3 id="导入模板"><a href="#导入模板" class="headerlink" title="导入模板"></a>导入模板</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">zabbix_export</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">date</span>&gt;</span>2017-10-02T12:57:53Z<span class="tag">&lt;/<span class="name">date</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Templates<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">templates</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groups</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">group</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>Templates<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">groups</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">items</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1(qps)<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[accepted_conn]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>1<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[active_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[idle_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[listen_queue]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[listen_queue_len]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_active_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_children_reached]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_listen_queue]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[pool]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>0<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[process_manager]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>0<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[start_since]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>0<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>4<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm.$1<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_community</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">multiplier</span>&gt;</span>0<span class="tag">&lt;/<span class="name">multiplier</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmp_oid</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[total_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay</span>&gt;</span>120<span class="tag">&lt;/<span class="name">delay</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">history</span>&gt;</span>7<span class="tag">&lt;/<span class="name">history</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">trends</span>&gt;</span>365<span class="tag">&lt;/<span class="name">trends</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value_type</span>&gt;</span>3<span class="tag">&lt;/<span class="name">value_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">allowed_hosts</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">units</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delta</span>&gt;</span>0<span class="tag">&lt;/<span class="name">delta</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_contextname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securityname</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_securitylevel</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_securitylevel</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_authprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_authpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privprotocol</span>&gt;</span>0<span class="tag">&lt;/<span class="name">snmpv3_privprotocol</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">snmpv3_privpassphrase</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">formula</span>&gt;</span>1<span class="tag">&lt;/<span class="name">formula</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">delay_flex</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">params</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">ipmi_sensor</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">data_type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">data_type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authtype</span>&gt;</span>0<span class="tag">&lt;/<span class="name">authtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">username</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">password</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">publickey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">privatekey</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">port</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">inventory_link</span>&gt;</span>0<span class="tag">&lt;/<span class="name">inventory_link</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">applications</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">application</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">name</span>&gt;</span>php-fpm<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">applications</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">valuemap</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">logtimefmt</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">items</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">discovery_rules</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">macros</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">templates</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">screens</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">templates</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">triggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">trigger</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">expression</span>&gt;</span>&#123;Template App For XSJ Web Php-fpm:php-fpm[total_processes].last(0)&#125;<span class="symbol">&amp;lt;</span>1<span class="tag">&lt;/<span class="name">expression</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>&#123;HOST.NAME&#125;的Php-fpm进程已宕掉，请检查！<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">status</span>&gt;</span>0<span class="tag">&lt;/<span class="name">status</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">priority</span>&gt;</span>3<span class="tag">&lt;/<span class="name">priority</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">description</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependencies</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">trigger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">triggers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">graphs</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">graph</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Web Php-fpm status<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">width</span>&gt;</span>900<span class="tag">&lt;/<span class="name">width</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">height</span>&gt;</span>200<span class="tag">&lt;/<span class="name">height</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">yaxismin</span>&gt;</span>0.0000<span class="tag">&lt;/<span class="name">yaxismin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">yaxismax</span>&gt;</span>100.0000<span class="tag">&lt;/<span class="name">yaxismax</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">show_work_period</span>&gt;</span>1<span class="tag">&lt;/<span class="name">show_work_period</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">show_triggers</span>&gt;</span>1<span class="tag">&lt;/<span class="name">show_triggers</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">show_legend</span>&gt;</span>1<span class="tag">&lt;/<span class="name">show_legend</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">show_3d</span>&gt;</span>0<span class="tag">&lt;/<span class="name">show_3d</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">percent_left</span>&gt;</span>0.0000<span class="tag">&lt;/<span class="name">percent_left</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">percent_right</span>&gt;</span>0.0000<span class="tag">&lt;/<span class="name">percent_right</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ymin_type_1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ymin_type_1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ymax_type_1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ymax_type_1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ymin_item_1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ymin_item_1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ymax_item_1</span>&gt;</span>0<span class="tag">&lt;/<span class="name">ymax_item_1</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">graph_items</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>0<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>00C800<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[active_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>1<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>0000C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[idle_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>2<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>C8C800<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_active_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>3<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>009600<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[total_processes]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>4<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>C800C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[listen_queue]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>5<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>960000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_listen_queue]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>6<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>00C8C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[listen_queue_len]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>7<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>C8C8C8<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[max_children_reached]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">graph_item</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">sortorder</span>&gt;</span>8<span class="tag">&lt;/<span class="name">sortorder</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">drawtype</span>&gt;</span>5<span class="tag">&lt;/<span class="name">drawtype</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">color</span>&gt;</span>C80000<span class="tag">&lt;/<span class="name">color</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">yaxisside</span>&gt;</span>0<span class="tag">&lt;/<span class="name">yaxisside</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">calc_fnc</span>&gt;</span>2<span class="tag">&lt;/<span class="name">calc_fnc</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">type</span>&gt;</span>0<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">host</span>&gt;</span>Template App For XSJ Web Php-fpm<span class="tag">&lt;/<span class="name">host</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">key</span>&gt;</span>php-fpm[accepted_conn]<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">graph_item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">graph_items</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">graph</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">graphs</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">zabbix_export</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="模板变量"><a href="#模板变量" class="headerlink" title="模板变量"></a>模板变量</h3><p>用宏传入</p><h3 id="更新间隔"><a href="#更新间隔" class="headerlink" title="更新间隔"></a>更新间隔</h3><p>更新间隔不能太快，容易造成高负载</p><h2 id="监控-redis-模板"><a href="#监控-redis-模板" class="headerlink" title="监控 redis 模板"></a>监控 redis 模板</h2><h3 id="配置文件和脚本"><a href="#配置文件和脚本" class="headerlink" title="配置文件和脚本"></a>配置文件和脚本</h3><p>配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">监控redis状态，我们可以根据这个参数对应的监控项创建redis状态触发器。</span><br><span class="line">redis monitor</span><br><span class="line">userParameter&#x3D;redis.status,&#x2F;usr&#x2F;local&#x2F;bin&#x2F;redis-cli -h 127.0.0.1 -p 6379 -a aosatech ping |grep -c PONG</span><br><span class="line">userParameter&#x3D;redis_info[*],&#x2F;etc&#x2F;zabbix&#x2F;scripts&#x2F;redis_zbx.sh $1 $2</span><br></pre></td></tr></table></figure><p><strong>注意：REDISPATH=”/usr/bin/redis-cli”根据redis-cli命令的位置进行调整！</strong></p><p>which redis-cli</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/b46faf51c92cf88e710e8f1996330421.png"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">REDISPATH=<span class="string">&quot;/usr/local/bin/redis-cli&quot;</span></span><br><span class="line">HOST=<span class="string">&quot;127.0.0.1&quot;</span></span><br><span class="line">PORT=<span class="string">&quot;6379&quot;</span></span><br><span class="line">PASSWORD=<span class="string">&quot;aosatech&quot;</span></span><br><span class="line">REDIS_INFO=<span class="string">&quot;<span class="variable">$REDISPATH</span> -h <span class="variable">$HOST</span> -p <span class="variable">$PORT</span> -a <span class="variable">$PASSWORD</span> info&quot;</span></span><br><span class="line"><span class="keyword">if</span> [[ <span class="variable">$#</span> == 1 ]];<span class="keyword">then</span></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">cluster)</span><br><span class="line">result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep cluster|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">uptime_in_seconds)</span><br><span class="line">    result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep uptime_in_seconds|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    connected_clients)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep connected_clients|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    client_longest_output_list)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep client_longest_output_list|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    client_biggest_input_buf)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep client_biggest_input_buf|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    blocked_clients)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep blocked_clients|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">#内存</span></span><br><span class="line">    used_memory)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>|awk <span class="string">&#x27;NR==1&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    used_memory_human)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_human|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    used_memory_rss)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_rss|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span> | awk <span class="string">&#x27;NR==1&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    used_memory_rss_human)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_rss_human |awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    used_memory_peak)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_peak|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>|awk <span class="string">&#x27;NR==1&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    used_memory_peak_human)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_peak_human|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    used_memory_lua)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_lua|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>|awk <span class="string">&#x27;NR==1&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;     </span><br><span class="line">    used_memory_lua_human)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep used_memory_luai_human|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line"></span><br><span class="line">    mem_fragmentation_ratio)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep mem_fragmentation_ratio|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    <span class="comment">#rdb</span></span><br><span class="line">    rdb_changes_since_last_save)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep rdb_changes_since_last_save|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    rdb_bgsave_in_progress)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep rdb_bgsave_in_progress|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    rdb_last_save_time)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep rdb_last_save_time|awk -F<span class="string">&quot;:&quot;</span> <span class="string">&#x27;&#123;print $NF&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    rdb_last_bgsave_status)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;rdb_last_bgsave_status&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | /bin/grep -c ok)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    rdb_current_bgsave_time_sec)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;rdb_current_bgsave_time_sec&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    <span class="comment">#rdbinfo</span></span><br><span class="line">    aof_enabled)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_enabled&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_rewrite_scheduled)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_rewrite_scheduled&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_last_rewrite_time_sec)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_last_rewrite_time_sec&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">                ;; </span><br><span class="line">    aof_current_rewrite_time_sec)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_current_rewrite_time_sec&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">                ;; </span><br><span class="line">    aof_last_bgrewrite_status)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_last_bgrewrite_status&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | /bin/grep -c ok)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    <span class="comment">#aofinfo</span></span><br><span class="line">    aof_current_size)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_current_size&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_base_size)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_base_size&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_pending_rewrite)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_pending_rewrite&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_buffer_length)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_buffer_length&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    aof_rewrite_buffer_length)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_rewrite_buffer_length&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;   </span><br><span class="line">    aof_pending_bio_fsync)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_pending_bio_fsync&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    aof_delayed_fsync)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;aof_delayed_fsync&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;                     </span><br><span class="line">    <span class="comment">#stats</span></span><br><span class="line">    total_connections_received)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;total_connections_received&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    total_commands_processed)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;total_commands_processed&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    instantaneous_ops_per_sec)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;instantaneous_ops_per_sec&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    rejected_connections)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;rejected_connections&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    expired_keys)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;expired_keys&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    evicted_keys)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;evicted_keys&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    keyspace_hits)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;keyspace_hits&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>) </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;; </span><br><span class="line">    keyspace_misses)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;keyspace_misses&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    pubsub_channels)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;pubsub_channels&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    pubsub_channels)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;pubsub_channels&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    pubsub_patterns)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;pubsub_patterns&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    latest_fork_usec)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;latest_fork_usec&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;           </span><br><span class="line">    connected_slaves)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;connected_slaves&quot;</span> | awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    master_link_status)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;master_link_status&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>|/bin/grep -c up)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    master_last_io_seconds_ago)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;master_last_io_seconds_ago&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    master_sync_in_progress)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;master_sync_in_progress&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    slave_priority)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;slave_priority&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    <span class="comment">#cpu</span></span><br><span class="line">    used_cpu_sys)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;used_cpu_sys&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_user)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;used_cpu_user&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_sys_children)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;used_cpu_sys_children&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    used_cpu_user_children)</span><br><span class="line">            result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;used_cpu_user_children&quot;</span>|awk -F<span class="string">&#x27;:&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">    ;;</span><br><span class="line">    *)</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;argu error&quot;</span></span><br><span class="line">    ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"><span class="comment">#db0:key</span></span><br><span class="line">   <span class="keyword">elif</span> [[ <span class="variable">$#</span> == 2 ]];<span class="keyword">then</span></span><br><span class="line">        <span class="keyword">case</span> <span class="variable">$2</span> <span class="keyword">in</span></span><br><span class="line">            keys)</span><br><span class="line">                    result=$(<span class="variable">$REDIS_INFO</span>| /bin/grep -w <span class="string">&quot;db0&quot;</span>| /bin/grep -w <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | /bin/grep -w <span class="string">&quot;keys&quot;</span> | awk -F<span class="string">&#x27;=|,&#x27;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">            ;;</span><br><span class="line">            expires)</span><br><span class="line">                    result=$(<span class="variable">$REDIS_INFO</span>| /bin/grep -w <span class="string">&quot;db0&quot;</span>| /bin/grep -w <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | /bin/grep -w <span class="string">&quot;expires&quot;</span> | awk -F<span class="string">&#x27;=|,&#x27;</span> <span class="string">&#x27;&#123;print $4&#125;&#x27;</span>)</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">            ;;</span><br><span class="line">            avg_ttl)</span><br><span class="line">                    result=$(<span class="variable">$REDIS_INFO</span>|/bin/grep -w <span class="string">&quot;db0&quot;</span>| /bin/grep -w <span class="string">&quot;<span class="variable">$1</span>&quot;</span> | /bin/grep -w <span class="string">&quot;avg_ttl&quot;</span> | awk -F<span class="string">&#x27;=|,&#x27;</span> <span class="string">&#x27;&#123;print $6&#125;&#x27;</span>)</span><br><span class="line">                    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$result</span>&quot;</span> </span><br><span class="line">            ;;</span><br><span class="line">            *)</span><br><span class="line">                 <span class="built_in">echo</span> <span class="string">&quot;argu error&quot;</span> ;;</span><br><span class="line">        <span class="keyword">esac</span></span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="手动取值"><a href="#手动取值" class="headerlink" title="手动取值"></a>手动取值</h3><p><code>zabbix_get -s 192.168.1.91 -k redis_info[blocked_clients]</code></p><h3 id="建立-导入模板"><a href="#建立-导入模板" class="headerlink" title="建立/导入模板"></a>建立/导入模板</h3><p>Pass</p><h3 id="加速"><a href="#加速" class="headerlink" title="加速"></a>加速</h3><p>Redis可以用来加速网页访问，但是需要下在php-redis进行连接配置</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-02-监控项&amp;触发&amp;报警</title>
      <link href="2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-02-%E7%9B%91%E6%8E%A7%E9%A1%B9&amp;%E8%A7%A6%E5%8F%91&amp;%E6%8A%A5%E8%AD%A6/"/>
      <url>2020/07/17/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-02-%E7%9B%91%E6%8E%A7%E9%A1%B9&amp;%E8%A7%A6%E5%8F%91&amp;%E6%8A%A5%E8%AD%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="自定义监控项-服务监控"><a href="#自定义监控项-服务监控" class="headerlink" title="自定义监控项(服务监控)"></a>自定义监控项(服务监控)</h1><h2 id="命令行，手动取值"><a href="#命令行，手动取值" class="headerlink" title="命令行，手动取值"></a>命令行，手动取值</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iostat |awk &#39; $1 ~&#x2F;sda&#x2F;&#39;</span><br><span class="line">sda        7.52       9.81      141.25      689991     9933268</span><br><span class="line"></span><br><span class="line">iostat |awk &#39; $1 ~&#x2F;sda&#x2F;&#123;print  $2&#125;&#39;</span><br><span class="line">7.52</span><br></pre></td></tr></table></figure><h2 id="修改zabbix-agent配置文件"><a href="#修改zabbix-agent配置文件" class="headerlink" title="修改zabbix-agent配置文件"></a>修改zabbix-agent配置文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf </span><br><span class="line">UserParameter&#x3D;sda_tps</span><br><span class="line"></span><br><span class="line">iostat |awk &#39;$1 ~&#x2F;sda&#x2F;&#123;print  $2&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/598cf3a298b26d527668fb21180a5c94.jpg"></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-agent.service</span><br></pre></td></tr></table></figure><h2 id="zabbix-server测试监控项取值"><a href="#zabbix-server测试监控项取值" class="headerlink" title="zabbix-server测试监控项取值"></a>zabbix-server测试监控项取值</h2><p>安装zabbix_get</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install zabbix-get</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh https://mirror.tuna.tsinghua.edu.cn/zabbix/zabbix/4.0/rhel/7/x86_64/zabbix-get-4.0.19-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>设置超时时间(4.44版本开始不设置超时可能无法正常取值，默认为3秒)</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6b2c49a6960feef60262589c1ac7165f.jpg"></p><p>重启zabbix-agent</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart zabbix-agent</span><br></pre></td></tr></table></figure><p>测试取值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@node10 src]<span class="comment"># zabbix_get -s 127.0.0.1 -k sda_tps</span></span><br><span class="line">7.52</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/2a6affe91b1ec410a2ca64e78d8378ce.jpg"></p><h2 id="在web界面添加自定义监控项"><a href="#在web界面添加自定义监控项" class="headerlink" title="在web界面添加自定义监控项"></a>在web界面添加自定义监控项</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715100745254.png" alt="image-20200715100745254"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715100422240.png" alt="image-20200715100422240"></p><h2 id="在web界面查询监控"><a href="#在web界面查询监控" class="headerlink" title="在web界面查询监控"></a>在web界面查询监控</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/05bc056c70bf266e086ba67ececc15e6.jpg"></p><p>名称：支持模糊查询</p><h2 id="权限分离"><a href="#权限分离" class="headerlink" title="权限分离"></a>权限分离</h2><p>因为权限问题，部分脚本会无法正常取值</p><p>如：</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9838be8ecea4c7b8e89c6297b06b143b.jpg"></p><p>处理方案：</p><ol><li><p>加sudo启动</p></li><li><p>给路径命令授权(更改属主)</p><p>(1)寻找命令执行目录</p><pre><code>`which netstat(命令)`</code></pre><p>(2)给命令执行目录授权</p><pre><code>`chmod u+s /usr/bin/netstat`</code></pre><p>(3)查看目录权限</p><pre><code>`ll /usr/bin/netstat`</code></pre><p>(4)查看命令效果</p><pre><code>`netstat -antp|head -5`</code></pre></li></ol><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4f38718b43fc7dec74a88e16319ec201.jpg"></p><h2 id="将自定义监控项添加到其他主机"><a href="#将自定义监控项添加到其他主机" class="headerlink" title="将自定义监控项添加到其他主机"></a>将自定义监控项添加到其他主机</h2><ol><li><p>手动CP添加</p><p>(1)通过过滤我们可以看到，zabbix的配置文件有扩展项目</p><p>​    <code>grep -Ev &#39;^$|#&#39; /etc/zabbix/zabbix_agentd.conf</code></p></li></ol><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/55a68d1192c97be07ee56094e9f8db75.jpg"></p><p>​        (2)将原自定义项写入扩展路径</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/0c09d469fdc35df5f09516a9663c0b69.jpg"></p><p>​                <code>vim /etc/zabbix/zabbix_agentd.d/user.conf</code></p><p>​                写入自定义文件</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/37577f43111e05e8bf596e3fe04f77d1.jpg"></p><p>​        (3)重启zabbix-agent生效</p><p>​            <code>systemctl restart zabbix-agent.service</code></p><ol start="2"><li><p>手动web添加(要先给agent端准备好命令，我就觉得很脑残)</p><p>(1)在监控项中将需要添加的监控项目选中，点击复制</p></li></ol><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/4d36d6798ca0f221bf741671be67adc6.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807083116072.png" alt="image-20200807083116072"></p><p>​        (2)选择主机/群组进行复制</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/813af171eba84c626946ce0b3ffb0528.jpg"></p><p>​        (3)在主机中查看监控项</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/29096ab82279fe1c52f2e4b8b3737633.jpg"></p><p>​        (4)在最新数据中查看状态</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9ca1e6d669dc033f206788f913dbb9dc.jpg"></p><p>名称：不选即可查看所有</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/a74ec25120cd1651dabc4e5289898bd1.jpg"></p><p>原因：因为缺少授权/命令包</p><p>解决：1. 授权相关命令路径  </p><p>​                <code>which netstat(命令)</code></p><p>​                <code>chmod u+s 路径</code></p><p>​            2.安装命令包<br>​                先搜索命令包，看是否存在<br>​                <code>yum provides iostat(命令包名)</code></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/10047757269efd1f98e1b826fad22810.jpg"></p><p>​        3.安装命令包   </p><p>​            <code>yum install iostat</code></p><p>重启agent端(批量监控不能进行server端重启)</p><h1 id="自定义触发器-阈值"><a href="#自定义触发器-阈值" class="headerlink" title="自定义触发器(阈值)"></a>自定义触发器(阈值)</h1><h2 id="添加自定义监控项"><a href="#添加自定义监控项" class="headerlink" title="添加自定义监控项"></a>添加自定义监控项</h2><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715101731549.png" alt="image-20200715101731549" style="zoom:80%;" /><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/ca04dd2387d0491b8c5f92355384864f.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/6ca54aeeb1d88cc4ce3bead7dcc078ab.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f5bb61d63cb731be0c930c48b23d8490.jpg"></p><p>{Zabbix server:system.users.num.last()}&gt;4</p><ul><li>Zabbix server：主机名</li><li>system.users.num：监控项key值</li><li>last()：函数方法</li></ul><p>严重性：</p><ul><li>灾难：机房连接不上，还能用的就不叫灾难，灾难级别报告给老板，剩下自己处理</li><li>严重：</li><li>一般严重：</li><li>警告：</li></ul><h2 id="开启动作和报警媒介"><a href="#开启动作和报警媒介" class="headerlink" title="开启动作和报警媒介"></a>开启动作和报警媒介</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/61bbe16c9d2c9f2081a04c0a3f78512c.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/57ff86bb28bb5020058231355752449e.jpg"></p><h1 id="邮件报警和微信报警-无人值守"><a href="#邮件报警和微信报警-无人值守" class="headerlink" title="邮件报警和微信报警(无人值守)"></a>邮件报警和微信报警(无人值守)</h1><h2 id="邮件报警"><a href="#邮件报警" class="headerlink" title="邮件报警"></a>邮件报警</h2><h3 id="发件人"><a href="#发件人" class="headerlink" title="发件人"></a>发件人</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/8c224f5677aa76398485a88e1cb40b25.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/1cac108490cc3ca359737270fe31b1b5.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/e833f40b6e43a0b1b15825530f98af4c.jpg"></p><h3 id="收件人"><a href="#收件人" class="headerlink" title="收件人"></a>收件人</h3><p>需要建立zabbix账号，一个账号对应一个邮箱地址</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/3c9863fed0357761c5dafa1b2c038414.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/063d68c84dff41e2eaa5f4bf973ad274.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/9c095b5a26269c53f29f1bea57ea8a27.jpg"></p><h3 id="启用动作"><a href="#启用动作" class="headerlink" title="启用动作"></a>启用动作</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/cd7fb277744338582e38c0866202911d.jpg"></p><p>定制消息格式</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/8f87191f5190b822a5080149c3c2eb99.jpg"></p><p>定制报警的内容<br><a href="https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location">https://www.zabbix.com/documentation/4.0/zh/manual/appendix/macros/supported_by_location</a></p><h2 id="微信报警"><a href="#微信报警" class="headerlink" title="微信报警"></a>微信报警</h2><h3 id="放入脚本"><a href="#放入脚本" class="headerlink" title="放入脚本"></a>放入脚本</h3><p>将weixin.py放在zabbix特定目录/usr/lib/zabbix/alertscripts(可查：<code>grep -Ev &#39;^$|#&#39; /etc/zabbix/zabbix_server.conf</code>)</p><p>查找企业ID、查找应用密码、应用ID</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200807083746042.png" alt="image-20200807083746042"></p><p>CORPID=企业id</p><p>Appsecret=应用密码</p><p>Agentid=应用id</p><p>安装python模块</p><ol><li><p>配置阿里云源</p><p><code>curl -o /etc/yum.repos.d/CentOS-Base.repohttp://mirrors.aliyun.com/repo/Centos7.repo</code></p></li><li><p>安装python环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum -y install epel-release</span><br><span class="line">yum install python-pip</span><br><span class="line">pip install requests</span><br><span class="line">pip install --upgrade requests</span><br></pre></td></tr></table></figure></li><li><p>测试命令行</p><p><code>python weixin.py LiZongLi &#39;外卖到了&#39; &#39;恰饭 8月12日 23:23&#39;</code></p></li><li><p>查看发送日志</p><p><code>cat /tmp/weixin.log</code></p><p>删除日志(因为测试以root环境创建，而zabbix需要以普通用户创建)</p></li></ol><h3 id="配置发件人"><a href="#配置发件人" class="headerlink" title="配置发件人"></a>配置发件人</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f5ea498739a308a5a61729480cde2bf4.jpg"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/f1609a615b6879fa79137b170f2845c4.jpg"></p><p>{ALERT.SENDTO}, {ALERT.SUBJECT} and {ALERT.MESSAGE}</p><h3 id="配置收件人"><a href="#配置收件人" class="headerlink" title="配置收件人"></a>配置收件人</h3><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715102456212.png" alt="image-20200715102456212"></p><h3 id="接收测试"><a href="#接收测试" class="headerlink" title="接收测试"></a>接收测试</h3>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高可用-Keepalived</title>
      <link href="2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Keepalived/"/>
      <url>2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Keepalived/</url>
      
        <content type="html"><![CDATA[<h1 id="全局定义-globaldefinnition"><a href="#全局定义-globaldefinnition" class="headerlink" title="全局定义(globaldefinnition)"></a>全局定义(globaldefinnition)</h1><p>这一部分用来设置keepalived的故障通知机制和RouterID标识。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">！Configuration File for keepalived</span><br><span class="line">global_defs &#123;</span><br><span class="line">notification-email </span><br><span class="line">[xxx@qq.com](mailto:xxx@qq.com)        #需要抵达的邮箱地址</span><br><span class="line">[xxx@hotmail.com](mailto:xxxx@hotmail.com)    #需要抵达的邮箱地址</span><br><span class="line">&#125;</span><br><span class="line">  notification_email_from [xxx@qq.com](mailto:xxx@qq.com)   #用于发送的邮箱</span><br><span class="line">  smtp_server smtp.qq.com          #stmp服务器</span><br><span class="line">  smtp_connect_timeout 30          #设置超时时间</span><br><span class="line">  router_id LVS_DEVEL              #keepalived路由标识(router_id)。在统一局域网内，这个标识应该是唯一的。</span><br></pre></td></tr></table></figure><p>大括号“{}”用于分割区块，需要成对出现。如果少了半个，keepalived也不会报错，但也得不到预期效果。</p><h1 id="VRRP实例定义区块部分"><a href="#VRRP实例定义区块部分" class="headerlink" title="VRRP实例定义区块部分"></a>VRRP实例定义区块部分</h1><p>这个部分主要用来定义具体服务的实例配置，包括Keepalived主备状态、接口、优先级、认证方式和IP信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#定义一个vrrp_instance实例，名字是VI_1，每个vvrp_instance实例都可以认为是Keepalived中的一个业务服务。</span><br><span class="line"></span><br><span class="line">#keepalived中可以有多个这一的实例，备节点也要存在相同的实例才能进行故障切换接管。</span><br><span class="line">vrrp_instance VI_1 &#123;    </span><br><span class="line">state MASTER     #角色为master，其他节点应当为BACKUP，才能进行顺利的故障接管</span><br><span class="line">  interface ens33    #网络通信接口，要确定好具体是哪一块网卡</span><br><span class="line">  </span><br><span class="line">  #虚拟路由ID，这个标识最好是一个数字，并且在一keepalived中是唯一的。</span><br><span class="line">  #但是MASTER和BACKUP中保持一致，否则会出现”脑裂”问题。</span><br><span class="line">  virtual_router_id 51 </span><br><span class="line">  </span><br><span class="line">  priority 100      #优先级&#x2F;权重为100，master要比backup大</span><br><span class="line">  advert_int 1       #同步时间间隔,master和bakcup之间的通信检查时间，默认为1s</span><br><span class="line"></span><br><span class="line">#往下都是权限认证配置，包括认证类型(auth_type)和认证密码(auth_pass)，认证类型有PASS(Simple Passwd(suggested))。</span><br><span class="line"></span><br><span class="line">#AH(ipasec(not recommended))两种，官方推荐类型为PASS。密码为明文模式，最好不要超过8个字符，推荐用4个字符。</span><br><span class="line">#同一VRRP实例的master和backup使用相同密码才能通信。</span><br><span class="line"></span><br><span class="line">  authentication &#123;  </span><br><span class="line">        auth_type PASS</span><br><span class="line">        auth_pass 123456    &#x2F;&#x2F;定义密码，这个密码自定义</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#虚拟IP（VIP）地址，可以配置多个虚拟IP（VIP）。</span><br><span class="line">#配置时，最好指定子网掩码和VIP绑定的网络接口，否则默认验码是32位。绑定的网卡要和前面的interface保持一致。</span><br><span class="line">#这里就是和我们工作中需要和域名绑定的IP，即和配置的高可用服务监听保持一致。</span><br><span class="line"></span><br><span class="line">  virtual_ipaddress &#123;</span><br><span class="line">    192.168.1.10  #定义VIP_1</span><br><span class="line">    192.168.1.20  #定义VIP_2</span><br><span class="line">    192.168.1.30  #定义VIP_3</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">  track_script &#123;</span><br><span class="line">chk_nginx   &#x2F;&#x2F;定义监控脚本，这里和上面vrr_script后面的字符串保持一致</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="高可用单实例"><a href="#高可用单实例" class="headerlink" title="高可用单实例"></a>高可用单实例</h1><h2 id="配置主机"><a href="#配置主机" class="headerlink" title="配置主机"></a>配置主机</h2><p>切换目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/keepalived/</span><br></pre></td></tr></table></figure><p>备份配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp keepalived.conf&#123;,.ori&#125;</span><br></pre></td></tr></table></figure><p>清空配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\ &gt; keepalived.conf</span><br></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim keeplived.conf</span><br></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web01       #&lt;&#x3D;&#x3D; ID为web01，不同的keepalived.conf此ID要唯一。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       #&lt;&#x3D;&#x3D; 实例名字为VI_1，相同实例的备节点名字要和这个相同。</span><br><span class="line">    state MASTER         #&lt;&#x3D;&#x3D; 状态为MASTER，备节点状态要为BACKUP。</span><br><span class="line">    interface ens33       #&lt;&#x3D;&#x3D; 通信接口为ens33，对于此参数，备节点和主节点相同。</span><br><span class="line">    virtual_router_id 51      #&lt;&#x3D;&#x3D; 实例ID为51，在同一keepalived.conf配置文件内是唯一。</span><br><span class="line">    priority 150          #&lt;&#x3D;&#x3D; 优先级为150，备节点的优先级要小于主节点的优先级。</span><br><span class="line">    advert_int 1         #&lt;&#x3D;&#x3D; 通信检查时间间隔1秒。</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS     #&lt;&#x3D;&#x3D; PASS认证类型，对于此参数，备节点设置要和主节点相同。</span><br><span class="line">        auth_pass 123456    #&lt;&#x3D;&#x3D; 密码是123456，对于此参数，备节点设置要和主节点相同。</span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.120 dev ens33 label eth33:0</span><br><span class="line">#&lt;&#x3D;&#x3D; 虚拟IP，即VIP，子网验码为24位，绑定接口为eth0，别名为eth33:0，对于此参数，备节点要和主系欸但设置相同。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#提示：此处设置的虚拟IP为192.168.1.120，即为域名网站绑定的IP。</span><br></pre></td></tr></table></figure><p>检查并启动keepalived</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br><span class="line"></span><br><span class="line">ps -ef |grep keep|grep -v grep</span><br></pre></td></tr></table></figure><p>检查IP情况</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr|grep 192.168.1.120</span><br></pre></td></tr></table></figure><h2 id="配置备机"><a href="#配置备机" class="headerlink" title="配置备机"></a>配置备机</h2><p>切换目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/keepalived/</span><br></pre></td></tr></table></figure><p>备份配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp keepalived.conf&#123;,.ori&#125;</span><br></pre></td></tr></table></figure><p>清空配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\ &gt; keepalived.conf</span><br></pre></td></tr></table></figure><p>编写配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim keeplived.conf</span><br></pre></td></tr></table></figure><p>配置文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web02       #&lt;&#x3D;&#x3D; ID为web02，不同的keepalived.conf此ID要唯一。</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       #&lt;&#x3D;&#x3D; 实例名字为VI_1，相同实例的备节点名字要和这个相同。</span><br><span class="line">    state BACKUP         #&lt;&#x3D;&#x3D; 状态为MASTER，备节点状态要为BACKUP。</span><br><span class="line">    interface ens33       #&lt;&#x3D;&#x3D; 通信接口为ens33，对于此参数，备节点和主节点相同。</span><br><span class="line">    virtual_router_id 51      #&lt;&#x3D;&#x3D; 实例ID为51，在同一keepalived.conf配置文件内是唯一。</span><br><span class="line">    priority 100          #&lt;&#x3D;&#x3D; 优先级为150，备节点的优先级要小于主节点的优先级。</span><br><span class="line">    advert_int 1         #&lt;&#x3D;&#x3D; 通信检查时间间隔1秒。</span><br><span class="line">    authentication &#123;</span><br><span class="line">        auth_type PASS     #&lt;&#x3D;&#x3D; PASS认证类型，对于此参数，备节点设置要和主节点相同。</span><br><span class="line">        auth_pass 123456    #&lt;&#x3D;&#x3D; 密码是123456，对于此参数，备节点设置要和主节点相同。</span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.120 dev ens33 label eth33:0</span><br><span class="line">#&lt;&#x3D;&#x3D; 虚拟IP，即VIP，子网验码为24位，绑定接口为eth0，别名为eth33:0，对于此参数，备节点要和主系欸但设置相同。</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">#提示：此处设置的虚拟IP为192.168.1.120，即为域名网站绑定的IP。</span><br></pre></td></tr></table></figure><p>检查并启动keepalived</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br><span class="line">ps -ef |grep keep|grep -v grep</span><br></pre></td></tr></table></figure><p> 这里因为没有接管，所以不应该有返回</p><p> 如果有，就证明脑裂了。</p><ol><li><p>检查通信情况，iptables/firewalld</p></li><li><p>检查配置文件，例如virtual_router_id是否不一致</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr|grep 192.168.1.120</span><br></pre></td></tr></table></figure><h2 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h2><p>暂停主节点keepalived服务或关机</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop keepalived</span><br></pre></td></tr></table></figure><p>分别在主节点和备节点上检查ip状态（若主节点已关机则不用检查主节点)</p><p>备节点应该拿到了VIP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr|grep 192.168.1.120</span><br></pre></td></tr></table></figure><p>重启主节点服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start keepalived</span><br></pre></td></tr></table></figure><p>检查VIP状态，主节点应当拿回了VIP</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addr|grep 192.168.1.120</span><br></pre></td></tr></table></figure><p>配置差别</p><table><thead><tr><th>Keepalived  参数差别</th><th>MASTER  节点特殊参数</th><th>BACKUP  节点特殊参数</th></tr></thead><tbody><tr><td>router_id(唯一标识)</td><td>routrer_id  web01</td><td>routrer_id  web02</td></tr><tr><td>state</td><td>state  MASTER</td><td>state  BACKUP</td></tr><tr><td>priority</td><td>priority  150</td><td>priority  100</td></tr></tbody></table><h1 id="“脑裂”问题"><a href="#“脑裂”问题" class="headerlink" title="“脑裂”问题"></a>“脑裂”问题</h1><h2 id="什么是脑裂"><a href="#什么是脑裂" class="headerlink" title="什么是脑裂"></a>什么是脑裂</h2><p>在指定时间内两台高可用服务无法检测到对他心跳消息，各自取得资源以及服务所有权，而此时两台高可用服务器都会去抢占同样的资源，这样会导致同一个IP或服务在两端同时存在发生冲突，最严重的就是两台主机抢占同一个IVP地址，当用户写入数据时，可能会分别写入两端，造成两端数据不一致或数据丢失，这种情况就被成为脑裂。</p><h2 id="导致脑裂发生的原因"><a href="#导致脑裂发生的原因" class="headerlink" title="导致脑裂发生的原因"></a>导致脑裂发生的原因</h2><ol><li><p>高可用服务器之间对心跳链路故障，导致无法正常通信。</p><ul><li>心跳线坏了(断裂、老化）</li><li>网卡以及相关驱动坏了，IP配置以及冲突问题(网卡直连)</li><li>心跳线之间连接设备故障(网卡及交换机)</li><li>仲裁机器出问题(采用仲裁方案)</li></ul></li><li><p>高可用服务器对上开启了iptables防火墙阻挡了心跳消息传输</p></li><li><p>高可用服务器上心跳网卡地址等信息配置不正确</p></li><li><p>其他服务配置不当等原因，如心跳方式不同、心跳广播冲突、软件BUG等</p></li><li><p>同一VRRP实例virtual_router_id参数两端配置不一样</p></li></ol><h2 id="解决脑裂常见方案"><a href="#解决脑裂常见方案" class="headerlink" title="解决脑裂常见方案"></a>解决脑裂常见方案</h2><ol><li>使用串行电缆和一台电缆链接，同时使用两条心跳线路，做线路高可用。</li><li>检测到脑裂时强行关闭一个心跳节点(需要特殊设备支持，如Stonith、fence)。相当于备节点收不到心跳消息，发送关机命令通过单路的线路来关闭</li><li>做好对脑裂的状态监控(邮件、手机短信、值班)报警，发生脑裂时第一时间人为介入仲裁。如百度的报警短信可以区分上下行，管理员可以通过短信回复数字或字符串返回给服务器，让服务器根据指令自动操作。或者开发简单app，第一时间点点点操作。</li></ol><h2 id="常见的keepalived脑裂解决方案"><a href="#常见的keepalived脑裂解决方案" class="headerlink" title="常见的keepalived脑裂解决方案"></a>常见的keepalived脑裂解决方案</h2><p>互联网应用服务器，前端web负载均衡的的高可用，对于普通业务一般是可以接受的，对于数据库和存储服务不可以接受。</p><ul><li>如果开启防火墙，一定要开放心跳消息通过，一般采用定向IP段可通过。</li><li>可以拉一条以太网线或者串口线作为线路冗余</li><li>开发监测程序通过监控软件(如Nagios)监测脑裂</li></ul><p>生产判断脑裂思路：</p><ol><li>简单思路：备节点出现VIP就报警，有两种情况，一是主节点宕机了，备节点接管；二是主机没宕，脑裂了，无论是哪一种都要进行报警，然后人工查看。</li><li>严谨思路：备节点出现VIP，主节点以及对应服务任然存活，说明脑裂了</li></ol><h1 id="Keepalived双实例双主机配置"><a href="#Keepalived双实例双主机配置" class="headerlink" title="Keepalived双实例双主机配置"></a>Keepalived双实例双主机配置</h1><p>规划</p><table><thead><tr><th>HOSTNAME</th><th>IP</th><th>说明</th></tr></thead><tbody><tr><td>web01</td><td>192.168.1.55</td><td>VIP:192.168.1.100（绑定A服务 <a href="http://www.xxx.com)/">www.xxx.com）</a></td></tr><tr><td>web02</td><td>192.168.1.56</td><td>VIP:192.168.1.101（绑定B服务  bbs.yyy.com）</td></tr></tbody></table><p>配置web01</p><p>在原来的单实例基础上增加一个实例(至于你们怎么搭建服务,我建议用nginx测试)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web01       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       </span><br><span class="line">    state MASTER         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 51      </span><br><span class="line">    priority 150          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 1234     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    192.168.1.100 dev ens33 label eth33:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;       </span><br><span class="line">    state BACKUP         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 52      </span><br><span class="line">    priority 100          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 5678     </span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.101 dev ens33 label eth33:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置web02</p><p> 建议直接scp然后改一改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web02       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       </span><br><span class="line">    state BACKUP         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 51      </span><br><span class="line">    priority 100          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 1234     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    virtual_ipaddress &#123;</span><br><span class="line">    192.168.1.100 dev ens33 label eth33:0</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_2 &#123;       </span><br><span class="line">    state MASTER         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 52      </span><br><span class="line">    priority 150          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 5678     </span><br><span class="line">    &#125;</span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.101 dev ens33 label eth33:1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>web01、web02上都重启服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart keepalived</span><br></pre></td></tr></table></figure><p>web01、web02分别查看ip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip add|egrep “192.168.1.100|192.168.1.101”</span><br></pre></td></tr></table></figure><p>轮流暂停keepalived服务，同时查看未暂停服务的web服务器，是否拿到了了IP</p><p>其中一个暂停了服务，另一个服务器应当会拿到两个ip</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop keepalived</span><br><span class="line"></span><br><span class="line">ip add|egrep “192.168.1.100|192.168.1.101”</span><br></pre></td></tr></table></figure><p>在停止服务的服务器上，重新启动之前暂停的服务，再次查看</p><p>应当看到服务器把ip拿回来了</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip add|egrep “192.168.1.100|192.168.1.101”</span><br></pre></td></tr></table></figure><p>配置区别</p><table><thead><tr><th>web01</th><th>web02</th></tr></thead><tbody><tr><td>state  MASTER</td><td>state  BACKUP</td></tr><tr><td>priority  150</td><td>priority  100</td></tr><tr><td>state  BACKUP</td><td>state  MASTER</td></tr><tr><td>priority  100</td><td>priority  150</td></tr></tbody></table><p>主要区别</p><ul><li>state(状态)</li><li>priority(权重/优先级)</li></ul><p>优先级决定了VIP在哪个机器上初始运行</p><h1 id="Nginx配合Keeplived"><a href="#Nginx配合Keeplived" class="headerlink" title="Nginx配合Keeplived"></a>Nginx配合Keeplived</h1><h2 id="逻辑架构图"><a href="#逻辑架构图" class="headerlink" title="逻辑架构图"></a>逻辑架构图</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/clip_image002.png" alt="img"></p><h2 id="配置两边nginx"><a href="#配置两边nginx" class="headerlink" title="配置两边nginx"></a>配置两边nginx</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /<span class="built_in">pwd</span>/nginx/conf/</span><br><span class="line"></span><br><span class="line">vim nginx.conf</span><br></pre></td></tr></table></figure><p>nginx内容</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">worker_processes</span> <span class="number">1</span>;</span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">1024</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>    mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>   /pwd/octet-stream;</span><br><span class="line">    <span class="attribute">sendfile</span>   <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">upstream</span> www_pools &#123;          <span class="comment">#&lt;== 这里定义了web服务器池，包含了100、101两个web节点。</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.100:80</span> weight=<span class="number">1</span>;</span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.1.101:80</span> weight=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="section">server</span> &#123;                 <span class="comment">#&lt;== 这里定义了代理的负载均衡域名虚拟主机。</span></span><br><span class="line">    <span class="attribute">listen</span>      <span class="number">192.168.1.55:80</span>;      <span class="comment">#&lt;==这里指定了IP监听。</span></span><br><span class="line">    <span class="attribute">server_name</span> www.xxx.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span>  https://www_pools;     <span class="comment">#&lt;== 访问[www.hanpi.com](http://www.hanpi.com)，请求发送给www_pools里面的节点。</span></span><br><span class="line">    <span class="attribute">proxy_set_header</span>  Host  <span class="variable">$host</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置keepalived服务"><a href="#配置keepalived服务" class="headerlink" title="配置keepalived服务"></a>配置keepalived服务</h2><p>配置web01</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web01       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       </span><br><span class="line">    state MASTER         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 51      </span><br><span class="line">    priority 150          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 1234     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.100 dev ens33 label eth33:0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置web02</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web02       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       </span><br><span class="line">    state BACKUP         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 51      </span><br><span class="line">    priority 100          </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 1234     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.100 dev ens33 label eth33:0</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置DNS解析"><a href="#配置DNS解析" class="headerlink" title="配置DNS解析"></a>配置DNS解析</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.100 www.xxx.com</span><br></pre></td></tr></table></figure><h2 id="两边重启nginx服务"><a href="#两边重启nginx服务" class="headerlink" title="两边重启nginx服务"></a>两边重启nginx服务</h2><p>在web页面进入<a href="http://www.xxx.com/">www.xxx.com</a></p><p>此时关闭web01高可用服务或者关闭服务器</p><p>在nginx页面刷新页面</p><h2 id="查看web02的IP状态"><a href="#查看web02的IP状态" class="headerlink" title="查看web02的IP状态"></a>查看web02的IP状态</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addd|grep 192.168.1.100</span><br></pre></td></tr></table></figure><h2 id="开启web01，查看ip"><a href="#开启web01，查看ip" class="headerlink" title="开启web01，查看ip"></a>开启web01，查看ip</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip addd|grep 192.168.1.100</span><br></pre></td></tr></table></figure><p> web重新访问 <a href="http://www.hanpi.com/">www.hanpi.com</a></p><p> 状态应该处于正常</p><h1 id="监听网卡上不存在的IP地址"><a href="#监听网卡上不存在的IP地址" class="headerlink" title="监听网卡上不存在的IP地址"></a>监听网卡上不存在的IP地址</h1><p>如果配置使用了”listen 192.168.1.100:80;“ 指定IP监听服务，而本地上没有这个IP，nginx就会报错。</p><p>如果实施双主(即主备)同时提供不同的服务，配置文件里制定了IP监听，备节点就会因为网卡不存在实际IP而报错。</p><p>出现上面的问题原因在于物理网卡上没有与配置文件里监听的IP相对应的IP，我们要让Nginx服务在网卡上没有指定监听的IP时也能启动，不报错。</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>是在/etc/sysctl.conf中加入如下内核参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.ip_nonlocal_bind &#x3D; 1</span><br></pre></td></tr></table></figure><p>表示启动nginx而忽略配置中监听的ip是否存在，同样适用于Haproxy。</p><h2 id="快速写入-刷新生效"><a href="#快速写入-刷新生效" class="headerlink" title="快速写入,刷新生效"></a>快速写入,刷新生效</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> “net.ipv4.ip_nonlocal_bind = 1” &gt;&gt; /etc/sysctl.conf</span><br></pre></td></tr></table></figure> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><h1 id="解决服务宕后keepalived仍运行"><a href="#解决服务宕后keepalived仍运行" class="headerlink" title="解决服务宕后keepalived仍运行"></a>解决服务宕后keepalived仍运行</h1><p>默认情况下，Keepalived软件只有在对方机器宕机或者Keepalived停止的时候会接管业务。生产环境中，有业务服务停止的Keepalived还在工作的情况，这种时候就会造成数据丢失。</p><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><p>写守护进程脚本来处理。当Nginx业务出现问题时，就停掉本地的Keepalived服务，实现飘逸接管。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vim /<span class="built_in">pwd</span>/check_nginx.sh</span><br><span class="line">\<span class="comment">#!/bin/sh</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> [ ‘netstat -lntup|grep nginx|wc -l’-ne 1 ];<span class="keyword">then</span></span><br><span class="line">systemctl stop keepalived</span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h3 id="启动脚本"><a href="#启动脚本" class="headerlink" title="启动脚本"></a>启动脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /<span class="built_in">pwd</span>/check_nginx.sh &amp;</span><br></pre></td></tr></table></figure><h3 id="检查脚本运行情况"><a href="#检查脚本运行情况" class="headerlink" title="检查脚本运行情况"></a>检查脚本运行情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep check</span><br></pre></td></tr></table></figure><h3 id="查看端口"><a href="#查看端口" class="headerlink" title="查看端口"></a>查看端口</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -I :80</span><br></pre></td></tr></table></figure><h3 id="停止nginx，查看是否切换"><a href="#停止nginx，查看是否切换" class="headerlink" title="停止nginx，查看是否切换"></a>停止nginx，查看是否切换</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure><h3 id="查看nginx状态"><a href="#查看nginx状态" class="headerlink" title="查看nginx状态"></a>查看nginx状态</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status nginx</span><br></pre></td></tr></table></figure><h3 id="再次检查nginx"><a href="#再次检查nginx" class="headerlink" title="再次检查nginx"></a>再次检查nginx</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -lntup|grep nginx</span><br></pre></td></tr></table></figure><h3 id="在备节点上查看"><a href="#在备节点上查看" class="headerlink" title="在备节点上查看"></a>在备节点上查看</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip add|grep 192.168.1.100</span><br></pre></td></tr></table></figure><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><h3 id="使用keepalived的配置文件参数触发脚本"><a href="#使用keepalived的配置文件参数触发脚本" class="headerlink" title="使用keepalived的配置文件参数触发脚本"></a>使用keepalived的配置文件参数触发脚本</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim check_nginx_proxy.sh</span><br><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ ‘netstat -lntup|grep nginx|wc -l’ -ne 1 ];<span class="keyword">then</span></span><br><span class="line">system stop keeplived</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><h3 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x check_nginx_proxy.sh</span><br></pre></td></tr></table></figure><h3 id="检查授权"><a href="#检查授权" class="headerlink" title="检查授权"></a>检查授权</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -l check_nginx_proxy.sh</span><br></pre></td></tr></table></figure><h3 id="keepalived配置如下"><a href="#keepalived配置如下" class="headerlink" title="keepalived配置如下"></a>keepalived配置如下</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">router_id web01       </span><br><span class="line">&#125;</span><br><span class="line">    vrrp_script chk_nginx_proxy&#123;         <span class="comment">#&lt;== 定义VRRP脚本，检查HTTP端口。</span></span><br><span class="line">    script “/<span class="built_in">pwd</span>/check_nginx_proxy.sh”  <span class="comment">#&lt;== 执行脚本，当Nginx服务器出现问题时，就停掉Keepalived服务。</span></span><br><span class="line">    interval 2             <span class="comment">#&lt;== 时间间隔2s。</span></span><br><span class="line">    weight 2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">vrrp_instance VI_1 &#123;       </span><br><span class="line">    state MASTER         </span><br><span class="line">    interface ens33       </span><br><span class="line">    virtual_router_id 51      </span><br><span class="line">    priority 150        </span><br><span class="line">    advert_int 1         </span><br><span class="line">    authentication &#123;  </span><br><span class="line">        auth_type PASS     </span><br><span class="line">        auth_pass 1234     </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">virtual_ipaddress &#123;</span><br><span class="line">192.168.1.100 dev ens33 label eth33:0</span><br><span class="line">&#125;</span><br><span class="line">tarck_script &#123;</span><br><span class="line">check_nginx_proxy         <span class="comment">#&lt;== 触发检查。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试脚本"><a href="#测试脚本" class="headerlink" title="测试脚本"></a>测试脚本</h3><h4 id="检查端、服务、ip"><a href="#检查端、服务、ip" class="headerlink" title="检查端、服务、ip"></a>检查端、服务、ip</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :80</span><br><span class="line"></span><br><span class="line">ps -ef | grep keep</span><br><span class="line"></span><br><span class="line">ip add|grep 192.168.1.100</span><br></pre></td></tr></table></figure><h4 id="停止nginx服务"><a href="#停止nginx服务" class="headerlink" title="停止nginx服务"></a>停止nginx服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure><h4 id="再次检查"><a href="#再次检查" class="headerlink" title="再次检查"></a>再次检查</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsof -i :80</span><br><span class="line"></span><br><span class="line">ps -ef | grep keep</span><br><span class="line"></span><br><span class="line">ip add|grep 192.168.1.100</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /var/<span class="built_in">log</span>/messages | grep Keepalived</span><br></pre></td></tr></table></figure><h1 id="多组Keepalived局域网内冲突"><a href="#多组Keepalived局域网内冲突" class="headerlink" title="多组Keepalived局域网内冲突"></a>多组Keepalived局域网内冲突</h1><p>如果在同一局域网内部署了多组Keepalived服务器，而又未使用专门的心跳线通信时，可能会发生接管故障。</p><p>Keepalived高可用是通过VRRP协议实现的，VRRP协议默认通过IP多播实现的高可用服务对之间的通信，如果一个局域网内存在多组Keepalived服务器对，就会造成IP多播地址冲突问题，不同组的Keepalived都会使用默认的224.0.0.18作为多播地址。</p><p>所以我们需要在同组Keepalived服务器的所有配置文件中指定独立的多播地址。</p><h2 id="指定多播地址"><a href="#指定多播地址" class="headerlink" title="指定多播地址"></a>指定多播地址</h2><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">global_defs &#123;</span><br><span class="line">    router_id LVS_01</span><br><span class="line">    vrrp_mcast_group4 224.0.0.20      #&lt;&#x3D;&#x3D; 这玩意就是多播地址</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="指定配置文件接收Keepalived服务日志"><a href="#指定配置文件接收Keepalived服务日志" class="headerlink" title="指定配置文件接收Keepalived服务日志"></a>指定配置文件接收Keepalived服务日志</h1><h2 id="日志集成，懂得都懂"><a href="#日志集成，懂得都懂" class="headerlink" title="日志集成，懂得都懂"></a>日志集成，懂得都懂</h2><p> 将KEEPALIVED_OPTIONS=”-D” 修改为 KEEPALIVED_OPTIONS=”-D -d -S 0”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /ect/sysconfig/keepalived</span><br></pre></td></tr></table></figure><h2 id="修改keepalived配置文件"><a href="#修改keepalived配置文件" class="headerlink" title="修改keepalived配置文件"></a>修改keepalived配置文件</h2><h3 id="快速替换"><a href="#快速替换" class="headerlink" title="快速替换"></a>快速替换</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -i ’14 s<span class="comment"># KEEPALIVED_OPTIONS=”-D”# KEEPALIVED_OPTIONS=”-D -d -S 0”#g’ /etc/sysconfig/keepalived</span></span><br></pre></td></tr></table></figure><h3 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed -n ‘14p’ /etc/sysconfig/keepalived</span><br></pre></td></tr></table></figure><p> 说明，查看 /etc/sysconfig/keepalived 里注释获得以上说明</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># --dump-conf     -d     导出备份数据。</span><br><span class="line"></span><br><span class="line"># --log-detail      -D     详细日志。</span><br><span class="line"></span><br><span class="line"># --log-facility     -S     设置本地的syslog设备，编号0-7(default&#x3D;LOG_DAEMON)。</span><br><span class="line"></span><br><span class="line"># -S 0 表示指定为local0设备。 </span><br></pre></td></tr></table></figure><h2 id="修改系统日志配置文件"><a href="#修改系统日志配置文件" class="headerlink" title="修改系统日志配置文件"></a>修改系统日志配置文件</h2><h3 id="修改rsslog配置文件-尾部添加以下两行内容"><a href="#修改rsslog配置文件-尾部添加以下两行内容" class="headerlink" title="修改rsslog配置文件,尾部添加以下两行内容"></a>修改rsslog配置文件,尾部添加以下两行内容</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/rsyslog.conf</span><br><span class="line"></span><br><span class="line">这两行表示local0设备的所有日志信息都记录到了 /var/<span class="built_in">log</span>/keepalived.log 文件</span><br><span class="line"></span><br><span class="line">\<span class="comment">#keepalived</span></span><br><span class="line"></span><br><span class="line">local0.*       /var/<span class="built_in">log</span>/keepalived.log</span><br></pre></td></tr></table></figure><h3 id="在如下信息的第一列尾部添加”-local0-none”，注意有分号。"><a href="#在如下信息的第一列尾部添加”-local0-none”，注意有分号。" class="headerlink" title="在如下信息的第一列尾部添加”;local0.none”，注意有分号。"></a>在如下信息的第一列尾部添加”;local0.none”，注意有分号。</h3><p> 表示来自local0设备的所有日志信息不再记录与/var/log/messages</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*.info;mail.one;authpriv.none;cron.none;local0.none &#x2F;var&#x2F;log&#x2F;messages</span><br></pre></td></tr></table></figure><h3 id="配置完成，重启rsyslog服务"><a href="#配置完成，重启rsyslog服务" class="headerlink" title="配置完成，重启rsyslog服务"></a>配置完成，重启rsyslog服务</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart rsyslog.service</span><br></pre></td></tr></table></figure><h3 id="重启keepaliaved，查看日志"><a href="#重启keepaliaved，查看日志" class="headerlink" title="重启keepaliaved，查看日志"></a>重启keepaliaved，查看日志</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart keepalived</span><br><span class="line"></span><br><span class="line">tail -f /var/<span class="built_in">log</span>/keepalived.log </span><br></pre></td></tr></table></figure><p>可以在/var/log/messages上设置对/avr/log/keepalived.log进行轮询，防止单个日志文件变大</p><h1 id="编写监测Keepalived-“脑裂”的脚本"><a href="#编写监测Keepalived-“脑裂”的脚本" class="headerlink" title="编写监测Keepalived “脑裂”的脚本"></a>编写监测Keepalived “脑裂”的脚本</h1><p>检测思路：在备节点上执行脚本，如果可以ping通主节点并且备节点有VIP就报警，人工介入检查是否发生了”脑裂”。</p><h2 id="编写脚本-1"><a href="#编写脚本-1" class="headerlink" title="编写脚本"></a>编写脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">vim check_split_brain.sh</span><br><span class="line"></span><br><span class="line">\<span class="comment">#!/bin/sh</span></span><br><span class="line">web01_vip = 192.168.1.100</span><br><span class="line">web01_ip = 192.168.1.55</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    ping -c 2 -W3 <span class="variable">$web01_ip</span> &amp;&gt;/dev/null</span><br><span class="line">    <span class="keyword">if</span> [ $? -eq 0 -a ‘ip add|grep “web01_ip”|wc -1’ -eq 1 ]</span><br><span class="line">    <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> “ha is split brain.waring.”</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> “hs is ok”</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    sleep 5</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><h2 id="测试脚本-1"><a href="#测试脚本-1" class="headerlink" title="测试脚本"></a>测试脚本</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh check_split_brain.sh</span><br></pre></td></tr></table></figure><h3 id="关闭web01，查看web02报警情况"><a href="#关闭web01，查看web02报警情况" class="headerlink" title="关闭web01，查看web02报警情况"></a>关闭web01，查看web02报警情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop nginx</span><br></pre></td></tr></table></figure><h3 id="web02报警正常，重启web01服务，查看恢复情况"><a href="#web02报警正常，重启web01服务，查看恢复情况" class="headerlink" title="web02报警正常，重启web01服务，查看恢复情况"></a>web02报警正常，重启web01服务，查看恢复情况</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start nginx</span><br></pre></td></tr></table></figure><h3 id="测试完成后整合到Nagios或者Zabbix里"><a href="#测试完成后整合到Nagios或者Zabbix里" class="headerlink" title="测试完成后整合到Nagios或者Zabbix里"></a>测试完成后整合到Nagios或者Zabbix里</h3>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Keepalived </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 高可用 </tag>
            
            <tag> Keepalived </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Zabbix-01-介绍&amp;部署</title>
      <link href="2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-01-%E4%BB%8B%E7%BB%8D&amp;%E9%83%A8%E7%BD%B2/"/>
      <url>2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Zabbix-01-%E4%BB%8B%E7%BB%8D&amp;%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="什么是监控，为什么需要监控"><a href="#什么是监控，为什么需要监控" class="headerlink" title="什么是监控，为什么需要监控"></a>什么是监控，为什么需要监控</h2><p>监控：监视，控制</p><p>随着用户的增多，服务随时可能会被系统oom out of memory 内存溢出 kill -9 mysql</p><p>你怎么判断，web服务是因为用户访问过多，达到了瓶颈？还是程序代码bug导致的，内存过多？<br>上线一个新网站： 压力测试 2000并发</p><h2 id="常见的linux监控命令"><a href="#常见的linux监控命令" class="headerlink" title="常见的linux监控命令"></a>常见的linux监控命令</h2><ul><li><a href="http://man.linuxde.net/par/3">http://man.linuxde.net/par/3</a> </li><li>free</li><li>df </li><li>top</li><li>htop(epel) </li><li>uptime </li><li>iftop </li><li>iostat </li><li>iotop</li><li>vmstat</li><li>netstat </li><li>nethogs</li></ul><p>总结：cpu，内存，硬盘，网络</p><h2 id="使用shell脚本来监控服务器"><a href="#使用shell脚本来监控服务器" class="headerlink" title="使用shell脚本来监控服务器"></a>使用shell脚本来监控服务器</h2><p>内存:每隔1分钟监控一次内存,当你的可用内存低于100m,发邮件报警,要求显示剩余内存值</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">Free=`free -m | awk <span class="string">&#x27;NR==2&#123;print $NF&#125;&#x27;</span>` </span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$Free</span> -lt 100 ]</span><br><span class="line"><span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$Free</span> | mail -s <span class="string">&quot;当前内存&quot;</span> xxx@163.com</span><br><span class="line"><span class="keyword">fi</span> </span><br><span class="line">sleep 60</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p><code>ab -n 10000 -c 3 &lt;http://10.0.0.100/zabbix/index.php</code></p><h1 id="zabbix的基础服务架构"><a href="#zabbix的基础服务架构" class="headerlink" title="zabbix的基础服务架构"></a>zabbix的基础服务架构</h1><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715094741900.png" alt="image-20200715094741900"></p><p>zabbix-agent c语言 —-&gt; zabbix-server c语言 —-&gt; 数据库 mysql &lt;— zabbix-web lamp</p><h1 id="zabbix生产环境安装-部署"><a href="#zabbix生产环境安装-部署" class="headerlink" title="zabbix生产环境安装(部署)"></a>zabbix生产环境安装(部署)</h1><p>zabbix LTS 5年 zabbix 标准版 7个月</p><blockquote><p>  ip地址：10.0.0.61 硬件配置：1c1g 主机名：zabbix-server</p></blockquote><h2 id="配置zabbix-yum仓库"><a href="#配置zabbix-yum仓库" class="headerlink" title="配置zabbix yum仓库"></a>配置zabbix yum仓库</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://repo.zabbix.com/zabbix/4.0/rhel/7/x86_64/zabbix-release-4.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh zabbix-release-4.0-1.el7.noarch.rpm</span><br></pre></td></tr></table></figure><p>epel</p><p><code>yum -y install epel-release</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[root\@zabbix-server \~]# cat &#x2F;etc&#x2F;yum.repos.d&#x2F;zabbix.repo [zabbix]</span><br><span class="line"></span><br><span class="line">name&#x3D;Zabbix Official Repository - \$basearch</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;zabbix&#x2F;4.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line"></span><br><span class="line">gpgcheck&#x3D;1</span><br><span class="line"></span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-ZABBIX</span><br><span class="line"></span><br><span class="line">[zabbix-non-supported]</span><br><span class="line"></span><br><span class="line">name&#x3D;Zabbix Official Repository non-supported - \$basearch</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;non-supported&#x2F;rhel&#x2F;7&#x2F;\$basearch&#x2F;</span><br><span class="line">enabled&#x3D;1</span><br><span class="line"></span><br><span class="line">gpgkey&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;pki&#x2F;rpm-gpg&#x2F;RPM-GPG-KEY-ZABBIX gpgcheck&#x3D;1</span><br></pre></td></tr></table></figure><h2 id="安装zabbix服务端和zabbix-web前端"><a href="#安装zabbix服务端和zabbix-web前端" class="headerlink" title="安装zabbix服务端和zabbix-web前端"></a>安装zabbix服务端和zabbix-web前端</h2><p><code>yum install zabbix-server-mysql zabbix-web-mysql -y</code></p><h2 id="安装mariadb，创建zabbix库，授权zabbix用户"><a href="#安装mariadb，创建zabbix库，授权zabbix用户" class="headerlink" title="安装mariadb，创建zabbix库，授权zabbix用户"></a>安装mariadb，创建zabbix库，授权zabbix用户</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb-server -y</span><br><span class="line">systemctl start mariadb </span><br><span class="line">systemctl <span class="built_in">enable</span> mariadb</span><br><span class="line">mysql_secure_installation</span><br><span class="line">一路y</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt;   mysql</span><br><span class="line">&gt;   MariaDB [(none)]\&gt; create database zabbix character set utf8 collate</span><br><span class="line">&gt;   utf8_bin; </span><br><span class="line">&gt;   MariaDB [(none)]\&gt; grant all privileges on zabbix.* to zabbix@localhost identified by &#39;123456&#39;;</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">导入zabbix表结构和初始数据</span><br><span class="line">zcat /usr/share/doc/zabbix-server-mysql*/create.sql.gz | mysql -uzabbix -p123456 zabbix</span><br><span class="line"></span><br><span class="line">检查zabbix库是否导入成功</span><br><span class="line">mysql -uroot zabbix -e <span class="string">&#x27;show tables&#x27;</span></span><br><span class="line"></span><br><span class="line">验证包</span><br><span class="line">Rpm -qa | grep zabbix</span><br></pre></td></tr></table></figure><h2 id="配置启动zabbix-server"><a href="#配置启动zabbix-server" class="headerlink" title="配置启动zabbix-server"></a>配置启动zabbix-server</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/zabbix/zabbix_server.conf </span><br><span class="line">DBHost=localhost</span><br><span class="line">DBName=zabbix </span><br><span class="line">DBUser=zabbix </span><br><span class="line">DBPassword=123456</span><br><span class="line"></span><br><span class="line">启动zabbix-server</span><br><span class="line">systemctl start zabbix-server </span><br><span class="line">systemctl <span class="built_in">enable</span> zabbix-server</span><br><span class="line"></span><br><span class="line">检查</span><br><span class="line">netstat -lntup</span><br></pre></td></tr></table></figure><h2 id="修改Zabbix前端的PHP配置-并启动httpd"><a href="#修改Zabbix前端的PHP配置-并启动httpd" class="headerlink" title="修改Zabbix前端的PHP配置,并启动httpd"></a>修改Zabbix前端的PHP配置,并启动httpd</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/httpd/conf.d/zabbix.conf </span><br><span class="line"></span><br><span class="line">php_value date.timezone Asia/Shanghai</span><br><span class="line"></span><br><span class="line">systemctl start httpd</span><br><span class="line"></span><br><span class="line">systemctl <span class="built_in">enable</span> httpd</span><br></pre></td></tr></table></figure><h2 id="前端zabbix-web的安装"><a href="#前端zabbix-web的安装" class="headerlink" title="前端zabbix-web的安装"></a>前端zabbix-web的安装</h2><p>浏览器：<a href="http://10.0.0.61/zabbix">http://10.0.0.61/zabbix</a></p><p>后期修改zabbix数据库密码的时候，需要修改的配置文件：</p><p>/etc/zabbix/web/zabbix.conf.php</p><p><a href="http://10.0.0.61/zabbix/zabbix.php">http://10.0.0.61/zabbix/zabbix.php</a></p><p>登录的账号密码</p><p>Admin zabbix</p><h1 id="监控一台服务器主机-集群"><a href="#监控一台服务器主机-集群" class="headerlink" title="监控一台服务器主机(集群)"></a>监控一台服务器主机(集群)</h1><h2 id="安装zabbix-agent-同一台机器直接跳到c"><a href="#安装zabbix-agent-同一台机器直接跳到c" class="headerlink" title="安装zabbix-agent(同一台机器直接跳到c)"></a>安装zabbix-agent(同一台机器直接跳到c)</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ivh https:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;zabbix&#x2F;zabbix&#x2F;4.0&#x2F;rhel&#x2F;7&#x2F;x86_64&#x2F;zabbix-agent-4.0.11-1.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><h2 id="配置zabbix-agent"><a href="#配置zabbix-agent" class="headerlink" title="配置zabbix-agent"></a>配置zabbix-agent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;zabbix&#x2F;zabbix_agentd.conf </span><br><span class="line">Server&#x3D;10.0.0.61</span><br></pre></td></tr></table></figure><h2 id="启动zabbix-agent"><a href="#启动zabbix-agent" class="headerlink" title="启动zabbix-agent"></a>启动zabbix-agent</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start zabbix-agent</span><br></pre></td></tr></table></figure><h2 id="zabbix-web界面，添加主机"><a href="#zabbix-web界面，添加主机" class="headerlink" title="zabbix-web界面，添加主机"></a>zabbix-web界面，添加主机</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/443eaae8d5d7bbb5847ee9dbd8d5118d.png"></p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200715095936299.png" alt="image-20200715095936299"></p><p>主机名称：标识主机 </p><p>群组分类：一种以业务划分(商城业务，论坛业务)，一种以功能分组(数据库，web服务，缓存，存储软件)</p><p>Agent接口:填写主机地址 或 DNS名称(DNS要有做host解析，建议填IP地址)，默认端口</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 监控服务 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 监控 </tag>
            
            <tag> Zabbix </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站服务-Nginx-反向代理&amp;负载均衡</title>
      <link href="2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Nginx-02-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86&amp;%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
      <url>2020/07/15/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Nginx-02-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86&amp;%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="ngx-http-proxy-module"><a href="#ngx-http-proxy-module" class="headerlink" title="ngx_http_proxy_module"></a>ngx_http_proxy_module</h1><h2 id="proxy-pass-URL"><a href="#proxy-pass-URL" class="headerlink" title="proxy_pass URL"></a>proxy_pass URL</h2><p>Context:    location, if in location, limit_except</p><p><strong>注意：</strong></p><ol><li>如果<code>proxy_pass</code>使用了URI（下面例子中127.0.0.1地址后面部分，包括只有斜杠的情况），请求路径与loction路径的匹配部分将被替换为proxy_pass中定义的URI：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;name&#x2F; &#123;</span><br><span class="line">    proxy_pass http:&#x2F;&#x2F;127.0.0.1&#x2F;remote&#x2F;;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p>2.如果<code>proxy_pass</code>没有使用URI，发给被代理服务器的请求路径和客户端发情的请求路径相同，不会被修改。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;some&#x2F;path&#x2F; &#123;</span><br><span class="line">     proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>特殊情况：</p><p>1.location使用正则表达式定义路径。这种情况下，指令不应该带有URI。</p><p>2.使用rewrite指令改变了URI，但仍使用相同配置处理请求(<code>break</code>)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location &#x2F;name&#x2F; &#123;</span><br><span class="line">     rewrite    &#x2F;name&#x2F;([^&#x2F;]+) &#x2F;users?name&#x3D;$1 break;</span><br><span class="line">     proxy_pass http:&#x2F;&#x2F;127.0.0.1;</span><br><span class="line"> &#125; </span><br></pre></td></tr></table></figure><p>这种情况下，指令设置的URI会被忽略，改变后的URI将被发送给后端服务器。</p><p>3.后端服务器的地址，端口和URI中都可以使用变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_pass http:&#x2F;&#x2F;$host$uri; </span><br></pre></td></tr></table></figure><h2 id="proxy-set-header-field-value"><a href="#proxy-set-header-field-value" class="headerlink" title="proxy_set_header field value"></a>proxy_set_header field value</h2><p>设定发往后端主机的请求报文的请求首部的值；Context:    http, server, location</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> Host       <span class="variable">$host</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$remote_addr</span>;</span><br></pre></td></tr></table></figure><h2 id="proxy-cache-path"><a href="#proxy-cache-path" class="headerlink" title="proxy_cache_path"></a>proxy_cache_path</h2><p>定义可用于proxy功能的缓存；Context:    http</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">proxy_cache_path path [levels&#x3D;levels] [use_temp_path&#x3D;on|off] keys_zone&#x3D;name:size [inactive&#x3D;time] [max_size&#x3D;size] [manager_files&#x3D;number] [manager_sleep&#x3D;time] [manager_threshold&#x3D;time] [loader_files&#x3D;number] [loader_sleep&#x3D;time] [loader_threshold&#x3D;time] [purger&#x3D;on|off] [purger_files&#x3D;number] [purger_sleep&#x3D;time] [purger_threshold&#x3D;time];</span><br></pre></td></tr></table></figure><h2 id="proxy-cache-zone-off"><a href="#proxy-cache-zone-off" class="headerlink" title="proxy_cache zone | off"></a>proxy_cache zone | off</h2><p>指明要调用的缓存，或关闭缓存机制；Context:    http, server, location</p><h2 id="proxy-cache-key-string"><a href="#proxy-cache-key-string" class="headerlink" title="proxy_cache_key string"></a>proxy_cache_key string</h2><p>缓存中用于“键”的内容；</p><p>默认值：proxy_cache_key $scheme​$proxy_host$request_uri;</p><h2 id="proxy-cache-valid-code-…-time"><a href="#proxy-cache-valid-code-…-time" class="headerlink" title="proxy_cache_valid [code …] time"></a>proxy_cache_valid [code …] time</h2><p>定义对特定响应码的响应内容的缓存时长</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">定义在http&#123;...&#125;中；</span><br><span class="line"><span class="attribute">proxy_cache_path</span> /var/cache/nginx/proxy_cache levels=<span class="number">1</span>:<span class="number">1</span>:<span class="number">1</span> keys_zone=pxycache:<span class="number">20m</span> max_size=<span class="number">1g</span>;</span><br><span class="line">定义在需要调用缓存功能的配置段，例如server&#123;...&#125;；</span><br><span class="line"><span class="attribute">proxy_cache</span> pxycache;</span><br><span class="line"><span class="attribute">proxy_cache_key</span> <span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">301</span> <span class="number">1h</span>;</span><br><span class="line"><span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br></pre></td></tr></table></figure><h2 id="proxy-cache-use-stale"><a href="#proxy-cache-use-stale" class="headerlink" title="proxy_cache_use_stale"></a>proxy_cache_use_stale</h2><p>proxy_cache_use_stale error | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | off …;<br>Determines in which cases a stale cached response can be used when an error occurs during communication with the proxied server.</p><h2 id="proxy-cache-methods-GET-HEAD-POST-…"><a href="#proxy-cache-methods-GET-HEAD-POST-…" class="headerlink" title="proxy_cache_methods GET | HEAD | POST …"></a>proxy_cache_methods GET | HEAD | POST …</h2><p>If the client request method is listed in this directive then the response will be cached. “GET” and “HEAD” methods are always added to the list, though it is recommended to specify them explicitly. </p><h2 id="proxy-hide-header-field"><a href="#proxy-hide-header-field" class="headerlink" title="proxy_hide_header field"></a>proxy_hide_header field</h2><p>By default, nginx does not pass the header fields “Date”, “Server”, “X-Pad”, and “X-Accel-…” from the response of a proxied server to a client. The proxy_hide_header directive sets additional fields that will not be passed.</p><h2 id="proxy-connect-timeout-time"><a href="#proxy-connect-timeout-time" class="headerlink" title="proxy_connect_timeout time"></a>proxy_connect_timeout time</h2><p>Defines a timeout for establishing a connection with a proxied server. It should be noted that this timeout cannot usually exceed 75 seconds.</p><p>默认为60s，最长为75s</p><h2 id="proxy-read-timeout-time"><a href="#proxy-read-timeout-time" class="headerlink" title="proxy_read_timeout time"></a>proxy_read_timeout time</h2><p>Defines a timeout for reading a response from the proxied server. The timeout is set only between two successive read operations, not for the transmission of the whole response.</p><h2 id="proxy-send-timeout-time"><a href="#proxy-send-timeout-time" class="headerlink" title="proxy_send_timeout time"></a>proxy_send_timeout time</h2><p>Sets a timeout for transmitting a request to the proxied server. he timeout is set only between two successive write operations, not for the transmission of the whole request. If the proxied server does not receive anything within this time, the connection is closed.</p><h1 id="ngx-http-headers-module"><a href="#ngx-http-headers-module" class="headerlink" title="ngx_http_headers_module"></a>ngx_http_headers_module</h1><p>The ngx_http_headers_module module allows adding the “Expires” and “Cache-Control” header fields, and arbitrary fields, to a response header.<br>向由代理服务器响应给客户端的响应报文添加自定义首部，或修改指定首部的值；</p><h2 id="add-header-name-value-always"><a href="#add-header-name-value-always" class="headerlink" title="add_header name value [always]"></a>add_header name value [always]</h2><p>添加自定义首部；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">add_header</span> X-Via  <span class="variable">$server_addr</span>;</span><br><span class="line"><span class="attribute">add_header</span> X-Accel <span class="variable">$server_name</span>;</span><br></pre></td></tr></table></figure><h2 id="expires-modified-time"><a href="#expires-modified-time" class="headerlink" title="expires [modified] time"></a>expires [modified] time</h2><p>expires epoch | max | off;<br>用于定义Expire或Cache-Control首部的值</p><h1 id="ngx-http-fastcgi-module"><a href="#ngx-http-fastcgi-module" class="headerlink" title="ngx_http_fastcgi_module"></a>ngx_http_fastcgi_module</h1><p>The ngx_http_fastcgi_module module allows passing requests to a FastCGI server.</p><h2 id="fastcgi-pass-address"><a href="#fastcgi-pass-address" class="headerlink" title="fastcgi_pass address"></a>fastcgi_pass address</h2><p>address为fastcgi server的地址；location, if in location；</p><p><a href="http://www.ilinux.io/admin/index.php">http://www.ilinux.io/admin/index.php</a> –&gt; /admin/index.php (uri)<br>                        /data/application/admin/index.php</p><h2 id="fastcgi-index-name"><a href="#fastcgi-index-name" class="headerlink" title="fastcgi_index name"></a>fastcgi_index name</h2><p>fastcgi默认的主页资源</p><h2 id="fastcgi-param-parameter-value-if-not-empty"><a href="#fastcgi-param-parameter-value-if-not-empty" class="headerlink" title="fastcgi_param parameter value [if_not_empty]"></a>fastcgi_param parameter value [if_not_empty]</h2><p>Sets a parameter that should be passed to the FastCGI server. The value can contain text, variables, and their combination.</p><p>配置示例1：<br>前提：配置好fpm server和mariadb-server服务；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.php$</span> &#123;</span><br><span class="line"><span class="attribute">root</span>  /usr/share/nginx/html;</span><br><span class="line"><span class="attribute">fastcgi_pass</span>   <span class="number">127.0.0.1:9000</span>;</span><br><span class="line"><span class="attribute">fastcgi_index</span>  index.php;</span><br><span class="line"><span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME /usr/share/nginx/html<span class="variable">$fastcgi_script_name</span>;</span><br><span class="line"><span class="attribute">include</span>  fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置示例2：通过/pm_status和/ping来获取fpm server状态信息；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* ^/(pm_status|ping)$</span> &#123;</span><br><span class="line"><span class="attribute">include</span>  fastcgi_params;</span><br><span class="line"><span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line"><span class="attribute">fastcgi_param</span>  SCRIPT_FILENAME  <span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fastcgi-cache-path-path"><a href="#fastcgi-cache-path-path" class="headerlink" title="fastcgi_cache_path path"></a>fastcgi_cache_path path</h2><p>fastcgi_cache_path path [levels=levels] [use_temp_path=on|off] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=on|off] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</p><p>定义fastcgi的缓存；缓存位置为磁盘上的文件系统，由path所指定路径来定义；</p><ul><li>levels=levels：缓存目录的层级数量，以及每一级的目录数;levels=ONE:TWO:THREE<ul><li>leves=1:2:2</li></ul></li><li>keys_zone=name:size<ul><li>k/v映射的内存空间的名称及大小</li></ul></li><li>inactive=time<ul><li>非活动时长</li></ul></li><li>max_size=size<ul><li>磁盘上用于缓存数据的缓存空间上限</li></ul></li></ul><h2 id="fastcgi-cache-zone-off"><a href="#fastcgi-cache-zone-off" class="headerlink" title="fastcgi_cache zone | off"></a>fastcgi_cache zone | off</h2><p>调用指定的缓存空间来缓存数据；http, server, location</p><h2 id="fastcgi-cache-key-string"><a href="#fastcgi-cache-key-string" class="headerlink" title="fastcgi_cache_key string"></a>fastcgi_cache_key string</h2><p>定义用作缓存项的key的字符串</p><h2 id="fastcgi-cache-methods-GET-HEAD-POST-…"><a href="#fastcgi-cache-methods-GET-HEAD-POST-…" class="headerlink" title="fastcgi_cache_methods GET | HEAD | POST …"></a>fastcgi_cache_methods GET | HEAD | POST …</h2><p>为哪些请求方法使用缓存</p><h2 id="fastcgi-cache-min-uses-number"><a href="#fastcgi-cache-min-uses-number" class="headerlink" title="fastcgi_cache_min_uses number"></a>fastcgi_cache_min_uses number</h2><p>缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项</p><h2 id="fastcgi-cache-valid-code-…-time"><a href="#fastcgi-cache-valid-code-…-time" class="headerlink" title="fastcgi_cache_valid [code …] time"></a>fastcgi_cache_valid [code …] time</h2><p>不同的响应码各自的缓存时长</p><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">fastcgi_cache_path</span> /var/cache/nginx/fastcgi_cache levels=<span class="number">1</span>:<span class="number">2</span>:<span class="number">1</span> keys_zone=fcgi:<span class="number">20m</span> inactive=<span class="number">120s</span>;</span><br><span class="line">...</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.php$</span> &#123;</span><br><span class="line">...</span><br><span class="line"><span class="attribute">fastcgi_cache</span> fcgi;</span><br><span class="line"><span class="attribute">fastcgi_cache_key</span> <span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> <span class="number">301</span> <span class="number">1h</span>;</span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="fastcgi-keep-conn-on-off"><a href="#fastcgi-keep-conn-on-off" class="headerlink" title="fastcgi_keep_conn on | off"></a>fastcgi_keep_conn on | off</h2><p>By default, a FastCGI server will close a connection right after sending the response. However, when this directive is set to the value on, nginx will instruct a FastCGI server to keep connections open.</p><h1 id="ngx-http-upstream-module"><a href="#ngx-http-upstream-module" class="headerlink" title="ngx_http_upstream_module"></a>ngx_http_upstream_module</h1><p>The ngx_http_upstream_module module is used to define groups of servers that can be referenced by the proxy_pass, fastcgi_pass, uwsgi_pass, scgi_pass, and memcached_pass directives.</p><h2 id="upstream-name-…"><a href="#upstream-name-…" class="headerlink" title="upstream name { … }"></a>upstream name { … }</h2><p>定义后端服务器组，会引入一个新的上下文；Context: http</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">upstream</span> httpdsrvs &#123;</span><br><span class="line"><span class="attribute">server</span> ...</span><br><span class="line">server...</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="server-address-parameters"><a href="#server-address-parameters" class="headerlink" title="server address [parameters]"></a>server address [parameters]</h2><p>在upstream上下文中server成员，以及相关的参数；Context:    upstream</p><p>address的表示格式：</p><ul><li>unix:/PATH/TO/SOME_SOCK_FILE</li><li>IP[:PORT]</li><li>HOSTNAME[:PORT]</li></ul><p>parameters：</p><ul><li>weight=number 权重，默认为1；</li><li>max_fails=number 失败尝试最大次数；超出此处指定的次数时，server将被标记为不可用；</li><li>fail_timeout=time 设置将服务器标记为不可用状态的超时时长；</li><li>max_conns 当前的服务器的最大并发连接数；</li><li>backup 将服务器标记为“备用”，即所有服务器均不可用时此服务器才启用；</li><li>down 标记为“不可用”；</li></ul><h2 id="least-conn"><a href="#least-conn" class="headerlink" title="least_conn"></a>least_conn</h2><p>最少连接调度算法，当server拥有不同的权重时其为wlc</p><h2 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip_hash"></a>ip_hash</h2><p>源地址hash调度方法</p><h2 id="hash-key-consistent"><a href="#hash-key-consistent" class="headerlink" title="hash key [consistent]"></a>hash key [consistent]</h2><p>基于指定的key的hash表来实现对请求的调度，此处的key可以直接文本、变量或二者的组合</p><p>作用：将请求分类，同一类请求将发往同一个upstream server；</p><p>If the consistent parameter is specified the ketama consistent hashing method will be used instead.</p><p>示例：</p><p>​    hash $request_uri consistent;</p><p>​    hash $remote_addr;</p><h2 id="keepalive-connections"><a href="#keepalive-connections" class="headerlink" title="keepalive connections"></a>keepalive connections</h2><p>为每个worker进程保留的空闲的长连接数量</p><h1 id="ngx-stream-core-module"><a href="#ngx-stream-core-module" class="headerlink" title="ngx_stream_core_module"></a>ngx_stream_core_module</h1><p>模拟反代基于tcp或udp的服务连接，即工作于传输层的反代或调度器</p><h2 id="stream-…"><a href="#stream-…" class="headerlink" title="stream { … }"></a>stream { … }</h2><p>定义stream相关的服务；Context:main</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line"><span class="attribute">upstream</span> sshsrvs &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.22.2:22</span>; </span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.22.3:22</span>; </span><br><span class="line">least_conn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">10.1.0.6:22022</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> sshsrvs;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="listen"><a href="#listen" class="headerlink" title="listen"></a>listen</h2><p>listen address:port [ssl] [udp] [proxy_protocol] [backlog=number] [bind] [ipv6only=on|off] [reuseport] [so_keepalive=on|off|[keepidle]:[keepintvl]:[keepcnt]];</p><p>监听的端口；<br>默认为tcp协议；<br>udp: 监听udp协议的端口；</p><h1 id="ngx-stream-proxy-module"><a href="#ngx-stream-proxy-module" class="headerlink" title="ngx_stream_proxy_module"></a>ngx_stream_proxy_module</h1><p>The ngx_stream_proxy_module module (1.9.0) allows proxying data streams over TCP, UDP (1.9.13), and UNIX-domain sockets.</p><h2 id="proxy-pass-address"><a href="#proxy-pass-address" class="headerlink" title="proxy_pass address"></a>proxy_pass address</h2><p>Sets the address of a proxied server. The address can be specified as a domain name or IP address, and a port or as a UNIX-domain socket path.</p><h2 id="proxy-timeout-timeout"><a href="#proxy-timeout-timeout" class="headerlink" title="proxy_timeout timeout"></a>proxy_timeout timeout</h2><p>Sets the timeout between two successive read or write operations on client or proxied server connections. If no data is transmitted within this time, the connection is closed.</p><p>默认为10M</p><h2 id="proxy-connect-timeout-time-1"><a href="#proxy-connect-timeout-time-1" class="headerlink" title="proxy_connect_timeout time"></a>proxy_connect_timeout time</h2><p>Defines a timeout for establishing a connection with a proxied server.</p><p>设置nginx与被代理的服务器尝试建立连接的超时时长；默认为60s；</p><p>示例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line"><span class="attribute">upstream</span> sshsrvs &#123;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.10.130:22</span>;</span><br><span class="line"><span class="attribute">server</span> <span class="number">192.168.10.131:22</span>;</span><br><span class="line"><span class="attribute">hash</span> <span class="variable">$remote_addr</span> consistent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">172.16.100.6:22202</span>;</span><br><span class="line"><span class="attribute">proxy_pass</span> sshsrvs; </span><br><span class="line"><span class="attribute">proxy_timeout</span> <span class="number">60s</span>;</span><br><span class="line"><span class="attribute">proxy_connect_timeout</span> <span class="number">10s</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Nginx </tag>
            
            <tag> 负载均衡 </tag>
            
            <tag> 反向代理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡-HAProxy</title>
      <link href="2020/05/30/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-HAProxy/"/>
      <url>2020/05/30/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-HAProxy/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>HAProxy 是一款提供高可用性、负载均衡以及基于TCP（第四层）和HTTP（第七层）应用的代理软件，支持虚拟主机，它是免费、快速并且可靠的一种解决方案。 HAProxy特别适用于那些负载特大的web站点，这些站点通常又需要会话保持或七层处理。HAProxy运行在时下的硬件上，完全可以支持数以万计的 并发连接。并且它的运行模式使得它可以很简单安全的整合进您当前的架构中， 同时可以保护你的web服务器不被暴露到网络上。</p><p>HAProxy 实现了一种事件驱动、单一进程模型，此模型支持非常大的并发连接数。多进程或多线程模型受内存限制 、系统调度器限制以及无处不在的锁限制，很少能处理数千并发连接。事件驱动模型因为在有更好的资源和时间管理的用户端(User-Space) 实现所有这些任务，所以没有这些问题。此模型的弊端是，在多核系统上，这些程序通常扩展性较差。这就是为什么他们必须进行优化以 使每个CPU时间片(Cycle)做更多的工作。</p><p>HAProxy 支持连接拒绝 : 因为维护一个连接的打开的开销是很低的，有时我们很需要限制攻击蠕虫（attack bots），也就是说限制它们的连接打开从而限制它们的危害。 这个已经为一个陷于小型DDoS攻击的网站开发了而且已经拯救了很多站点，这个优点也是其它负载均衡器没有的。</p><p>HAProxy 支持全透明代理（已具备硬件防火墙的典型特点）: 可以用客户端IP地址或者任何其他地址来连接后端服务器. 这个特性仅在<a href="http://www.ttlsa.com/linux/">Linux</a> 2.4/2.6内核打了cttproxy补丁后才可以使用. 这个特性也使得为某特殊服务器处理部分流量同时又不修改服务器的地址成为可能。</p><p>HAProxy借助于OS上几种常见的技术来实现性能的最大化。</p><ol><li><p>单进程、事件驱动模型显著降低了上下文切换的开销及内存占用。</p></li><li><p>O(1)事件检查器(event checker)允许其在高并发连接中对任何连接的任何事件实现即时探测。</p></li><li><p>在任何可用的情况下，单缓冲(single buffering)机制能以不复制任何数据的方式完成读写操作，这会节约大量的CPU时钟周期及内存带宽；</p></li><li><p>借助于Linux 2.6 (&gt;= 2.6.27.19)上的splice()系统调用，HAProxy可以实现零复制转发(Zero-copy forwarding)，在Linux 3.5及以上的OS中还可以实现零复制启动(zero-starting)；</p></li><li><p>内存分配器在固定大小的内存池中可实现即时内存分配，这能够显著减少创建一个会话的时长；</p></li><li><p>树型存储：侧重于使用作者多年前开发的弹性二叉树，实现了以O(log(N))的低开销来保持计时器命令、保持运行队列命令及管理轮询及最少连接队列；</p></li><li><p>优化的HTTP首部分析：优化的首部分析功能避免了在HTTP首部分析过程中重读任何内存区域；</p></li><li><p>精心地降低了昂贵的系统调用，大部分工作都在用户空间完成，如时间读取、缓冲聚合及文件描述符的启用和禁用等；</p></li></ol><p>所有的这些细微之处的优化实现了在中等规模负载之上依然有着相当低的CPU负载，甚至于在非常高的负载场景中，5%的用户空间占用率和95%的系统空间占用率也是非常普遍的现象，这意味着HAProxy进程消耗比系统空间消耗低20倍以上。因此，对OS进行性能调优是非常重要的。即使用户空间的占用率提高一倍，其CPU占用率也仅为10%，这也解释了为何7层处理对性能影响有限这一现象。由此，在高端系统上HAProxy的7层性能可轻易超过硬件负载均衡设备。</p><p>在生产环境中，在7层处理上使用HAProxy作为昂贵的高端硬件负载均衡设备故障故障时的紧急解决方案也时长可见。硬件负载均衡设备在“报文”级别处理请求，这在支持跨报文请求(request across multiple packets)有着较高的难度，并且它们不缓冲任何数据，因此有着较长的响应时间。对应地，软件负载均衡设备使用TCP缓冲，可建立极长的请求，且有着较大的响应时间。</p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install -y haproxy</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Example configuration for a possible web application.  See the</span><br><span class="line"># full configuration options online.</span><br><span class="line">#</span><br><span class="line">#   https:&#x2F;&#x2F;www.haproxy.org&#x2F;download&#x2F;1.8&#x2F;doc&#x2F;configuration.txt</span><br><span class="line">#</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global</span><br><span class="line">    # to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will</span><br><span class="line">    # need to:</span><br><span class="line">    #</span><br><span class="line">    # 1) configure syslog to accept network log events.  This is done</span><br><span class="line">    #    by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in</span><br><span class="line">    #    &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">    #</span><br><span class="line">    # 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line">    #   file. A line like the following can be added to</span><br><span class="line">    #   &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">    #</span><br><span class="line">    #    local2.*                       &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line">    #</span><br><span class="line">    log         127.0.0.1 local2</span><br><span class="line"></span><br><span class="line">    chroot      &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile     &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn     4000</span><br><span class="line">    user        haproxy</span><br><span class="line">    group       haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">    # turn on stats unix socket</span><br><span class="line">    stats socket &#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line"></span><br><span class="line">    # utilize system-wide crypto-policies</span><br><span class="line">    ssl-default-bind-ciphers PROFILE&#x3D;SYSTEM</span><br><span class="line">    ssl-default-server-ciphers PROFILE&#x3D;SYSTEM</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># common defaults that all the &#39;listen&#39; and &#39;backend&#39; sections will</span><br><span class="line"># use if not designated in their block</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">defaults</span><br><span class="line">    mode                    http</span><br><span class="line">    log                     global</span><br><span class="line">    option                  httplog</span><br><span class="line">    option                  dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor       except 127.0.0.0&#x2F;8</span><br><span class="line">    option                  redispatch</span><br><span class="line">    retries                 3</span><br><span class="line">    timeout http-request    10s</span><br><span class="line">    timeout queue           1m</span><br><span class="line">    timeout connect         10s</span><br><span class="line">    timeout client          1m</span><br><span class="line">    timeout server          1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check           10s</span><br><span class="line">    maxconn                 3000</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># main frontend which proxys to the backends</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">frontend main</span><br><span class="line">    bind *:5000</span><br><span class="line">    acl url_static       path_beg       -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets</span><br><span class="line">    acl url_static       path_end       -i .jpg .gif .png .css .js</span><br><span class="line"></span><br><span class="line">    use_backend static          if url_static</span><br><span class="line">    default_backend             app</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># static backend for serving up images, stylesheets and such</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">backend static</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server      static 127.0.0.1:4331 check</span><br><span class="line"></span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># round robin balancing between the various backends</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">backend app</span><br><span class="line">    balance     roundrobin</span><br><span class="line">    server  app1 127.0.0.1:5001 check</span><br><span class="line">    server  app2 127.0.0.1:5002 check</span><br><span class="line">    server  app3 127.0.0.1:5003 check</span><br><span class="line">    server  app4 127.0.0.1:5004 check</span><br></pre></td></tr></table></figure><p>haproxy 的配置文件由两部分组成：全局设定和对代理的设定，共分为五段：global，defaults，frontend，backend，listen。</p><ul><li>global：参数是进程级的，通常和操作系统（OS）相关。这些参数一般只设置一次，如果配置无误，就不需要再次配置进行修改</li><li>defaults：配置默认参数的，这些参数可以被利用配置到frontend，backend，listen组件</li><li>frontend：接收请求的前端虚拟节点，Frontend可以根据规则直接指定具体使用后端的backend(可动态选择)。</li><li>backend：后端服务集群的配置，是真实的服务器，一个Backend对应一个或者多个实体服务器。</li><li>listen：Frontend和Backend的组合体。</li></ul><h1 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h1><p>一些包含了值的参数表示时间，如超时时长。这些值一般以毫秒为单位，但也可以使用其它的时间单位后缀。</p><p>us: 微秒(microseconds)，即1/1000000秒； ms: 毫秒(milliseconds)，即1/1000秒； s: 秒(seconds)； m: 分钟(minutes)； h：小时(hours)； d: 天(days)；</p><h1 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h1><h2 id="进程管理及安全相关的参数"><a href="#进程管理及安全相关的参数" class="headerlink" title="进程管理及安全相关的参数"></a>进程管理及安全相关的参数</h2><ul><li>– chroot &lt;jail dir&gt;：修改haproxy的工作目录至指定的目录并在放弃权限之前执行chroot()操作，可以提升haproxy的安全级别，不过需要注意的是要确保指定的目录为空目录且任何用户均不能有写权限；</li><li>– daemon：让haproxy以守护进程的方式工作于后台，其等同于“-D”选项的功能，当然，也可以在命令行中以“-db”选项将其禁用；</li><li>– gid &lt;number&gt;：以指定的GID运行haproxy，建议使用专用于运行haproxy的GID，以免因权限问题带来风险；</li><li>– group &lt;group name&gt;：同gid，不过指定的组名；</li><li>– log &lt;address&gt; &lt;facility&gt; [max level [min level]]：定义全局的syslog服务器，最多可以定义两个；</li><li>– log-send-hostname [&lt;string&gt;]：在syslog信息的首部添加当前主机名，可以为“string”指定的名称，也可以缺省使用当前主机名；</li><li>– nbproc &lt;number&gt;：指定启动的haproxy进程的个数，只能用于守护进程模式的haproxy；默认只启动一个进程，鉴于调试困难等多方面的原因，一般只在单进程仅能打开少数文件描述符的场景中才使用多进程模式；</li><li>– pidfile：进程文件存放的位置</li><li>– uid：以指定的UID身份运行haproxy进程；</li><li>– ulimit-n：设定每进程所能够打开的最大文件描述符数目，默认情况下其会自动进行计算，因此不推荐修改此选项；Linux默认单进程打开文件数为1024个</li><li>– user：同uid，但使用的是用户名；</li><li>– stats：用户访问统计数据的接口</li><li>– node：定义当前节点的名称，用于HA场景中多haproxy进程共享同一个IP地址时；</li><li>– description：当前实例的描述信息；</li></ul><h2 id="性能调整相关参数"><a href="#性能调整相关参数" class="headerlink" title="性能调整相关参数"></a>性能调整相关参数</h2><ul><li>– maxconn &lt;number&gt;：设定每个haproxy进程所接受的最大并发连接数，其等同于命令行选项“-n”；“ulimit -n”自动计算的结果正是参照此参数设定的；</li><li>– maxpipes &lt;number&gt;：haproxy使用pipe完成基于内核的tcp报文重组，此选项则用于设定每进程所允许使用的最大pipe个数；每个pipe会打开两个文件描述符，因此，“ulimit -n”自动计算时会根据需要调大此值；默认为maxconn/4，其通常会显得过大；</li><li>– noepoll：在Linux系统上禁用epoll机制；</li><li>– nokqueue：在BSE系统上禁用kqueue机制；</li><li>– nopoll：禁用poll机制；</li><li>– nosepoll：在Linux禁用启发式epoll机制；</li><li>– nosplice：禁止在Linux套接字上使用内核tcp重组，这会导致更多的recv/send系统调用；不过，在Linux 2.6.25-28系列的内核上，tcp重组功能有bug存在；</li><li>– spread-checks &lt;0..50, in percent&gt;：在haproxy后端有着众多服务器的场景中，在精确的时间间隔后统一对众服务器进行健康状况检查可能会带来意外问题；此选项用于将其检查的时间间隔长度上增加或减小一定的随机时长；</li><li>– tune.bufsize &lt;number&gt;：设定buffer的大小，同样的内存条件小，较小的值可以让haproxy有能力接受更多的并发连接，较大的值可以让某些应用程序使用较大的cookie信息；默认为16384，其可以在编译时修改，不过强烈建议使用默认值；</li><li>– tune.chksize &lt;number&gt;：设定检查缓冲区的大小，单位为字节；更大的值有助于在较大的页面中完成基于字符串或模式的文本查找，但也会占用更多的系统资源；不建议修改；</li><li>– tune.maxaccept &lt;number&gt;：设定haproxy进程内核调度运行时一次性可以接受的连接的个数，较大的值可以带来较大的吞吐率，默认在单进程模式下为100，多进程模式下为8，设定为-1可以禁止此限制；一般不建议修改；</li><li>– tune.maxpollevents &lt;number&gt;：设定一次系统调用可以处理的事件最大数，默认值取决于OS；其值小于200时可节约带宽，但会略微增大网络延迟，而大于200时会降低延迟，但会稍稍增加网络带宽的占用量；</li><li>– tune.maxrewrite &lt;number&gt;：设定为首部重写或追加而预留的缓冲空间，建议使用1024左右的大小；在需要使用更大的空间时，haproxy会自动增加其值；</li><li>– tune.rcvbuf.client &lt;number&gt;：</li><li>– tune.rcvbuf.server &lt;number&gt;：设定内核套接字中服务端或客户端接收缓冲的大小，单位为字节；强烈推荐使用默认值；</li><li>– tune.sndbuf.client：</li><li>– tune.sndbuf.server：</li></ul><h2 id="Debug相关的参数"><a href="#Debug相关的参数" class="headerlink" title="Debug相关的参数"></a>Debug相关的参数</h2><ul><li>debug </li><li>quiet</li></ul><h2 id="超时时长"><a href="#超时时长" class="headerlink" title="超时时长"></a>超时时长</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">timeout httprequest：在客户端建立连接但不请求数据时，关闭客户端连接</span><br><span class="line">timeout queue：等待最大时长</span><br><span class="line">timeout connect：定义haproxy将客户端请求转发至后端服务器所等待的超时时长</span><br><span class="line">timeout client：客户端非活动状态的超时时长</span><br><span class="line">timeout server：客户端与服务器端建立连接后，等待服务器端的超时时长，</span><br><span class="line">timeout http-keep-alive：定义保持连接的超时时长</span><br><span class="line">timeout check：健康状态监测时的超时时间，过短会误判，过长资源消耗</span><br><span class="line">maxconn :每个server最大的连接数</span><br><span class="line">http-server-close:在使用长连接时，为了避免客户端超时没有关闭长连接，此功能可以使服务器端关闭长连接</span><br><span class="line">redispatch：在使用基于cookie定向时，一旦后端某一server宕机时，会将会话重新定向至某一上游服务器，必须使用的选项</span><br></pre></td></tr></table></figure><h2 id="实现访问控制"><a href="#实现访问控制" class="headerlink" title="实现访问控制"></a>实现访问控制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http-request: 7层过滤</span><br><span class="line">tcp-request content: tcp层过滤，四层过滤</span><br></pre></td></tr></table></figure><h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><p>代理相关的配置可以如下配置段中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">defaults &lt;name&gt;</span><br><span class="line">frontend &lt;name&gt;</span><br><span class="line">backend &lt;name&gt;</span><br><span class="line">listen &lt;name&gt;</span><br></pre></td></tr></table></figure><ul><li>“defaults”段用于为所有其它配置段提供默认参数，这配置默认配置参数可由下一个“defaults”所重新设定。</li><li>“frontend”段用于定义一系列监听的套接字，这些套接字可接受客户端请求并与之建立连接。</li><li>“backend”段用于定义一系列“后端”服务器，代理将会将对应客户端的请求转发至这些服务器。</li><li>“listen”段通过关联“frontend”和“backend”定义了一个完整的代理，通常只对TCP流量有用。</li></ul><p>所有代理的名称只能使用大写字母、小写字母、数字、-(中线)、_(下划线)、.(点号)和:(冒号)。此外，ACL名称会区分字母大小写。</p><h1 id="配置文件中的关键字参考"><a href="#配置文件中的关键字参考" class="headerlink" title="配置文件中的关键字参考"></a>配置文件中的关键字参考</h1><h2 id="balance"><a href="#balance" class="headerlink" title="balance"></a>balance</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">balance [ ]</span><br><span class="line"></span><br><span class="line">balance url_param [check_post []]</span><br></pre></td></tr></table></figure><p>定义负载均衡算法，可用于“defaults”、“listen”和“backend”。用于在负载均衡场景中挑选一个server，其仅应用于持久信息不可用的条件下或需要将一个连接重新派发至另一个服务器时。支持的算法有：</p><ul><li><p>roundrobin：基于权重进行轮叫，在服务器的处理时间保持均匀分布时，这是最平衡、最公平的算法。此算法是动态的，这表示其权重可以在运行时进行调整，不过，在设计上，每个后端服务器仅能最多接受4128个连接；并支持慢启动。</p></li><li><p>static-rr：基于权重进行轮叫，与roundrobin类似，但是为静态方法，在运行时调整其服务器权重不会生效；不过，其在后端服务器连接数上没有限制；不支持慢启动，在高负荷的情况下，服务器重新上线时会立即被分配大量连接。</p></li><li><p>leastconn（WLC）：适用于长连接的会话，新的连接请求被派发至具有最少连接数目的后端服务器；在有着较长时间会话的场景中推荐使用此算法，如LDAP、SQL等，其并不太适用于较短会话的应用层协议，如HTTP；此算法是动态的，可以在运行时调整其权重；</p></li><li><p>source：将请求的源地址进行hash运算，并由后端服务器的权重总数相除后派发至某匹配的服务器；这可以使得同一个客户端IP的请求始终被派发至某特定的服务器；不过，当服务器权重总数发生变化时，如某服务器宕机或添加了新的服务器，许多客户端的请求可能会被派发至与此前请求不同的服务器；常用于负载均衡无cookie功能的基于TCP的协议；其默认为静态，不过也可以使用hash-type修改此特性；</p><ul><li><p>对原地址hash，第一次调度时使用WLC</p><ul><li>source：IP层，位于同一个NAT服务器背后的多个请求都会定向至同一个upstream server，不利于负载均衡，一般只有不支持使用cookie插入又需要保持会话时使用</li><li>cookie：应用层，有更好的负载均衡效果；</li></ul></li><li><p>hash/weight%ip ：除以权重取模</p></li></ul></li><li><p>uri：对URI的左半部分(“问题”标记之前的部分)或整个URI进行hash运算，并由服务器的总权重相除后派发至某匹配的服务器；这可以使得对同一个URI的请求总是被派发至某特定的服务器，除非服务器的权重总数发生了变化；此算法常用于代理缓存或反病毒代理以提高缓存的命中率；需要注意的是，此算法仅应用于HTTP后端服务器场景；其默认为静态算法，不过也可以使用hash-type修改此特性；</p></li><li><p>url_param：通过&lt;argument&gt;为URL指定的参数在每个HTTP GET请求中将会被检索；如果找到了指定的参数且其通过等于号“=”被赋予了一个值，那么此值将被执行hash运算并被服务器的总权重相除后派发至某匹配的服务器；此算法可以通过追踪请求中的用户标识进而确保同一个用户ID的请求将被送往同一个特定的服务器，除非服务器的总权重发生了变化；如果某请求中没有出现指定的参数或其没有有效值，则使用轮叫算法对相应请求进行调度；此算法默认为静态的，不过其也可以使用hash-type修改此特性；</p></li><li><p>hdr(&lt;name&gt;)：对于每个HTTP请求，通过&lt;name&gt;指定的HTTP首部将会被检索；如果相应的首部没有出现或其没有有效值，则使用轮叫算法对相应请求进行调度；其有一个可选选项“use_domain_only”，可在指定检索类似Host类的首部时仅计算域名部分(比如通过<a href="http://www.kinmfer.com来说,仅计算kinmfer字符串的hash值)以降低hash算法的运算量;此算法默认为静态的,不过其也可以使用hash-type修改此特性;/">www.kinmfer.com来说，仅计算kinmfer字符串的hash值)以降低hash算法的运算量；此算法默认为静态的，不过其也可以使用hash-type修改此特性；</a></p></li><li><p>rdp-cookie(name):表示根据据cookie(name)来锁定并哈希每一次TCP请求。</p></li></ul><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bind [&lt;address&gt;]:&lt;port_range&gt; [, …]</span><br><span class="line"></span><br><span class="line">bind [&lt;address&gt;]:&lt;port_range&gt; [, …] interface &lt;interface&gt;</span><br></pre></td></tr></table></figure><p>此指令仅能用于frontend和listen区段，用于定义一个或几个监听的套接字。</p><p>&lt;address&gt;：可选选项，其可以为主机名、IPv4地址、IPv6地址或*；省略此选项、将其指定为*或0.0.0.0时，将监听当前系统的所有IPv4地址；<port_range>：可以是一个特定的TCP端口，也可是一个端口范围(如5005-5010)，代理服务器将通过指定的端口来接收客户端请求；需要注意的是，每组监听的套接字&lt;address:port&gt;在同一个实例上只能使用一次，而且小于1024的端口需要有特定权限的用户才能使用，这可能需要通过uid参数来定义；&lt;interface&gt;：指定物理接口的名称，仅能在Linux系统上使用；其不能使用接口别名，而仅能使用物理接口名称，而且只有管理有权限指定绑定的物理接口；</p><h2 id="mode"><a href="#mode" class="headerlink" title="mode"></a>mode</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mode &#123; tcp|http|health &#125;</span><br></pre></td></tr></table></figure><p>设定实例的运行模式或协议。当实现内容交换时，前端和后端必须工作于同一种模式(一般说来都是HTTP模式)，否则将无法启动实例。</p><p>tcp：实例运行于纯TCP模式，在客户端和服务器端之间将建立一个全双工的连接，且不会对7层报文做任何类型的检查；通常用于SSL、SSH、SMTP等应用；<br>http：实例运行于HTTP模式，客户端请求在转发至后端服务器之前将被深度分析，所有不与RFC格式兼容的请求都会被拒绝；此为默认模式；<br>health：实例工作于health模式，其对入站请求仅响应“OK”信息并关闭连接，且不会记录任何日志信息；此模式将用于响应外部组件的健康状态检查请求；目前来讲，此模式已经废弃，因为tcp或http模式中的monitor关键字可完成类似功能；</p><h2 id="hash-type"><a href="#hash-type" class="headerlink" title="hash-type"></a>hash-type</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash-type &lt;method&gt;</span><br></pre></td></tr></table></figure><p>定义用于将hash码映射至后端服务器的方法；其不能用于frontend区段；可用方法有map-based和consistent，在大多数场景下推荐使用默认的map-based方法。</p><p>map-based：hash表是一个包含了所有在线服务器的静态数组。其hash值将会非常平滑，会将权重考虑在列，但其为静态方法，对在线服务器的权重进行调整将不会生效，这意味着其不支持慢速启动。此外，挑选服务器是根据其在数组中的位置进行的，因此，当一台服务器宕机或添加了一台新的服务器时，大多数连接将会被重新派发至一个与此前不同的服务器上，对于缓存服务器的工作场景来说，此方法不甚适用。</p><p>consistent：“一致性哈希算法”，hash表是一个由各服务器填充而成的树状结构，将服务器散列在hash环上；基于hash键在hash树中查找相应的服务器时，最近的服务器将被选中。此方法是动态的，支持在运行时修改服务器权重，因此兼容慢速启动的特性。添加一个新的服务器时，仅会对一小部分请求产生影响，因此，尤其适用于后端服务器为cache的场景。不过，此算法不甚平滑，派发至各服务器的请求未必能达到理想的均衡效果，因此，可能需要不时的调整服务器的权重以获得更好的均衡性。</p><h2 id="log"><a href="#log" class="headerlink" title="log"></a>log</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">log global</span><br><span class="line"></span><br><span class="line">log &lt;address&gt; &lt;facility&gt; [&lt;level&gt; [&lt;minlevel&gt;]]</span><br></pre></td></tr></table></figure><p>为每个实例启用事件和流量日志，因此可用于所有区段。每个实例最多可以指定两个log参数，不过，如果使用了“log global”且”global”段已经定了两个log参数时，多余了log参数将被忽略。</p><p>global：当前实例的日志系统参数同”global”段中的定义时，将使用此格式；每个实例仅能定义一次“log global”语句，且其没有任何额外参数；</p><p>&lt;address&gt;：定义日志发往的位置，其格式之一可以为&lt;IPv4_address:PORT&gt;，其中的port为UDP协议端口，默认为514；格式之二为Unix套接字文件路径，但需要留心chroot应用及用户的读写权限；</p><p>&lt;facility&gt;：可以为syslog系统的标准facility之一；</p><p>&lt;level&gt;：定义日志级别，即输出信息过滤器，默认为所有信息；指定级别时，所有等于或高于此级别的日志信息将会被发送；</p><h2 id="maxconn"><a href="#maxconn" class="headerlink" title="maxconn"></a>maxconn</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">maxconn &lt;conns&gt;</span><br></pre></td></tr></table></figure><p>设定一个前端的最大并发连接数，因此，其不能用于backend区段。对于大型站点来说，可以尽可能提高此值以便让haproxy管理连接队列，从而避免无法应答用户请求。当然，此最大值不能超出“global”段中的定义。此外，需要留心的是，haproxy会为每个连接维持两个缓冲，每个缓冲的大小为8KB，再加上其它的数据，每个连接将大约占用17KB的RAM空间。这意味着经过适当优化后，有着1GB的可用RAM空间时将能维护40000-50000并发连接。</p><p>如果为&lt;conns&gt;指定了一个过大值，极端场景下，其最终占据的空间可能会超出当前主机的可用内存，这可能会带来意想不到的结果；因此，将其设定了一个可接受值方为明智决定。其默认为2000。</p><h2 id="default-backend"><a href="#default-backend" class="headerlink" title="default_backend"></a>default_backend</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">default_backend &lt;backend&gt;</span><br></pre></td></tr></table></figure><p>在没有匹配的”use_backend”规则时为实例指定使用的默认后端，因此，其不可应用于backend区段。在”frontend”和”backend”之间进行内容交换时，通常使用”use-backend”定义其匹配规则；而没有被规则匹配到的请求将由此参数指定的后端接收。</p><p>&lt;backend&gt;：指定使用的后端的名称；</p><p>使用案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">use_backend dynamic if url_dyn</span><br><span class="line">use_backend static if url_css url_img extension_img</span><br><span class="line">default_backend dynamic</span><br></pre></td></tr></table></figure><h2 id="server"><a href="#server" class="headerlink" title="server"></a>server</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server &lt;name&gt; &lt;address&gt;[:port] [param*]</span><br></pre></td></tr></table></figure><p>为后端声明一个server，因此，不能用于defaults和frontend区段。</p><p> &lt;name&gt;：为此服务器指定的内部名称，其将出现在日志及警告信息中；如果设定了”http-send-server-name”，它还将被添加至发往此服务器的请求首部中；</p><p>&lt;address&gt;：此服务器的的IPv4地址，也支持使用可解析的主机名，只不过在启动时需要解析主机名至相应的IPv4地址；</p><p>[:port]：指定将连接请求所发往的此服务器时的目标端口，其为可选项；未设定时，将使用客户端请求时的同一相端口；</p><p>[param*]：为此服务器设定的一系参数；其可用的参数非常多，具体请参考官方文档中的说明，下面仅说明几个常用的参数；</p><p>服务器或默认服务器参数：</p><ul><li><p>backup：设定为备用服务器，仅在负载均衡场景中的其它server均不可用于启用此server；</p></li><li><p>check：启动对此server执行健康状态检查，其可以借助于额外的其它参数完成更精细的设定，如：</p><ul><li>inter &lt;delay&gt;：设定健康状态检查的时间间隔，单位为毫秒，默认为2000；也可以使用fastinter和downinter来根据服务器端状态优化此时间延迟；</li><li>rise &lt;count&gt;：设定健康状态检查中，某离线的server从离线状态转换至正常状态需要成功检查的次数；</li><li>fall &lt;count&gt;：确认server从正常状态转换为不可用状态需要检查的次数；</li></ul></li><li><p>cookie &lt;value&gt;：为指定server设定cookie值，此处指定的值将在请求入站时被检查，第一次为此值挑选的server将在后续的请求中被选中，其目的在于实现持久连接的功能；</p></li><li><p>maxconn &lt;maxconn&gt;：指定此服务器接受的最大并发连接数；如果发往此服务器的连接数目高于此处指定的值，其将被放置于请求队列，以等待其它连接被释放；</p></li><li><p>haproxy 有n个进程，每个支持m个连接，后端有x个服务器，每个最大支持y个连接，则 n<em>m &lt;= x</em>y，如果后端服务器支持排队，则n<em>m &lt;= x</em>（y+z），z为每个服务器的排队队列</p></li><li><p>maxqueue &lt;maxqueue&gt;：设定请求队列的最大长度；</p></li><li><p>observe &lt;mode&gt;：通过观察服务器的通信状况来判定其健康状态，默认为禁用，其支持的类型有“layer4”和“layer7”，“layer7”仅能用于http代理场景；</p></li><li><p>redir &lt;prefix&gt;：启用重定向功能，将发往此服务器的GET和HEAD请求均以302状态码响应；需要注意的是，在prefix后面不能使用/，且不能使用相对地址，以免造成循环；例如：</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">server srv1 172.16.100.6:80 redir http:&#x2F;&#x2F;imageserver.kinmfer.com check</span><br></pre></td></tr></table></figure><p>weight &lt;weight&gt;：权重，默认为1，最大值为256，0表示不参与负载均衡（不被调度）；</p><p>检查方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">option httpchk</span><br><span class="line">option httpchk</span><br><span class="line">option httpchk</span><br><span class="line">option httpchk ：不能用于frontend段，例如：</span><br><span class="line">backend https_relay mode tcp</span><br><span class="line">option httpchk OPTIONS * HTTP&#x2F;1.1\r\nHost:\ www.kinmfer.com</span><br><span class="line">server apache1 192.168.1.1:443 check port 80</span><br></pre></td></tr></table></figure><p>使用案例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server first 172.16.100.7:1080 cookie first check inter 1000</span><br><span class="line">server second 172.16.100.8:1080 cookie second check inter 1000</span><br></pre></td></tr></table></figure><h2 id="capture-request-header"><a href="#capture-request-header" class="headerlink" title="capture request header"></a>capture request header</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capture request header &lt;name&gt; len &lt;length&gt;</span><br></pre></td></tr></table></figure><p>捕获并记录指定的请求首部最近一次出现时的第一个值，仅能用于“frontend”和“listen”区段。捕获的首部值使用花括号{}括起来后添加进日志中。如果需要捕获多个首部值，它们将以指定的次序出现在日志文件中，并以竖线“|”作为分隔符。不存在的首部记录为空字符串，最常需要捕获的首部包括在虚拟主机环境中使用的“Host”、上传请求首部中的“Content-length”、快速区别真实用户和网络机器人的“User-agent”，以及代理环境中记录真实请求来源的“X-Forward-For”。</p><p>&lt;name&gt;：要捕获的首部的名称，此名称不区分字符大小写，但建议与它们出现在首部中的格式相同，比如大写首字母。需要注意的是，记录在日志中的是首部对应的值，而非首部名称。</p><p>&lt;length&gt;：指定记录首部值时所记录的精确长度，超出的部分将会被忽略。</p><p>可以捕获的请求首部的个数没有限制，但每个捕获最多只能记录64个字符。为了保证同一个frontend中日志格式的统一性，首部捕获仅能在frontend中定义。</p><h2 id="capture-response-header"><a href="#capture-response-header" class="headerlink" title="capture response header"></a>capture response header</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">capture response header &lt;name&gt; len &lt;length&gt;</span><br></pre></td></tr></table></figure><p>捕获并记录响应首部，其格式和要点同请求首部。</p><h2 id="stats-enable"><a href="#stats-enable" class="headerlink" title="stats enable"></a>stats enable</h2><p>启用基于程序编译时默认设置的统计报告，不能用于“frontend”区段。只要没有另外的其它设定，它们就会使用如下的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- stats uri : &#x2F;haproxy?stats</span><br><span class="line">- stats realm : &quot;HAProxy Statistics&quot;</span><br><span class="line">- stats auth : no authentication</span><br><span class="line">- stats scope : no restriction</span><br></pre></td></tr></table></figure><p>尽管“stats enable”一条就能够启用统计报告，但还是建议设定其它所有的参数，以免其依赖于默认设定而带来非期后果。下面是一个配置案例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">backend public_www</span><br><span class="line">server websrv1 172.16.100.11:80</span><br><span class="line">stats enable</span><br><span class="line">stas hide-version</span><br><span class="line">stats scope . stats uri &#x2F;haproxyadmin?stats</span><br><span class="line">stats realm Haproxy\ Statistics</span><br><span class="line">stats auth statsadmin:password</span><br><span class="line">stats auth statsmaster:password</span><br></pre></td></tr></table></figure><h2 id="stats-hide-version"><a href="#stats-hide-version" class="headerlink" title="stats hide-version"></a>stats hide-version</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats hide-version</span><br></pre></td></tr></table></figure><p>启用统计报告并隐藏HAProxy版本报告，不能用于“frontend”区段。默认情况下，统计页面会显示一些有用信息，包括HAProxy的版本号，然而，向所有人公开HAProxy的精确版本号是非常有风险的，因为它能帮助恶意用户快速定位版本的缺陷和漏洞。尽管“stats hide-version”一条就能够启用统计报告，但还是建议设定其它所有的参数，以免其依赖于默认设定而带来非期后果。具体请参照“stats enable”一节的说明。</p><h2 id="stats-realm"><a href="#stats-realm" class="headerlink" title="stats realm"></a>stats realm</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats realm &lt;realm&gt;</span><br></pre></td></tr></table></figure><p>启用统计报告并高精认证领域，不能用于“frontend”区段。haproxy在读取realm时会将其视作一个单词，因此，中间的任何空白字符都必须使用反斜线进行转义。此参数仅在与“stats auth”配置使用时有意义。</p><p>&lt;realm&gt;：实现HTTP基本认证时显示在浏览器中的领域名称，用于提示用户输入一个用户名和密码。</p><p>尽管“stats realm”一条就能够启用统计报告，但还是建议设定其它所有的参数，以免其依赖于默认设定而带来非期后果。具体请参照“stats enable”一节的说明</p><h2 id="stats-scope"><a href="#stats-scope" class="headerlink" title="stats scope"></a>stats scope</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats scope &#123; &lt;name&gt; | &quot;.&quot; &#125;</span><br></pre></td></tr></table></figure><p>启用统计报告并限定报告的区段，不能用于“frontend”区段。当指定此语句时，统计报告将仅显示其列举出区段的报告信息，所有其它区段的信息将被隐藏。如果需要显示多个区段的统计报告，此语句可以定义多次。需要注意的是，区段名称检测仅仅是以字符串比较的方式进行，它不会真检测指定的区段是否真正存在。</p><p>&lt;name&gt;：可以是一个“listen”、“frontend”或“backend”区段的名称，而“.”则表示stats scope语句所定义的当前区段。</p><p>尽管“stats scope”一条就能够启用统计报告，但还是建议设定其它所有的参数，以免其依赖于默认设定而带来非期后果。下面是一个配置案例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backend private_monitoring</span><br><span class="line">stats enable</span><br><span class="line">stats uri &#x2F;haproxyadmin?stats</span><br><span class="line">stats refresh 10s</span><br></pre></td></tr></table></figure><h2 id="stats-auth"><a href="#stats-auth" class="headerlink" title="stats auth"></a>stats auth</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats auth &lt;user&gt;:&lt;passwd&gt;</span><br></pre></td></tr></table></figure><p>启用带认证的统计报告功能并授权一个用户帐号，其不能用于“frontend”区段。</p><p>&lt;user&gt;：授权进行访问的用户名；</p><p>&lt;passwd&gt;：此用户的访问密码，明文格式；</p><p>此语句将基于默认设定启用统计报告功能，并仅允许其定义的用户访问，其也可以定义多次以授权多个用户帐号。可以结合“stats realm”参数在提示用户认证时给出一个领域说明信息。在使用非法用户访问统计功能时，其将会响应一个“401 Forbidden”页面。其认证方式为HTTP Basic认证，密码传输会以明文方式进行，因此，配置文件中也使用明文方式存储以说明其非保密信息故此不能相同于其它关键性帐号的密码。</p><p>尽管“stats auth”一条就能够启用统计报告，但还是建议设定其它所有的参数，以免其依赖于默认设定而带来非期后果。</p><h2 id="stats-admin"><a href="#stats-admin" class="headerlink" title="stats admin"></a>stats admin</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stats admin &#123; if | unless &#125; &lt;cond&gt;</span><br></pre></td></tr></table></figure><p>在指定的条件满足时启用统计报告页面的管理级别功能，它允许通过web接口启用或禁用服务器，不过，基于安全的角度考虑，统计报告页面应该尽可能为只读的。此外，如果启用了HAProxy的多进程模式，启用此管理级别将有可能导致异常行为。</p><p>目前来说，POST请求方法被限制于仅能使用缓冲区减去保留部分之外的空间，因此，服务器列表不能过长，否则，此请求将无法正常工作。因此，建议一次仅调整少数几个服务器。下面是两个案例，第一个限制了仅能在本机打开报告页面时启用管理级别功能，第二个定义了仅允许通过认证的用户使用管理级别功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backend stats_localhost</span><br><span class="line">stats enable</span><br><span class="line">stats admin if LOCALHOST</span><br><span class="line">backend stats_auth</span><br><span class="line">stats enable</span><br><span class="line">stats auth haproxy admin:password</span><br><span class="line">stats admin if TRUE</span><br></pre></td></tr></table></figure><h2 id="option-httplog"><a href="#option-httplog" class="headerlink" title="option httplog"></a>option httplog</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option httplog [ clf ]</span><br></pre></td></tr></table></figure><p>启用记录HTTP请求、会话状态和计时器的功能。</p><p>clf：使用CLF格式来代替HAProxy默认的HTTP格式，通常在使用仅支持CLF格式的特定日志分析器时才需要使用此格式。</p><p>默认情况下，日志输入格式非常简陋，因为其仅包括源地址、目标地址和实例名称，而“option httplog”参数将会使得日志格式变得丰富许多，其通常包括但不限于HTTP请求、连接计时器、会话状态、连接数、捕获的首部及cookie、“frontend”、“backend”及服务器名称，当然也包括源地址和端口号等。</p><h2 id="option-logasap"><a href="#option-logasap" class="headerlink" title="option logasap"></a>option logasap</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">option logasap</span><br><span class="line">no option logasap</span><br></pre></td></tr></table></figure><p>启用或禁用提前将HTTP请求记入日志，不能用于“backend”区段。</p><p>默认情况下，HTTP请求是在请求结束时进行记录以便能将其整体传输时长和字节数记入日志，由此，传较大的对象时，其记入日志的时长可能会略有延迟。“option logasap”参数能够在服务器发送complete首部时即时记录日志，只不过，此时将不记录整体传输时长和字节数。此情形下，捕获“Content-Length”响应首部来记录传输的字节数是一个较好选择。下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">listen http_proxy 0.0.0.0:80</span><br><span class="line">mode http</span><br><span class="line">option httplog</span><br><span class="line">option logasap</span><br><span class="line">log 172.16.100.9 local2</span><br></pre></td></tr></table></figure><h2 id="option-forwardfor"><a href="#option-forwardfor" class="headerlink" title="option forwardfor"></a>option forwardfor</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">option forwardfor [ except &lt;network&gt; ] [ header &lt;name&gt; ] [ if-none ]</span><br></pre></td></tr></table></figure><p>允许在发往服务器的请求首部中插入“X-Forwarded-For”首部。</p><p>&lt;network&gt;：可选参数，当指定时，源地址为匹配至此网络中的请求都禁用此功能。</p><p>&lt;name&gt;：可选参数，可使用一个自定义的首部，如“X-Client”来替代“X-Forwarded-For”。有些独特的web服务器的确需要用于一个独特的首部。</p><p>if-none：仅在此首部不存在时才将其添加至请求报文问道中。</p><p>HAProxy工作于反向代理模式，其发往服务器的请求中的客户端IP均为HAProxy主机的地址而非真正客户端的地址，这会使得服务器端的日志信息记录不了真正的请求来源，“X-Forwarded-For”首部则可用于解决此问题。HAProxy可以向每个发往服务器的请求上添加此首部，并以客户端IP为其value。</p><p>需要注意的是，HAProxy工作于隧道模式，其仅检查每一个连接的第一个请求，因此，仅第一个请求报文被附加此首部。如果想为每一个请求都附加此首部，请确保同时使用了“option httpclose”、“option forceclose”和“option http-server-close”几个option。</p><p>下面是一个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">frontend www</span><br><span class="line">mode http</span><br><span class="line">option forwardfor except 127.0.0.1</span><br></pre></td></tr></table></figure><h2 id="errorfile"><a href="#errorfile" class="headerlink" title="errorfile"></a>errorfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errorfile &lt;code&gt; &lt;file&gt;</span><br></pre></td></tr></table></figure><p>在用户请求不存在的页面时，返回一个页面文件给客户端而非由haproxy生成的错误代码；可用于所有段中。</p><p>&lt;code&gt;：指定对HTTP的哪些状态码返回指定的页面；这里可用的状态码有200、400、403、408、500、502、503和504；</p><p>&lt;file&gt;：指定用于响应的页面文件；</p><p>例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">errorfile 400 &#x2F;etc&#x2F;haproxy&#x2F;errorpages&#x2F;400badreq.http</span><br><span class="line">errorfile 403 &#x2F;etc&#x2F;haproxy&#x2F;errorpages&#x2F;403forbid.http</span><br><span class="line">errorfile 503 &#x2F;etc&#x2F;haproxy&#x2F;errorpages&#x2F;503sorry.http</span><br></pre></td></tr></table></figure><h2 id="errorloc-和-errorloc302"><a href="#errorloc-和-errorloc302" class="headerlink" title="errorloc 和 errorloc302"></a>errorloc 和 errorloc302</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">errorloc &lt;code&gt; &lt;url&gt;</span><br><span class="line">errorloc302 &lt;code&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>请求错误时，返回一个HTTP重定向至某URL的信息；可用于所有配置段中。</p><p>&lt;code&gt;：指定对HTTP的哪些状态码返回指定的页面；这里可用的状态码有200、400、403、408、500、502、503和504；</p><p>&lt;url&gt;：Location首部中指定的页面位置的具体路径，可以是在当前服务器上的页面的相对路径，也可以使用绝对路径；需要注意的是，如果URI自身错误时产生某特定状态码信息的话，有可能会导致循环定向；</p><p>需要留意的是，这两个关键字都会返回302状态吗，这将使得客户端使用同样的HTTP方法获取指定的URL，对于非GET法的场景(如POST)来说会产生问题，因为返回客户的URL是不允许使用GET以外的其它方法的。如果的确有这种问题，可以使用errorloc303来返回303状态码给客户端。</p><h2 id="errorloc303"><a href="#errorloc303" class="headerlink" title="errorloc303"></a>errorloc303</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">errorloc303 &lt;code&gt; &lt;url&gt;</span><br></pre></td></tr></table></figure><p>请求错误时，返回一个HTTP重定向至某URL的信息给客户端；可用于所有配置段中。</p><p>&lt;code&gt;：指定对HTTP的哪些状态码返回指定的页面；这里可用的状态码有400、403、408、500、502、503和504；</p><p>&lt;url&gt;：Location首部中指定的页面位置的具体路径，可以是在当前服务器上的页面的相对路径，也可以使用绝对路径；需要注意的是，如果URI自身错误时产生某特定状态码信息的话，有可能会导致循环定向；</p><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">backend webserver</span><br><span class="line">server 172.16.100.6 172.16.100.6:80 check maxconn 3000 cookie srv01</span><br><span class="line">server 172.16.100.7 172.16.100.7:80 check maxconn 3000 cookie srv02</span><br><span class="line">errorloc 403 &#x2F;etc&#x2F;haproxy&#x2F;errorpages&#x2F;sorry.htm</span><br><span class="line">errorloc 503 &#x2F;etc&#x2F;haproxy&#x2F;errorpages&#x2F;sorry.htm</span><br></pre></td></tr></table></figure><h1 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h1><p>haproxy的ACL用于实现基于请求报文的首部、响应报文的内容或其它的环境状态信息来做出转发决策，这大大增强了其配置弹性。其配置法则通常分为两步，首先去定义ACL，即定义一个测试条件，而后在条件得到满足时执行某特定的动作，如阻止请求或转发至某特定的后端。定义ACL的语法格式如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl &lt;aclname&gt; &lt;criterion&gt; [flags] [operator] &lt;value&gt; ...</span><br></pre></td></tr></table></figure><p>&lt;aclname&gt;：ACL名称，区分字符大小写，且其只能包含大小写字母、数字、-(连接线)、_(下划线)、.(点号)和:(冒号)；haproxy中，acl可以重名，这可以把多个测试条件定义为一个共同的acl；</p><p>&lt;criterion&gt;：测试标准，即对什么信息发起测试；测试方式可以由[flags]指定的标志进行调整；而有些测试标准也可以需要为其在之前指定一个操作符[operator]；</p><p>[flags]：目前haproxy的acl支持的标志位有3个：</p><p>-i：不区分中模式字符的大小写；</p><p>-f：从指定的文件中加载模式；</p><p>–：标志符的强制结束标记，在模式中的字符串像标记符时使用；</p><p>&lt;value&gt;：acl测试条件支持的值有以下四类：</p><p>整数或整数范围：如1024:65535表示从1024至65535；仅支持使用正整数(如果出现类似小数的标识，其为通常为版本测试)，且支持使用的操作符有5个，分别为eq、ge、gt、le和lt；</p><p>字符串：支持使用“-i”以忽略字符大小写，支持使用“\”进行转义；如果在模式首部出现了-i，可以在其之前使用“–”标志位；</p><p>正则表达式：其机制类同字符串匹配；IP地址及网络地址；</p><p>同一个acl中可以指定多个测试条件，这些测试条件需要由逻辑操作符指定其关系。条件间的组合测试关系有三种：“与”(默认即为与操作)、“或”(使用“||”操作符)以及“非”(使用“!”操作符)。</p><h2 id="常用的测试标准-criteria"><a href="#常用的测试标准-criteria" class="headerlink" title="常用的测试标准(criteria)"></a>常用的测试标准(criteria)</h2><h3 id="be-sess-rate"><a href="#be-sess-rate" class="headerlink" title="be_sess_rate"></a>be_sess_rate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">be_sess_rate(backend) &lt;integer&gt;</span><br></pre></td></tr></table></figure><p>用于测试指定的backend上会话创建的速率(即每秒创建的会话数)是否满足指定的条件；常用于在指定backend上的会话速率过高时将用户请求转发至另外的backend，或用于阻止攻击行为。例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">backend dynamic</span><br><span class="line">mode http</span><br><span class="line">acl being_scanned be_sess_rate gt 50</span><br><span class="line">redirect location &#x2F;error_pages&#x2F;denied.html if being_scanned</span><br></pre></td></tr></table></figure><h3 id="fe-sess-rate"><a href="#fe-sess-rate" class="headerlink" title="fe_sess_rate"></a>fe_sess_rate</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fe_sess_rate(frontend) &lt;integer&gt;</span><br></pre></td></tr></table></figure><p>用于测试指定的frontend(或当前frontend)上的会话创建速率是否满足指定的条件；常用于为frontend指定一个合理的会话创建速率的上限以防止服务被滥用。例如下面的例子限定入站邮件速率不能大于50封/秒，所有在此指定范围之外的请求都将被延时50毫秒。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">frontend mail</span><br><span class="line">bind :25</span><br><span class="line">mode tcp</span><br><span class="line">maxconn 500</span><br><span class="line">acl too_fast fe_sess_rate ge 50</span><br><span class="line">tcp-request inspect-delay 50ms</span><br><span class="line">tcp-request content accept if ! too_fast</span><br><span class="line">tcp-request content accept if WAIT_END</span><br></pre></td></tr></table></figure><h3 id="hdr-lt-string-gt"><a href="#hdr-lt-string-gt" class="headerlink" title="hdr &lt;string&gt;"></a>hdr &lt;string&gt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdr(header) &lt;string&gt;</span><br></pre></td></tr></table></figure><p>用于测试请求报文中的所有首部或指定首部是否满足指定的条件；指定首部时，其名称不区分大小写，且在括号“()”中不能有任何多余的空白字符。测试服务器端的响应报文时可以使用shdr()。例如下面的例子用于测试首部Connection的值是否为close。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdr(Connection) -i close</span><br></pre></td></tr></table></figure><h3 id="method-lt-string-gt"><a href="#method-lt-string-gt" class="headerlink" title="method &lt;string&gt;"></a>method &lt;string&gt;</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">method &lt;string&gt;</span><br></pre></td></tr></table></figure><p>测试HTTP请求报文中使用的方法。</p><h3 id="path-beg-lt-string-gt"><a href="#path-beg-lt-string-gt" class="headerlink" title="path_beg &lt;string&gt;"></a>path_beg &lt;string&gt;</h3><p>用于测试请求的URL是否以指定的模式开头。下面的例子用于测试URL是否以/static、/images、/javascript或/stylesheets头。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl url_static path_beg -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets</span><br></pre></td></tr></table></figure><h3 id="path-end-lt-string-gt"><a href="#path-end-lt-string-gt" class="headerlink" title="path_end &lt;string&gt;"></a>path_end &lt;string&gt;</h3><p>用于测试请求的URL是否以&lt;string&gt;指定的模式结尾。例如，下面的例子用户测试URL是否以jpg、gif、png、css或js结尾。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl url_static path_end -i .jpg .gif .png .css .js</span><br></pre></td></tr></table></figure><h3 id="hdr-beg-lt-string-gt"><a href="#hdr-beg-lt-string-gt" class="headerlink" title="hdr_beg &lt;string&gt;"></a>hdr_beg &lt;string&gt;</h3><p>用于测试请求报文的指定首部的开头部分是否符合&lt;string&gt;指定的模式。例如，下面的例子用记测试请求是否为提供静态内容的主机img、video、download或ftp。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">acl host_static hdr_beg(host) -i img. video. download. ftp.</span><br></pre></td></tr></table></figure><h3 id="hdr-end-lt-string-gt"><a href="#hdr-end-lt-string-gt" class="headerlink" title="hdr_end &lt;string&gt;"></a>hdr_end &lt;string&gt;</h3><p>用于测试请求报文的指定首部的结尾部分是否符合&lt;string&gt;指定的模式。</p><h1 id="配置案例"><a href="#配置案例" class="headerlink" title="配置案例"></a>配置案例</h1><p>前端调度器IP：192.168.1.210<br>后端应用服务器IP: 192.168.1.111 和 192.168.1.112</p><h2 id="定义独立日志文件"><a href="#定义独立日志文件" class="headerlink" title="定义独立日志文件"></a>定义独立日志文件</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1haproxy]# vim &#x2F;etc&#x2F;rsyslog.conf #为其添加日志功能</span><br><span class="line"># Provides UDP syslog reception</span><br><span class="line">$ModLoadimudp</span><br><span class="line">$UDPServerRun514------&gt;启动udp，启动端口后将作为服务器工作</span><br><span class="line"># Provides TCP syslog reception</span><br><span class="line">$ModLoad imtcp</span><br><span class="line">$InputTCPServerRun514------&gt;启动tcp监听端口</span><br><span class="line">local2.*&#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line">[root@node1haproxy]# service rsyslog restar</span><br><span class="line">[root@LBhaproxy]# vim haproxy.cfg</span><br><span class="line">log 127.0.0.1local2---------&gt;在global端中添加此行</span><br></pre></td></tr></table></figure><h2 id="一个最简单的http服务的配置"><a href="#一个最简单的http服务的配置" class="headerlink" title="一个最简单的http服务的配置"></a>一个最简单的http服务的配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">global</span><br><span class="line">    log 127.0.0.1 local2</span><br><span class="line">    chroot &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn 4000</span><br><span class="line">    user haproxy</span><br><span class="line">    group haproxy</span><br><span class="line">    daemon</span><br><span class="line">    stats socket&#x2F;var&#x2F;lib&#x2F;haproxy&#x2F;stats</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    log global</span><br><span class="line">    option httplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor except 127.0.0.0&#x2F;8</span><br><span class="line">    option redispatch</span><br><span class="line">    retries 3</span><br><span class="line">    timeout http-request 10s</span><br><span class="line">    timeout queue 1m</span><br><span class="line">    timeout connect 10s</span><br><span class="line">    timeout client 1m</span><br><span class="line">    timeout server 1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check 10s</span><br><span class="line">    maxconn 3000</span><br><span class="line"></span><br><span class="line">frontend webser#webser为名称</span><br><span class="line">    option forwardfor</span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend app</span><br><span class="line">    </span><br><span class="line">backend app</span><br><span class="line">    balance roundrobin#使拥roundrobin 算法</span><br><span class="line">    server app1 192.168.1.111:80 check</span><br><span class="line">    server app2 192.168.1.112:80 check</span><br></pre></td></tr></table></figure><h2 id="haproxy统计页面的输出机制"><a href="#haproxy统计页面的输出机制" class="headerlink" title="haproxy统计页面的输出机制"></a>haproxy统计页面的输出机制</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">frontend webser</span><br><span class="line">    log 127.0.0.1 local3</span><br><span class="line">    option forwardfor</span><br><span class="line">    bind *:80</span><br><span class="line">    default_backend app</span><br><span class="line"></span><br><span class="line">backend app</span><br><span class="line">    cookie nodeinsert nocache</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server app1 192.168.1.111:80 check cookie node1 intval2 rise1 fall2</span><br><span class="line">    server app2 192.168.1.112:80 check cookie node2 intval2 rise1 fall2</span><br><span class="line">    server backup 127.0.0.1:8010 check backup</span><br><span class="line">    </span><br><span class="line">listen statistics</span><br><span class="line">bind *:8009# 自定义监听端口</span><br><span class="line">stats enable# 启用基于程序编译时默认设置的统计报告</span><br><span class="line">statsauthadmin:admin# 统计页面用户名和密码设置</span><br><span class="line">stats uri&#x2F;admin?stats# 自定义统计页面的URL，默认为&#x2F;haproxy?stats</span><br><span class="line">statshide-version# 隐藏统计页面上HAProxy的版本信息</span><br><span class="line">stats refresh30s# 统计页面自动刷新时间</span><br><span class="line">statsadminifTRUE#如果认证通过就做管理功能，可以管理后端的服务器</span><br><span class="line">stats realm Hapadmin# 统计页面密码框上提示文本，默认为Haproxy\ Statistics</span><br></pre></td></tr></table></figure><h2 id="动静分离示例"><a href="#动静分离示例" class="headerlink" title="动静分离示例"></a>动静分离示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">frontend webservs</span><br><span class="line">    bind *:80</span><br><span class="line">    acl url_static path_beg -i &#x2F;static &#x2F;images &#x2F;javascript &#x2F;stylesheets</span><br><span class="line">    acl url_static path_end -i .jpg .gif .png .css .js .html</span><br><span class="line">    acl url_php path_end -i .php</span><br><span class="line">    acl host_static hdr_beg(host) -i img. imgs. video. videos. ftp. image. download.</span><br><span class="line">    use_backend static if url_static or host_static</span><br><span class="line">    use_backend dynamic if url_php</span><br><span class="line">default_backend dynamic</span><br><span class="line"></span><br><span class="line">backend static</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server node1 192.168.1.111:80 check maxconn 3000</span><br><span class="line"></span><br><span class="line">backend dynamic</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server node2 192.168.1.112:80 check maxconn 1000</span><br></pre></td></tr></table></figure><h2 id="http完整配置"><a href="#http完整配置" class="headerlink" title="http完整配置"></a>http完整配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global</span><br><span class="line"># to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will</span><br><span class="line"># need to:</span><br><span class="line">#</span><br><span class="line"># 1) configure syslog to accept network log events. This is done</span><br><span class="line"># by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in</span><br><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">#</span><br><span class="line"># 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line"># file. A line like the following can be added to</span><br><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">#</span><br><span class="line"># local2.* &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line">#</span><br><span class="line">    log 127.0.0.1 local2</span><br><span class="line">    chroot &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn 4000</span><br><span class="line">    user haproxy</span><br><span class="line">    group haproxy</span><br><span class="line">    daemon</span><br><span class="line"></span><br><span class="line">defaults</span><br><span class="line">    mode http</span><br><span class="line">    log global</span><br><span class="line">    option httplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    option http-server-close</span><br><span class="line">    option forwardfor except 127.0.0.0&#x2F;8</span><br><span class="line">    option redispatch</span><br><span class="line">    retries 3</span><br><span class="line">    timeout http-request 10s</span><br><span class="line">    timeout queue 1m</span><br><span class="line">    timeout connect 10s</span><br><span class="line">    timeout client 1m</span><br><span class="line">    timeout server 1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check 10s</span><br><span class="line">    maxconn 30000</span><br><span class="line"></span><br><span class="line">listen stats</span><br><span class="line">    mode http</span><br><span class="line">    bind 0.0.0.0:1080</span><br><span class="line">    stats enable</span><br><span class="line">    stats hide-version</span><br><span class="line">    stats uri &#x2F;haproxyadmin?stats</span><br><span class="line">    stats realm Haproxy\ Statistics</span><br><span class="line">    stats auth admin:admin</span><br><span class="line">    stats admin if TRUE</span><br><span class="line">    </span><br><span class="line">frontend http-in</span><br><span class="line">    bind *:80</span><br><span class="line">    mode http</span><br><span class="line">    log global</span><br><span class="line">    option httpclose</span><br><span class="line">    option logasap #不等待响应结束就记录日志，表示提前记录日志，一般日志会记录响应时长，此不记录响应时长</span><br><span class="line">    option dontlognull #不记录空信息</span><br><span class="line">    capture request header Host len 20 #记录请求首部的前20个字符</span><br><span class="line">    capture request header Referer len 60 #referer跳转引用，就是上一级</span><br><span class="line">    default_backend servers</span><br><span class="line"></span><br><span class="line">frontend healthcheck</span><br><span class="line">    bind :1099 #定义外部检测机制</span><br><span class="line">    mode http</span><br><span class="line">    option httpclose</span><br><span class="line">    option forwardfor</span><br><span class="line">    default_backend servers</span><br><span class="line">    </span><br><span class="line">backend servers</span><br><span class="line">    balance roundrobin</span><br><span class="line">    server websrv1 192.168.1.111:80 check maxconn 2000</span><br><span class="line">    server websrv2 192.168.1.112:80 check maxconn 2000</span><br></pre></td></tr></table></figure><h2 id="mysql负载均衡实例"><a href="#mysql负载均衡实例" class="headerlink" title="mysql负载均衡实例"></a>mysql负载均衡实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line"># Global settings</span><br><span class="line">#---------------------------------------------------------------------</span><br><span class="line">global</span><br><span class="line"># to have these messages end up in &#x2F;var&#x2F;log&#x2F;haproxy.log you will</span><br><span class="line"># need to:</span><br><span class="line">#</span><br><span class="line"># 1) configure syslog to accept network log events. This is done</span><br><span class="line"># by adding the &#39;-r&#39; option to the SYSLOGD_OPTIONS in</span><br><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">#</span><br><span class="line"># 2) configure local2 events to go to the &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line"># file. A line like the following can be added to</span><br><span class="line"># &#x2F;etc&#x2F;sysconfig&#x2F;syslog</span><br><span class="line">#</span><br><span class="line"># local2.* &#x2F;var&#x2F;log&#x2F;haproxy.log</span><br><span class="line">#</span><br><span class="line">    log 127.0.0.1 local2</span><br><span class="line">    chroot &#x2F;var&#x2F;lib&#x2F;haproxy</span><br><span class="line">    pidfile &#x2F;var&#x2F;run&#x2F;haproxy.pid</span><br><span class="line">    maxconn 4000</span><br><span class="line">    user haproxy</span><br><span class="line">    group haproxy</span><br><span class="line">    daemon</span><br><span class="line">    </span><br><span class="line">defaults</span><br><span class="line">    mode tcp</span><br><span class="line">    log global</span><br><span class="line">    option httplog</span><br><span class="line">    option dontlognull</span><br><span class="line">    retries 3</span><br><span class="line">    timeout http-request 10s</span><br><span class="line">    timeout queue 1m</span><br><span class="line">    timeout connect 10s</span><br><span class="line">    timeout client 1m</span><br><span class="line">    timeout server 1m</span><br><span class="line">    timeout http-keep-alive 10s</span><br><span class="line">    timeout check 10s</span><br><span class="line">    maxconn 600</span><br><span class="line">    </span><br><span class="line">listen stats</span><br><span class="line">    mode http</span><br><span class="line">    bind 0.0.0.0:1080</span><br><span class="line">    stats enable</span><br><span class="line">    stats hide-version</span><br><span class="line">    stats uri &#x2F;haproxyadmin?stats</span><br><span class="line">    stats realm Haproxy\ Statistics</span><br><span class="line">    stats auth admin:admin</span><br><span class="line">    stats admin if TRUE</span><br><span class="line"></span><br><span class="line">frontend mysql</span><br><span class="line">    bind *:3306</span><br><span class="line">    mode tcp</span><br><span class="line">    log global</span><br><span class="line">    default_backend mysqlservers</span><br><span class="line"></span><br><span class="line">backend mysqlservers</span><br><span class="line">    balance leastconn</span><br><span class="line">    server dbsrv1 192.168.1.111:3306 check port 3306 intval 2 rise 1 fall 2 maxconn 300</span><br><span class="line">    server dbsrv2 192.168.1.112:3306 check port 3306 intval 2 rise 1 fall 2 maxconn 300</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> HAProxy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>负载均衡-LVS</title>
      <link href="2020/05/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-LVS/"/>
      <url>2020/05/28/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-LVS/</url>
      
        <content type="html"><![CDATA[<h1 id="集群和分布式"><a href="#集群和分布式" class="headerlink" title="集群和分布式"></a>集群和分布式</h1><p>系统性能扩展方式: </p><ul><li>ScaleUP: 垂直扩展，向上扩展,增强，性能更强的计算机运行同样的服务</li><li>Scale Out:水平扩展，向外扩展,增加设备，并行地运行多个服务调度分配问题，Cluster</li></ul><p>垂直扩展不再提及:</p><p>随着计算机性能的增长，其价格会成倍增长</p><p>单台计算机的性能是有.上限的,不可能无限制地垂直扩展</p><p>多核CPU意味着即使是单台计算机也可以并行的。那么，为什么不一开始就并行化技术?</p><h2 id="集群Cluster"><a href="#集群Cluster" class="headerlink" title="集群Cluster"></a>集群Cluster</h2><p>Cluster:集群,为解决某个特定问题将多台计算机组合起来形成的单个系统</p><p>Cluster分为三种类型:</p><ul><li><p>LB: Load Balancing, 负载均衡,多个主机组成，每个主机只承担一部分访问请求</p></li><li><p>HA: High Availiablity, 高可用，避免SPOF (single Point Of failure)</p><ul><li>MTBF:Mean Time Between Failure平均无故障时间，正常时间</li><li>MTTR:Mean Time To Restoration ( repair)平均恢复前时间，故障时间</li><li>A=MTBF/ (MTBF+MTTR) (0,1): 99%,99.5%,99.9%,99.99%,9999%</li></ul><p><strong>SLA</strong>:服务等级协议(简称: SLA,全称: service level agreement)。是在一定开销下为保障服务的性能和可用性，服务提供商与用户间定义的一种双方认可的协定。通常这个开销是驱动提供服务质量的主要因素。在<br>常规的领域中，总是设定所谓的三个9，四个9来进行表示，当没有达到这种水平的时候，就会有一些列的惩罚措施，而运维，最主要的目标就是达成这种服务水平。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1年&#x3D; 365天&#x3D; 8760小时</span><br><span class="line">99.9&#x3D;8760*0.1%&#x3D;8760*0.001&#x3D;8.76小时</span><br><span class="line">99.99 &#x3D; 8760*0.0001&#x3D;0.876小时&#x3D;0.876*60&#x3D;52.6分钟</span><br><span class="line">99.999&#x3D;8760*0.00001&#x3D;0.0876小时&#x3D;0.0876*60&#x3D;5.26分钟</span><br></pre></td></tr></table></figure><p>停机时间又分为两种，一种是计划内停机时间，一种是计划外停机时间，而运维则主要关注计划外停机时间。</p></li><li><p>HPC: High-performance computing,高性能<a href="http://www.top500.org/">www.top500.org</a></p></li></ul><h2 id="分布式系统"><a href="#分布式系统" class="headerlink" title="分布式系统"></a>分布式系统</h2><p>分布式存储: Ceph, GlusterFS, FastDFS, MogileFS<br>分布式计算: hadoop, Spark</p><p>分布式常见应用</p><ul><li>分布式应用-服务按照功能拆分，使用微服务</li><li>分布式静态资源–静态资源放在不同的存储集群上</li><li>分布式数据和存储–使用key-value缓存系统</li><li>分布式计算–对特殊业务使用分布式计算,比如Hadoop集群</li></ul><h2 id="集群和分布式-1"><a href="#集群和分布式-1" class="headerlink" title="集群和分布式"></a>集群和分布式</h2><ul><li><p>集群:同一个业务系统，部署在多台服务器上。集群中，每一台服务器实现的功能没有差别，数据和代码都是一样的</p></li><li><p>分布式: 一个业务被拆成多个子业务，或者本身就是不同的业务，部署在多台服务器上。分布式中，每一台服务器实现的功能是有差别的，数据和代码也是不一样的，分布式每台服务器功能加起来,才是完整的业务</p></li><li><p>分布式是以缩短单个任务的执行时间来提升效率的，而集群则是通过提高单位时间内执行的任务数来提升效率。</p></li><li><p>对于大型网站，访问用户很多，实现一个群集，在前面部署一个负载均衡服务器， 后面几台服务器完成同一业务。如果有用户进行相应业务访问时，负载均衡器根据后端哪台服务器的负载情况，决定由给哪一台去完成响应，并且一台服务器垮了,其它的服务器可以顶上来。分布式的每-一个节点， 都完成不同的业务,如果一个节点垮了, 那这个业务可能就会失败</p></li></ul><h2 id="集群设计原则"><a href="#集群设计原则" class="headerlink" title="集群设计原则"></a>集群设计原则</h2><ul><li>可扩展性–集群的横向扩展能力</li><li>可用性–无故障时间(SLA service level agreement)</li><li>性能–访问响应时间</li><li>容量–单位时间内的最大并发吞吐量(C10K并发问题)</li></ul><h2 id="集群设计实现"><a href="#集群设计实现" class="headerlink" title="集群设计实现"></a>集群设计实现</h2><h3 id="基础设施层面"><a href="#基础设施层面" class="headerlink" title="基础设施层面"></a>基础设施层面</h3><ul><li>提升硬件资源性能–从入口防火墙到后端web server均使用更高性能的硬件资源</li><li>多域名–DNS 轮询A记录解析</li><li>多入口–将A记录解析到多个公网IP入口</li><li>多机房–同城+异地容灾</li><li>CDN(Content Delivery Network)-基于GSLB(Global Server Load Balance)实现全局负载均衡,如: DNS</li></ul><h3 id="业务层面"><a href="#业务层面" class="headerlink" title="业务层面"></a>业务层面</h3><ul><li>分层:安全层、负载层、静态层、动态层、(缓存层、 存储层)持久化与非持久化</li><li>分割:基于功能分割大业务为小服务</li><li>分布式:对于特殊场景的业务,使用分布式计算</li></ul><h2 id="LB-Cluster-负载均衡集群"><a href="#LB-Cluster-负载均衡集群" class="headerlink" title="LB Cluster 负载均衡集群"></a>LB Cluster 负载均衡集群</h2><h3 id="按实现方式划分"><a href="#按实现方式划分" class="headerlink" title="按实现方式划分"></a>按实现方式划分</h3><ul><li>硬件<ul><li>F5 Big-IP</li><li>Citrix Netscaler</li><li>A10 A10</li></ul></li><li>软件<ul><li>LVS，阿里四层SLB使用</li><li>Nginx：支持七层调度，阿里七层SLB使用Tengine</li><li>Haproxy：支持七层调度</li><li>ATS：Apache Traffic Server</li><li>Perlbal：Perl编写</li><li>Pound</li></ul></li></ul><h3 id="基于工作的协议层次划分"><a href="#基于工作的协议层次划分" class="headerlink" title="基于工作的协议层次划分"></a>基于工作的协议层次划分</h3><ul><li>传输层(通用)：DNAT和DPORT<ul><li>LVS</li><li>Nginx：stream</li><li>Haproxy：mode tcp</li></ul></li><li>应用层(专用)：针对特定协议，常称为proxy server<ul><li>Http: nginx, httpd, haproxy(mode http), …</li><li>Fastcgi: nginx, httpd,</li><li>MySQL: mysql-proxy, …</li></ul></li></ul><h3 id="负载均衡的会话保持"><a href="#负载均衡的会话保持" class="headerlink" title="负载均衡的会话保持"></a>负载均衡的会话保持</h3><ol><li>session sticky:同一用户调度固定服务器</li></ol><ul><li>Source IP: LVS sh算法(对某-特定服务而言)</li><li>Cookie</li></ul><ol start="2"><li>session replication:每台服务器拥有全部session</li></ol><ul><li>session multicast cluster</li></ul><ol start="3"><li>session server:专门的session服务器</li></ol><ul><li>Memcached, Redis</li></ul><h2 id="HA高可用集群实现"><a href="#HA高可用集群实现" class="headerlink" title="HA高可用集群实现"></a>HA高可用集群实现</h2><ul><li>keepalived: vrrp协议</li><li>Ais:应用接口规范<ul><li>heartbeat</li><li>cman+rgmanager(RHCS)</li><li>coresync_ pacemaker</li></ul></li></ul><h1 id="Linux-Virtual-Server简介"><a href="#Linux-Virtual-Server简介" class="headerlink" title="Linux Virtual Server简介"></a>Linux Virtual Server简介</h1><h2 id="LVS介绍"><a href="#LVS介绍" class="headerlink" title="LVS介绍"></a>LVS介绍</h2><p>LVS: Linux Virtual Server,负载调度器，内核集成，阿里的四层SLB(Server Load Balance)是基于LVS+keepalived实现</p><p>LVS官网: <a href="http://www.linuxvirtualserver.org/">http://www.linuxvirtualserver.org/</a></p><p>LVS相关术语</p><ul><li>VS: Virtual Server,负责调度</li><li>RS: Real Server,负责真正提供服务</li></ul><h2 id="LVS工作原理"><a href="#LVS工作原理" class="headerlink" title="LVS工作原理"></a>LVS工作原理</h2><ol><li>当客户端的请求到达负载均衡器的内核空间时，首先会到达PREROUTING链。</li><li>当内核发现请求数据包的目的地址是本机时，将数据包送往INPUT链。</li><li>LVS由用户空间的ipvsadm和内核空间的IPVS组成，ipvsadm用来定义规则，IPVS利用ipvsadm定义的规则工作，IPVS工作在INPUT链上,当数据包到达INPUT链时，首先会被IPVS检查，如果数据包里面的目的地址及端口没有在规则里面，那么这条数据包将经过INPUT链送至用户空间，交给用户空间的进程来处理。</li><li>如果数据包里面的目的地址及端口在规则里面，那么这条数据报文将被修改目的地址为事先定义好的后端服务器，并送往POSTROUTING链。</li><li>最后经由POSTROUTING链发往后端服务器。</li></ol><p>查看内核支持LVS</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">[root@lb01 ~]<span class="comment"># grep -i -C 10 ipvs /boot/config-4.18.0-147.el8.x86_64</span></span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_DCCP=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_DEVGROUP=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_DSCP=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_ECN=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_ESP=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_HELPER=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_HL=m</span><br><span class="line"><span class="comment"># CONFIG_NETFILTER_XT_MATCH_IPCOMP is not set</span></span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_IPRANGE=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_IPVS=m</span><br><span class="line"><span class="comment"># CONFIG_NETFILTER_XT_MATCH_L2TP is not set</span></span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_LENGTH=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_LIMIT=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_MAC=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_MARK=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_MULTIPORT=m</span><br><span class="line"><span class="comment"># CONFIG_NETFILTER_XT_MATCH_NFACCT is not set</span></span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_OSF=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_OWNER=m</span><br><span class="line">CONFIG_NETFILTER_XT_MATCH_POLICY=m</span><br><span class="line">--</span><br><span class="line">CONFIG_IP_SET_HASH_NETNET=m</span><br><span class="line">CONFIG_IP_SET_HASH_NETPORT=m</span><br><span class="line">CONFIG_IP_SET_HASH_NETIFACE=m</span><br><span class="line">CONFIG_IP_SET_LIST_SET=m</span><br><span class="line">CONFIG_IP_VS=m</span><br><span class="line">CONFIG_IP_VS_IPV6=y</span><br><span class="line"><span class="comment"># CONFIG_IP_VS_DEBUG is not set</span></span><br><span class="line">CONFIG_IP_VS_TAB_BITS=12</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IPVS transport protocol load balancing support</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_IP_VS_PROTO_TCP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_UDP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_AH_ESP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_ESP=y</span><br><span class="line">CONFIG_IP_VS_PROTO_AH=y</span><br><span class="line">CONFIG_IP_VS_PROTO_SCTP=y</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IPVS scheduler</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_IP_VS_RR=m</span><br><span class="line">CONFIG_IP_VS_WRR=m</span><br><span class="line">CONFIG_IP_VS_LC=m</span><br><span class="line">CONFIG_IP_VS_WLC=m</span><br><span class="line">CONFIG_IP_VS_FO=m  <span class="comment"># 新增</span></span><br><span class="line">CONFIG_IP_VS_OVF=m <span class="comment"># 新增</span></span><br><span class="line">CONFIG_IP_VS_LBLC=m</span><br><span class="line">CONFIG_IP_VS_LBLCR=m</span><br><span class="line">CONFIG_IP_VS_DH=m</span><br><span class="line">CONFIG_IP_VS_SH=m</span><br><span class="line"><span class="comment"># CONFIG_IP_VS_MH is not set</span></span><br><span class="line">CONFIG_IP_VS_SED=m</span><br><span class="line">CONFIG_IP_VS_NQ=m</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IPVS SH scheduler</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_IP_VS_SH_TAB_BITS=8</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IPVS MH scheduler</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_IP_VS_MH_TAB_INDEX=12</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IPVS application helper</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_IP_VS_FTP=m</span><br><span class="line">CONFIG_IP_VS_NFCT=y</span><br><span class="line">CONFIG_IP_VS_PE_SIP=m</span><br><span class="line"></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># IP: Netfilter Configuration</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">CONFIG_NF_DEFRAG_IPV4=m</span><br><span class="line">CONFIG_NF_CONNTRACK_IPV4=m</span><br></pre></td></tr></table></figure><h2 id="LVS功能及组织架构"><a href="#LVS功能及组织架构" class="headerlink" title="LVS功能及组织架构"></a>LVS功能及组织架构</h2><p>负载均衡的应用场景为高访问量的业务,提高应用程序的可用性和可靠性。</p><h3 id="应用于高访问量的业务"><a href="#应用于高访问量的业务" class="headerlink" title="应用于高访问量的业务"></a>应用于高访问量的业务</h3><p>如果您的应用访问量很高，可以通过配置监听规则将流量分发到不同的云服务器ECS (Elastic Compute Service<br>弹性计算服务)实例上。此外，可以使用会话保持功能将同一客户端的请求转发到同一台后端ECS</p><h3 id="扩展应用程序"><a href="#扩展应用程序" class="headerlink" title="扩展应用程序"></a>扩展应用程序</h3><p>可以根据业务发展的需要，随时添加和移除ECS实例来扩展应用系统的服务能力，适用于各种Web服务器和App服务器。</p><h3 id="消除单点故障"><a href="#消除单点故障" class="headerlink" title="消除单点故障"></a>消除单点故障</h3><p>可以在负载均衡实例下添加多台ECS实例。当其中一部分ECS实例发生故障后，负载均衡会自动屏蔽故障的ECS实例，将请求分发给正常运行的ECS实例，保证应用系统仍能正常工作</p><h3 id="同城容灾"><a href="#同城容灾" class="headerlink" title="同城容灾"></a>同城容灾</h3><p>为了提供更加稳定可靠的负载均衡服务,阿里云负载均衡已在各地域部署了多可用区以实现同地域容灾。当主可用区出现机房故障或不可用时，负载均衡仍然有能力在非常短的时间内(如:大约30s中断)切换到另外-个备可用<br>区恢复服务能力;当主可用区恢复时,负载均衡同样会自动切换到主可用区提供服务。</p><p>使用负载均衡时，您可以将负载均衡实例部署在支持多可用区的地域以实现同城容灾。此外，建议您结合自身的应用需要，综合考虑后端服务器的部署。如果您的每个可用区均至少添加了一台ECS实例，那么此种部署模式下的负载均衡服务的效率是最高的。</p><p>如下图所示，在负载均衡实例下绑定不同可用区的ECS实例。正常情况下，用户访问流量将同时转至发主、备可用区内的ECS实例;当可用区A发生故障时，用户访问流量将只转发至备可用区内的ECS实例。此种部署既可以避免因为单个可用区的故障而导致对外服务的不可用，也可以通过不同产品间可用区的选择来降低延迟。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185243772.png" alt="image-20200525185243772"></p><p>如果采取如下图所示的部署方案，即在负载均衡实例的主可用区下绑定多台ECS实例，而在备可用区没有任何ECS实例。当主可用区发生故障时会造成业务中断，因为备可用区没有ECS实例来接收请求。这样的部署方式很明显是以牺牲高可用性为代价来获取低延时。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185342977.png" alt="image-20200525185342977"></p><h3 id="跨地域容灾"><a href="#跨地域容灾" class="headerlink" title="跨地域容灾"></a>跨地域容灾</h3><p>您可以在不同地域下部署负载均衡实例，并分别挂载相应地域内不同可用区的ECS。上层利用云解析做智DNS,将域名解析到不同地域的负载均衡实例服务地址下，可实现全局负载均衡。当某个地域出现不可用时，暂停对应解析即可实现所有用户访问不受影响。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185515132.png" alt="image-20200525185515132"></p><h2 id="LVS应用场景"><a href="#LVS应用场景" class="headerlink" title="LVS应用场景"></a>LVS应用场景</h2><h3 id="音视频大流量场景"><a href="#音视频大流量场景" class="headerlink" title="音视频大流量场景"></a>音视频大流量场景</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185557763.png" alt="image-20200525185557763"></p><p><strong>动静请求分离，快速稳定交付</strong><br>游戏业务有很多图片等静态资源需要加载，通过CDN实现全球用户访问静态资源的加速;当用户在游戏中有互动<br>时，产生的访问流量非常大，此时为了保证互动实时性,需要使用负载均衡进行流量分发<br><strong>动态请求流量分发</strong><br>动态请求量大，采用多台云服务器计算处理，并利用负载均衡服务随时进行流量分发<br><strong>静态请求快速加载</strong><br>静态内容选择对象存储，接入CDN服务,进一步优化内容分发链路，让内容即刻加载</p><h3 id="多层次容灾架构场景"><a href="#多层次容灾架构场景" class="headerlink" title="多层次容灾架构场景"></a>多层次容灾架构场景</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185712235.png" alt="image-20200525185712235"></p><p><strong>跨地域跨可用区的容灾方案</strong><br>用户业务遍布各地域，使用云解析DNS将不同地域用户智能解析访问到相应的业务系统内，使用负载均衡进行海量的访问流量分发，还可构建地域级、可用区级的多层容灾架构<br><strong>智能解析</strong><br>智能判断提供最佳的访问解析地址，使访问用户获得最快捷、最流畅的体验<br><strong>流量分发</strong><br>业务发展快，访问流量巨大，负载均衡可对多台云服务器进行流量分发服务<br><strong>多层次容灾</strong><br>云解析提供跨地域的高可用，负载均衡可实现可用区级的高可用</p><h3 id="海量访问流量分发场景"><a href="#海量访问流量分发场景" class="headerlink" title="海量访问流量分发场景"></a>海量访问流量分发场景</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525185804095.png" alt="image-20200525185804095"></p><h2 id="LVS集群类型中的术语"><a href="#LVS集群类型中的术语" class="headerlink" title="LVS集群类型中的术语"></a>LVS集群类型中的术语</h2><ul><li>VS: Virtual Server, Director Server(DS), Dispatcher(调度器)，Load Balancer</li><li>RS: Real Server(Ivs), upstream server(nginx), backend server(haproxy)</li><li>CIP: Client IP</li><li>VIP: Virtual serve IP VS外网的IP</li><li>DIP: Director IP VS内网的IP</li><li>RIP: Real server IP</li><li>访问流程: CIP &lt;–&gt; VIP == DIP&lt;–&gt; RIP</li></ul><h1 id="LVS工作模式和相关命令"><a href="#LVS工作模式和相关命令" class="headerlink" title="LVS工作模式和相关命令"></a>LVS工作模式和相关命令</h1><h2 id="LVS集群的工作模式"><a href="#LVS集群的工作模式" class="headerlink" title="LVS集群的工作模式"></a>LVS集群的工作模式</h2><ul><li>Ivs-nat:修改请求报文的目标IP,多目标IP的DNAT</li><li>Ivs-dr:操纵封装新的MAC地址</li><li>Ivs-tun:在原请求IP报文之外新加一个IP首部</li><li>Ivs-fullnat:修改请求报文的源和目标IP</li></ul><h3 id="LVS的NAT模式"><a href="#LVS的NAT模式" class="headerlink" title="LVS的NAT模式"></a>LVS的NAT模式</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525190241077.png" alt="image-20200525190241077"></p><p>LVS-NAT:本质是多目标IP的DNAT,通过将请求报文中的目标地址和目标端口修改为某挑出的RS的RIP和PORT实现转发</p><ul><li>RIP和DIP应在同一个IP网络，且应使用私网地址; RS的网关要指向DIP</li><li>请求报文和响应报文都必须经由Director转发，Director易 于成为系统瓶颈</li><li>支持端口映射，可修改请求报文的目标PORT</li><li>VS必须是Linux系统，RS可以是任意OS系统</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525190446948.png" alt="image-20200525190446948">(1)当用户请求到达DirectorServer，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP 。</p><p>(2) PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链。</p><p>(3) IPVS比对数据包请求的服务是否为集群服务，若是，修改数据包的目标IP地址为后端服务器IP，然后将数据包发至POSTROUTING链。 此时报文的源IP为CIP，目标IP为RIP ，在这个过程完成了目标IP的转换。</p><p>(4) POSTROUTING链通过选路，将数据包发送给Real Server。</p><p>(5) Real Server比对发现目标为自己的IP，开始构建响应报文发回给Director Server。 此时报文的源IP为RIP，目标IP为CIP 。</p><p>(6) Director Server在响应客户端前，此时会将源IP地址修改为自己的VIP地址，然后响应给客户端。 此时报文的源IP为VIP，目标IP为CIP。</p><blockquote><p>如图所示，NAT模式中的一大缺点就是无论是请求的数据包，还是返回的数据包，都必须要经过负载的这个点，请求的数据包一般内容较少，问题不是很大，而返回的数据包，一般都是图片，视频等等，这会给中间的调度器带来巨大的负担。</p></blockquote><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525191259641.png" alt="image-20200525191259641"></p><h3 id="LVS的DR模式"><a href="#LVS的DR模式" class="headerlink" title="LVS的DR模式"></a>LVS的DR模式</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525191634260.png" alt="image-20200525191634260"></p><p>LVS-DR: Direct Routing,直接路由，LVS默认模式，应用最广泛，通过为请求报文重新封装一个MAC首部进行转发，源MAC是DIP所在的接口的MAC，目标MAC是某挑选出的RS的RIP所在接口的MAC地址; 源IP/PORT， 以及目标IP/PORT均保持不变</p><p>Director和REAL SERVER都配置同一个IP（VIP），Director将该IP配置到对外的网卡上，Real server将该IP配置到lo网卡上。配置arp_ignore为1（目的是让数据包发出apr请求时，只有Director会响应该arp请求），所有REAL SERVER对本身这个IP的ARP请求保持静默。而Director收到数据包后根据调度算法，找出对应的 REAL SERVER，把目的MAC地址改为REAL SERVER的MAC并发给这台REAL SERVER。这时REAL SERVER通过网卡eth0收到这个数据包，由于Real Server上的lo网卡配置的也有VIP,所以RS接收该数据包。处理后直接返回给客户端（这里要配置arp_announce，目的是修改返回数据包的源ip地址。）。由于DR要对二层包头进行改换，所以DR和REAL SERVER之间必须在一个广播域，也可以简单的理解为在同一台交换机上。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525202423065.png"></p><ol><li>当用户请求到达Director Server，此时请求的数据报文会先到内核空间的PREROUTING链。 此时报文的源IP为CIP，目标IP为VIP；</li><li>PREROUTING检查发现数据包的目标IP是本机，将数据包送至INPUT链；</li><li>IPVS比对数据包请求的服务是否为集群服务，若是，将请求报文中的源MAC地址修改为DIP的MAC地址，将目标MAC地址修改RIP的MAC地址，然后将数据包发至POSTROUTING链。 此时的源IP和目的IP均未修改，仅修改了源MAC地址为DIP的MAC地址，目标MAC地址为RIP的MAC地址；</li><li>由于DS和RS在同一个网络中，所以是通过二层，数据链路层来传输。POSTROUTING链检查目标MAC地址为RIP的MAC地址，那么此时数据包将会发至Real Server；</li><li>RS发现请求报文的MAC地址是自己的MAC地址，就接收此报文。处理完成之后，将响应报文通过lo接口传送给eth0网卡然后向外发出。 此时的源IP地址为VIP，目标IP为CIP；</li><li>响应报文最终送达至客户端。</li></ol><p>DR模式的特点:</p><ol><li><p>Director和各RS都配置有VIP</p></li><li><p>确保前端路由器将目标IP为VIP的请求报文发往Director</p><ul><li>在前端网关做静态绑定VIP和Director的MAC地址</li><li>在RS上使用arptables工具</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">arptables -A IN -d $VIP -j DROP</span><br><span class="line">arptables -A OUT -S $VIP -j mangle --mangle-ip-s $RIP</span><br></pre></td></tr></table></figure><ul><li>在RS上修改内核参数以限制arp通告及应答级别</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;a11&#x2F;arp_ignore</span><br><span class="line">&#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;a11&#x2F;arp_announce</span><br></pre></td></tr></table></figure></li><li><p>RS的RIP可以使用私网地址，也可以是公网地址; RIP与DIP在同一IP网络; RIP的网关不能指向DIP,以确保响<br>应报文不会经由Director</p></li><li><p>RS和Director要在同一个物理网络</p></li><li><p>请求报文要经由Director,但响应报文不经由Director,而由RS直接发往Client</p></li><li><p>不支持端口映射(端口不能修败)</p></li><li><p>RS可使用大多数OS系统</p></li></ol><h3 id="LVS的TUN模式"><a href="#LVS的TUN模式" class="headerlink" title="LVS的TUN模式"></a>LVS的TUN模式</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525203831322.png" alt="image-20200525203831322"></p><p>转发方式:不修改请求报文的IP首部(源IP为CIP,目标IP为VIP) ,而在原IP报文之外再封装一个IP首部 (源IP是DIP，目标IP是RIP) ,将报文发往挑选出的目标RS; RS直接响应给客户端(源IP是VIP， 目标IP是CIP)</p><p>1.客户端将请求发往前端的负载均衡器，请求报文源地址是CIP，目标地址为VIP。</p><p>2.负载均衡器收到报文后，发现请求的是在规则里面存在的地址，那么它将在客户端请求报文的首部再封装一层IP报文,将源地址改为DIP，目标地址改为RIP,并将此包发送给RS。</p><p>3.RS收到请求报文后，会首先拆开第一层封装,然后发现里面还有一层IP首部的目标地址是自己lo接口上的VIP，所以会处理次请求报文，并将响应报文通过lo接口送给eth0网卡（这个网卡一般指和调度器在一个网段的网卡）直接发送给客户端。注意：需要设置lo接口的VIP不能在公网上出现。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525204138598.png" alt="image-20200525204138598"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525204348910.png" alt="image-20200525204348910"></p><p>TUN模式特点:</p><ol><li>DIP, VIP, RIP可以是公网地址</li><li>RS的网关一般不能指向DIP</li><li>请求报文要经由Director,但响应不经由Director</li><li>不支持端口映射</li><li>RS的OS须支持隧道功能</li></ol><h3 id="LVS的FULLNAT模型"><a href="#LVS的FULLNAT模型" class="headerlink" title="LVS的FULLNAT模型"></a>LVS的FULLNAT模型</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200525204527469.png" alt="image-20200525204527469"></p><p>通过同时修改请求报文的源IP地址和目标IP地址进行转发<br>    CIP –&gt; DIP<br>    VIP –&gt; RIP<br>fullnat模式特点:</p><ol><li>VIP是公网地址，RIP和DIP是私网地址，且通常不在同一IP网络;因此，RIP的网关一般不会指向DIP</li><li>RS收到的请求报文源地址是DIP,因此，只需响应给DIP;但Director还要将其发往Client</li><li>请求和响应报文都经由Director</li><li>支持端口映射</li></ol><p>**注意:**此类型kernel默认不支持</p><h3 id="LVS工作模式总结和比较"><a href="#LVS工作模式总结和比较" class="headerlink" title="LVS工作模式总结和比较"></a>LVS工作模式总结和比较</h3><table><thead><tr><th></th><th>VS/NAT</th><th>VS/TUN</th><th>VS/DR</th></tr></thead><tbody><tr><td>Server</td><td>any</td><td>Tunneling</td><td>Non-arp device</td></tr><tr><td>server network</td><td>private</td><td>LAN/WAN</td><td>LAN</td></tr><tr><td>server number</td><td>low (10~20)</td><td>High (100)</td><td>High (100)</td></tr><tr><td>server gateway</td><td>load balancer</td><td>own router</td><td>Own router</td></tr></tbody></table><p>Ivs-nat与Ivs-fullnat:</p><ul><li>请求和响应报文都经由Director</li><li>lvs-nat: RIP的网关要指向DIP</li><li>Ivs-fullnat: RIP和DIP未必在同- -IP网络, 但要能通信</li></ul><p>Ivs-dr与Ivs-tun: .</p><ul><li>请求报文要经由Director,但响应报文由RS直接发往Client</li><li>lvs-dr: 通过封装新的MAC首部实现，通过MAC网络转发</li><li>Ivs-tun: 通过在原IP报文外封装新IP头实现转发，支持远距离通信</li></ul><h2 id="LVS调试算法"><a href="#LVS调试算法" class="headerlink" title="LVS调试算法"></a>LVS调试算法</h2><p>ipvs scheduler:根据其调度时是否考虑各RS当前的负载状态<br>分为两种:静态方法和动态方法</p><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>仅根据算法本身进行调度<br>1、RR: roundrobin, 轮询<br>2、WRR: Weighted RR,加权轮询<br>3、SH: Source Hashing,实现session sticky,源IP地址hash; 将来自于同一个IP地址的请求始终发往第一次挑中的RS,从而实现会话绑定<br>4、DH: Destination Hashing;目标地址哈希，第一次轮询调度至RS, 后续将发往同一个目标地址的请求始终转发至第一次挑中的RS, 典型使用场景是正向代理缓存场景中的负载均衡，如:宽带运营商</p><h3 id="动态方法"><a href="#动态方法" class="headerlink" title="动态方法"></a>动态方法</h3><p>主要根据每RS当前的负载状态及调度算法进行调度Overhead=value较小的RS将被调度</p><p>1、LC: least connections适用于长连接应用<br>    Overhead=activeconns* 256+inactiveconns<br>2、WLC: Weighted LC，默认调度方法<br>    Overhead=(activeconns* 256+inactiveconns)/weight<br>3、SED: Shortest Expection Delay,初始连接高权重优先<br>    Overhead=(activeconns+ 1)* 256/weight<br>4、NQ: Never Queue,第一轮均匀分配，后续SED<br>5、LBLC: Locality-Based LC,动态的DH算法，使用场景:根据负载状态实现正向代理<br>6、LBLCR: LBLC with Replication,带复制功能的LBLC，解决LBLC负载不均衡问题，从负载重的复制到负载轻的RS </p><h3 id="内核4-15版本后新增调度算法-FO和OFV"><a href="#内核4-15版本后新增调度算法-FO和OFV" class="headerlink" title="内核4.15版本后新增调度算法 FO和OFV"></a>内核4.15版本后新增调度算法 FO和OFV</h3><p>FO (Weighted Fail Over)调度算法,在此FO算法中，遍历虚拟服务所关联的真实服务器链表,找到还未过载(未<br>设置IP_ VS_ DEST_ F_OVERLOAD标志)的且权重最高的真实服务器，进行调度</p><p>OVF (Overflow-connection) 调度算法，基于真实服务器的活动连接数量和权重值实现。将新连接调度到权重值<br>最高的真实服务器，直到其活动连接数量超过权重值，之后调度到下一个权重值最高的真实服务器,在此OVF算法中，遍历虚拟服务相关联的真实服务器链表，找到权重值最高的可用真实服务器。一个可用的真实服务器需要同时满足以下条件:</p><ul><li>未过载(未设置IP. <em>VS</em> DEST. F_ OVERLOAD标志)</li><li>真实服务器当前的活动连接数量小于其权重值</li><li>其权重值不为零</li></ul><h2 id="LVS相关软件"><a href="#LVS相关软件" class="headerlink" title="LVS相关软件"></a>LVS相关软件</h2><h3 id="程序包：ipvsadm"><a href="#程序包：ipvsadm" class="headerlink" title="程序包：ipvsadm"></a>程序包：ipvsadm</h3><ul><li>Unit File: ipvsadm.service</li><li>主程序: /usr/sbin/ipvsadm</li><li>规则保存工具: /usr/sbin/ipvsadm-save</li><li>规则重载工具: /usr/sbin/ipvsadm-restore</li><li>配置文件: /etc/sysconfig/ipvsadm-config</li><li>ipvs调度规则文件：/etc/sysconfig/ipvsadm</li></ul><h3 id="ipvsadm命令"><a href="#ipvsadm命令" class="headerlink" title="ipvsadm命令"></a>ipvsadm命令</h3><p>ipvsadm核心功能:</p><ul><li>集群服务管理:增、删、改</li><li>集群服务的RS管理:增、删、改</li><li>查看</li></ul><p>ipvsadm工具用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#管理集群服务</span></span><br><span class="line">ipvsadm -A|E -t|u|f service-address [-s scheduler] [-p [timeout]] [-M netmask] [--pe</span><br><span class="line">persistence_engine] [-b sched-flags]</span><br><span class="line">ipvsadm -D -t|u|f service-address <span class="comment">#删除</span></span><br><span class="line">ipvsadm -C <span class="comment">#清空</span></span><br><span class="line">ipvsadm -R <span class="comment">#重载</span></span><br><span class="line">ipvsadm -S [-n] <span class="comment">#保存</span></span><br><span class="line"><span class="comment">#管理集群中的RS</span></span><br><span class="line">ipvsadm -a|e -t|u|f service-address -r server-address [-g|i|m] [-w weight]</span><br><span class="line">ipvsadm -d -t|u|f service-address -r server-address</span><br><span class="line">ipvsadm -L|1 [options]</span><br><span class="line">ipvsadm -Z [-t|u|f service-address]</span><br></pre></td></tr></table></figure><p><strong>管理集群服务:增、改、删</strong><br><strong>增、修改:</strong><br><code>ipvsadm -A|E -t|u|f service-address [-S scheduler] [-p [timeout]]</code><br><strong>删除:</strong><br><code>ipvsadm -D -t|u|f service-address</code><br>service-address:<br>    -t|u|f:</p><p>​        -t: TCP协议的端口，VIP:TCP_ PORT<br>​        -u: UDP协议的端口，VIP:UDP_ PORT<br>​        -f: firewall MARK,标记，一个数字</p><p>[-s scheduler]:指定集群的调度算法，默认为wIc</p><p><strong>管理集群上的RS:增、改、删</strong><br><strong>增、改:</strong><br><code>ipvsadm -a|e -t|u|f service-address -r server-address [-g|i|m] [-w weight]</code><br><strong>删:</strong><br><code>ipvsadm -d -t|u|f service-address -r server-address</code><br>server-address:</p><ul><li>rip[:port]如省略port,不作端口映射</li></ul><p>选项: .</p><ul><li>Ivs类型:<ul><li>-g: gateway, dr类型，默认</li><li>-i:ipip, tun类型</li><li>-m: masquerade, nat类型</li></ul></li><li>-w weight:权重</li></ul><p><strong>清空定义的所有内容:</strong><br><code>ipvsadm -C</code><br><strong>清空计数器:</strong><br><code>ipvsadm -z [-t|u|f service-address]</code><br><strong>查看:</strong><br><code>ipvsadm -L|l [options]</code></p><ul><li>–numeric, -n:以数字形式输出地址和端口号</li><li>–exact:扩展信息,精确值</li><li>–connection, -C:当前IPVS连接输出</li><li>–stats:统计信息</li><li>–rate :输出速率信息</li></ul><p><strong>ipvs规则:</strong><br><code>/proc/net/ip_vs</code><br><strong>ipvs连接: .</strong></p><p><code>/proc/net/ip_vs_conn</code></p><p><strong>保存:建议保存至/etc/sysconfig/ipvsadm</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm-save &gt; &#x2F;PATH&#x2F;TO&#x2F;IPVSADM_FILE</span><br><span class="line">ipvsadm -S &gt; &#x2F;PATH&#x2F;TO&#x2F;IPVSADM_FILE</span><br><span class="line">systemct1 stop ipvsadm.service </span><br></pre></td></tr></table></figure><p><strong>重载:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ipvsadm-restore &lt; &#x2F;PATH&#x2F;FROM&#x2F;IPVSADM_FILE</span><br><span class="line">systemctl restart ipvsadm.service</span><br></pre></td></tr></table></figure><h2 id="防火墙标记"><a href="#防火墙标记" class="headerlink" title="防火墙标记"></a>防火墙标记</h2><p>FWM: FireWall Mark<br>MARK target可用于给特定的报文打标记<br>–set-mark value<br>其中: value 可为0fff格式，表示十六进制数字<br>借助于防火墙标记来分类报文，而后基于标记定义集群服务;可将多个不同的应用使用同一个集群服务进行调度<br>实现方法:</p><p>在Director主机打标记:<br><code>iptables -t mangle -A PREROUTING -d $vip -p $proto -m multiport --dports $port1, $port2,..-j MARK --set-mark NUMBER</code>在Director主机基于标记定义集群服务:<br><code>ipvsadm -A -f NUMBER [options]</code></p><p>范例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">[root@lvs ~]#ipvsadm -A -f 10</span><br><span class="line">[root@lvs ~]#ipvsadm -a -f 10 -r 192.168.39.17 -g</span><br><span class="line">[root@lvs ~]#ipvsadm -a -f 10 -r 192.168.39.7 -g</span><br><span class="line">[root@lvs ~]#ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class="line">Prot LocalAddress:Port scheduler Flags</span><br><span class="line">-&gt; RemoteAddress: PortForward weight ActiveConn InActConn</span><br><span class="line">FWM 10 w1c</span><br><span class="line">-&gt; 192.168.39.7:0Route100</span><br><span class="line">-&gt; 192.168.39.17 :0Route100</span><br><span class="line"></span><br><span class="line"># 清除规则</span><br><span class="line">[root@lb01 ~]# ipvsadm -C</span><br><span class="line">[root@lb01 ~]# ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">  </span><br><span class="line"># 重新加载规则</span><br><span class="line">[root@LVS ~]#ipvsadm -R &lt; &#x2F;etc&#x2F;sysconfig&#x2F;ipvsadm</span><br><span class="line">[root@LVS ~]#ipvsadm -Ln</span><br><span class="line">IP Virtual Server version 1.2.1 (size&#x3D;4096)</span><br><span class="line">Prot LocalAddress:port Scheduler Flags</span><br><span class="line">-&gt; RemoteAddress:portForward weight ActiveConn InActConn</span><br><span class="line">TCP 172. 20. 200.200:80 rr</span><br><span class="line">-&gt; 10.0.0.7:80Masq100</span><br><span class="line">-&gt; 10.0.0.17:80</span><br><span class="line"></span><br><span class="line">#开机加载ipvs规则</span><br><span class="line">systemctl start ipvsadm.service</span><br><span class="line">systemctl enable ipvsadm.service</span><br></pre></td></tr></table></figure><h2 id="LVS持久连接"><a href="#LVS持久连接" class="headerlink" title="LVS持久连接"></a>LVS持久连接</h2><p>session绑定:对共享同一组RS的多个集群服务，需要统一进行绑定，Ivs sh算法无法实现持久连接( Ivs persistence )模板:实现无论使用任何调度算法，在一段时间内(默认360s) ，能够实现将来自同一个地址的请求始终发往同一个RS</p><p><code>ipvsadm -AIE -t|u|f service-address [-s scheduler] [-p [timeout]]</code></p><p>持久连接实现方式:</p><ul><li>每端口持久(PPC) :每个端口定义为一个集群服务，每集群服务单独调度</li><li>每防火墙标记持久(PFWMC) :基于防火墙标记定义集群服务;可实现将多个端口上的应用统一调度,即所谓的port Affinity</li><li>每客户端持久(PCC) :基于0端口(表示所有服务)定义集群服务，即将客户端对所有应用的请求都调度至后端主机，必须定义为持久模式</li></ul><p>范例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@1vs ~]<span class="comment">#ipvsadm -E -f 10 -p</span></span><br><span class="line">[root@1vs I~]<span class="comment">#ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port scheduler Flags</span><br><span class="line">-&gt; RemoteAddress:portForward Weight ActiveConn InActconn</span><br><span class="line">FWM 10 w1c persistent 360</span><br><span class="line">-&gt; 192.168.39.7:0Route1015</span><br><span class="line">-&gt; 192.168.39.17:0Route107</span><br><span class="line">[root@1vs ~]<span class="comment">#ipvsadm -E -f 10 -p 3600</span></span><br><span class="line">[root@1vs ~]<span class="comment">#i pvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:port scheduler Flags</span><br><span class="line">-&gt; RemoteAddress:portForward Weight Activeconn InActconn</span><br><span class="line">FWM 10 w1c persistent 3600</span><br><span class="line">-&gt; 192.168.39.7 :0Route1079</span><br><span class="line">-&gt; 192.168.39.17 :0Route107</span><br></pre></td></tr></table></figure><h1 id="LVS实战案例"><a href="#LVS实战案例" class="headerlink" title="LVS实战案例"></a>LVS实战案例</h1><h2 id="LVS-NAT模式案例"><a href="#LVS-NAT模式案例" class="headerlink" title="LVS-NAT模式案例"></a>LVS-NAT模式案例</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200528074127800.png" alt="image-20200528074127800"></p><ol><li>Director服务器采用双网卡, 一个是桥接网卡连接外网，一个是仅主机网卡与后端Web服务器相连</li><li>Web服务器采用仅主机网卡与director相连</li><li>Web服务器网关指向10.0.0.200</li><li>后端web服务器不需要连接外网</li></ol><p>范例：</p><p>环境：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">共四台主机</span><br><span class="line">一台: internet client : 192.168.242.136</span><br><span class="line">一台: lvs </span><br><span class="line">ens33 NAT 192.168.242.5&#x2F;24</span><br><span class="line">ens34 桥接172.16.1.5&#x2F;16 </span><br><span class="line"></span><br><span class="line">两台RS:</span><br><span class="line">RS1: 172.16.1.7  GW:172.16.1.5</span><br><span class="line">RS2: 172.16.1.8 GW:172.16.1.5</span><br></pre></td></tr></table></figure><p>配置过程：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">配置过程</span><br><span class="line"><span class="comment">#LVS启用IP_FORWARD功能</span></span><br><span class="line">[root@lvs ~]<span class="comment">#vim /etc/sysctl.conf</span></span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">[root@lvs ~]<span class="comment">#sysctl -p</span></span><br><span class="line">[root@lvs ~]<span class="comment">#ipvsadm -A -t 192.168.242.5:80 -s rr</span></span><br><span class="line">[root@lvs ~]<span class="comment">#ipvsadm -a -t 192.168.242.5:80 -r 172.16.1.7:80 -m</span></span><br><span class="line">[root@lvs ~]<span class="comment">#ipvsadm -a -t 192.168.242.5:80 -r 172.16.1.8:80 -m</span></span><br><span class="line"></span><br><span class="line">[root@lb01 ~]<span class="comment"># ipvsadm -Ln</span></span><br><span class="line">IP Virtual Server version 1.2.1 (size=4096)</span><br><span class="line">Prot LocalAddress:Port Scheduler Flags</span><br><span class="line">  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn</span><br><span class="line">TCP  192.168.242.5:80 rr</span><br><span class="line">  -&gt; 172.16.1.7:80                Masq    1      0          0</span><br><span class="line">  -&gt; 172.16.1.8:80                Masq    1      0          0</span><br><span class="line">  </span><br><span class="line">[root@host1 ~]<span class="comment"># curl 192.168.242.5</span></span><br><span class="line">172.16.1.7</span><br><span class="line">[root@host1 ~]<span class="comment"># curl 192.168.242.5</span></span><br><span class="line">172.16.1.8</span><br></pre></td></tr></table></figure><h2 id="LVS-DR单网段模式案例"><a href="#LVS-DR单网段模式案例" class="headerlink" title="LVS-DR单网段模式案例"></a>LVS-DR单网段模式案例</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200527152842080.png"></p><p>DR模型中各主机上均需要配置VIP，解决地址冲突的方式有3种:</p><p>(1)在前端网关做静态绑定</p><p>(2)在各RS使用arptables</p><p>(3)在各RS修改内核参数，来限制arp响应和通告的级别</p><p><strong>限制响应级别: arp_ignore</strong></p><ul><li>0:默认值，不管哪块网卡接收到了ARP请求，只要发现本机有这个MAC都给与响应</li><li>1:仅在请求的目标IP配置在本地主机的接收到请求报文的接口上时，才给予响应</li></ul><p><strong>限制通告级别: arp_announce</strong></p><ul><li>0:默认值，把本机所有接口的所有信息向每个接口的网络进行通告</li><li>1:尽量避免将接口信息向非直接连接网络进行通告</li><li>2:必须避免将接口信息向非本网络进行通告</li></ul><p>配置要点</p><ol><li>Director服务器采用双IP桥接网络，一个是VIP，一个DIP</li><li>Web服务器采用和DIP相同的网段和Director连接</li><li>每个Web服务器配置VIP</li><li>每个web服务器可以出外网</li></ol><p>范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">环境:五台主机</span><br><span class="line">一台:客户端172. 20.0.123&#x2F;16 GW:172. 20.200.200</span><br><span class="line">一台: ROUTER</span><br><span class="line">eth0 :NAT 192. 168.0.206&#x2F;24 VIP</span><br><span class="line">eth1:桥接172. 20.200.200&#x2F;16</span><br><span class="line">启用IP_FORWARD</span><br><span class="line">一台: LVS</span><br><span class="line">eth0: 192.168. 0.19&#x2F;24 GW:192. 168.0.200</span><br><span class="line">两台RS:</span><br><span class="line">RS1: 192.168.0.7&#x2F;24 GW: 192.168.0.200</span><br><span class="line">RS2: 192.168.0.17&#x2F;24 GW: 192.168.0.200</span><br></pre></td></tr></table></figure><p>配置过程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#在LVS服务器上实现</span><br><span class="line">[root@centos8 ~]#ifconfig lo:1 192.168.0.100&#x2F;32</span><br><span class="line">[root@centos8 ~]#ipvsadm -A -t 192.168.0.100:80 -s rr</span><br><span class="line">[root@centos8 ~]#ipvsadm -a -t 192.168.0.100:80 -r 192.168.0.7</span><br><span class="line">[root@centos8 ~]#ipvsadm -a -t 192.168.0.100:80 -r 192.168.0.17</span><br><span class="line">[root@centos8 ~]#ipvsadm -Ln</span><br><span class="line"></span><br><span class="line">#在后端RS服务器上实现</span><br><span class="line">#配置在lo网络接口表示不进行对外通信</span><br><span class="line">[root@RS1 ~]#ifconfig lo:1 192.168.0.100&#x2F;32</span><br><span class="line">[root@RS1 ~]#echo 1 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_ignore</span><br><span class="line">[root@RS1 ~]#echo 1 &gt; &#x2F;Proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_ignore</span><br><span class="line">[root@RS1 ~]#echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;all&#x2F;arp_announce</span><br><span class="line">[root@RS1 ~]#echo 2 &gt; &#x2F;proc&#x2F;sys&#x2F;net&#x2F;ipv4&#x2F;conf&#x2F;lo&#x2F;arp_announce</span><br></pre></td></tr></table></figure><h2 id="LVS-DR多网段模式实例"><a href="#LVS-DR多网段模式实例" class="headerlink" title="LVS-DR多网段模式实例"></a>LVS-DR多网段模式实例</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200526193842862.png" alt="image-20200526193842862"></p><blockquote><p>以下脚本只是为了实验方便，临时有效，并未写到配置文件中！</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">cat lvs_dr_rs.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author : kinmfer</span></span><br><span class="line"><span class="comment">#Date:2020-5-27</span></span><br><span class="line">vip=192.168.0.100</span><br><span class="line">mask=<span class="string">&#x27;255.255.255.255&#x27;</span></span><br><span class="line">dev=lo:1</span><br><span class="line"><span class="comment">#rpm -q httpd &amp;&gt; /dev/null | yum -y install httpd &amp;&gt;/dev/null</span></span><br><span class="line"><span class="comment">#service httpd start &amp;&gt; /dev/null &amp;&amp; echo &quot;The httpd Server is Ready!&quot;</span></span><br><span class="line"><span class="comment">#echo &quot;&lt;h1&gt;i hostname&#x27;&lt;/h1&gt;&quot; &gt; /var/www/html/index.html</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/all/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 1 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/all/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 2 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line">ifconfig <span class="variable">$dev</span> <span class="variable">$vip</span> netmask <span class="variable">$mask</span> <span class="comment">#broadcast $vip up</span></span><br><span class="line"><span class="comment">#route add -host $vip dev $dev</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The RS Server is Ready!&quot;</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">ifconfig <span class="variable">$dev</span> down</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/a11/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_ignore</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/a11/arp_announce</span><br><span class="line"><span class="built_in">echo</span> 0 &gt; /proc/sys/net/ipv4/conf/lo/arp_announce</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The RS Server is Canceled!&quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;usage: $ (basename <span class="variable">$0</span>) start |stop&quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">cat lvs_dr_vs.sh</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#Author : kinmfer</span></span><br><span class="line"><span class="comment">#Date:2020-5-27</span></span><br><span class="line">vip=<span class="string">&#x27;192.168.0.100&#x27;</span></span><br><span class="line">iface=<span class="string">&#x27;lo:1&#x27;</span></span><br><span class="line">mask=<span class="string">&#x27; 255.255.255.255&#x27;</span></span><br><span class="line">port=<span class="string">&#x27;80&#x27;</span></span><br><span class="line">rs1=<span class="string">&#x27;10.0.0.7&#x27;</span></span><br><span class="line">rs2=<span class="string">&#x27;10.0.0.17&#x27;</span></span><br><span class="line">scheduler=<span class="string">&#x27;wrr&#x27;</span></span><br><span class="line"><span class="built_in">type</span>=<span class="string">&#x27;-g&#x27;</span></span><br><span class="line">rpm -q ipvsadm &amp;&gt; /dev/null || yum -y install ipvsadm &amp;&gt; /dev/null</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="variable">$1</span> <span class="keyword">in</span></span><br><span class="line">start)</span><br><span class="line">ifconfig <span class="variable">$iface</span> <span class="variable">$vip</span> netmask <span class="variable">$mask</span> <span class="comment">#broadcast $vip up</span></span><br><span class="line">iptables -F</span><br><span class="line">ipvsadm -A -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -S <span class="variable">$scheduler</span></span><br><span class="line">ipvsadm -a -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -r <span class="variable">$&#123;rs1&#125;</span> <span class="variable">$type</span> -W 1</span><br><span class="line">ipvsadm -a -t <span class="variable">$&#123;vip&#125;</span>:<span class="variable">$&#123;port&#125;</span> -r <span class="variable">$&#123;rs2&#125;</span> <span class="variable">$type</span> -W 1</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The VS Server is Ready!&quot;</span></span><br><span class="line">;;</span><br><span class="line">stop)</span><br><span class="line">ipvsadm -C</span><br><span class="line">ifconfig <span class="variable">$iface</span> down</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;The VS Server is Canceled! &quot;</span></span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;usage: $ (basename <span class="variable">$0</span>) start|stop&#x27;</span></span><br><span class="line"><span class="string">exit 1</span></span><br><span class="line"><span class="string">;;</span></span><br><span class="line"><span class="string">esac</span></span><br></pre></td></tr></table></figure><h1 id="LVS高可用性实现"><a href="#LVS高可用性实现" class="headerlink" title="LVS高可用性实现"></a>LVS高可用性实现</h1><p><strong>LVS不可用时</strong></p><p>Director不可用，整个系统将不可用; SPoF Single Point of Failure</p><p>解决方案:高可用，keepalived、heartbeat/corosync</p><p><strong>RS不可用时</strong></p><p>某RS不可用时，Director依然会调度请求至此RS</p><p>解决方案:由Director对各RS健康状态进行检查, 失败时禁用，成功时启用</p><p>常用解决方案:</p><ul><li>keepalived</li><li>heartbeat/corosync</li><li>ldirectord</li></ul><p>检测方式:</p><ul><li>网络层检测，icmp</li><li>传输层检测，端口探测</li><li>应用层检测，请求某关键资源</li></ul><p>RS全不用时: backup server, sorry server</p><p>目前企业中主流使用的是keepalived，请参看此篇博客：</p>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> 负载均衡 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 负载均衡 </tag>
            
            <tag> LVS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站服务-Nginx-基础</title>
      <link href="2020/05/26/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Nginx-01-%E5%9F%BA%E7%A1%80/"/>
      <url>2020/05/26/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Nginx-01-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="性能影响"><a href="#性能影响" class="headerlink" title="性能影响"></a>性能影响</h1><p>互联网存在用户速度体验的1-3-10原则，即1秒最优，3-10秒比较慢，10秒以上用户无法接受。用户放弃一个产品的代价很低，只是换一个URL而已。</p><h2 id="影响用户体验的几个因素"><a href="#影响用户体验的几个因素" class="headerlink" title="影响用户体验的几个因素"></a>影响用户体验的几个因素</h2><ul><li>客户端硬件配置</li><li>客户端网络速率</li><li>客户端与服务端距离</li><li>服务端网络速率</li><li>服务端硬件配置</li><li>服务端架构设计</li><li>服务端应用程序工作模式</li><li>服务端并发数量</li><li>服务端响应文件大小及数量</li><li>服务端I/0压力</li></ul><h2 id="服务端I-O"><a href="#服务端I-O" class="headerlink" title="服务端I/O"></a>服务端I/O</h2><p>I/0在计算机中指Input/Output，IOPS (Input/Output Per Second)即每秒的输入输出量(或读写次数),是衡量磁盘性能的主要指标之一。IOPS是指的是在单位时间内系统能处理的I/O请求数量，一般以每秒处理的I/O请求数量为单位，I/0请求通常为读或写数据操作请求。</p><p>一次完整的I/O是用户空间的进程数据与内核空间的内核数据的报文的完整交换过程，但是由于内核空间与用户空间是严格隔离的，所以其数据交换过程中不能由用户空间的进程直接调用内核空间的内存数据，而是需要经历一次从内核空间中的内存数据copy到用户空间的进程内存当中，所以简单说一次I/O就是把数据从内核空间中的内存数据复制到用户空间中进程的内存当中的整个过程。<br>而网络通信就是从网络协议栈到用户空间进程的I/O,也就是网络I/O。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522215643568.png" alt="image-20200522215643568"></p><p>磁盘I/O是进程向内核发起系统调用，请求磁盘上的某个资源比如是文件或者是图片，然后内核通过相应的驱动程序将目标图片加载到内核的内存空间，加载完成之后把数据从内核内存再复制给进程内存，如果是比较大的数据也需要等待时间。</p><p>每次I/O,都要经由两个阶段:<br>第一步:将数据从磁盘文件先加载至内核内存空间(缓冲区)， 此步骤需要等待数据准备完成，时间较长<br>第二步:将数据从内核缓冲区复制到用户空间的进程的内存中，时间较短</p><h1 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h1><h2 id="系统I-O"><a href="#系统I-O" class="headerlink" title="系统I/O"></a>系统I/O</h2><h3 id="同步-异步"><a href="#同步-异步" class="headerlink" title="同步/异步"></a>同步/异步</h3><p>关注的是事件处理的消息通信机制，即在等待一件事情的处理结果时，被调用者是否提供完成通知。</p><ul><li><p>同步: synchronous, 调用者等待被调用者返回消息后才能继续执行，如果被调用者不提供消息返回则为同步，同步需要调用者主动询问事情是否处理完成。</p><p>进程发出请求调用后，内核不提供通知机制，即文件I/O处理完成后不通知进程，需要进程自己去问内核是否处理完成。</p></li><li><p>异步: asynchronous, 被调用者通过状态、通知或回调机制主动通知调用者，即异步会主动返回被调用者的状态给调用者。</p><p>进程发出请求调用后，内核会在调用处理完成后返回调用结果给进程，Nginx是异步的。</p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522220129787.png" alt="image-20200522220129787"></p><h3 id="阻塞-非阻塞"><a href="#阻塞-非阻塞" class="headerlink" title="阻塞/非阻塞"></a>阻塞/非阻塞</h3><p>关注调用者在等待结果返回之前所处的状态</p><ul><li>阻塞: blocking,指I/O操作需要彻底完成后才返回到用户空间，调用结果返回之前，调用者被挂起，干不了别的事情。</li><li>非阻塞: nonblocking, 指I/O操作被调用后立即返回给用户一个状态值，无需等到I/O操作彻底完成，最终的调用结果返回之前，调用者不会被挂起，可以去做别的事情。</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522220624181.png" alt="image-20200522220624181"></p><h3 id="系统IO模型组合"><a href="#系统IO模型组合" class="headerlink" title="系统IO模型组合"></a>系统IO模型组合</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">以我去吃饭为例:我点了10个包子</span><br><span class="line"></span><br><span class="line">同步与异步:</span><br><span class="line">我点包子之后厨师是否告诉我: </span><br><span class="line">同步:厨师做好包子后会放到指定位置，但是做好包子之前需要自己一次次去看包子做好没有，厨师不会在包子做好之后通知我。</span><br><span class="line">异步:厨师做好包子后告诉我包子做好放哪了。</span><br><span class="line">阻塞与非阻塞: </span><br><span class="line">我点包子后的状态:</span><br><span class="line">阻塞:在厨师做包子期间一直在包子盘子前面等着，不能干别的事情。</span><br><span class="line">非阻塞:点完包子就可以去干别的事情，比如去逛逛街或者买买买。</span><br><span class="line"></span><br><span class="line">IO模型组合:</span><br><span class="line">同步阻塞:我点完包子后不能去做别的事情，而且不知道包子有没有做好，需要自己一直等着并一次次的问厨师做好没有。</span><br><span class="line">同步非阻塞:点完包子后可以去做别的事情，但是不能长时间做别的事情，因为我还是不知道包子有没有做好，也要自己一直等着并一次次的问厨师做好没有，只能抽空做点别的。</span><br><span class="line">异步阻塞:我点完包子后不能去做别的事情，但是厨师在做好包子后会告诉我，也就是我不用再一次次问厨师包子有没有做好了。</span><br><span class="line">异步非阻塞:我点完包子后可以做别的事情，而且可以一直在做别的去事情，因为厨师在做好包子后会告诉我。</span><br></pre></td></tr></table></figure><h2 id="网络I-O"><a href="#网络I-O" class="headerlink" title="网络I/O"></a>网络I/O</h2><p>阻塞型、非阻塞型、复用型、信号驱动型、异步</p><h3 id="同步阻塞型I-O-blocking-IO"><a href="#同步阻塞型I-O-blocking-IO" class="headerlink" title="同步阻塞型I/O(blocking IO)"></a>同步阻塞型I/O(blocking IO)</h3><p>阻塞I/O模型是最简单的I/O模型，用户线程在内核进行I/O操作时被阻塞</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">用户请求到达系统服务进程，然后进程通过系统调用read( )向内核发起IO读操作，即将用户请求由用户空间转到内核空间，内核接收到I&#x2F;O请求后开始从磁盘读取文件到内核内存，即在等用户请求的文件从磁盘到达内核内存后，然后将接收的数据拷贝到用户空间，然后完成read操作。</span><br><span class="line">用户请求需要等待内核将数据读取到进程内存后，处理用户的进程才可以继续处理该请求，整个I&#x2F;O请求的过程中，请求进程是被阻塞的，这导致进程在发起I&#x2F;O请求时，不能做任何事情，而且对CPU的资源利用率不够。</span><br></pre></td></tr></table></figure><p>优点:程序简单，在阻塞等待数据期间进程挂起，基本不会占用CPU资源<br>缺点:每个连接需要独立的进程单独处理，当并发请求量大时为了维护程序，内存、进程切换开销较大，apache的prefork使用的是这种模式。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">同步阻塞:程序向内核发送I&#x2F;O请求后一直等待内核响应，如果内核处理请求的I&#x2F;O操作不能立即返回，则进程将一直等待并不再接受新的请求，并由进程轮询查看I&#x2F;O是否完成，完成后进程将I&#x2F;O结果返回给Client,在I0没有返回期间进程不能接受其他客户的请求，而且是有进程自己去查看I&#x2F;O是否完成，这种方式简单，但是比较慢，用的比较少。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522221931653.png" alt="image-20200522221931653"></p><h3 id="同步非阻塞型I-O-nonblocking-IO"><a href="#同步非阻塞型I-O-nonblocking-IO" class="headerlink" title="同步非阻塞型I/O(nonblocking IO)"></a>同步非阻塞型I/O(nonblocking IO)</h3><p>用户请求进程向内核发起I/O请求时立即返回，但并未读取到任何数据，进程需要不断地发起I/O请求，直到数据到达进程空间的内存后，才真正读取到数据并继续执行，即前期需要一次次 “轮询”去查看请求是否数据是否准备报，但是此机制存在两个问题: 1.如果有大量文件描述符都要等，那么就得一个一个的read,这会带来大量的ContexSwitch (read是系统调用， 每调用一次就得在用户态和核心态切换一次) , 2.轮询的时间不好把握，这里是要猜多久之后数据才能到，等待时间设的太长，程序响应延迟就过大，但是设的太短，就会造成过于频繁的重试，干耗CPU而已，所以是比较浪费CPU的方式，因此一般很少直接使用这种模型，而是在其他IO模型中使用非阻塞I/O这一特性。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522222319548.png" alt="image-20200522222319548"></p><h3 id="I-O多路复用型-IO-multiplexing"><a href="#I-O多路复用型-IO-multiplexing" class="headerlink" title="I/O多路复用型(IO multiplexing)"></a>I/O多路复用型(IO multiplexing)</h3><p>I/O multiplexing就是我们说的select, poll, epoll, 有些地方也称这种I/O方式为event driven I/O(事件驱动I/O),<br>select/poll/epoll的好处就在于单个process就可以同时处理多个网络连接的I/O。它的基本原理就是select, poll,epoll这个function会不断的轮询所负责的所有socket,当某个socket有数据到达了，就通知用户进程。<br>当用户进程调用了select,那么整个进程会被block,而同时，kernel会”监视”所有select负责的socket,当任何一个socket中的数据准备好了，select就会返回， 这个时候用户进程再调用read操作,将数据从kernel拷贝到用户进程。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Apache prefork是此模式的主进程+多进程&#x2F;单线程+select, work是主进程+多进程&#x2F;多线程+poll模式</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523081231277.png" alt="image-20200523081231277"></p><h3 id="信号驱动式IO-signal-driven-IO"><a href="#信号驱动式IO-signal-driven-IO" class="headerlink" title="信号驱动式IO(signal-driven IO)"></a>信号驱动式IO(signal-driven IO)</h3><p>用户进程可以通过sigaction系统调用注册一个信号处理程序，然后进程可以继续向下执行，当有IO操作准备就绪时，由内核通知触发一个SIGIO信号处理程序执行，然后将用户进程所需要的数据从内核空间拷贝到用户空间，此模型的优势在于等待数据报到达期间进程不被阻塞，进程可以继续执行，只要等待来自信号处理函数的通知。</p><ul><li>优点:进程没有在等待数据时被阻塞，内核直接返回调用接收信号，不影响进程继续处理其他请求因此可以提高资源的利用率</li><li>缺点:信号IO在大量IO操作时可能会因为信号队列溢出导致没法通知</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步阻塞进程向内核发送IO调用后，不用等待内核响应，可以继续接受其他请求，内核收到进程请求后进行的IO如果不能立即返回，就由内核等待结果，直到IO完成后内核再通知进程，apache event模型就是主进程+多进程&#x2F;多线程+信号驱动</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523081750981.png" alt="image-20200523081750981"></p><h3 id="异步非阻塞IO-asynchronous"><a href="#异步非阻塞IO-asynchronous" class="headerlink" title="异步非阻塞IO(asynchronous)"></a>异步非阻塞IO(asynchronous)</h3><p>相对于同步IO,异步IO不是顺序执行，用户进程进行aio_read系统调用之后，无论内核数据是否准备好，都会直接返回给用户进程，然后用户态进程可以去做别的事情，等到socket数据准备好了，内核直接复制数据给进程，然后从内核向进程发送通知，异步非阻塞IO的两个阶段，进程都是非阻塞的。<br>Linux提供了AIO库函数实现异步,但是用的很少，目前有很多开源的异步IO库，例如libevent、 libev、 libuv等,<br>异步过程如下图所示:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">异步非阻塞:程序进程向内核发送IO调用后，不用等待内核响应，可以继续接受其他请求，内核调用的IO如果不能立即返回，内核会继续处理其他事物，直到IO完成后将结果通知给内核，内核再将IO完成的结果返回给进程，期间进程可以接受新的请求，内核也可以处理新的事物，因此相互不影响，可以实现较大的同时并实现较高的IO复用，因此异步非阻塞使用最多的一种通信方式，nginx就是是异步非阻塞模型。</span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523082402713.png" alt="image-20200523082402713"></p><h3 id="IO对比"><a href="#IO对比" class="headerlink" title="IO对比"></a>IO对比</h3><p>这五种网络I/O模型中，越往后，阻塞越少，理论上效率也是最优前四种属于同步I/O,因为其中真正的I/O操作<br>(recvfrom)将阻塞进程/线程，只有异步I/O模型才与POSIX定义的异步I/O相匹配。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200524131352724.png" alt="image-20200524131352724"></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>Nginx支持在多种不同的操作系统实现不同的事件驱动模型，但是其在不同的操作系统甚至是不同的系统版本上面的实现方式不尽相同，主要有以下实现方式:</p><p>1、select:<br>    select库是在linux和windows平台都基本支持的事件驱动模型库，并且在接口的定义也基本相同，只是部分参数的含义略有差异，最大井发限制1024,是最早期的事件驱动模型。<br>2、poll:<br>    在Linux的基本驱动模型，windows不支持此驱动模型，是select的升级版，取消了最大的并发限制，在编译nginx的时候可以使用–with-poll_ module和–without-poll_module这两个指定是否编译select库。<br>3、epoll:<br>    epoll库是Nginx服务器支持的最高性能的事件驱动库之一， 是公认的非常优秀的事件驱动模型，它和select和poll有很大的区别，epoll是poll的升级版， 但是与poll的效率有很大的区别.<br>epoll的处理方式是创建一个待处理的事件列表，然后把这个列表发给内核，返回的时候在去轮训检查这个表，以判断事件是否发生，epoll支持一个进程打开的最大事件描述符的上限是系统可以打开的文件的最大数，同时epoll库的IO效率不随描述符数目增加而线性下降，因为它只会对内核上报的“活跃”的描述符进行操作。<br>4、rtsig:<br>不是一个常用事件驱动，最大队列1024,不是很常用<br>5、kqueue:<br>用于支持BSD系列平台的高效事件驱动模型，主要用在FreeBSD 4. 1及以上版本、openBSD 2。0级以上版本，NetBSD级以上版本及Mac os x平台上，该模型也是poll库的变种，因此和epoll没有本质上的区别，都是通过避免轮训操作提供效率。<br>6、/dev/poll:<br>用于支持unix衍生平台的高效事件驱动模型，主要在Solaris平台、HP/UX， 该模型是sun公司在开发Solaris系列平台的时候提出的用于完成事件驱动机制的方案，它使用了虚拟的/dev/pol1设备，开发人员将要见识的文件描述符加入这个设备，然后通过ioctl( )调用来获取事件通知，因此运行在以上系列平台的时候请使用/ dev/poll事件驱动机制<br>7、eventport:<br>该方案也是sun公司在开发Solaris的时候提出的事件驱动库，只是Solaris 10以上的版本，该驱动库看防止内核崩溃等情况的发生。<br>8、Iocp:<br>Windows系统上的实现方式，对应第5种(异步I/0) 模型。</p><h3 id="常用模型汇总"><a href="#常用模型汇总" class="headerlink" title="常用模型汇总"></a>常用模型汇总</h3><table><thead><tr><th>\</th><th>select</th><th>poll</th><th>epoll</th></tr></thead><tbody><tr><td>操作方式</td><td>遍历</td><td>遍历</td><td>回调</td></tr><tr><td>底层实现</td><td>数组</td><td>链表</td><td>哈希表</td></tr><tr><td>IO效率</td><td>每次调用都进行线性遍历，时间复杂度为O(n)</td><td>每次调用都进行线性遍历，时间复杂度为O(n)</td><td>事件通知方式，每当fd就绪，系统注册的回调函数就会被调用，将就绪fd放到rdllist里面，时间复杂度为O(1)</td></tr><tr><td>最大连接数</td><td>1024(x86)或2048(x64)</td><td>无上限</td><td>无上限</td></tr><tr><td>fd拷贝</td><td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td><td>每次调用select，都需要把fd集合从用户态拷贝到内核态</td><td>调用epoll_ctl时拷贝进内核并保存，之后每次epoll_wait不拷贝</td></tr></tbody></table><h3 id="常用模型通知对比"><a href="#常用模型通知对比" class="headerlink" title="常用模型通知对比"></a>常用模型通知对比</h3><ul><li>水平触发–多次通知，需要关心数据是否取完，即数据取走之后即不再通知进程，以避免重复多次无效通知，通知效率较低。</li><li>边缘触发–一次通知，需要关心数据是否取走，即只通知一次怎么保证数据被进程成功取走了，以避免数据丢失，通知效率较高。</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523084013033.png" alt="image-20200523084013033"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select:</span><br><span class="line">POSIX所规定，目前几乎在所有的平台上支持，其良好跨平台支持也是它的一个优点，本质上是通过设置或者检查存放fd标志位的数据结构来进行下一步处理</span><br><span class="line">缺点</span><br><span class="line">单个进程能够监视的文件描述符的数量存在最大限制，在Linux上一般为1024，可以通过修改宏定义FD_ SETSIZE, 再重新编译内核实现，但是这样也会造成效率的降低。</span><br><span class="line">单个进程可监视的fd数量被限制，默认是1024, 修改此值需要重新编译内核。</span><br><span class="line">对socket是线性扫描，即采用轮询的方法，效率较低。</span><br><span class="line">select采取了内存拷贝方法来实现内核将FD消息通知给用户空间，这样一个用来存放大量fd的数据结构， 这样会</span><br><span class="line">使得用户空间和内核空间在传递该结构时复制开销大。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">poll:</span><br><span class="line">本质上和select没有区别，它将用户传入的数组拷贝到内核空间，然后查询每个fd对应的设备状态。</span><br><span class="line">其没有最大连接数的限制，原因是它是基于链表来存储的。</span><br><span class="line">大量的fd的数组被整体复制于用户态和内核地址空间之间，而不管这样的复制是不是有意义。</span><br><span class="line">poll特点是&quot;水平触发”，如果报告了fd后，没有被处理，那么下次poll时会再次报告该fd。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">epoll:</span><br><span class="line">在Linux 2.6内核中提出的select和poll的增强版本。</span><br><span class="line">支持水平触发LT和边缘触发ET,最大的特点在于边缘触发，它只告诉进程哪些fd刚刚变为就绪态，并且只会通知一次</span><br><span class="line">使用“事件&quot;的就绪通知方式，通过epoll_ctl注册fd, 一旦该fd就绪，内核就会采用类似callback的回调机制来激活该fd, epoll_wait便可以收到通知。</span><br><span class="line">优点:</span><br><span class="line">没有最大并发连接的限制:能打开的FD的上限远大于1024(1G的内存能监听约10万个端口)，具体查看&#x2F;proc&#x2F;sys&#x2F;fs&#x2F;file-max,此值和系统内存大小相关</span><br><span class="line">效率提升:非轮询的方式，不会随着FD数目的增加而效率下降;只有活跃可用的FD才会调用callback函数，即epoll最大的优点就在于它只管理“活跃&quot;的连接，而跟连接总数无关</span><br><span class="line">内存拷贝，利用mmap(Memory Mapping)加速与内核空间的消息传递;即epoll使用mmap减少复制开销</span><br></pre></td></tr></table></figure><h3 id="MMAP介绍"><a href="#MMAP介绍" class="headerlink" title="MMAP介绍"></a>MMAP介绍</h3><p>mmap(memory mapping)系统调用使得进程之间通过映射同一个普通文件实现共享内存，普通文件被映射到进程地址空间后，进程可以像访问普通内存一样对文件进行访问。</p><h4 id="传统方式拷贝数据"><a href="#传统方式拷贝数据" class="headerlink" title="传统方式拷贝数据"></a>传统方式拷贝数据</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523084715500.png" alt="image-20200523084715500"></p><h4 id="mmap方式"><a href="#mmap方式" class="headerlink" title="mmap方式"></a>mmap方式</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523085054882.png" alt="image-20200523085054882"></p><h1 id="Nginx基础"><a href="#Nginx基础" class="headerlink" title="Nginx基础"></a>Nginx基础</h1><p>Nginx: engineX, 2002年开始开发，2004年开源，2019年3月11日， Nginx公司被E5 Networks以6.7亿美元收<br>购，Nginx官网: <a href="http://nginx.org/">http://nginx.org</a>, Nginx商业版为Nginx Plus: <a href="https://www.nginx.com/products/nginx/">https://www.nginx.com/products/nginx/</a><br>Nginx则是免费的、开源的、高性能的HTTP和反向代理服务器、邮件代理服务器、以及TCP/UDP代理 服务器<br>解决C10K问题(10K Connections) , <a href="http://www.ideawu.net/blog/archives/740.html">http://www.ideawu.net/blog/archives/740.html</a><br>Nginx的其它的二次发行版:</p><ul><li>Tengine:由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性，Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验，它的最终目标是打造一个高效、稳定、安全、易用的Web平台，从2011年12月开始，Tengine成为一个开源项目，官网<a href="http://tengine.taobao.org/">http://tengine.taobao.org/</a></li><li>OpenResty:基于Nginx与Lua语言的高性能Web平台，章亦春团队开发，官网: <a href="http://openresty.org/cn/">http://openresty.org/cn/</a></li></ul><h2 id="Nginx功能介绍"><a href="#Nginx功能介绍" class="headerlink" title="Nginx功能介绍"></a>Nginx功能介绍</h2><ul><li>静态的web资源服务器html,图片, js, css, txt等静态资源</li><li>结合FastCGI/uWSGI/SCGI等协议反向代理动态资源请求</li><li>http/https协议的反向代理</li><li>imap4/pop3协议的反向代理</li><li>tcp/udp协议的请求转发(反向代理)</li></ul><h3 id="基础特性"><a href="#基础特性" class="headerlink" title="基础特性"></a>基础特性</h3><ul><li>特性:<ul><li>模块化设计，较好的扩展性</li><li>高可靠性</li><li>支持热部署:不停机更新配置文件，升级版本，更换日志文件</li><li>低内存消耗: 10000个keep- alive连接模式下的非活动连接，仅需2. 5M内存</li><li>event - driven, aio, mmap, sendfile</li></ul></li><li>基本功能: <ul><li>静态资源的web服务器</li><li>http协议反向代理服务器</li><li>pop3/ imap4协议反向代理服务器</li><li>FastCGI(LNMP), UWSGI (python)等协议</li><li>模块化(非DSO) ，如zip, SSL模块</li></ul></li></ul><h3 id="和web相关的功能"><a href="#和web相关的功能" class="headerlink" title="和web相关的功能"></a>和web相关的功能</h3><ul><li>虚拟主机(server)</li><li>支持keep-alive和管道连接(利用一个连接做多次请求)</li><li>访问日志(支持基于日志缓冲提高其性能)</li><li>url rewirte</li><li>路径别名</li><li>基于IP及用户的访问控制</li><li>支持速率限制及并发数限制</li><li>重新配置和在线升级而无须中断客户的工作进程</li></ul><h2 id="Nginx组织结构"><a href="#Nginx组织结构" class="headerlink" title="Nginx组织结构"></a>Nginx组织结构</h2><p>web请求处理机制:</p><ol><li>多进程方式: 服务器每接收到一个客户端请求就有服务器的主进程生成一个子进程响应客户端，直到用户关闭连接，这样的优势是处理速度快，各子进程之间相互独立，但是如果访问过大会导致服务器资源耗尽而无法提供请求。</li><li>多线程方式: 与多进程方式类似，但是每收到一个客户端请求会有服务进程派生出一个线程来个客户方进行交互，一个线程的开销远远小于一个进程，因此多线程方式在很大程度减轻了web服务器对系统资源的要求，但是多线程也有自己的缺点，即当多个线程位于同一个进程内工作的时候，可以相互访问同样的内存地址空间，所以他们相互影响，另外一旦主进程挂掉则所有子线程都不能工作了，IIS服务器使用了多线程的方式，需要间隔一段时间就重启一次才能稳定。</li></ol><h3 id="组织模型"><a href="#组织模型" class="headerlink" title="组织模型"></a>组织模型</h3><p>Nginx是多进程组织模型，而且是一个由Master主进程和Worker工作进程组成。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523100147356.png" alt="image-20200523100147356"></p><p>主进程(master process)的功能</p><ul><li>读取Nginx配置文件并验证其有效性和正确性</li><li>建立、绑定和关闭socket连接</li><li>按照配置生成、管理和结束工作进程</li><li>接受外界指令，比如重启、升级及退出服务器等指令</li><li>不中断服务，实现平滑升级，重启服务并应用新的配置</li><li>开启日志文件，获取文件描述符</li><li>不中断服务，实现平滑升级，升级失败进行回滚处理</li><li>编译和处理perl脚本</li></ul><p>工作进程(work process)的功能</p><ul><li><p>接受处理客户的请求</p></li><li><p>将请求以此送入各个功能模块进行处理</p></li><li><p>IO调用，获取相应数据</p></li><li><p>与后端服务器通信，接收后端服务器的处理结果</p></li><li><p>缓存数据，访问缓存索引，查询和调用缓存数据</p></li><li><p>发送请求结果，响应客户的请求</p></li><li><p>接收主程序指令，比如重启、升级和退出等</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200524132819924.png" alt="image-20200524132819924"></p></li></ul><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><p>工作进程是有主进程生成的，主进程使用fork()函数，在Nginx服务器启动过程中主进程根据配置文件决定启动工作进程的数量，然后建立一张全局的工作表用于存放当前未退出的所有的工作进程，主进程生成工作进程后会将新生成的工作进程加入到工作进程表中，并建立一个单向的管道并将其传递给工作进程，该管道与普通的管道不同，它是由主进程指向工作进程的单向通道，包含了主进程向工作进程发出的指令、工作进程ID、工作进程在工作进程表中的索引和必要的文件描述符等信息。</p><p>主进程与外界通过信号机制进行通信，当接收到需要处理的信号时，它通过管道向相关的工作进程发送正确的指令，每个工作进程都有能力捕获管道中的可读事件，当管道中有可读事件的时候，工作进程就会从管道中读取并解析指令，然后采取相应的执行动作，这样就完成了主进程与工作进程的交互。</p><p>工作进程之间的通信原理基本上和主进程与工作进程之间的通信是一样的，只要工作进程之间能够取得彼此的信息，建立管道即可通信，但是由于工作进程之间是完全隔离的，因此一个进程想要知道另外一个进程的状态信息就只能通过主进程来设置了。为了实现工作进程之间的交互，主进程在生成工作进程之后，在工作进程表中进行遍历，将该新进程的ID以及针对该进程建立的管道句柄传递给工作进程中的其他进程，为工作进程之间的通信做准备，当工作进程1向工作进程2发送指令的时候，首先在主进程给它的其他工作进程工作信息中找到2的进程ID,然后将正确的指令写入指向进程2的管道，工作进程2捕获到管道中的事件后，解析指令并进行相关操作，这样就完成了工作进程之间的通信。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523102552854.png" alt="image-20200523102552854"></p><h2 id="Nginx模块介绍"><a href="#Nginx模块介绍" class="headerlink" title="Nginx模块介绍"></a>Nginx模块介绍</h2><ul><li>核心模块:是Nginx服务器正常运行必不可少的模块，提供错误日志记录、配置文件解析、事件驱动机制、<br>进程管理等核心功能</li><li>标准HTTP模块:提供HTTP协议解析相关的功能，比如:端口配置、网页编码设置、HTTP响应头设置等等</li><li>可选HTTP模块:主要用于扩展标准的HTTP功能，让Nginx能处理一些特殊的服务， 比如: Flash 多媒体传输、解析GeolP请求、网络传输压缩、安全协议SSL支持等</li><li>邮件服务模块:主要用于支持Nginx的邮件服务，包括对POP3协议、IMAP 协议和SMTP协议的支持</li><li>第三方模块:是为了扩展Nginx服务器应用，完成开发者自定义功能，比如: Json 支持、Lua 支持等</li></ul><p>nginx高度模块化，但其模块早期不支持DSO机制; 1.9.11版本支持动态装载和卸载</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523103805394.png" alt="image-20200523103805394"></p><h2 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h2><p>Nginx的安装版本分为Mainline version(主要开发放本，其实就是还处于开友版)。Stable version(当前最新稳定版)和Legacy versions(旧的稳定版)，Nginx安装可以使用yum或源码安装，但是推荐使用源码，一是yum的版本比较旧，二是编译安装可以更方便自定义相关路径，三是使用源码编译可以自定义相关功能，更方便业务的上的使用，源码安装需要提前准备标准的编译器，GCC的全称是(GNU Compiler collection)，其有GNU开发，并以GPL即LGPL许可，是自由的类UNIX即苹果电脑Mac OS X操作系统的标准编译器，因为GCC原本只能处理C语言,所以原名为GNU C语言编译器，后来得到快速发展，可以处理C++,Fortran, pascal, objective-C, java以及Ada等其他语言，此外还需要Automake工具，以完成自动创建Makefile的工作，Nginx的一 些模块需要依赖第三方库,比如pcre (支持rewrite) , zlib (支持gzip模块) 和openssI (支持ssl模块)等。</p><h3 id="Nginx-yum安装"><a href="#Nginx-yum安装" class="headerlink" title="Nginx yum安装"></a>Nginx yum安装</h3><p>Install the prerequisites:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install yum-utils</span><br></pre></td></tr></table></figure><p>To set up the yum repository, create the file named <code>/etc/yum.repos.d/nginx.repo</code> with the following contents:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[nginx-stable]</span><br><span class="line">name=nginx stable repo</span><br><span class="line">baseurl=http://nginx.org/packages/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[nginx-mainline]</span><br><span class="line">name=nginx mainline repo</span><br><span class="line">baseurl=http://nginx.org/packages/mainline/centos/<span class="variable">$releasever</span>/<span class="variable">$basearch</span>/</span><br><span class="line">gpgcheck=1</span><br><span class="line">enabled=0</span><br><span class="line">gpgkey=https://nginx.org/keys/nginx_signing.key</span><br><span class="line">module_hotfixes=<span class="literal">true</span></span><br></pre></td></tr></table></figure><p>By default, the repository for stable nginx packages is used. If you would like to use mainline nginx packages, run the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum-config-manager --<span class="built_in">enable</span> nginx-mainline</span><br></pre></td></tr></table></figure><p>To install nginx, run the following command:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install nginx</span><br></pre></td></tr></table></figure><p>When prompted to accept the GPG key, verify that the fingerprint matches <code>573B FD6B 3D8F BC64 1079 A6AB ABF5 BD82 7BD9 BF62</code>, and if so, accept it.</p><h3 id="Nginx编译安装"><a href="#Nginx编译安装" class="headerlink" title="Nginx编译安装"></a>Nginx编译安装</h3><p>下载源码包<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 -]<span class="comment"># cd /usr/local/src/</span></span><br><span class="line">[root@s2 src]<span class="comment"># wget https://nginx.org/download/nginx-1.18.1.tar.gz</span></span><br><span class="line">[root@s2 src]<span class="comment"># tar xf nginx-1.18.1.tar.gz</span></span><br><span class="line">[root@s2 src]<span class="comment"># cd nginx-1.18.1/</span></span><br><span class="line">编译是为了检查系统环境是否符合编译安装的要求，比如是否有gcc编译工具，是否支持编译参数当中的模块，并根据</span><br><span class="line">开启的参数等生成Makefile文件为下一一步做准备: </span><br><span class="line">[root@s2 nginx-1.18.1]<span class="comment"># . /configure --prefix=/apps/nginx \</span></span><br><span class="line">--user=nginx \</span><br><span class="line">--group=nginx \</span><br><span class="line">--with-http_ssl_module \</span><br><span class="line">--with-http_V2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">--with-pcre\</span><br><span class="line">--with-stream\</span><br><span class="line">--with-stream_ssl_module\</span><br><span class="line">--with-stream_realip_module</span><br><span class="line">[root@s2 nginx-1.18.1]<span class="comment"># make #编译步骤， 根据Makefile文件生成相应的模块</span></span><br><span class="line">[root@s2 nginx-1.18.1]<span class="comment"># make install #创建目录，并将生成的模块和文件复制到相应的目录:</span></span><br><span class="line">[root@s2 nginx-1.18.1]<span class="comment"># useradd nginx -s /sbin/nologin -u 2000 #以普通用户启动nginx</span></span><br><span class="line">[root@s2 nginx-1.18.1]<span class="comment"># chown nginx.nginx -R /apps/nginx/</span></span><br></pre></td></tr></table></figure><p>备注: nginx完成安装以后，有四个主要的目录:</p><ul><li>conf:该目录中保存了nginx所有的配置文件，其中nginx.conf是nginx服务器的最核心最主要的配置文件，其他的.conf则是用来配置nginx相关的功能的，例如fastcgi功能使用的是fastcgi.conf和fastcgi_params两个文件，配置文件一般都有个样板配置文件，是文件名.default结尾，使用的使用将其复制为并将default去掉即可。</li><li>html:该目录中保存了nginx服务器的web文件，但是可以更改为其他目录保存web文件，另外还有一个50x的web文件是默认的错误页面提示页面。</li><li>logs:该目录用来保存nginx服务器的访问日志错误日志等日志，logs目录可以放在其他路径，比<br>如/var/logs/nginx里面。</li><li>sbin:该目录用来保存nginx二进制启动脚本，可以接受不同的参数以实现不同的功能。</li></ul><p>验证版本及编译参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 nginx-1.16.1]<span class="comment"># /apps/nginx/sbin/nginx -V</span></span><br><span class="line">nginx version: nginx/1.16.1</span><br><span class="line">built by gcc 4.8.5 20150623 (Red Hat 4.8.5-39) (GCC)</span><br><span class="line">built with openSSL 1.0.2k-fips 26 Jan 2017</span><br><span class="line">TLS SNI support enabled</span><br><span class="line">configure arguments: --prefix=/apps/nginx --user=nginx --group=nginx --with-</span><br><span class="line">http_ssl_module --with-http_v2_module --with-http_realip_module --with-</span><br><span class="line">http_stub_status module --with-http_gzip_static_module --with-pcre --with-streamwith-stream_ssl_module --with-stream_realip_module</span><br></pre></td></tr></table></figure><p>创建Nginx自启动脚本</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@s1 ~]<span class="comment"># cat /usr/lib/systemd/system/nginx.service</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=The nginx HTTP and reverse proxy server</span><br><span class="line">After=network.target remote-fs.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line"><span class="comment"># Nginx will fail to start if /run/nginx.pid already exists but has the wr ong</span></span><br><span class="line"><span class="comment"># SELinux context. This might happen when running &quot;nginx -t” from the cmdline.</span></span><br><span class="line"><span class="comment"># https ://bugzilla. redhat com/ show_bug.cgi?id=1268621</span></span><br><span class="line">ExecstartPre=/usr/bin/rm -f /run/nginx. pid</span><br><span class="line">ExecStartPre=/apps/nginx/sbin/nginx -t</span><br><span class="line">ExecStart=/apps/nginx/sbin/nginx</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -S HUP <span class="variable">$MAINPID</span></span><br><span class="line">Killsignal=SIGQUIT</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=process</span><br><span class="line">PrivateTmp=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><h1 id="Nginx核心配置详解"><a href="#Nginx核心配置详解" class="headerlink" title="Nginx核心配置详解"></a>Nginx核心配置详解</h1><h2 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 -]<span class="comment"># grep -V &quot;#” /apps/nginx/conf/nginx.conf I grep -V &quot;A$&quot;</span></span><br><span class="line"><span class="comment">#全局配置端，对全局生效，主要设置nginx的启动用户/组，启动的工作进程数量，工作模式，Nginx的PID路径， 日志路径等。</span></span><br><span class="line">user nginx nginx;</span><br><span class="line">worker_processes 1; <span class="comment">#启动工作进程数数量</span></span><br><span class="line">events &#123; <span class="comment">#events设置快， 主要影响nginx服务器与用户的网络连接，比如是否允许同时接受多个网络连接，使用哪种事件驱动模型处理请求，每个工作进程可以同时支持的最大连接数，是否开启对多工作进程下的网络连接进行序列化等。</span></span><br><span class="line">worker_connections 1024;<span class="comment">#设置单个nginx工作进程可以接受的最大并发，作为web服务器的时候最大并发数为worker_connections * worker_processes, 作为反向代理的时候为(worker_connections *worker_processes)/2</span></span><br><span class="line">http &#123; <span class="comment">#http块是Nginx服务器配置中的重要部分，缓存、代理和日志格式定义等绝大多数功能和第三方模块都可以在这设置，http块可以包含多个server块，而一个server块中又可以包含多个location块，server 块可以配置文件引入、MIME-Type定义、日志自定义、是否启sendfile、连接超时时间和单个链接的请求上限等。</span></span><br><span class="line">include mime.types;</span><br><span class="line">default_type application/octet-stream;</span><br><span class="line">sendfile on; <span class="comment">#作为web服务器的时候打开sendfile加快静态文件传输，指定是否使用sendfile系统调用来传输文件，sendfile系统调用在两个文件描述符之间直接传递数据(完全在内核中操作)，从而避免了数据在内核缓冲区和用户缓冲区之间的拷贝，操作效率很高，被称之为零拷贝，硬盘 &gt;&gt; kernel buffer (快速拷贝到kernelsocket buffer) &gt;&gt;协议栈。</span></span><br><span class="line">keepalive_ timeout 65; <span class="comment">#长连接超时时间， 单位是秒</span></span><br><span class="line">server &#123; <span class="comment">#设置-个虚拟机主机，可以包含自己的全局快，同时也可以包含多个location模块。比如本虚拟机监听的端口、本虚拟机的名称和IP配置，多个server 可以使用一 个端口，比如都使用80端口提供web服务</span></span><br><span class="line">listen 80; <span class="comment">#配置server 监听的端口</span></span><br><span class="line">server_name localhost; <span class="comment">#本server的名称，当访问此名称的时候nginx 会调用当前serevr内部的配置进程匹配。</span></span><br><span class="line">location / &#123; <span class="comment">#location其实是server的一个指令,为nginx服务 器提供比较多而且灵活的指令，都是在location中提现的，主要是基于nginx接受到的请求字符串，对用户请求的UIL进行匹配，并对特定的指令进行处理，包括地址重定向、数据缓存和应答控制等功能都是在这部分实现，另外很多第三方模块的配置也是在location模块中配置。</span></span><br><span class="line">root html; <span class="comment">#相当于默认页面的目录名称，默认是相对路径，可以使用绝对路径配置。</span></span><br><span class="line">index index.html index.htm; <span class="comment">#默认的页面文件名称</span></span><br><span class="line">&#125;</span><br><span class="line">error_ page 500 502 503 504 /50x.html; <span class="comment">#错误页面的文件名称</span></span><br></pre></td></tr></table></figure><h2 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">user</span> nginx nginx; <span class="comment">#启动Nginx工作进程的用户和组</span></span><br><span class="line"><span class="attribute">worker_processes</span> [number| auto]; <span class="comment">#启动Nginx工作进程的数量</span></span><br><span class="line"><span class="attribute">worker_cpu_affinity</span> [<span class="number">0000001</span> <span class="number">0000010</span> <span class="number">0000100</span> <span class="number">00001000</span> | auto ]; <span class="comment">#将Nginx工作进程绑定到指定的CPU核心，默认Nginx是不进行进程绑定的，绑定并不是意味着当前nginx进程独占以一核心CPU,但是可以保证此进程不会运行在其他核心上，这就极大减少了nginx的工作进程在不同的cpu核心上的来回跳转，减少了CPU对进程的资源分配与回收以及内存管理等，因此可以有效的提升nginx服务器的性能。</span></span><br><span class="line">[root@s2 ~]#ps axo pid, cmd, psr,user | grep nginx</span><br><span class="line">4106 nginx: master process / apps  1 root</span><br><span class="line">4181 nginx: worker process         θ nginx</span><br><span class="line">4182 nginx: worker process         1 nginx</span><br><span class="line">4184 grep --color-auto nginx       θ root</span><br><span class="line"><span class="comment">#错误日志记录配置，语法: error log file [debug | info | notice| warn | error| crit |alert | emerg ]</span></span><br><span class="line"><span class="comment">#error_log   logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log   logs/error.log notice;</span></span><br><span class="line"><span class="attribute">error_log</span>     /apps/nginx/1ogs/error.log <span class="literal">error</span>;</span><br><span class="line"><span class="comment">#pid文件保存路径</span></span><br><span class="line"><span class="attribute">pid</span>          /apps/nginx/logs/nginx.pid; </span><br><span class="line"><span class="attribute">worker_priority</span> <span class="number">0</span>; <span class="comment">#工作进程nice值， -20到+19</span></span><br><span class="line"><span class="attribute">worker_rlimit_nofile</span> <span class="number">65536</span>; <span class="comment">#这个数字包括Nginx的所有连接(例如与代理服务器的连接等)，而不仅仅是与客户端的连接，另一个考虑因素是实际的并发连接数不能超过系统级别的最大打开文件数的限制，</span></span><br><span class="line">[root@s2 ~]# watch -n1 &#x27;ps -axo pid, cmd,nice I grep nginx&#x27; #验证进程优先级</span><br><span class="line"></span><br><span class="line"><span class="attribute">daemon</span> <span class="literal">off</span>; <span class="comment">#前台运行Nginx服务用于测试、 docker等环境。</span></span><br><span class="line"><span class="attribute">master_process</span> <span class="literal">off</span>|<span class="literal">on</span>; <span class="comment">#是否开启Nginx的master-woker工作模式，仅用于开发调试场景。</span></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123; <span class="comment">#事件模型配置参数</span></span><br><span class="line"><span class="attribute">worker_connections</span> <span class="number">65536</span>; <span class="comment">#设置 单个工作进程的最大并发连接数</span></span><br><span class="line"><span class="attribute">use</span> <span class="literal">epoll</span>; <span class="comment">#使用epoll事件驱动， Nginx支持众多的事件驱动，比如select、poll、 epoll, 只能设置在events模块中设置。</span></span><br><span class="line"><span class="attribute">accept_mutex</span> <span class="literal">on</span>; <span class="comment">#优化同一时刻只有一个请求而避免多个睡眠进程被唤醒的设置，on为防止被同时唤醒，默认为off,全部唤醒的过程也成为&quot;惊群”，因此nginx刚安装完以后要进行适当的优化。</span></span><br><span class="line"><span class="attribute">multi_accept</span> <span class="literal">on</span>; <span class="comment">#Nginx服务器的每个工作进程可以同时接受多个新的网络连接，但是需要在配置文件中配置，此指令默认为关闭，即默认为一个工作进程只能一次接受一个新的网络连接， 打开后几个同时接受多个。</span></span><br></pre></td></tr></table></figure><h2 id="http详细配置"><a href="#http详细配置" class="headerlink" title="http详细配置"></a>http详细配置</h2><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">http</span> &#123;</span><br><span class="line"><span class="attribute">include</span>  mime .types; <span class="comment">#导入支持的文件类型</span></span><br><span class="line"><span class="attribute">default_type</span> application/octet-stream; <span class="comment">#设置默认的类型，会提示下载不匹配的类型文件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#日志配置部分</span></span><br><span class="line"><span class="comment">#log_format main &#x27;$remote.addr.$remote_user [$time_1ocal] &quot;Srequest&quot;</span></span><br><span class="line"><span class="comment">#&#x27;$status $body_bytes_sent </span></span><br><span class="line">    <span class="comment">#&quot;$http_referer&quot;</span></span><br><span class="line"><span class="comment">#&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span></span><br><span class="line"><span class="comment">#access_1og logs/access.1og main;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">#自定义优化参数</span></span><br><span class="line"><span class="attribute">sendfile</span> <span class="literal">on</span>; <span class="comment">#实现文件零拷贝</span></span><br><span class="line"><span class="comment">#tcp_nopush on; #在开启了 sendfile的情况下，合并请求后统一发送给客户端。</span></span><br><span class="line"><span class="comment">#tcp_nodelay off; #在开启了keepalived模式下的连接是否启用TCP. NODELAY选项，当为off时，延迟0.2s发送，默认on时，不延迟发送，立即发送用户相应报文。</span></span><br><span class="line"><span class="attribute">keepalive_timeout</span> <span class="number">65</span>; <span class="comment">#设置会话保持时间</span></span><br><span class="line"><span class="comment">#gzip on; 开启文件压缩</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>; <span class="comment">#设置监听地址和端口</span></span><br><span class="line"><span class="attribute">server_name</span> localhost; <span class="comment">#设置server name, 可以以空格隔开写多个并支持正则表达式，如*.kinmfer.com  www.kinmfer.* www.(site\d+)\.kinmfer\.com$ default_server</span></span><br><span class="line">        <span class="comment">#匹配机制:</span></span><br><span class="line"><span class="comment">#(1)首先是字符串精确匹配;</span></span><br><span class="line"><span class="comment">#(2)左侧*通配符;</span></span><br><span class="line"><span class="comment">#(3)右侧*通配符;</span></span><br><span class="line"><span class="comment">#(4)正则表达式;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">#charset koi8-r; #设置编码格式，默认是俄语格式，可以改为utf-8</span></span><br><span class="line"><span class="comment">#access_log logs/host.access.log main;</span></span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line"><span class="attribute">root</span>  html;</span><br><span class="line"><span class="attribute">index</span> index.html index.htm;</span><br><span class="line">            </span><br><span class="line">       <span class="comment">#location ~ \.php$ &#123; #以fastcgi的方式转发php请求到php处理</span></span><br><span class="line">       <span class="comment">#root html;</span></span><br><span class="line">   <span class="comment">#fastcgi_ pass  127.0.0.1:9000;</span></span><br><span class="line">   <span class="comment">#fastcgi_index index.php;</span></span><br><span class="line">   <span class="comment">#fastcgi param SCRIPT_ FILENAME /scripts$fastcgi script_ name;</span></span><br><span class="line">   <span class="comment">#include fastcgi_params;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br><span class="line">   <span class="comment"># deny access to .htaccess files, if Apache&#x27;s document root</span></span><br><span class="line">       <span class="comment"># concurs with nginx&#x27;s one</span></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">   <span class="comment">#location ~ /\.ht &#123; #拒绝web形式访问指定文件，如很多的网站都是通过. htaccess文件来改变自己的重定向等功能。</span></span><br><span class="line">   <span class="comment">#  deny all; </span></span><br><span class="line">       <span class="comment">#&#125;</span></span><br><span class="line">       <span class="attribute">location</span> <span class="regexp">~ /passwd.html</span> &#123;</span><br><span class="line">   <span class="attribute">deny</span> all; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment"># HTTPS server</span></span><br><span class="line">   <span class="comment">#</span></span><br><span class="line">       <span class="comment">#server &#123; #https服务器配置</span></span><br><span class="line">       <span class="comment"># listen  443 ssl;</span></span><br><span class="line">       <span class="comment"># server_name localhost;</span></span><br><span class="line">       <span class="comment"># ssl_ certificate cert.pem;</span></span><br><span class="line">   <span class="comment"># ssl_certificate_key cert.key;</span></span><br><span class="line">   <span class="comment"># ssl_session_cache shared:SSL:1m;</span></span><br><span class="line">   <span class="comment"># ssl_session_timeout 5m;</span></span><br><span class="line">   <span class="comment"># ssl_ciphers HIGH: !aNULL: !MD5;</span></span><br><span class="line">   <span class="comment"># ssl_prefer_server.ciphers on;</span></span><br><span class="line">       <span class="comment"># location / &#123;</span></span><br><span class="line"><span class="comment">#root html;</span></span><br><span class="line"><span class="comment">#index index.html index.htm;</span></span><br><span class="line">   <span class="comment">#&#125;</span></span><br></pre></td></tr></table></figure><h2 id="核心配置示例"><a href="#核心配置示例" class="headerlink" title="核心配置示例"></a>核心配置示例</h2><h3 id="root和alias"><a href="#root和alias" class="headerlink" title="root和alias"></a>root和alias</h3><p>root:指定web的家目录，在定义location的时候，文件的绝对路径等于root+location,如:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.kinmfer.com</span><br><span class="line">location / &#123;</span><br><span class="line"><span class="attribute">root</span> /data/nginx/html/pc ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /about &#123;</span><br><span class="line"><span class="attribute">root</span> /data/nginx/html/pc; <span class="comment">#必须要在html目录中创建一个about目录才可以访问，否则报错。</span></span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line">&#125;</span><br><span class="line">[root@s2 ~]# mkdir /data/nginx/html/pc/about</span><br><span class="line">[root@s2 ~]# echo about &gt; /data/nginx/html/pc/about/index.html</span><br><span class="line">重启Nginx并访问测试</span><br></pre></td></tr></table></figure><p>alias:定义路径别名，会把访问的路径重新定义到其指定的路径，如：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.kinmfer.com;</span><br><span class="line"><span class="attribute">location</span> /about &#123; <span class="comment">#使用alias的时候uri后面如果加了斜杠则下面的路径配置必须加斜杠，否则403</span></span><br><span class="line"><span class="attribute">alias</span> /data/nginx/html/pc; <span class="comment">#当访问about的时候， 会显示alias定义的/data/nginx/html/pc 里面的内容。</span></span><br><span class="line"><span class="attribute">index</span> index .html;</span><br><span class="line">&#125;</span><br><span class="line">重启Nginx并访问测试</span><br><span class="line">http://www.kinmfer.com/about/index.html #访问指定文件资源</span><br></pre></td></tr></table></figure><h3 id="location的详细使用"><a href="#location的详细使用" class="headerlink" title="location的详细使用"></a>location的详细使用</h3><p>在没有使用正则表达式的时候，nginx会先在server中的多个location选取匹配度最高的一个uri, uri是用户请求的字符串，即域名后面的web文件路径，然后使用该location模块中的正则uri和字符串，如果匹配成功就结束搜索，并使用此location处理此请求。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">语法规则: location [=|~|~*|^~] /uri/ &#123; ... &#125;</span><br><span class="line">= <span class="comment">#用于标准uri前，需要请求字串与uri精确匹配，如果匹配成功就停止向下匹配并立即处理请求。</span></span><br><span class="line">~   <span class="comment">#用于标准uri前，表示包含正则表达式井且区分大小写，并且匹配</span></span><br><span class="line">!~  <span class="comment">#用于标准uri前， 表示包含正则表达式并且区分大小写，并且不匹配</span></span><br><span class="line"></span><br><span class="line">~*  <span class="comment">#用于标准uri前， 表示包含正则表达式并且不区分大写，并且匹配</span></span><br><span class="line">!~* <span class="comment">#用于标准uri前，表示包含正则表达式并且不区分大小写,并且不匹配</span></span><br><span class="line">^~  <span class="comment">#用于标准uri前， 表示包含正则表达式并且匹配以什么开头</span></span><br><span class="line">$   <span class="comment">#用于标准uri前， 表示包含正则表达式并且匹配以什么结尾</span></span><br><span class="line">\   <span class="comment">#用于标准uri前， 表示包含正则表达式并且转义字符。可以转. * ?等</span></span><br><span class="line">*   <span class="comment">#用于标准uri前，表示包含正则表达式并且代表任意长度的任意字符</span></span><br></pre></td></tr></table></figure><p>location优先级: (location =) &gt; (location ^~ 路径) &gt; (location <del>,</del>* 正则顺序) &gt; (location 部分起始路径) &gt; (/)</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">直接匹配网站根会加速Nginx访问处理:</span><br><span class="line"><span class="attribute">location</span> = / &#123;</span><br><span class="line">..... :</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">......:</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">静态资源配置:</span><br><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /static/ &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(gif|jpg|jpeg|png|css|js|ico)$</span> &#123;</span><br><span class="line">..... </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">多应用配置</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* /app1</span> &#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~* /app2</span> &#123;</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx四层访问控制"><a href="#Nginx四层访问控制" class="headerlink" title="Nginx四层访问控制"></a>Nginx四层访问控制</h3><p>访问控制基于模块ngx_http_access_module实现，可以通过匹配客户端源IP地址进行限制。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /about &#123;</span><br><span class="line"><span class="attribute">alias</span> /data/nginx/html/pc;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line"><span class="attribute">deny</span> <span class="number">192.168.1.1</span>;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.1.0</span>/<span class="number">24</span>; </span><br><span class="line"><span class="attribute">allow</span> <span class="number">10.1.1.0</span>/<span class="number">16</span>;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">2001</span>:0db8::/<span class="number">32</span>;</span><br><span class="line"><span class="attribute">deny</span> all; <span class="comment">#先允许小部分， 再拒绝大部分</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Nginx账户认证功能"><a href="#Nginx账户认证功能" class="headerlink" title="Nginx账户认证功能"></a>Nginx账户认证功能</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 ~]<span class="comment"># yum install httpd-tools -y #Centos</span></span><br><span class="line">[root@s2 ~]<span class="comment"># apt install apache2-utils #Ubuntu</span></span><br><span class="line">[root@s2 ~]<span class="comment"># htpasswd -cbm /apps/nginx/conf/ .htpasswd user1 123456</span></span><br><span class="line">Adding password <span class="keyword">for</span> user user1</span><br><span class="line">[root@s2 -]<span class="comment"># htpasswd -bm /apps/nginx/conf/ .htpasswd user2 123456</span></span><br><span class="line">Adding password <span class="keyword">for</span> user user2</span><br><span class="line">[root@s2 ~]<span class="comment"># tail /apps/nginx/conf/.htpasswd</span></span><br><span class="line">user1:<span class="variable">$apr</span><span class="variable">$SRjm0u2Kr</span><span class="variable">$VHvkAIc50Yg</span>.3ZoaGwaGq/</span><br><span class="line">user2:<span class="variable">$apr1</span><span class="variable">$nIqnxoJBSLR9W1DTJT</span>.viDJhXa6wHV.</span><br><span class="line">[root@s2 ~]<span class="comment"># vim /apps/nginx/conf/conf.d/pc.conf</span></span><br><span class="line">location = /login/ &#123;</span><br><span class="line">root /data/nginx/html/pc;</span><br><span class="line">index index.html;</span><br><span class="line">auth_basic <span class="string">&quot;login password&quot;</span>;</span><br><span class="line">auth_basic_user_file /apps/nginx/conf/.htpasswd;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="自定义错误页面"><a href="#自定义错误页面" class="headerlink" title="自定义错误页面"></a>自定义错误页面</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">server_name</span> www.kinmfer.com;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="number">404</span> /error.html;</span><br><span class="line"><span class="attribute">location</span> = /error.html &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br><span class="line">重启nginx并访问不存在的页面进行测试</span><br></pre></td></tr></table></figure><h3 id="自定义访问日志"><a href="#自定义访问日志" class="headerlink" title="自定义访问日志"></a>自定义访问日志</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 -]# mkdir /data/nginx/logs</span><br><span class="line"><span class="attribute">listen</span> <span class="number">80</span>; </span><br><span class="line"><span class="attribute">server_name</span> www.kinmfer.com;</span><br><span class="line"><span class="attribute">error_page</span> <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> <span class="number">404</span> /error.html; <span class="comment">#默认目录下面创建error.html页面</span></span><br><span class="line"><span class="attribute">access_log</span> /data/nginx/logs/www-kinmfer-com-access.log;</span><br><span class="line"><span class="attribute">error_log</span> /data/nginx/logs/www-kinmfer-com-<span class="literal">error</span>.log;</span><br><span class="line"><span class="attribute">location</span> = /error.html &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">&#125;</span><br><span class="line">也可以单独放在location中</span><br><span class="line"><span class="attribute">location</span> = /error.html &#123;</span><br><span class="line"><span class="attribute">root</span> html;</span><br><span class="line">    <span class="attribute">access_log</span> /data/nginx/logs/www-kinmfer-com-access.log;</span><br><span class="line"><span class="attribute">error_log</span> /data/nginx/logs/www-kinmfer-com-<span class="literal">error</span>.log;</span><br><span class="line">&#125;</span><br><span class="line">重启nginx并访问不存在的页面进行测试并验证是在指定目录生成新的日志文件</span><br></pre></td></tr></table></figure><h3 id="检测文件是否存在"><a href="#检测文件是否存在" class="headerlink" title="检测文件是否存在"></a>检测文件是否存在</h3><p>try_files会按顺序检查文件是否存在，返回第一个找到的文件或文件夹 (结尾加斜线表示为文件夹)，如果所有文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。只有最后一个参数可以引起一个内部重定向，之前的参数只设置内部URI的指向。最后一个参数是回退URI且必须存在，否则会出现内部500错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">location /about &#123;</span><br><span class="line">root /data/nginx/htm1/pc ;</span><br><span class="line"><span class="comment">#alias /data/nginx/html/pc; </span></span><br><span class="line">index index. html;</span><br><span class="line"><span class="comment">#try_files $uri /about/default.html;</span></span><br><span class="line"><span class="comment">#try_files $uri $uri/index.html $uri.html/about/default.html;</span></span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/index.html <span class="variable">$uri</span>.html =489;</span><br><span class="line">&#125;</span><br><span class="line">[root@s2 ~]<span class="comment"># echo &quot;default&quot;&gt;/data/nginx/html/pc/about/default .html</span></span><br><span class="line">重启nginx并测试，当访问到http://www.kinmfer.com/about/xx.html等不存在的uri会显示default,如果是自定义的状态码则会显示在返回数据的状态码中，如: </span><br><span class="line">[root@s2 about]<span class="comment"># curl --head http://www.kinmfer.com/about/xx.html</span></span><br><span class="line">HTTP/1.1 489 <span class="comment">#489就是自定义的状态返回码</span></span><br><span class="line">Server: nginx</span><br><span class="line">Date: Thu, 21 Feb 2019 00:11:40 GMT</span><br><span class="line">Content-Length: θ</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Keep-Alive: timeout=65</span><br></pre></td></tr></table></figure><h3 id="长连接配置"><a href="#长连接配置" class="headerlink" title="长连接配置"></a>长连接配置</h3><p>keepalive_timeout number; #设定保持连接超时时长，0表示禁止长连接，默认为75s, 通常配置在http字段作<br>为站点全局配置</p><p>keepalive_requests number; #在一次长连接上所允许请求的资源的最大数量，默认为100次</p><p>keepalive_disable none | browser …;#对哪种浏览器禁用长连接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">keepalive_requests 200;</span><br><span class="line">keepalive_timeout 65 60;</span><br><span class="line">开启长连接后，返回客户端的会话保持时间为60s,单次长连接累计请求达到指定次数请求或65秒就会被断开，后面的</span><br><span class="line">60为发送给客户端应答报文头部中显示的超时时间设置为60s:如不设置客户端将不显示超时时间。</span><br><span class="line">Keep-Alive: timeout=60</span><br><span class="line"><span class="comment">#浏览器收到的服务器返回的报文</span></span><br><span class="line">如果设置为0表示关闭会话保持功能，将如下显示:</span><br><span class="line">Connection:close <span class="comment">#浏览器收到的服务器返回的报文</span></span><br><span class="line">使用命令测试:</span><br><span class="line">[root@s3 apps]<span class="comment"># telnet www.kinmer.com 80</span></span><br><span class="line">Trying 172.18.200.102...</span><br><span class="line">Connected to www.kinmfer.com.</span><br><span class="line">Escape character is <span class="string">&#x27;^]&#x27;</span>.</span><br><span class="line">GET / HTTP/1.1</span><br><span class="line">HOST: www. magedu. net</span><br><span class="line"><span class="comment">#Response Headers(响应头信息):</span></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.14.2</span><br><span class="line">Date: Thu, 14 Mar 2019 17:23:46 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 7</span><br><span class="line">Last-Modified: Thu, 14 Mar 2020 14:54:50 GMT</span><br><span class="line">Connection: keep- alive</span><br><span class="line">Keep-Alive: timeout=60</span><br><span class="line">ETag: <span class="string">&quot;5c8a6b3a-7&quot;</span></span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"><span class="comment">#页面内容</span></span><br><span class="line">pc web</span><br></pre></td></tr></table></figure><h3 id="作为下载服务器"><a href="#作为下载服务器" class="headerlink" title="作为下载服务器"></a>作为下载服务器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 about]<span class="comment"># mkdir /data/nginx/html/pc/download</span></span><br><span class="line"><span class="comment">#download不需要index.html文件</span></span><br><span class="line">[root@s2 about]<span class="comment"># vim /apps/nginx/conf/conf.d/pc.conf</span></span><br><span class="line">location /download &#123;</span><br><span class="line">    root /data/nginx/htm1/pc;</span><br><span class="line">autoindex on; <span class="comment">#自动索引功能</span></span><br><span class="line">autoindex_exact_size on; <span class="comment">#计算文件确切大小(单位bytes) ，off只显示大概大小(单位kb、 mb、gb)</span></span><br><span class="line">autoindex_localtime on; <span class="comment">#显示本机时间而非GMT(格林威治)时间</span></span><br><span class="line">    <span class="comment">#limit_rate 10k; ##限制响应给客户端的传输速率，单位是bytes/second, 默认值0表示无限制</span></span><br><span class="line">[root@s2 pc]<span class="comment"># cp /root/anaconda-ks.cfg /data/nginx/html/pc/download/</span></span><br><span class="line">重启Nginx并访问测试下载页面</span><br></pre></td></tr></table></figure><h3 id="作为上传服务器"><a href="#作为上传服务器" class="headerlink" title="作为上传服务器"></a>作为上传服务器</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">1m</span>; <span class="comment">#设置允许客户端上传单个文件的最大值，默认值为1m</span></span><br><span class="line"><span class="attribute">client_body_buffer_size</span> size;<span class="comment">#用于接收每个客户端请求报文的body部分的缓冲区大小;默认16k;超出此大小时，其将被暂存到磁盘上的由下面client_body_temp_path指令所定义的位置</span></span><br><span class="line"><span class="attribute">client_body_temp_path</span> path [level1 [level2 [1evel3]]];</span><br><span class="line"><span class="comment">#设定存储客户端请求报文的body部分的临时存储路径及子目录结构和数量，目录名为16进制的数字，使用hash之后的值从后往前截取1位、2位、2位作为文件名:</span></span><br><span class="line">[root@s3 ~]# md5sum /data/nginx/html/pc/index.html</span><br><span class="line">95f6f65f498c74938064851b1bb 96 3d 4 /data/nginx/html/pc/index . html</span><br><span class="line">1级目录占1位16进制，即2^4=16个目录0-f</span><br><span class="line">2级目录占2位16进制，即2^8=256个目录00-ff</span><br><span class="line">3级目录占2位16进制，即28=256个目录00-ff</span><br><span class="line"></span><br><span class="line">配置示例:</span><br><span class="line"><span class="attribute">client_max_body_size</span> <span class="number">10m</span>;</span><br><span class="line"><span class="attribute">client_body_buffer_size</span> <span class="number">16k</span>;</span><br><span class="line"><span class="attribute">client_body_temp_path</span> /apps/nginx/temp <span class="number">1</span> <span class="number">2</span> <span class="number">2</span>; <span class="comment">#reload Nginx会自动创建temp目录</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200523202125465.png" alt="image-20200523202125465"></p><h3 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h3><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">limit_except method ... &#123; ... &#125;，仅用于location</span><br><span class="line">限制客户端使用除了指定的请求方法之外的其它方法</span><br><span class="line">method:GET, HEAD, POST, PUT, DELETE, MKCOL, COPY, MOVE, OPTIONS, PROPFIND,PROPPATCH，LOCK，UNLOCK，PATCH</span><br><span class="line"><span class="attribute">limit_except</span> GET &#123;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.0.0</span>/<span class="number">24</span>;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.7.101</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#除了GET和HEAD之外其它方法仅允许192.168.1.0/24网段主机使用</span></span><br><span class="line">[root@s2 about]# mkdir /data/nginx/html/pc/upload</span><br><span class="line">[root@s2 about]# echo &quot;upload&quot; &gt; /data/nginx/html/pc/upload/ index.html</span><br><span class="line">[root@s2 about]# vim /apps/nginx/conf/conf.d/pc.conf</span><br><span class="line"><span class="attribute">location</span> /upload &#123;</span><br><span class="line"><span class="attribute">root</span> /data/kinmfer/pc;</span><br><span class="line"><span class="attribute">index</span> index.html;</span><br><span class="line"><span class="attribute">limit_except</span> GET &#123;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">172.18.200.101</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">aio</span> <span class="literal">on</span>| <span class="literal">off</span> <span class="comment">#是否启用asynchronous file I/0(AIO)功能，需要编译开启</span></span><br><span class="line">linux <span class="number">2</span>.<span class="number">6</span>以上内核提供以下几个系统调用来支持aio:</span><br><span class="line"><span class="number">1</span>、SYS_io_setup:建立aio的context</span><br><span class="line"><span class="number">2</span>、SYS_io_submit: 提交I/O操作请求</span><br><span class="line"><span class="number">3</span>、SYS_i0_getevents:获取已完成的I/O事件</span><br><span class="line"><span class="number">4</span>、SYS_i0_cancel:取消I/O操作请求</span><br><span class="line"><span class="number">5</span>、SYS_i0_destroy: 毁销aio的context</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">directio</span> size | <span class="literal">off</span>; <span class="comment">#操作完全和aio相反， aio是读取文件而directio是写文件到磁盘，启用直接I/O,默认为关闭，当文件大于等于给定大小时，例如directio 4m,同步(直接) 写磁盘，而非写缓存。</span></span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache</span> <span class="literal">off</span>; <span class="comment">#是否缓存打开过的文件信息</span></span><br><span class="line"><span class="attribute">open_file_cache</span> max=N [inactive=time];</span><br><span class="line">nginx可以缓存以下三种信息:</span><br><span class="line">(1)文件元数据:文件的描述符、文件大小和最近一次的修改时间</span><br><span class="line">(2)打开的目录结构</span><br><span class="line">(3)没有找到的或者没有权限访问的文件的相关信息</span><br><span class="line">max=N:可缓存的缓存项上限数量;达到上限后会使用LRU(Least recently used, 最近最少使用)算法实现</span><br><span class="line">管理</span><br><span class="line">inactive=time:缓存项的非活动时长，在此处指定的时长内未被命中的或命中的次数少于open_file_cache_min_uses指令所指定的次数的缓存项即为非活动项，将被删除</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache_errors</span> <span class="literal">on</span> | <span class="literal">off</span>;</span><br><span class="line">是否缓存查找时发生错误的文件一类的信息</span><br><span class="line">默认值为off</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_file_cache_min_uses number ;指令的inactive参数指定的时长内，至少被命中此处指定的次数方可被归类为活动项默认值为1</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">open_file_cache_valid</span> time;</span><br><span class="line">缓存项有效性的检查验证频率，默认值为60s</span><br><span class="line"><span class="attribute">open_file_cache</span> max=<span class="number">10000</span> inactive=<span class="number">60s</span>; <span class="comment">#最大缓存10000个文件， 非活动数据超时时长605</span></span><br><span class="line"><span class="attribute">open_file_cache_valid</span> <span class="number">60s</span>; <span class="comment">#每间隔60s检查一下缓存 数据有效性</span></span><br><span class="line"><span class="attribute">open_file_cache_min_uses</span> <span class="number">5</span>; <span class="comment">#60秒内至少被命中访问5次才被标记为活动数据</span></span><br><span class="line"><span class="attribute">open_file_cache_errors</span>  <span class="literal">on</span>; <span class="comment">#缓存错误信息</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">server_tokens</span> <span class="literal">off</span>; <span class="comment">#隐藏Nginx server版本。</span></span><br></pre></td></tr></table></figure><h1 id="Nginx高级配置"><a href="#Nginx高级配置" class="headerlink" title="Nginx高级配置"></a>Nginx高级配置</h1><h2 id="Nginx状态页"><a href="#Nginx状态页" class="headerlink" title="Nginx状态页"></a>Nginx状态页</h2><p>在编译安装nginx的时候需要添加编译参数–with-http-stub-status-module,否则配置完成之后监测会是提示语法错误。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">配置示例: </span><br><span class="line"><span class="attribute">location</span> /nginx_status &#123;</span><br><span class="line">stub_status;</span><br><span class="line">    <span class="attribute">access_log</span> <span class="literal">off</span>;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">192.168.0.0</span>/<span class="number">16</span>;</span><br><span class="line"><span class="attribute">allow</span> <span class="number">127.0.0.1</span>;</span><br><span class="line"><span class="attribute">deny</span> all;</span><br><span class="line">状态页用于输出nginx的基本状态信息:</span><br><span class="line">输出信息示例:</span><br><span class="line"><span class="attribute">Active</span> connections: <span class="number">291</span></span><br><span class="line">server accepts handled requests</span><br><span class="line"><span class="number">16630948</span> <span class="number">16630948</span> <span class="number">31070465</span></span><br><span class="line">上面三个数字分别对应accepts, handled, requests三个值</span><br><span class="line">Reading: <span class="number">6</span> Writing: <span class="number">179</span> waiting: <span class="number">106</span></span><br><span class="line">        </span><br><span class="line">Active connections: 当前处于活动状态的客户端连接数， 包括连接等待空闲连接数。</span><br><span class="line">accepts:统计总值，Nginx自启动后已经接受的客户端请求的总数。</span><br><span class="line">handled:统计总值，Nginx自启动后已经处理完成的客户端请求的总数，通常等于accepts,除非有因</span><br><span class="line">worker_connections限制等被拒绝的连接。</span><br><span class="line">requests:统计总值，Nginx自启动后客户端发来的总的请求数。</span><br><span class="line">Reading:当前状态，正在读取客户端请求报文首部的连接的连接数。</span><br><span class="line">Writing:当前状态，正在向客户端发送响应报文过程中的连接数。</span><br><span class="line">Waiting:当前状态，正在等待客户端发出请求的空闲连接数，开启keep-alive的情况下， 这个值等于active-</span><br><span class="line">(reading+writing),</span><br></pre></td></tr></table></figure><p>Nginx第三方模块</p><p>第三模块是对nginx的功能扩展，第三方模块需要在编译安装Nginx的时候使用参数–add-module=PATH指定路径添加，有的模块是由公司的开发人员针对业务需求定制开发的，有的模块是开源爱好者开发好之后上传到github进行开源的模块，nginx支持第三方模块需要从源码重新编译支持，比如开源的echo模块<a href="https://github.com/openresty/echo-nginx-module">https://github.com/openresty/echo-nginx-module</a>:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">[root@s2 pc]# systemctl stop nginx</span><br><span class="line">[root@s2 pc]# vim /apps/nginx/conf/conf.d/pc.conf</span><br><span class="line"><span class="attribute">location</span> /main &#123;</span><br><span class="line"><span class="attribute">index</span> index. html;</span><br><span class="line"><span class="attribute">default_type</span> text/html;</span><br><span class="line"><span class="attribute">echo</span> <span class="string">&quot;hello world, main--&gt;&quot;</span>;</span><br><span class="line"><span class="attribute">echo_reset_timer</span> ;</span><br><span class="line"><span class="attribute">echo_location</span> /sub1;</span><br><span class="line"><span class="attribute">echo_location</span> /sub2;</span><br><span class="line"><span class="attribute">echo</span> <span class="string">&quot;took <span class="variable">$echo_timer_elapsed</span> sec for total.&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /sub1 &#123;</span><br><span class="line"><span class="attribute">echo_sleep</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">echo</span> sub1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /sub2 &#123;</span><br><span class="line"><span class="attribute">echo_sleep</span> <span class="number">1</span>;</span><br><span class="line"><span class="attribute">echo</span> sub2;</span><br><span class="line">&#125;</span><br><span class="line">[root@s2 pc]# /apps/nginx/sbin/nginx -t</span><br><span class="line">nginx: [emerg] unknown directive &quot;echo_reset_timer&quot; in</span><br><span class="line">/apps/nginx/conf/conf.d/pc.conf:86</span><br><span class="line">nginx: configuration file /apps/nginx/conf/nginx.conf test failed</span><br><span class="line"></span><br><span class="line"><span class="comment">#解决以上报错问题</span></span><br><span class="line">[root@s2 src]# yum install git -y</span><br><span class="line">[root@s2 src]# git clone https://github.com/openresty/echo-nginx-module.git</span><br><span class="line">[root@s2 src]# cd nginx-1.12.2/</span><br><span class="line">[root@s2 src]# ./configure \</span><br><span class="line">--prefix=/apps/nginx \</span><br><span class="line">--user-nginx --group=nginx \</span><br><span class="line">--with-http_ss1_module \</span><br><span class="line">--with-http_v2_module \</span><br><span class="line">--with-http_realip_module \</span><br><span class="line">--with-http_stub_status_module \</span><br><span class="line">--with-http_gzip_static_module \</span><br><span class="line">-with-pcre \</span><br><span class="line">-with-stream \</span><br><span class="line">--With-stream_ssl_module \</span><br><span class="line">--with-stream_realip_module \</span><br><span class="line">--with-http_perl_module \</span><br><span class="line">-- add-module=/usr/1ocal/src/echo-nginx-module</span><br><span class="line">[root@s2 src]# make &amp;&amp; make install</span><br><span class="line"><span class="comment">#确认语法检测通过</span></span><br><span class="line">[root@s2 pc]# /apps/nginx/sbin/nginx -t</span><br><span class="line">nginx: the configuration file /apps/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /apps/nginx/conf/nginx.conf test is successful</span><br><span class="line"><span class="comment">#重启nginx访问测试:</span></span><br><span class="line">[root@s2 pc]# systemctl restart nginx</span><br><span class="line">[root@s2 pc]# curl http://www.kinmfer.com/main</span><br><span class="line"><span class="attribute">hello</span> world, main--&gt;</span><br><span class="line">sub1</span><br><span class="line">sub2</span><br><span class="line">took <span class="number">2</span>.<span class="number">010</span> sec for total. </span><br></pre></td></tr></table></figure><h2 id="Nginx变量使用"><a href="#Nginx变量使用" class="headerlink" title="Nginx变量使用"></a>Nginx变量使用</h2><p>nginx的变量可以在配置文件中引用，作为功能判断或者日志等场景使用，变量可以分为内置变量和自定义变量，内置变量是由nginx模块自带，通过变量可以获取到众多的与客户端访问相关的值。</p><h3 id="内置变量"><a href="#内置变量" class="headerlink" title="内置变量"></a>内置变量</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="comment">#存放了客户端的地址，注意是客户端的公网IP，也就是一家人访问一个网站，则会显示为路由器的公网IP。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$args</span>;</span><br><span class="line"><span class="comment">#变量中存放了URL中的指令，例如http://www.kinmfer.com/main/index.do?id=20190221&amp;partner=search中的id=20190221&amp;partner=search</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$document_root</span>;</span><br><span class="line"><span class="comment">#保存了针对当前资源的请求的系统根目录，如/apps/nginx/html</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$document_uri</span>;</span><br><span class="line"><span class="comment">#保存了当前请求中不包含指令的URI,注意是不包含请求的指令，比如</span></span><br><span class="line">http://www.kinmfer.com/main/index.do?id=20190221&amp;partner-search会被定为/main/index.do</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$host</span>;</span><br><span class="line"><span class="comment">#存放了请求的host名称。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$http_user_agent</span>;</span><br><span class="line"><span class="comment">#客户端浏览器的详细信息</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$http_cookie</span>; </span><br><span class="line"><span class="comment">#客户端的cookie信息</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">limit_rate 10240;</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$limit_rate</span>;</span><br><span class="line"><span class="comment">#如果nginx服务器使用limit_rate配置了显示网络速率，则会显示，如果没有设置，则显示0。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_port</span>;</span><br><span class="line"><span class="comment">#客户端请求Nginx服务器时随机打开的端口，这是每个客户端自己的端口。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$remote_user</span>;</span><br><span class="line"><span class="comment">#已经经过Auth Basic Module验证的用户名。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request_body_file</span>;</span><br><span class="line"><span class="comment">#做反向代理时发给后端服务器的本地资源的名称。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request_method</span>;</span><br><span class="line"><span class="comment">#请求资源的方式，GET/PUT/DELETE等</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request_filename</span>;</span><br><span class="line"><span class="comment">#当前请求的资源文件的路径名称，由root或alias指令 与URI请求生成的文件绝对路径，</span></span><br><span class="line"><span class="comment">#如/apps/nginx/html/main/index.html</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$request_uri</span>; </span><br><span class="line"><span class="comment">#包含请求参数的原始URI,不包含主机名，如: /main/index.do?id=20190221&amp;par tner=search</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$scheme</span>;</span><br><span class="line"><span class="comment">#请求的协议，如ftp, https, http等。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$server_protocol</span>;</span><br><span class="line"><span class="comment">#保存了客户端请求资源使用的协议的版本，如HTTP/1.0, HTTP/1.1, HTTP/2.0等。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$server_addr</span>;</span><br><span class="line"><span class="comment">#保存了服务器的IP地址。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$server_name</span>;</span><br><span class="line"><span class="comment">#请求的服务器的主机名。</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$server_port</span>;</span><br><span class="line"><span class="comment">#请求的服务器的端口号。</span></span><br></pre></td></tr></table></figure><h3 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h3><p>假如需要自定义变量名称和值，使用指令set $variable value;,则方法如下:<br>Syntax: set ​$variable value;<br>Default: -<br>Context: server, location, if</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">set</span> <span class="variable">$name</span> kinmfer;</span><br><span class="line"><span class="attribute">echo</span> <span class="variable">$name</span>; </span><br><span class="line"><span class="attribute">set</span> <span class="variable">$my_port</span> <span class="variable">$server_port</span>;</span><br><span class="line"><span class="attribute">echo</span> <span class="variable">$my_port</span>;</span><br><span class="line"><span class="attribute">echo</span> <span class="string">&quot;<span class="variable">$server_name</span>:<span class="variable">$server_port</span>&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="Nginx自定义访问日志"><a href="#Nginx自定义访问日志" class="headerlink" title="Nginx自定义访问日志"></a>Nginx自定义访问日志</h2><p>访问日志是记录客户端即用户的具体请求内容信息，全局配置模块中的error_log是记录nginx服务器运行时的日志保存路径和记录日志的level, 因此有着本质的区别，而且Nginx的错误日志一般只有一个，但是访问日志可以在不同server中定义多个，定义一个日志需要使用access_log指定日志的保存路径，使用log _format指定日志的格式，格式中定义要保存的具体日志内容。</p><h3 id="自定义默认格式"><a href="#自定义默认格式" class="headerlink" title="自定义默认格式"></a>自定义默认格式</h3><p>如果是要保留日志的源格式，只是添加相应的日志内容，则配置如下:</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> nginx_format1 <span class="string">&#x27;<span class="variable">$remote_addr</span> - <span class="variable">$remote_user</span> [<span class="variable">$time_local</span>] &quot;<span class="variable">$request</span>&quot; &#x27;</span></span><br><span class="line"><span class="string">&#x27;<span class="variable">$status</span> <span class="variable">$body_bytes_sent</span> &quot;<span class="variable">$http_referer</span>&quot; &#x27;</span></span><br><span class="line"><span class="string">&quot;<span class="variable">$http_user_agent</span>&quot;</span> <span class="string">&quot;<span class="variable">$http_x_forwarded_for</span>&quot;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="variable">$server_name</span>:<span class="variable">$server_port</span><span class="string">&#x27;;</span></span><br><span class="line"><span class="string">access_log logs/access.log nginx_format1; </span></span><br><span class="line"><span class="string">#重启nginx并访问测试日志格式</span></span><br><span class="line"><span class="string">==&gt; /apps/nginx/logs/access.log &lt;==</span></span><br><span class="line"><span class="string">192.168.0.1.。[22/Feb/2019:08:44:14 +0800] &quot;GET /favicon.ico HTTP/1.1”404 162 &quot;。”</span></span><br><span class="line"><span class="string">&quot;Mozilla/5.0 (Windows NT 6.1; Win64; x64; rV:65.0) Gecko/2</span></span><br><span class="line"><span class="string">0100101 Firefox/65.0&quot; &quot;. &quot;www.kinmfer.com:80</span></span><br></pre></td></tr></table></figure><h3 id="自定义json格式日志"><a href="#自定义json格式日志" class="headerlink" title="自定义json格式日志"></a>自定义json格式日志</h3><p>Nginx的默认访问日志记录内容相对比较单一, 默认的格式也不方便后期做日志统计分析，生产环境中通常将<br>nginx日志转换为json日志，然后配合使用ELK做日志收集-统计-分析。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">log_format</span> access_json <span class="string">&#x27;&#123;&quot;<span class="variable">@timestamp</span>&quot; :&quot;<span class="variable">$time</span> iso8601&quot;, &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;host&quot;:&quot;<span class="variable">$server_addr</span>&quot;, &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;clientip&quot;:&quot;<span class="variable">$remote_addr</span>&quot;, &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;size&quot;:<span class="variable">$body_bytes_sent</span>,</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;responsetime&quot;</span>:<span class="variable">$request_time</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;upstreamtime&quot;</span> :<span class="string">&quot;<span class="variable">$upstream_response_time</span>&quot;</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;upstreamhost&quot;</span>: <span class="string">&quot;<span class="variable">$upstream_addr</span>&quot;</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;http_host&quot;</span>: <span class="string">&quot;<span class="variable">$host</span>&quot;</span>, <span class="string">&#x27; </span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;uri&quot;</span>:<span class="string">&quot;<span class="variable">$uri</span>&quot;</span>,</span><br><span class="line"><span class="string">&#x27; domain&quot;: &quot;<span class="variable">$host</span>&quot;, &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;xff&quot;:&quot;<span class="variable">$http_x_forwarded_for</span>&quot;, &#x27;</span></span><br><span class="line"><span class="string">&#x27;&quot;referer&quot;: &quot;<span class="variable">$http_referer</span>&quot;,</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;tcp_xff&quot;</span>: <span class="string">&quot;<span class="variable">$proxy_protocol_addr</span>&quot;</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;http_user_agent&quot;</span>: <span class="string">&quot;<span class="variable">$http_user_agent</span>&quot;</span>, <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&quot;status&quot;</span>:<span class="string">&quot;<span class="variable">$status</span>&quot;</span>&#125;<span class="string">&#x27;;</span></span><br><span class="line"><span class="string">access_log /apps/nginx/1ogs/access_json.log access_json;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">#重启Nginx并访问测试日志格式</span></span><br><span class="line"><span class="string">&#123;&quot;<span class="variable">@timestamp</span>&quot; :&quot;2019-02-22T08:55:32+08:00&quot;, &quot;host&quot;:&quot;192.168.7.102&quot;, &quot;clientip&quot;:&quot;192.168.0.1&quot;, &quot;size&quot; :162, &quot;responsetime&quot; :0.000, &quot;upstreamtime&quot;:&quot; -&quot;, &quot;upstreamhost&quot; :&quot;-&quot;, &quot;http_host&quot; : &quot;www.kinmfer.com&quot; , &quot;uri&quot;:&quot;/favicon.ico&quot; , &quot;domain&quot;: &quot;www.kinmfer.com&quot; , &quot;xff&quot;:&quot;-&quot;, &quot;referer&quot;:&quot;-&quot;,&quot;tcp_xff&quot;:&quot;&quot;, &quot;http_user_agent&quot; :&quot;Mozilla/5.0 (Windows NT 6.1; Win64;x64; rv:65.0) Gecko/20100101 Firefox/65&quot;, &quot;status&quot;:&quot;404&quot;&#125;</span></span><br></pre></td></tr></table></figure><h3 id="json格式的日志访问统计"><a href="#json格式的日志访问统计" class="headerlink" title="json格式的日志访问统计"></a>json格式的日志访问统计</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line">status_200= []</span><br><span class="line">status_404= []</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;access_ json.log&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">line = <span class="built_in">eval</span>(line)</span><br><span class="line"><span class="keyword">if</span> line.get(<span class="string">&quot;status&quot;</span>) == <span class="string">&quot;200&quot;</span>:</span><br><span class="line">status_200.append(line.get)</span><br><span class="line"><span class="keyword">elif</span> line.get(<span class="string">&quot;status&quot;</span>) == <span class="string">&quot;404&quot;</span>:</span><br><span class="line">status_404.append(line.get)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">&quot;状态码ERROR&quot;</span> )</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;状态码200的有--:&quot;</span>, <span class="built_in">len</span>(status_200))</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;状态码404的有--:&quot;</span>, <span class="built_in">len</span>(status_404))</span><br><span class="line"><span class="comment">#保存日志文件到指定路径并进行测试:</span></span><br><span class="line">[root@s2 -]<span class="comment"># python nginx_json. py</span></span><br><span class="line">状态码<span class="number">200</span>的有--: <span class="number">1910</span></span><br><span class="line">状态码<span class="number">404</span>的有--: <span class="number">13</span></span><br></pre></td></tr></table></figure><h2 id="Nginx压缩功能"><a href="#Nginx压缩功能" class="headerlink" title="Nginx压缩功能"></a>Nginx压缩功能</h2><p>Nginx支持对指定类型的文件进行压缩然后再传输给客户端，而且压缩还可以设置压缩比例，压缩后的文件大小将比源文件显著变小，这样有助于降低出口带宽的利用率，降低企业的IT支出，不过会占用相应的CPU资源。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启用或禁用gzip压缩，默认关闭</span></span><br><span class="line">|gzip on | off;</span><br><span class="line"></span><br><span class="line"><span class="comment">#压缩比由低到高从1到9，默认为1</span></span><br><span class="line"><span class="attribute">gzip_comp_level</span> level;</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁用IE6 gzip功能</span></span><br><span class="line"><span class="attribute">gzip_disable</span> <span class="string">&quot;MSIE [1-6]\.&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#gzip压缩的最小文件，小于设置值的文件将不会压缩</span></span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#启用压缩功能时，协议的最小版本，默认HTTP/1.1</span></span><br><span class="line"><span class="attribute">gzip_http_version</span> <span class="number">1</span>.<span class="number">0</span> | <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指定Nginx服务需要向服务器申请的缓存空间的个数*大小，默认32 4k|16 8k;</span></span><br><span class="line"><span class="attribute">gzip_buffers</span> number size;</span><br><span class="line"></span><br><span class="line"><span class="comment">#指明仅对哪些是型的资源执行压缩操作;默认为gzip_ .types text/html, 不用显示指定，否则出错</span></span><br><span class="line"><span class="attribute">gzip_types</span> mime-type ...:</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果启用压缩，是否在响应报文首部插入&quot;Vary: Accept - Encoding&quot;</span></span><br><span class="line">gzip_vary <span class="literal">on</span>| <span class="literal">off</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#重启nginx并进行访问测试压缩功能</span></span><br><span class="line">[root@s2 pc]# cp /apps/nginx/logs/access.log /data/nginx/html/pc/test.html</span><br><span class="line">[root@s2 pc]# echo &quot;test1&quot; &gt; /data/nginx/html/pc/test1.html #小于1k的文件测试是否会压缩</span><br><span class="line">[root@s2 pc]# vim /apps/nginx/conf/nginx.conf</span><br><span class="line"><span class="attribute">gzip</span> <span class="literal">on</span>; </span><br><span class="line"><span class="attribute">gzip_comp_level</span> <span class="number">3</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span> <span class="number">1k</span>;</span><br><span class="line"><span class="attribute">gzip_types</span> text/plain application/javascript application/x-javascript text/cssapplication/xml text/javascript application/x-httpd-php image/jpeg image/gif</span><br><span class="line">image/png;</span><br><span class="line"><span class="attribute">gzip_vary</span> <span class="literal">on</span>;</span><br><span class="line"></span><br><span class="line">重启Nginx并访问测试:</span><br><span class="line">[root@s2 pc]# curl --head --compressed http://www.kinmfer.com</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Thu, 21 Feb 2019 13:06:18 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Content-Length: 7</span><br><span class="line">Last-Modified: Tue, 19 Feb 2019 04:09:32 GMT</span><br><span class="line">Connection: keep- alive</span><br><span class="line">Keep-Alive: timeout=65</span><br><span class="line">ETag: &quot;5c6b817c-7&quot;</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line"></span><br><span class="line">[root@s2 -]# curl --head - -compressed http://www.kinmfer.com/test.html</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">Date: Fri, 22 Feb 2019 01:52:23 GMT</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Last-Modified: Thu, 21 Feb 2019 10:31:18 GMT</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Keep-Alive: timeout=65</span><br><span class="line">Vary: Accept-Encoding</span><br><span class="line">ETag: W/&quot;5c6e7df6-171109&quot;</span><br><span class="line">Content-Encoding: gzip #压缩传输</span><br></pre></td></tr></table></figure><h2 id="Https功能"><a href="#Https功能" class="headerlink" title="Https功能"></a>Https功能</h2><p>Web网站的登录页面都是使用https加密传输的，加密数据以保障数据的安全，HTTPS能够加密信息，以免敏感<br>信息被第三方获取，所以很多银行网站或电子邮箱等等安全级别较高的服务都会采用HTTPS协议，HTTPS其实是有两部分组成: HTTP+SSL/TLS, 也就是在HTTP上又加了一层处理加密信息的模块。服务端和客户端的信息传<br>输都会通过TLS进行加密，所以传输的数据都是加密后的数据。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200524093251561.png" alt="image-20200524093251561"></p><h3 id="ssl配置参数"><a href="#ssl配置参数" class="headerlink" title="ssl配置参数"></a>ssl配置参数</h3><p>nginx的https功能基于模块ngx_https_ssl_module实现，因此如果是编译安装的nginx要使用参数ngx_https_ssl_module开启ssI功能，但是作为nginx的核心功能，yum安装的nginx默认就是开启的，编译安装的nginx需要指定编译参数–with-https_ssl_module开启。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl</span> <span class="literal">on</span>| <span class="literal">off</span>;</span><br><span class="line"><span class="comment">#为指定的虚拟主机配置是否启用ssl功能，此功能在1.15.0废弃，使用listen [ssl]替代。</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /path/to/file;</span><br><span class="line"><span class="comment">#当前虚拟主机使用使用的公钥文件，一般是crt文件</span></span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /path/to/file;</span><br><span class="line"><span class="comment">#当前虚拟主机使用的私钥文件，一般是key文件</span></span><br><span class="line"><span class="attribute">ssl_protocols</span> [SSLv2] [SSLv3] [TLSV1] [TLSV1.<span class="number">1</span>] [TLSV1.<span class="number">2</span>];</span><br><span class="line"><span class="comment">#支持ssl协议版本，早期为ssl, 现在是TSL,默认为后三个</span></span><br><span class="line"><span class="attribute">ssl_session_cache</span> <span class="literal">off</span> | <span class="literal">none</span> | [builtin[:size]] [shared:name:size];</span><br><span class="line"><span class="comment">#配置ssl缓存</span></span><br><span class="line">off:关闭缓存</span><br><span class="line">none:通知客户端支持ssl session cache, 但实际不支持</span><br><span class="line">builtin[:size]:使用openSSL内建缓存，为每worker进程私有</span><br><span class="line">[shared:name:size]:在各worker之间使用一个共享的缓存，需要定义一个缓存名称和缓存空间大小，一兆可以存储4000个会话信息，多个虚拟主机可以使用相同的缓存名称。</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> time;<span class="comment">#客户端连接可以复用ssl session cache中缓存的有效时长，默认5m</span></span><br></pre></td></tr></table></figure><p>签署证书请看此篇博客：</p><p><a href="https://kinmfer.github.io/2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/#CA%E5%92%8C%E7%94%B3%E8%AF%B7%E8%AF%81%E4%B9%A6">https://kinmfer.github.io/2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/#CA和申请证书</a></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line"><span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line"><span class="comment">#不能放在location中</span></span><br><span class="line"><span class="attribute">ssl_certificate</span> /apps/nginx/certs/www.kinmfer.com.crt; </span><br><span class="line"><span class="attribute">ssl_certificate_key</span> /apps/nginx/certs/www.kinmfer.com.key;</span><br><span class="line"><span class="attribute">ssl_session_cache</span> shared:sslcache:<span class="number">20m</span>;</span><br><span class="line"><span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line"><span class="comment">#重启Nginx并访问验证</span></span><br></pre></td></tr></table></figure><h3 id="实现多域名https"><a href="#实现多域名https" class="headerlink" title="实现多域名https"></a>实现多域名https</h3><p>Nginx支持基于单个IP实现多域名的功能，并且还支持单IP多域名的基础之上实现HTTPS,其实是基于Nginx的SNI (Server Name Indication)功能实现，SNI是为了解决个Nginx服务器内使用一个IP绑定多个域名和证书的功能，其具体功能是客户端在连接到服务器建立SSL链接之前先发送要访问站点的域名(Hostname) ， 这样服务器再根据这个域名返回给客户端一个合适的证书。</p><p>步骤与以上类似</p><h2 id="关于favicon-ico"><a href="#关于favicon-ico" class="headerlink" title="关于favicon.ico"></a>关于favicon.ico</h2><p>favicon.ico文件是浏览器收藏网址时显示的图标，当客户端使用浏览器问页面时，浏览器会自己主动发起请求获取页面的favicon.ico文件，但是当浏览器请求的favicon.ico文件不存在时，服务器会记录404日志，而且浏览器也会显示404报错。</p><p>解决办法</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#一:服务器不记录访问日志:</span></span><br><span class="line"><span class="comment">#location = /favicon.ico &#123;</span></span><br><span class="line"><span class="comment">#log_not_found off;</span></span><br><span class="line"><span class="comment">#access_log off;</span></span><br><span class="line"><span class="comment">#&#125;</span></span><br><span class="line"><span class="comment">#二:将图标保存到指定目录访问:</span></span><br><span class="line"><span class="comment">#location ~ ^/favicon\.ico$</span></span><br><span class="line"><span class="attribute">location</span> = /favicon.ico &#123;</span><br><span class="line"><span class="attribute">root</span> /data/nginx/html/pc/images;</span><br><span class="line"><span class="attribute">expires</span> <span class="number">90d</span>; <span class="comment">#设置文件过期时间</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="安全选项"><a href="#安全选项" class="headerlink" title="安全选项"></a>安全选项</h2><h3 id="自定义Nginx版本号"><a href="#自定义Nginx版本号" class="headerlink" title="自定义Nginx版本号"></a>自定义Nginx版本号</h3><p>更改Nginx源码信息并重新编译Nginx</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vim src/http/ngx_http_header_filter_module.c</span></span><br><span class="line">49 static u_char ngx_http_server_string[] = <span class="string">&quot;Server: kinmfer666&quot;</span> CRLF; <span class="comment">#定义响应报文中的server字段信息</span></span><br></pre></td></tr></table></figure><h3 id="升级OpenSSL版本"><a href="#升级OpenSSL版本" class="headerlink" title="升级OpenSSL版本"></a>升级OpenSSL版本</h3><p>心脏出血(英语: Heartbleed)，也简称为心血漏洞，是一个出现在加密程序库OpenSSL的安全漏洞，该程序库广泛用于实现互联网的传输层安全(TLS) 协议。它于2012年被引入了软件中，2014年4月首次向公众披露。只要使用的是存在缺陷的OpenSSL实例，无论是服务器还是客户端，都可能因此而受到攻击。此问题的原因是在实现TLS的心跳扩展时没有对输入进行适当验证(缺少边界检查)，因此漏洞的名称来源于”心跳”(heartbeat) 。该程序错误属于缓冲区过读，即可以读取的数据比应该允许读取的还多。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">准备OpenSSL源码包:</span><br><span class="line"><span class="comment"># pwd</span></span><br><span class="line">/usr/1ocal/src</span><br><span class="line"><span class="comment"># tar xvf openssl-1.1.1d</span></span><br><span class="line">编译安装Nginx并制定新版本OpenSSL路径:</span><br><span class="line"><span class="comment"># cd /usr/1ocal/src/nginx-1.16.1/</span></span><br><span class="line"><span class="comment">#./configure --prefix=/apps/nginx --user=nginx --group=nginx --with-http_ss1_module --with-http_v2_module --with-http_realip_module --with-http_stub_status_module --with-http_gzip_static_module --with-pcre --with-stream --with-stream_ssl_module --with-stream_realip_module --with-select_module --with-file-aio -- add-module=/usr/1ocal/src/echo-nginx-module --with-openssl=/usr/1ocal/src/openssl-1.1.1d</span></span><br><span class="line"><span class="comment"># make &amp;&amp; make install</span></span><br><span class="line">验证并启动Nginx: </span><br><span class="line"><span class="comment"># /apps/nginx/sbin/nginx -t</span></span><br><span class="line">nginx: the configuration file /apps/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /apps/nginx/conf/nginx.conf <span class="built_in">test</span> is successful</span><br><span class="line"><span class="comment"># /apps/nginx/sbin/nginx</span></span><br></pre></td></tr></table></figure><h2 id="rewrite-功能"><a href="#rewrite-功能" class="headerlink" title="rewrite 功能"></a>rewrite 功能</h2><p>通过正则表达式的匹配来改变URI，可以同时存在一个或多个指令，按照顺序依次对URI进行匹配，rewrite主要是针对用户请求的URL或者是URI做具体处理。</p><p>　用法：rewrite regex replacement [flag];</p><p>　(1) rewrite flag</p><p>　　利用nginx的rewrite的指令，可以实现url的重新跳转，rewrtie有四种不同的flag，分别是redirect(临时重定向)、permanent(永久重定向)、break和last。其中前两种是跳转型的flag，后两种是代理型，跳转型是指由客户端浏览器重新对新地址进行请求，代理型是在WEB服务器内部实现跳转的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redirect；         #临时重定向，重写完成后以临时重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求；使用相对路径,或者http://或https://开头，状态码：302</span><br><span class="line">permanent；        #重写完成后以永久重定向方式直接返回重写后生成的新URL给客户端，由客户端重新发起请求，状态码：301</span><br><span class="line">last；             #重写完成后停止对当前URI在当前location中后续的其它重写操作，而后对新的URL启动新一轮重写检查，不建议在location中使用</span><br><span class="line">break；            #重写完成后停止对当前URL在当前location中后续的其它重写操作，而后直接跳转至重写规则配置块之后的其它配置；结束循环，建议在location中使用</span><br></pre></td></tr></table></figure><p>　(2) 临时重定向与永久重定向</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html/pc;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">rewrite</span> / http://www.aaa.com <span class="literal">permanent</span>;</span><br><span class="line">    <span class="comment">#rewrite / http://www.aaa.com redirect;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(3) last与break</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /break &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/break/(.*)</span> /test<span class="variable">$1</span> <span class="literal">break</span>;        <span class="comment">#break不会跳转到其他的location</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">666</span> <span class="string">&quot;break&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /last &#123;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^/last/(.*)</span> /test<span class="variable">$1</span> <span class="literal">last</span>;     　　 <span class="comment">#last会跳转到其他的location继续匹配新的URI</span></span><br><span class="line">    <span class="attribute">return</span> <span class="number">888</span> <span class="string">&quot;last&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">location</span> /test &#123;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">999</span> <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(4) 自动跳转https</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /usr/local/nginx/certs/www.aaa.com.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /usr/local/nginx/certs/www.aaa.com.key;</span><br><span class="line">    <span class="attribute">ssl_session_cache</span> shared:sslcache:<span class="number">20m</span>;</span><br><span class="line">    <span class="attribute">ssl_session_timeout</span> <span class="number">10m</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.aaa.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> html/aaa.com;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        <span class="attribute">if</span> (<span class="variable">$scheme</span> = http)&#123;    <span class="comment">#不加条件判断，会导致死循环</span></span><br><span class="line">            <span class="attribute">rewrite</span> / https://www.aaa.com <span class="literal">permanent</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">#还一种是对监听的80端口进行跳转</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span> default_server;</span><br><span class="line">    <span class="attribute">server_name</span> www.aaa.com;</span><br><span class="line">    <span class="attribute">rewrite</span><span class="regexp"> ^(.*)$</span> https://<span class="variable">$server_name</span><span class="variable">$1</span> <span class="literal">permanent</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(5) 判断文件是否存在</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">例：当用户访问到公司网站的时输入了一个错误的URL，可以将用户重定向至官网首页</span><br><span class="line"><span class="attribute">location</span> / &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/html/pc;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">if</span> (!-f <span class="variable">$request_filename</span>) &#123;</span><br><span class="line">        <span class="comment">#return 404 &quot;No Page&quot;;</span></span><br><span class="line">        <span class="attribute">rewrite</span> (.*) http://www.aaa.net/index.html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(6) 防盗链</p><p>　　防盗链基于客户端携带的referer实现，referer是记录打开一个页面之前记录是从哪个页面跳转过来的标记信息，如果别人只链接了自己网站图片或某个单独的资源，而不是打开了网站的整个页面，这就是盗链，referer就是之前的那个网站域名，正常的referer信息有以下几种：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">none：            　　#请求报文首部没有referer首部，比如用户直接在浏览器输入域名访问web网站，就没有referer信息。</span><br><span class="line">blocked：        　　 #请求报文有referer首部，但无有效值，比如为空。</span><br><span class="line">server_names：    　　#referer首部中包含本主机名及即nginx 监听的server_name。</span><br><span class="line">arbitrary_string：   #自定义指定字符串，可使用*作通配符。</span><br><span class="line">regular expression： #被指定的正则表达式模式匹配到的字符串,要使用~开头，例如：~.*\.aaa\.com</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /images &#123;</span><br><span class="line">    <span class="attribute">root</span> /usr/local/nginx/pc;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">valid_referers</span> <span class="literal">none</span> <span class="literal">blocked</span> server_names <span class="regexp">*.aaa.com</span> <span class="regexp">www.aaa.*</span> api.online.test/v1/hostlist ~\.google\. ~\.baidu\.;                 <span class="comment">#定义有效的referer</span></span><br><span class="line">    <span class="attribute">if</span> (<span class="variable">$invalid_referer</span>) &#123;        <span class="comment">#假如是使用其他的无效的referer访问：</span></span><br><span class="line">        <span class="attribute">return</span> <span class="number">403</span>;             <span class="comment">#返回状态码403</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代理功能"><a href="#代理功能" class="headerlink" title="代理功能"></a>代理功能</h2><p>Nginx除了可以在企业提供高性能的web服务之外，另外还可以将本身不具备的请求通过某种预定义的协议转发至其它服务器处理，不同的协议就是Nginx服务器与其他服务器进行通信的一种规范，主要在不同的场景使用以下模块实现不同的功能：</p><p>　　ngx_http_proxy_module： 　　将客户端的请求以http协议转发至指定服务器进行处理。<br>　　ngx_stream_proxy_module：　将客户端的请求以tcp协议转发至指定服务器处理。<br>　　ngx_http_fastcgi_module：　　将客户端对php的请求以fastcgi协议转发至指定服务器助理。<br>　　ngx_http_uwsgi_module：　　将客户端对Python的请求以uwsgi协议转发至指定服务器处理。</p><p>配置参数：<br>　　proxy_pass； #用来设置将客户端请求转发给的后端服务器的主机，可以是主机名、IP地址：端口的方式，也可以代理到预先设置的主机群组；</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> /web &#123;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.7.103:80;</span><br><span class="line">    <span class="comment">#不带斜线将访问的/web，等于访问后端服务器 http://192.168.7.103:80/web/index.html，即后端服务器配置的站点根目录要有web目录才可以被访问，这是一个追加/web到后端服务器 http://servername:port/WEB/INDEX.HTML的操作</span></span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.7.103:80/;    <span class="comment">#带斜线，等于访问后端服务器的http://192.168.7.103:80/index.html 内容返回给客户端</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(1) 正向代理配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代理服务器上配置</span></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">resolver</span> <span class="number">8.8.8.8</span>;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">8088</span>;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://<span class="variable">$http_host</span><span class="variable">$request_uri</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#客户端配置</span></span><br><span class="line"><span class="attribute">export</span> <span class="string">&quot;http_proxy=http://[user]:[pass]<span class="variable">@host</span>:port/&quot;</span></span><br><span class="line">如：export http_proxy=http://192.168.145.27:8088</span><br></pre></td></tr></table></figure><p>　(2) 反向代理配置</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.magedu.net;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://192.168.145.7:80/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#也可以对指定location进行代理</span></span><br><span class="line"><span class="attribute">location</span> /web &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.7.103:80/;     <span class="comment">#注意有后面的/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(3) 代理缓存功能</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#代理缓存功能默认关闭，可通过下面参数配置：</span></span><br><span class="line"><span class="attribute">proxy_cache</span> zone | <span class="literal">off</span>;         　　<span class="comment">#指明调用的缓存，或关闭缓存机制；默认off；Context:http, server, location</span></span><br><span class="line"><span class="attribute">proxy_cache_key</span> string;            <span class="comment">#缓存中用于&quot;键&quot;的内容，默认值：proxy_cache_key $scheme$proxy_host$request_uri;</span></span><br><span class="line"><span class="attribute">proxy_cache_valid</span> [code ...] time;    <span class="comment">#定义对特定响应码的响应内容的缓存时长，定义在http&#123;...&#125;中示例:</span></span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">10m</span>;</span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">404</span> <span class="number">1m</span>;</span><br><span class="line"></span><br><span class="line">proxy_cache_path;                #定义可用于proxy功能的缓存；Context:http</span><br><span class="line"><span class="attribute">proxy_cache_path</span> path [levels=levels] [use_temp_path=<span class="literal">on</span>|<span class="literal">off</span>]</span><br><span class="line">keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=<span class="literal">on</span>|<span class="literal">off</span>] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class="line">例：在http配置定义缓存信息</span><br><span class="line"><span class="attribute">proxy_cache_path</span> /var/cache/nginx/proxy_cache        <span class="comment">#定义缓存保存路径，proxy_cache会自动创建</span></span><br><span class="line">levels=<span class="number">1</span>:<span class="number">2</span>:<span class="number">2</span>                <span class="comment">#定义缓存目录结构层次，1:2:2可以生成2^4x2^8x2^8=1048576个目录</span></span><br><span class="line">keys_zone=proxycache:<span class="number">20m</span>    <span class="comment">#指内存中缓存的大小，主要用于存放key和metadata（如：使用次数）</span></span><br><span class="line">inactive=<span class="number">120s</span>               <span class="comment">#缓存有效时间</span></span><br><span class="line">max_size=<span class="number">1g</span>;                <span class="comment">#最大磁盘占用空间，磁盘存入文件内容的缓存空间最大值</span></span><br><span class="line"><span class="comment">#调用缓存功能，需要定义在相应的配置段，如server&#123;...&#125;；或者location等</span></span><br><span class="line"><span class="attribute">proxy_cache</span> proxycache;</span><br><span class="line"><span class="attribute">proxy_cache_key</span> <span class="variable">$request_uri</span>;</span><br><span class="line"><span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">301</span> <span class="number">1h</span>;</span><br><span class="line"><span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line"></span><br><span class="line">proxy_cache_use_stale;　　　　#在被代理的后端服务器出现哪种情况下，可直接使用过期的缓存响应客户端</span><br><span class="line"><span class="attribute">proxy_cache_use_stale</span> <span class="literal">error</span> | timeout | invalid_header | updating | http_500 | http_502 | http_503 | http_504 | http_403 | http_404 | <span class="literal">off</span> ; 　　<span class="comment">#默认是off</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_cache_methods</span> GET | HEAD | POST ...;</span><br><span class="line"><span class="comment">#对哪些客户端请求方法对应的响应进行缓存，GET和HEAD方法总是被缓存</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">proxy_set_header</span> field value;</span><br><span class="line"><span class="comment">#设定发往后端主机的请求报文的请求首部的值</span></span><br><span class="line">Context: http, server, location</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line"><span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">请求报文的标准格式如下：</span><br><span class="line">X-Forwarded-For: client1, proxy1, proxy2</span><br><span class="line"></span><br><span class="line">[root@www ~]# vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"><span class="comment">#配置在nginx.conf http配置段</span></span><br><span class="line"><span class="attribute">proxy_cache_path</span> /usr/local/nginx/proxycache levels=<span class="number">1</span>:<span class="number">1</span>:<span class="number">1</span> keys_zone=proxycache:<span class="number">20m</span> inactive=<span class="number">120s</span> max_size=<span class="number">1g</span>; </span><br><span class="line">[root@www ~]# vim /usr/local/nginx/conf/conf.d/pc.conf</span><br><span class="line"><span class="comment">#要缓存的URL 或者放在server配置项对所有URL都进行缓存</span></span><br><span class="line"><span class="attribute">location</span> /web &#123;     </span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.27.7:80/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> clientip <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_cache</span> proxycache;</span><br><span class="line">    <span class="attribute">proxy_cache_key</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">301</span> <span class="number">1h</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(4) 添加头部报文信息</p><p>　　Syntax: add_header name value [always];<br>　　Default: —<br>　　Context: http, server, location, if in location</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#添加自定义首部</span></span><br><span class="line"><span class="attribute">add_header</span> name value [always];</span><br><span class="line"><span class="attribute">add_header</span> X-Via <span class="variable">$server_addr</span>;</span><br><span class="line"><span class="attribute">add_header</span> X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line"><span class="attribute">add_header</span> X-Accel <span class="variable">$server_name</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#添加自定义响应信息的尾部， 1.13.2版后支持</span></span><br><span class="line"><span class="attribute">add_trailer</span> name value [always];</span><br><span class="line"></span><br><span class="line"><span class="comment">#nginx配置：</span></span><br><span class="line"><span class="attribute">location</span> /web &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://192.168.27.7:80/;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> clientip <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_cache</span> proxycache;</span><br><span class="line">    <span class="attribute">proxy_cache_key</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> <span class="number">200</span> <span class="number">302</span> <span class="number">301</span> <span class="number">1h</span>;</span><br><span class="line">    <span class="attribute">proxy_cache_valid</span> any <span class="number">1m</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Via <span class="variable">$server_addr</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Cache <span class="variable">$upstream_cache_status</span>;</span><br><span class="line">    <span class="attribute">add_header</span> X-Accel <span class="variable">$server_name</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h2><p>(1) http的负载均衡-upstream</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">配置参数：</span><br><span class="line"><span class="attribute">upstream</span> name &#123;        <span class="comment">#自定义一组服务器，配置在http内</span></span><br><span class="line">    <span class="attribute">server</span> address [parameters];    <span class="comment">#配置一个后端web服务器，配置在upstream内，至少要有一个server服务器配置。</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#server支持的parameters如下：</span></span><br><span class="line">weight=number         #设置权重，默认为1</span><br><span class="line">max_conns=number      #给当前server设置最大活动链接数，默认为0表示没有限制</span><br><span class="line">max_fails=number      #对后端服务器连续监测失败多少次就标记为不可用</span><br><span class="line">fail_timeout=time     #对后端服务器的单次监测超时时间，默认为10秒</span><br><span class="line"><span class="attribute">backup</span>                <span class="comment">#设置为备份服务器，当所有服务器不可用时将重新启用次服务器</span></span><br><span class="line">down                  <span class="comment">#标记为down状态</span></span><br><span class="line">resolve               <span class="comment">#当server定义的是主机名的时候，当A记录发生变化会自动应用新IP而不用重启Nginx</span></span><br><span class="line"></span><br><span class="line">hash KEY consistent；</span><br><span class="line"><span class="comment">#基于指定key做hash计算，使用consistent参数，将使用ketama一致性hash算法，适用于后端是Cache服务器（如varnish）时使用，consistent定义使用一致性hash运算，一致性hash基于取模运算。所谓取模运算，就是计算两个数相除之后的余数，比如10%7=3, 7%4=3</span></span><br><span class="line">hash <span class="variable">$request_uri</span> consistent;     <span class="comment">#基于用户请求的uri做hash</span></span><br><span class="line">ip_hash；                         #源地址hash调度方法，基于的客户端的remote_addr(源地址)做hash计算，以实现会话保持</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">调度算法：</span><br><span class="line">    rr：　　    　　 轮询，默认的调度方式，将所有请求都按照时间顺序分配到不同的服务上；</span><br><span class="line">    weight：    　　权重，指定每个服务的权重比例，weight和访问比率成正比；</span><br><span class="line">    ip_hash：  　　 指定负载均衡器按照基于客户端IP的分配方式，这个方法确保了相同的客户端的请求一直发送到相同的服务器，以保证session会话。这样每个访客都固定访问一个后端服务器，可以解决session不能跨服务器的问题；</span><br><span class="line">    least_conn：　　把请求转发给连接数较少的后端服务器。轮询算法是把请求平均的转发给各个后端，使它们的负载大致相同；但是，有些请求占用的时间很长，会导致其所在的后端负载较高。这种情况下，least_conn这种方式就可以达到更好的负载均衡效果</span><br><span class="line">    fair：　　　　　 按照服务器端的响应时间来分配请求，响应时间短的优先分配；</span><br><span class="line">    url_hash：　　　按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，要配合缓存命中来使用。同一个资源多次请求，可能会到达不同的服务器上，导致不必要的多次下载，缓存命中率不高，以及一些资源时间的浪费;　　　　　　　　　　　 而使用url_hash，可以使得同一个url（也就是同一个资源请求）会到达同一台服务器，一旦缓存住了资源，再此收到请求，就可以从缓存中读取；</span><br><span class="line">例：</span><br><span class="line"><span class="attribute">upstream</span> webserver &#123;</span><br><span class="line">    <span class="comment">#hash $request_uri consistent;</span></span><br><span class="line">    <span class="comment">#ip_hash；</span></span><br><span class="line">    <span class="comment">#least_conn;</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.27.7:80</span> weight=<span class="number">1</span> fail_timeout=<span class="number">5s</span> max_fails=<span class="number">3</span>;             <span class="comment">#后端服务器状态监测</span></span><br><span class="line">    <span class="attribute">server</span> <span class="number">192.168.27.17:80</span> weight=<span class="number">1</span> fail_timeout=<span class="number">5s</span> max_fails=<span class="number">3</span> backup;</span><br><span class="line">&#125;</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.aaa.net;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html index.php;</span><br><span class="line">        <span class="attribute">root</span> /usr/local/nginx/html/pc;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> /web &#123;</span><br><span class="line">        <span class="attribute">index</span> index.html;</span><br><span class="line">        <span class="attribute">proxy_pass</span> http://webserver/;</span><br><span class="line">        <span class="attribute">proxy_set_header</span> X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;     <span class="comment">#客户端IP透传，添加客户端IP到报文头部</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　(2) tcp的负载均衡</p><p>　　Nginx在1.9.0版本开始支持tcp模式的负载均衡，在1.9.13版本开始支持udp协议的负载，udp主要用于DNS的域名解析，其配置方式和指令和http代理类似，其基于ngx_stream_proxy_module模块实现tcp负载，另外基于模块ngx_stream_upstream_module实现后端。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">配置参数：</span><br><span class="line"><span class="section">stream</span> &#123;     　　　　<span class="comment">#定义stream</span></span><br><span class="line">    <span class="attribute">upstream</span> backend &#123;                        <span class="comment">#定义后端服务器</span></span><br><span class="line">        <span class="attribute">hash</span> <span class="variable">$remote_addr</span> consistent;         <span class="comment">#定义调度算法</span></span><br><span class="line">        <span class="attribute">server</span> backend1.example.com:<span class="number">12345</span> weight=<span class="number">5</span>;         <span class="comment">#定义具体server</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">127.0.0.1:12345</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">        <span class="attribute">server</span> unix:/tmp/backend3;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">upstream</span> dns &#123;                            <span class="comment">#定义后端服务器</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.0.1:53535</span>;             <span class="comment">#定义具体server</span></span><br><span class="line">        <span class="attribute">server</span> dns.example.com:<span class="number">53</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;                                  <span class="comment">#定义server</span></span><br><span class="line">        <span class="attribute">listen</span> <span class="number">12345</span>;                         <span class="comment">#监听IP:PORT</span></span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">1s</span>;             <span class="comment">#连接超时时间</span></span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">3s</span>;                     <span class="comment">#转发超时时间</span></span><br><span class="line">        <span class="attribute">proxy_pass</span> backend;                   <span class="comment">#转发到具体服务器组</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">127.0.0.1:53</span> udp reuseport;</span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">20s</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> dns;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> [::<span class="number">1</span>]:<span class="number">12345</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> unix:/tmp/stream.socket;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">实例1：Redis负载均衡</span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> redis_server &#123;</span><br><span class="line">        <span class="comment">#hash $remote_addr consistent;</span></span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.145.27:6379</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">192.168.145.7:6379</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">3s</span>;</span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">3s</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> redis_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">实例2：mysql负载均衡</span><br><span class="line"><span class="section">stream</span> &#123;</span><br><span class="line">    <span class="attribute">upstream</span> mysql_server &#123;</span><br><span class="line">        least_conn;</span><br><span class="line">        <span class="attribute">server</span> <span class="number">192.168.145.27:3306</span> max_fails=<span class="number">3</span> fail_timeout=<span class="number">30s</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">192.168.145.7:3306</span>;</span><br><span class="line">        <span class="attribute">proxy_connect_timeout</span> <span class="number">6s</span>;</span><br><span class="line">        <span class="attribute">proxy_timeout</span> <span class="number">15s</span>;</span><br><span class="line">        <span class="attribute">proxy_pass</span> mysql_server;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="FastCGI配置"><a href="#FastCGI配置" class="headerlink" title="FastCGI配置"></a>FastCGI配置</h2><p>Nginx基于模块ngx_http_fastcgi_module实现通过fastcgi协议将指定的客户端请求转发至php-fpm处理，其配置参数如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">fastcgi_pass</span> address;        <span class="comment">#转发请求到后端服务器，address为后端的fastcgi server的地址，可用位置：location, if in location </span></span><br><span class="line"><span class="attribute">fastcgi_index</span> name;            <span class="comment">#fastcgi默认的主页资源，示例：fastcgi_index index.php;</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> parameter value [if_not_empty];        <span class="comment">#设置传递给FastCGI服务器的参数值，可以是文本，变量或组合，可用于将Nginx的内置变量赋值给自定义key</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> REMOTE_ADDR <span class="variable">$remote_addr</span>;     <span class="comment">#客户端源IP</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> REMOTE_PORT <span class="variable">$remote_port</span>;     <span class="comment">#客户端源端口</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> SERVER_ADDR <span class="variable">$server_addr</span>;     <span class="comment">#请求的服务器IP地址</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> SERVER_PORT <span class="variable">$server_port</span>;     <span class="comment">#请求的服务器端口</span></span><br><span class="line"><span class="attribute">fastcgi_param</span> SERVER_NAME <span class="variable">$server_name</span>;     <span class="comment">#请求的server name</span></span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Nginx默认配置示例：</span><br><span class="line"><span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">    <span class="attribute">root</span> html;        <span class="comment">#$document_root 调用root目录</span></span><br><span class="line">    <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">    <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">    <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME /scripts<span class="variable">$fastcgi_script_name</span>;     <span class="comment">#默认脚本路径</span></span><br><span class="line">    <span class="comment">#fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;    #或用$document_root，</span></span><br><span class="line">    <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">fastcgi缓存定义：</span><br><span class="line"><span class="attribute">fastcgi_cache_path</span> path [levels=levels] [use_temp_path=<span class="literal">on</span>|<span class="literal">off</span>] keys_zone=name:size [inactive=time] [max_size=size] [manager_files=number] [manager_sleep=time] [manager_threshold=time] [loader_files=number] [loader_sleep=time] [loader_threshold=time] [purger=<span class="literal">on</span>|<span class="literal">off</span>] [purger_files=number] [purger_sleep=time] [purger_threshold=time];</span><br><span class="line"><span class="attribute">path</span>                   <span class="comment">#缓存位置为磁盘上的文件系统路径</span></span><br><span class="line">max_size=size          <span class="comment">#磁盘path路径中用于缓存数据的缓存空间上限</span></span><br><span class="line">levels=levels：        <span class="comment">#缓存目录的层级数量，以及每一级的目录数量，levels=ONE:TWO:THREE，示例：leves=1:2:2</span></span><br><span class="line">keys_zone=name:size    <span class="comment">#设置缓存名称及k/v映射的内存空间的名称及大小</span></span><br><span class="line">inactive=time         <span class="comment">#缓存有效时间，默认10分钟，需要在指定时间满足fastcgi_cache_min_uses 次数被视为活动缓存</span></span><br><span class="line"></span><br><span class="line">fastcgi缓存调用：</span><br><span class="line">fastcgi_cache zone | <span class="literal">off</span>;        <span class="comment">#调用指定的缓存空间来缓存数据，可用位置：http, server, location</span></span><br><span class="line"><span class="attribute">fastcgi_cache_key</span> string;        <span class="comment">#定义用作缓存项的key的字符串，示例：fastcgi_cache_key $request_uri;</span></span><br><span class="line"><span class="attribute">fastcgi_cache_methods</span> GET | HEAD | POST ...;        <span class="comment">#为哪些请求方法使用缓存</span></span><br><span class="line"><span class="attribute">fastcgi_cache_min_uses</span> number;        <span class="comment">#缓存空间中的缓存项在inactive定义的非活动时间内至少要被访问到此处所指定的次数方可被认作活动项</span></span><br><span class="line"><span class="attribute">fastcgi_keep_conn</span> <span class="literal">on</span> | <span class="literal">off</span>;                <span class="comment">#收到后端服务器响应后，fastcgi服务器是否关闭连接，建议启用长连接</span></span><br><span class="line"><span class="attribute">fastcgi_cache_valid</span> [code ...] time;    <span class="comment">#不同的响应码各自的缓存时长</span></span><br><span class="line"><span class="attribute">fastcgi_hide_header</span> field;                 <span class="comment">#隐藏响应头指定信息</span></span><br><span class="line"><span class="attribute">fastcgi_pass_header</span> field;                 <span class="comment">#返回响应头指定信息，默认不会将Status、X-Accel-...返回</span></span><br></pre></td></tr></table></figure><p>Nginx与php-fpm实现：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">(1) 安装php-fpm</span><br><span class="line">[root@www ~]# yum install php-fpm php-mysql -y</span><br><span class="line">[root@www ~]# systemctl start php-fpm</span><br><span class="line">(2) 准备php测试页</span><br><span class="line">[root@www ~]# vim /usr/local/nginx/html/aaa.com/index.php</span><br><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br><span class="line">?&gt;</span><br><span class="line">(3) nginx配置转发</span><br><span class="line">[root@www ~]# vim /usr/local/nginx/conf/conf.d/aaa.conf</span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> www.aaa.com;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">        <span class="attribute">root</span> html/aaa.com;</span><br><span class="line">        <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attribute">location</span> <span class="regexp">~ \.php$</span> &#123;</span><br><span class="line">        <span class="attribute">root</span> html/aaa.com;</span><br><span class="line">        <span class="attribute">fastcgi_pass</span> <span class="number">127.0.0.1:9000</span>;</span><br><span class="line">        <span class="attribute">fastcgi_index</span> index.php;</span><br><span class="line">        <span class="attribute">fastcgi_param</span> SCRIPT_FILENAME <span class="variable">$document_root</span><span class="variable">$fastcgi_script_name</span>;</span><br><span class="line">        <span class="attribute">include</span> fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">(3) 重启nginx并使用浏览器测试</span><br><span class="line">[root@www ~]# nginx -s reload</span><br><span class="line"></span><br><span class="line">php相关配置优化：</span><br><span class="line">[root@www ~]# grep &quot;^[a-Z]&quot; /etc/php-fpm.conf</span><br><span class="line">include=/etc/php-fpm.d/*.conf</span><br><span class="line"><span class="attribute">pid</span> = /run/php-fpm/php-fpm.pid</span><br><span class="line">error_log = /var/log/php-fpm/error.log</span><br><span class="line">daemonize = <span class="literal">yes</span>        <span class="comment">#是否后台启动</span></span><br><span class="line"></span><br><span class="line">[root<span class="variable">@www</span> ~]<span class="comment"># grep &quot;^[a-Z]&quot; /etc/php-fpm.d/www.conf </span></span><br><span class="line">listen = <span class="number">127.0.0.1:9000</span>                    <span class="comment">#监听地址及IP</span></span><br><span class="line">listen.allowed_clients = <span class="number">127.0.0.1</span>        <span class="comment">#允许客户端从哪个源IP地址访问，要允许所有则在行首加 ; 注释即可</span></span><br><span class="line">user = nginx                            <span class="comment">#php-fpm启动的用户和组，会涉及到后期文件的权限问题</span></span><br><span class="line">group = nginx</span><br><span class="line">pm = dynamic                            <span class="comment">#动态模式进程管理</span></span><br><span class="line">pm.max_children = <span class="number">500</span>                    <span class="comment">#静态方式下开启的php-fpm进程数量，在动态方式下他限定php-fpm的最大进程数</span></span><br><span class="line">pm.start_servers = <span class="number">100</span>                    <span class="comment">#动态模式下初始进程数，必须大于等于pm.min_spare_servers和小于等于pm.max_children的值</span></span><br><span class="line">pm.min_spare_servers = <span class="number">100</span>                <span class="comment">#最小空闲进程数</span></span><br><span class="line">pm.max_spare_servers = <span class="number">200</span>                <span class="comment">#最大空闲进程数</span></span><br><span class="line">pm.max_requests = <span class="number">500000</span>                <span class="comment">#进程累计请求回收值，会重启</span></span><br><span class="line">pm.status_path = /pm_status             <span class="comment">#状态访问URL</span></span><br><span class="line">ping.path = /ping                         <span class="comment">#ping访问动地址</span></span><br><span class="line">ping.response = ping-pong                 <span class="comment">#ping返回值</span></span><br><span class="line">slowlog = /var/log/php-fpm/www-slow.log    <span class="comment">#慢日志路径</span></span><br><span class="line">php_admin_value[error_log] = /var/log/php-fpm/www-<span class="literal">error</span>.log        <span class="comment">#错误日志</span></span><br><span class="line">php_admin_flag[log_errors] = <span class="literal">on</span></span><br><span class="line">php_value[session.save_handler] = files                            <span class="comment">#phpsession保存方式及路径</span></span><br><span class="line">php_value[session.save_path] = /var/lib/php/session                <span class="comment">#当时使用file保存session的文件路径</span></span><br></pre></td></tr></table></figure><h1 id="系统参数优化"><a href="#系统参数优化" class="headerlink" title="系统参数优化"></a>系统参数优化</h1><p>默认的Linux内核参数考虑的是最通用场景，不符合用于支持高并发访问的Web服务器的定义，根据业务特点来进行调整，当Nginx作为静态web内容服务器、反向代理或者提供压缩服务器的服务器时，内核参数的调整都是不同的，此处针对最通用的、使Nginx支持更多并发请求的TCP网络参数做简单的配置，修改/etc/sysctl.conf来更改内核参数。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 1000000</span><br><span class="line"><span class="comment">#表示单个进程较大可以打开的句柄数</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line"><span class="comment">#参数设置为 1 ，表示允许将TIME_WAIT状态的socket重新用于新的TCP链接，这对于服务器来说意义重大，因为总有大量TIME_WAIT状态的链接存在</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_keepalive_time = 600</span><br><span class="line"><span class="comment">#当keepalive启动时，TCP发送keepalive消息的频度；默认是2小时，将其设置为10分钟，可更快的清理无效链接</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line"><span class="comment">#当服务器主动关闭链接时，socket保持在FIN_WAIT_2状态的较大时间</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line"><span class="comment">#表示操作系统允许TIME_WAIT套接字数量的较大值，如超过此值，TIME_WAIT套接字将立刻被清除并打印警告信息,默认为8000，过多的TIME_WAIT套接字会使Web服务器变慢</span></span><br><span class="line"></span><br><span class="line">net.ipv4.ip_local_port_range = 1024 65000</span><br><span class="line"><span class="comment">#定义UDP和TCP链接的本地端口的取值范围</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_rmem = 10240 87380 12582912</span><br><span class="line"><span class="comment">#定义了TCP接受缓存的最小值、默认值、较大值</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_wmem = 10240 87380 12582912</span><br><span class="line"><span class="comment">#定义TCP发送缓存的最小值、默认值、较大值</span></span><br><span class="line"></span><br><span class="line">net.core.netdev_max_backlog = 8096</span><br><span class="line"><span class="comment">#当网卡接收数据包的速度大于内核处理速度时，会有一个列队保存这些数据包。这个参数表示该列队的较大值</span></span><br><span class="line"></span><br><span class="line">net.core.rmem_default = 6291456</span><br><span class="line"><span class="comment">#表示内核套接字接受缓存区默认大小</span></span><br><span class="line"></span><br><span class="line">net.core.wmem_default = 6291456</span><br><span class="line"><span class="comment">#表示内核套接字发送缓存区默认大小</span></span><br><span class="line"></span><br><span class="line">net.core.rmem_max = 12582912</span><br><span class="line"><span class="comment">#表示内核套接字接受缓存区较大大小</span></span><br><span class="line"></span><br><span class="line">net.core.wmem_max = 12582912</span><br><span class="line"><span class="comment">#表示内核套接字发送缓存区较大大小</span></span><br><span class="line"></span><br><span class="line">注意：以上的四个参数，需要根据业务逻辑和实际的硬件成本来综合考虑</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line"><span class="comment">#与性能无关。用于解决TCP的SYN攻击</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line"><span class="comment">#这个参数表示TCP三次握手建立阶段接受SYN请求列队的较大长度，默认1024，将其设置的大一些可使出现Nginx繁忙来不及accept新连接时，Linux不至于丢失客户端发起的链接请求</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_tw_recycle = 1</span><br><span class="line"><span class="comment">#这个参数用于设置启用timewait快速回收</span></span><br><span class="line"></span><br><span class="line">net.core.somaxconn=262114</span><br><span class="line"><span class="comment">#选项默认值是128，这个参数用于调节系统同时发起的TCP连接数，在高并发的请求中，默认的值可能会导致链接超时或者重传，因此需要结合高并发请求数来调节此值。</span></span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_max_orphans=262114</span><br><span class="line"><span class="comment">#选项用于设定系统中最多有多少个TCP套接字不被关联到任何一个用户文件句柄上。如果超过这个数字，孤立链接将立即被复位并输出警</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网站服务 </tag>
            
            <tag> Nginx </tag>
            
            <tag> I/O模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>杂项</title>
      <link href="2020/05/22/%E6%9D%82%E9%A1%B9/"/>
      <url>2020/05/22/%E6%9D%82%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="经验"><a href="#经验" class="headerlink" title="经验"></a>经验</h1><h2 id="预防误执行rm-rf"><a href="#预防误执行rm-rf" class="headerlink" title="预防误执行rm -rf /*"></a>预防误执行<code>rm -rf /*</code></h2><ol><li><p><code>rm -rf</code>删除目录是要判断目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">work_path=`<span class="built_in">pwd</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment">#如果目录不为空，才执行删除操作</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$&#123;work_path&#125;</span> != <span class="string">&quot;&quot;</span> ];<span class="keyword">then</span></span><br><span class="line">    rm -fr <span class="variable">$&#123;work_path&#125;</span>/*</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p>在执行删除目录操作前，先判断要删除的目录是否为空，不为空才执行删除操作。</p></li><li><p>Shell脚本指定 <code>set -u</code></p><p>执行脚本的时候，如果遇到不存在的变量，Bash 默认忽略它。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$a</span></span><br><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure><p>上面代码中，$a 是一个不存在的变量，执行结果如下。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line"></span><br><span class="line">hello</span><br></pre></td></tr></table></figure><p>可以发现，<code>echo $a</code> 输出了一个空行，Bash 忽略了不存在的 ​$a，然后继续执行 echo hello。</p><p>最好是遇到变量不存在，脚本应该报错，而不是一声不响地往下执行。</p><p><code>set -u </code>就用来改变这种行为，在脚本加上它，遇到不存在的变量就会报错，并停止执行。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">set</span> -u</span><br><span class="line"></span><br><span class="line">rm -rf <span class="variable">$a</span>/*</span><br><span class="line"><span class="built_in">echo</span> hello</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ bash test.sh</span><br><span class="line"></span><br><span class="line">test.sh: line 4: a: unbound variable</span><br></pre></td></tr></table></figure><p>可以看到，因为 a 是未定义变量，脚本报错了，并且不再执行后面的语句。</p></li><li><p><code>safe-rm</code>替换<code>rm</code></p><p><code>safe-rm</code> 是一个开源软件工具，这名字听起来就很安全嘛，所以它是用来替代不太安全的 rm。</p><p>它可以在 /etc/safe-rm.conf 中配置路径黑名单，定义哪些不能被 safe-rm 删除。</p><p>我们可以将 safe-rm 更名为 rm，假设定义了 /etc/ 无能被删除，那么删除 /etc 时就会报错：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf /etc/</span><br><span class="line">safe-rm: skipping /etc/</span><br></pre></td></tr></table></figure></li><li><p>建立回收站机制</p><p>Windows 是有回收站的，即使误删了，也可以在回收站恢复。所以，我们也可以在 Linux 实现回收站的机制。</p><p>实现思路：</p><p>删除文件时，它并不真正执行删除操作，而是将文件移动到一个特定目录，可以设置定时清除回收站，或者在回收站里面的文件大小达到一定容量时（或者用时间做判断）执行删除操作以腾出空间。</p><p>可以写个 Shell 脚本替换 rm 命令，或者在需要删除文件的时候使用 mv 命令将文件移动到回收站。　</p><ol><li>创建回收站目录</li></ol><p>​    <code>mkdir /home/.trash</code></p><ol start="2"><li>编写remove.sh脚本，内容如下</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">TRASH_DIR=<span class="string">&quot;/home/.trash&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $*;<span class="keyword">do</span></span><br><span class="line">STAMP=`data +s`</span><br><span class="line">fileName=`basename <span class="variable">$i</span>`</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将对应文件 mv 至 .trash 目录</span></span><br><span class="line">mv <span class="variable">$i</span> <span class="variable">$&#123;TRASH_DIR&#125;</span>/<span class="variable">$&#123;fileName&#125;</span>.<span class="variable">$&#123;STAMP&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ol start="3"><li>修改~/.bashrc，用我们自建的 remove.sh 替代rm命令</li></ol><p>​    <code>alias rm=&quot;sh /home/remove.sh&quot;</code></p><ol start="4"><li>设置crontab，定期清空垃圾箱，如每天0点清空垃圾箱</li></ol><p>​    <code>0 0 * * * /usr/bin/rm -rf /home/.trash/*</code></p><ol start="5"><li>最后执行以下命令，使之生效</li></ol><p>​    <code>source ~/.bashrc</code></p></li><li><p>根文件挂载成只读</p><p>在 /etc/fstab 文件，把 / 文件系统挂载成只读的方式。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">~]$ cat /etc/fstab</span><br><span class="line"><span class="comment"># /etc/fstab: static file system informat ion .</span></span><br><span class="line"><span class="comment">#&lt;file system&gt; &lt;mount pt&gt; &lt;type&gt; &lt;opt ions&gt;         &lt;dump&gt;     &lt;pass&gt;</span></span><br><span class="line">/dev/root         /        ext4  remount,ro,noatime   0           1</span><br></pre></td></tr></table></figure><p>其中 remount,ro，就表示只读的方式挂载。</p><p>只读的方式挂载后，进行删除操作是无法成功的：</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200522184043090.png" alt="image-20200522184043090"></p></li></ol><p>总结：</p><p>涉及到 <code>rm -rf</code> 命令的代码，要留个心眼，要反复检查，要做好预防误执行 <code>rm -fr /*</code>，并在测试机验证完后，再拖到实体机上跑，千万不可大意。</p><p>就算的发生了 <code>rm -fr /*</code>，要第一时间停掉它，并且要做到三不要：</p><ul><li>不要慌，不要心跳爆炸（稳住稳住）；</li><li>不要隐瞒删库事件（不丢人）；</li><li>不要重启服务器或断开 ssh 会话（保留现场）。</li></ul><p>只要立马掐断 <code>rm -fr /*</code> ，它是干不死我们的。</p><p>利用当下环境剩有的命令，冷静分析，是有机会恢复的。</p><h1 id="坑"><a href="#坑" class="headerlink" title="坑"></a>坑</h1><h2 id="Windows10升级导致Ubuntu进不了grub界面"><a href="#Windows10升级导致Ubuntu进不了grub界面" class="headerlink" title="Windows10升级导致Ubuntu进不了grub界面"></a>Windows10升级导致Ubuntu进不了grub界面</h2><p>环境：Windows10+Ubuntu双系统</p><p>原因：Windows10大版本升级</p><p>解决：</p><p>以管理员的身份在cmd中敲入命令：</p><p><code>bcdedit /set &quot;&#123;bootmgr&#125;&quot; path \EFI\ubuntu\grubx64.efi</code></p><p>然后重启就有ubuntu引导了，亲测有效</p><p>还有其他修复命令的，自行百度。</p><h2 id="打开office提示“应用程序无法正常启动-0xc0000142-“"><a href="#打开office提示“应用程序无法正常启动-0xc0000142-“" class="headerlink" title="打开office提示“应用程序无法正常启动(0xc0000142)“"></a>打开office提示“应用程序无法正常启动(0xc0000142)“</h2><p>打开office（Word，Excel等）提示“应用程序无法正常启动(0xc0000142)。请单击确认关闭应用程序”</p><p>解决：</p><ul><li><p>以管理员身份打开 Windows PowerShell</p></li><li><p>输入<code>DISM.exe /Online /Cleanup-image /Restorehealth</code></p></li><li><p>输入<code>sfc /scannow</code></p></li></ul><p>一定要等每一条命令执行结束。之后重启电脑即可。若无效，请自行百度其他办法。</p>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 坑 </tag>
            
            <tag> 经验 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站架构-LAMP</title>
      <link href="2020/05/22/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-LAMP/"/>
      <url>2020/05/22/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-LAMP/</url>
      
        <content type="html"><![CDATA[<h1 id="LAMP介绍"><a href="#LAMP介绍" class="headerlink" title="LAMP介绍"></a>LAMP介绍</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200518162850038.png" alt="image-20200518162850038"></p><ul><li><p>LAM(M)P： </p><p>L：linux A：apache (httpd)</p><p>M：mysql, mariadb M：memcached P：php, perl, python</p></li><li><p>WEB资源类型：</p><ul><li>静态资源：原始形式与响应内容一致，在客户端浏览器执行</li><li>动态资源：原始形式通常为程序文件，需要在服务器端执行之后，将执行结果返回给客户端</li></ul></li><li><p>Web相关语言</p><ul><li>客户端技术： html，javascript，css</li><li>服务器端技术：php， jsp，python，asp</li></ul></li></ul><h2 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h2><ul><li><p>CGI：Common Gateway Interface</p><p>可以让一个客户端，从网页浏览器通过http服务器向执行在网络服务器上的程序传输数据；CGI描述了客户端和服务器程序之间传输的一种标准</p></li><li><p>请求流程：</p><p>Client – (http) –&gt; httpd – (cgi) –&gt; application server (program file)– (mysql) –&gt; mysql</p></li><li><p>php: 脚本编程语言、嵌入到html中的嵌入式web程序语言基于zend编译成opcode（二进制格式的字节码，重复运行，可省略编译环境）</p></li></ul><h2 id="LAMP工作原理"><a href="#LAMP工作原理" class="headerlink" title="LAMP工作原理"></a>LAMP工作原理</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200518163158402.png" alt="image-20200518163158402"></p><h1 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>官网：<a href="https://www.php.net/">https://www.php.net/</a></li><li>PHP是通用服务器端脚本编程语言，主要用于web开发实现动态web页面，也是最早实现将脚本嵌入HTML源码文档中的服务器端脚本语言之一。同时，php还提供了一个命令行接口，因此， 其也可以在大多数系统上作为一个独立的shell来使用</li><li>Rasmus Lerdorf于1994年开始开发PHP，最初是一组被Rasmus Lerdorf称作“Personal Home Page Tool” 的Perl脚本， 可以用于显示作者的简历并记录用户对其网站的访问。后来， Rasmus Lerdorf使用C语言将这些Perl脚本重写为CGI程序，还为其增加了运行Web forms的能 力以及与数据库交互的特性，并将其重命名为“Personal Home Page/Forms Interpreter”或 “PHP/FI”。此时，PHP/FI已经可以用于开发简单的动态web程序了，这即PHP1.0。1995年6月，Rasmus Lerdorf把它的PHP发布于comp.infosystems.<a href="http://www.authoring.cgi/">www.authoring.cgi</a><a href="http://www.authoring.cgi/"> </a>Usenet讨论组， 从此PHP开始走进人们的视野。1997年，其2.0版本发布</li><li>1997年，两名以色列程序员Zeev Suraski和Andi Gutmans重写的PHP的分析器(parser)成为 PHP发展到3.0的基础，而且从此将PHP重命名为PHP: Hypertext Preprocessor。此后，这两 名程序员开始重写整个PHP核心，并于1999年发布了Zend Engine 1.0，这也意味着PHP 4.0的 诞生。2004年7月，Zend Engine 2.0发布，由此也将PHP带入了PHP 5时代。PHP5包含了许 多重要的新特性，如增强的面向对象编程的支持、支持PDO(PHP Data Objects)扩展机制以及 一系列对PHP性能的改进</li></ul><h2 id="Zend-Engine"><a href="#Zend-Engine" class="headerlink" title="Zend Engine"></a>Zend Engine</h2><ul><li>Zend Engine是开源的、PHP脚本语言的解释器，它最早是由以色列理工学院 (Technion)的学生Andi Gutmans和Zeev Suraski所开发，Zend也正是此二人 名字的合称。后来两人联合创立了Zend Technologies公司</li><li>Zend Engine 1.0于1999年随PHP 4发布，由C语言开发且经过高度优化，并能 够做为PHP的后端模块使用。Zend Engine为PHP提供了内存和资源管理的功 能以及其它的一些标准服务，其高性能、可靠性和可扩展性在促进PHP成为一 种流行的语言方面发挥了重要作用</li><li>Zend Engine的出现将PHP代码的处理过程分成了两个阶段：首先是分析PHP代码并将其转换为称作Zend opcode的二进制格式opcode(类似Java的字节码)， 并将其存储于内存中；第二阶段是使用Zend Engine去执行这些转换后的 Opcode</li></ul><h2 id="Opcode"><a href="#Opcode" class="headerlink" title="Opcode"></a>Opcode</h2><ul><li><p>Opcode是一种PHP脚本编译后的中间语言，类似于Java的ByteCode,或者.NET的MSL。PHP执行PHP脚本代码一般会经过如下4个步骤(确切的来说， 应该是PHP的语言引擎Zend)</p><ol><li>Scanning 词法分析,将PHP代码转换为语言片段(Tokens) </li><li>Parsing 语义分析,将Tokens转换成简单而有意义的表达式</li><li>Compilation 将表达式编译成Opcode</li><li>Execution 顺次执行Opcode，每次一条，从而实现PHP脚本的功能</li></ol></li><li><p>扫描–&gt;分析–&gt;编译–&gt;执行</p></li></ul><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>配置文件：/etc/php.ini, /etc/php.d/*.ini</p></li><li><p>配置文件在php解释器启动时被读取</p></li><li><p>对配置文件的修改生效方法 </p><ul><li>Modules：重启httpd服务</li><li>FastCGI：重启php-fpm服务</li></ul></li><li><p>/etc/php.ini配置文件格式： </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[foo]：Section Header </span><br><span class="line">directive &#x3D; value</span><br></pre></td></tr></table></figure><p>注释符：较新的版本中，已经完全使用;进行注释 #：纯粹的注释信息</p><p>;：用于注释可启用的directive</p></li></ul><h2 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h2><ul><li>php.ini的核心配置选项文档：<a href="http://php.net/manual/zh/ini.core.php">http://php.net/manual/zh/ini.core.php</a></li><li>php.ini配置选项列表：<a href="http://php.net/manual/zh/ini.list.php">http://php.net/manual/zh/ini.list.php</a></li><li>php常见设置：<ul><li>max_execution_time= 30 最长执行时间30s</li><li>memory_limit=128M 生产不够，可调大</li><li>display_errors=off 调试使用，不要打开，否则可能暴露重要信息</li><li>display_startup_errors=off 建议关闭</li><li>post_max_size=8M 最大上传数据大小，生产可能调大，比下面项大</li><li>upload_max_filesize =2M 最大上传文件，生产可能要调大</li><li>max_file_uploads = 20 同时上传最多文件数</li><li>date.timezone =Asia/Shanghai 指定时区</li><li>short_open_tag=on 开启短标签,如&lt;? phpinfo();?&gt;</li></ul></li></ul><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><ul><li><p>php语言格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    ...php code...</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>php测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo date(&quot;Y&#x2F;m&#x2F;d H:i:s&quot;);</span><br><span class="line">phpinfo();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>格式1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">echo &quot;&lt;h1&gt;Hello world!&lt;&#x2F;h1&gt;&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>格式2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;</span><br><span class="line">&lt;?php echo &quot;Hello world!&quot; ?&gt;</span><br><span class="line">&lt;&#x2F;h1&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="实现LAMP"><a href="#实现LAMP" class="headerlink" title="实现LAMP"></a>实现LAMP</h1><ul><li><p>LAMP</p><ul><li>httpd：接收用户的web请求；静态资源则直接响应；动态资源为php脚本，对此类资源的请求将交由php来运行</li><li>php：运行php程序</li><li>MariaDB：数据管理系统</li></ul></li><li><p>httpd与php结合的方式</p><ul><li><p>modules (将php编译成为httpd的模块,默认方式) </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MPM:</span><br><span class="line">prefork: libphp5.so</span><br><span class="line">event, worker: libphp5-zts.so </span><br><span class="line">FastCGI</span><br></pre></td></tr></table></figure></li></ul></li><li><p>CentOS 7:</p><ul><li>Modules：httpd, php, php-mysql, mariadb-server</li><li>FastCGI：httpd, php-fpm, php-mysql, mariadb-server</li></ul></li><li><p>CentOS 6：</p><ul><li>Modules：httpd, php, php-mysql, mysql-server</li><li>FastCGI：默认不支持</li></ul></li></ul><h2 id="安装-基于php模块，未采用编译"><a href="#安装-基于php模块，未采用编译" class="headerlink" title="安装(基于php模块，未采用编译)"></a>安装(基于php模块，未采用编译)</h2><p>CentOS 7:</p><p><code>yum install httpd, php, php-mysql, mariadb-server</code> </p><p><code>systemctl start httpd.service</code></p><p><code>systemctl start mariadb.service</code></p><p>注意：要使用prefork模型</p><h2 id="mysql拓展连接数据库"><a href="#mysql拓展连接数据库" class="headerlink" title="mysql拓展连接数据库"></a>mysql拓展连接数据库</h2><p>php使用mysql扩展连接数据库的测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$conn &#x3D; mysql_connect(&#39;mysqlserver&#39;,&#39;username&#39;,&#39;password&#39;);</span><br><span class="line">if ($conn)</span><br><span class="line">    echo &quot;OK&quot;;</span><br><span class="line">else</span><br><span class="line">echo &quot;Failure&quot;; </span><br><span class="line">#echo mysql_error();</span><br><span class="line">mysql_close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="mysqli拓展连接数据库"><a href="#mysqli拓展连接数据库" class="headerlink" title="mysqli拓展连接数据库"></a>mysqli拓展连接数据库</h2><p>php使用mysqli扩展连接数据库的测试代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$mysqli&#x3D;new mysqli(&quot;mysqlserver&quot;, &quot;username&quot;, &quot;password&quot;);</span><br><span class="line">if(mysqli_connect_errno())&#123; </span><br><span class="line">    echo &quot;Failure&quot;;</span><br><span class="line">    $mysqli&#x3D;null;</span><br><span class="line">    exit;</span><br><span class="line">&#125;</span><br><span class="line">echo &quot;OK&quot;;</span><br><span class="line">$mysqli-&gt;close();</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h2 id="使用PDO-PHP-Data-Object"><a href="#使用PDO-PHP-Data-Object" class="headerlink" title="使用PDO(PHP Data Object)"></a>使用PDO(PHP Data Object)</h2><ul><li><p>php使用pdo扩展连接数据库的测试代码1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$dsn&#x3D;&#39;mysql:host&#x3D;mysqlhost;dbname&#x3D;test&#39;;</span><br><span class="line">$username&#x3D;&#39;root&#39;;</span><br><span class="line">$passwd&#x3D;&#39;magedu&#39;;</span><br><span class="line">$dbh&#x3D;new PDO(dsn,username,passwd); </span><br><span class="line">var_dump($dbh);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li><li><p>php使用pdo扩展连接数据库的测试代码2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">try &#123;</span><br><span class="line">$user&#x3D;&#39;root&#39;;</span><br><span class="line">$pass&#x3D;&#39;magedu&#39;;</span><br><span class="line">dbh &#x3D; new PDO(&#39;mysql:host&#x3D;mysqlhost;dbname&#x3D;mysql&#39;, user, pass); </span><br><span class="line">foreach($dbh-&gt;query(&#39;SELECT user,host from user&#39;) as $row) </span><br><span class="line">&#123; print_r($row);</span><br><span class="line">&#125;</span><br><span class="line">$dbh &#x3D; null;</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">print &quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br&#x2F;&gt;&quot;; </span><br><span class="line">die();</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="常见LAMP应用"><a href="#常见LAMP应用" class="headerlink" title="常见LAMP应用"></a>常见LAMP应用</h1><ul><li>PhpMyAdmin是一个以PHP为基础，以Web-Base方式架构在网站主机上的 MySQL的数据库管理工具，让管理者可用Web接口管理MySQL数据库</li><li>WordPress是一种使用PHP语言开发的博客平台，用户可以在支持PHP和MySQL 数据库的服务器上架设属于自己的网站。也可把 WordPress当作一个内容管理系 统（CMS）来使用</li><li>PHPWind:2003年发布了PHPWind的前身版本ofstar，并发展成为包含BBS、 CMS、博客、SNS等一系列程序的通用型建站软件, 于2008年加入阿里巴巴集团</li><li>Crossday Discuz! Board（简称 Discuz!）是一套通用的社区论坛软件系统。自 2001年6月面世以来，是全球成熟度最高、覆盖率最大的论坛软件系统之一。 2010年8月23日，与腾讯达成收购协议</li><li>ECShop是一款B2C独立网店系统，适合企业及个人快速构建个性化网上商店。 系统是基于PHP语言及MYSQL数据库构架开发的跨平台开源程序。2006年6月， ECShop推出第一个版本1.0</li></ul><h2 id="部署phpMyadmin"><a href="#部署phpMyadmin" class="headerlink" title="部署phpMyadmin"></a>部署phpMyadmin</h2><ul><li><p><code>yum -y install httpd mariadb-server php php-mysql</code></p></li><li><p><code>systemctl start httpd</code></p></li><li><p><code>systemctl start mariadb</code></p></li><li><p><code>mysql_secure_installation</code></p></li><li><p>下载：<a href="http://www.phpmyadmin.net/downloads/">http://www.phpmyadmin.net/downloads/</a></p></li><li><p><code>tar xvf phpMyAdmin-4.0.10.20-all-languages.tar.xz cd /var/www/html</code></p></li><li><p><code>cd phpadmin/</code></p></li><li><p><code>cp config.sample.inc.php config.inc.php</code></p></li><li><p><code>yum -y install php-mbstring</code></p></li><li><p><code>systemctl reload httpd</code></p></li></ul><h2 id="部署wordpress"><a href="#部署wordpress" class="headerlink" title="部署wordpress"></a>部署wordpress</h2><ul><li><p>下载地址：</p><p>官网：<a href="https://cn.wordpress.org/">https://cn.wordpress.org/</a></p></li><li><p>解压缩WordPress博客程序到网页站点目录下 </p><p><code>unzip wordpress-5.0.4-zh_CN.zip</code></p></li><li><p>新建wpdb库和wpuser用户 </p><p><code>mysql&gt; create database wpdb;</code></p><p><code>mysql&gt; grant all on wpdb.* to wpuser@&#39;%&#39; identified by &quot;wppass&quot;;</code></p></li><li><p>打开<a href="http://webserver/wordpress%E8%BF%9B%E8%A1%8C%E9%A1%B5%E9%9D%A2%E5%AE%89%E8%A3%85">http://webserver/wordpress</a>进行页面安装</p></li><li><p>注意wordpress目录权限</p><p><code>setfacl –R –m u:apache:rwx /var/www/html/wordpress/</code></p><p>或者</p><p><code>chown –R apache.apache /var/www/html/wordpress</code></p></li></ul><h2 id="部署Discuz"><a href="#部署Discuz" class="headerlink" title="部署Discuz"></a>部署Discuz</h2><ul><li><p>官网：<a href="http://www.discuz.net/">http://www.discuz.net/</a></p></li><li><p>下载源码：</p><p><code>wget http://download.comsenz.com/DiscuzX/3.3/Discuz_X3.3_SC_UTF8.zip</code></p></li><li><p><code>unzip Discuz_X3.3_SC_UTF8.zip</code></p></li><li><p><code>mv upload/ /var/www/html/forum</code></p></li><li><p><code>setfacl -R -m u:apache:rwx /var/www/html/forum</code></p></li><li><p><code>mysql&gt;create database discuz;</code></p><p><code>mysql&gt;grant all on discuz.* to discuz@&#39;172.16.0.%’identified by&quot;magedu&quot;;</code></p></li><li><p>安装向导：<a href="http://localhost/forum">http://localhost/forum</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> 网站服务 </tag>
            
            <tag> LAMP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网站服务-Apache</title>
      <link href="2020/05/22/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Apache/"/>
      <url>2020/05/22/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Apache/</url>
      
        <content type="html"><![CDATA[<h1 id="Socket概念"><a href="#Socket概念" class="headerlink" title="Socket概念"></a>Socket概念</h1><h2 id="TCP-IP协议示意图"><a href="#TCP-IP协议示意图" class="headerlink" title="TCP/IP协议示意图"></a>TCP/IP协议示意图</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507201416065.png" alt="image-20200507201416065"></p><h2 id="跨网络的主机间通讯"><a href="#跨网络的主机间通讯" class="headerlink" title="跨网络的主机间通讯"></a>跨网络的主机间通讯</h2><ul><li>在建立通信连接的每一端，进程间的传输要有两个标志：</li><li>IP地址和端口号，合称为套接字地址 socket address</li><li>客户机套接字地址定义了一个唯一的客户进程</li><li>服务器套接字地址定义了一个唯一的服务器进程</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507201543736.png" alt="image-20200507201543736"></p><h2 id="Socket套接字"><a href="#Socket套接字" class="headerlink" title="Socket套接字"></a>Socket套接字</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507201603417.png" alt="image-20200507201603417"></p><ul><li><p>Socket:套接字，进程间通信IPC的一种实现，允许位于不同主机（或同一主机） 上不同进程之间进行通信和数据交换，SocketAPI出现于1983年，4.2 BSD实现</p></li><li><p>Socket API：封装了内核中所提供的socket通信相关的系统调用</p></li><li><p>Socket Domain：根据套接字所使用的地址格式</p><ul><li><p>AF_INET：Address Family，IPv4 </p></li><li><p>AF_INET6：IPv6</p></li><li><p>AF_UNIX：同一主机上不同进程之间通信时使用</p></li></ul></li><li><p>Socket API：封装了内核中的socket通信相关的系统调用</p><ul><li><p>SOCK_STREAM：流，tcp套接字，可靠地传递、面向连接</p></li><li><p>SOCK_DGRAM：数据报，udp套接字，不可靠地传递、无连接</p></li><li><p>SOCK_RAW: 裸套接字,无须tcp或udp,APP直接通过IP包通信</p></li></ul></li></ul><h2 id="客户-服务器程序的套接字函数"><a href="#客户-服务器程序的套接字函数" class="headerlink" title="客户/服务器程序的套接字函数"></a>客户/服务器程序的套接字函数</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507202232184.png" alt="image-20200507202232184"></p><p>套接字相关的系统调用：</p><ul><li>socket(): 创建一个套接字</li><li>bind()： 绑定IP和端口</li><li>listen()： 监听</li><li>accept()： 接收请求</li><li>connect()： 请求连接建立</li><li>write()： 发送</li><li>read()： 接收</li><li>close(): 关闭连接</li></ul><h1 id="HTTP服务"><a href="#HTTP服务" class="headerlink" title="HTTP服务"></a>HTTP服务</h1><h2 id="HTTP服务通信过程"><a href="#HTTP服务通信过程" class="headerlink" title="HTTP服务通信过程"></a>HTTP服务通信过程</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507213741670.png" alt="image-20200507213741670"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507213755343.png" alt="image-20200507213755343"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507213804635.png" alt="image-20200507213804635"></p><h2 id="HTTP相关服务"><a href="#HTTP相关服务" class="headerlink" title="HTTP相关服务"></a>HTTP相关服务</h2><ul><li><p>http: Hyper Text Transfer Protocol, 80/tcp</p></li><li><p>html: Hyper Text Markup Language 超文本标记语言，编程语言</p><p>示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">Content-Type</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>html语言<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://xxx&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">http://xxx</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">a</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>CSS：Cascading Style Sheet 层叠样式表</p></li><li><p>js：javascript，客户端脚本</p></li><li><p>MIME： Multipurpose Internet Mail Extensions 多用途互联网邮件扩展</p><p>​            /etc/mime.types</p><p>格式：major/minor</p><p>​            text/plain text/html</p><p>​            text/css</p><p>​            image/jpeg </p><p>​            image/png </p><p>​            video/mp4 </p><p>​            application/javascript</p><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_Types</a></p><p>​             <a href="http://www.w3school.com.cn/media/media_mimeref.asp">http://www.w3school.com.cn/media/media_mimeref.asp</a></p></li></ul><h2 id="HTTP工作机制"><a href="#HTTP工作机制" class="headerlink" title="HTTP工作机制"></a>HTTP工作机制</h2><ul><li><p>工作机制：</p><ul><li>http请求：http request</li><li>http响应：http response</li><li>一次http事务：请求&lt;–&gt;响应</li></ul></li><li><p>Web资源：web resource</p><p>一个网页由多个资源（文件）构成，打开一个页面，通常会有多个资源展示出来，但是每个资源都要单独请求。因此，一个“Web 页面”通常并不是单个资源， 而是一组资源的集合</p><ul><li><p>静态文件：无需服务端做出额外处理</p><p>文件后缀：.html, .txt, .jpg, .js, .css, .mp3, .avi</p></li><li><p>动态文件：服务端执行程序，返回执行的结果 </p><p>文件后缀：.php, .jsp ,.asp</p></li></ul></li></ul><h2 id="HTTP连接请求"><a href="#HTTP连接请求" class="headerlink" title="HTTP连接请求"></a>HTTP连接请求</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507215641079.png" alt="image-20200507215641079"></p><h3 id="串行连接和并行连接"><a href="#串行连接和并行连接" class="headerlink" title="串行连接和并行连接"></a>串行连接和并行连接</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507215718060.png" alt="image-20200507215718060"></p><h3 id="串行-持久连接和管道"><a href="#串行-持久连接和管道" class="headerlink" title="串行,持久连接和管道"></a>串行,持久连接和管道</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507215745030.png" alt="image-20200507215745030"></p><ul><li>提高HTTP连接性能<ul><li>并行连接：通过多条TCP连接发起并发的HTTP请求</li><li>持久连接：keep-alive,长连接，重用TCP连接，以消除连接和关闭的时延,以 事务个数和时间来决定是否关闭连接</li><li>管道化连接：通过共享TCP连接发起并发的HTTP请求</li><li>复用的连接：交替传送请求和响应报文（实验阶段）</li></ul></li></ul><h2 id="HTTP报文"><a href="#HTTP报文" class="headerlink" title="HTTP报文"></a>HTTP报文</h2><h3 id="通用首部"><a href="#通用首部" class="headerlink" title="通用首部"></a>通用首部</h3><ul><li>Date：报文创建的时间</li><li>Connection：连接状态，如Keep-alive, close</li><li>via：显示报文经过的中间节点(代理服务器)</li><li>Cache-Control：控制缓存</li><li>Pragma：</li></ul><h3 id="请求报文"><a href="#请求报文" class="headerlink" title="请求报文"></a>请求报文</h3><ul><li><p>格式：请求行 请求头部 空行 请求数据 四个部分组成</p></li><li><p>请求行： GET(请求方法) URL（请求资源） HTTP/1.1（协议号和版本号）</p></li><li><p>请求头部：</p><ul><li><p>Host字段：请求资源的主机地址</p></li><li><p>User-Agent字段：浏览器标识</p></li><li><p>Accept: 媒体类型 –&gt; 告诉服务端我能认识什么样的资源</p></li><li><p>Accept-Charset: 支持的字符集</p></li><li><p>Accept-Encoding: 支持的编码方式，一般指压缩机制，如gzip,deflate,sdch</p></li><li><p>Accept-Language: 支持使用的语言</p></li><li><p>Referer：指明当前资源的原始URL(从哪个页面跳转的)</p></li><li><p>Cache-Control：缓存控制</p></li><li><p>Connection: keep-alive(连接保持-tcp连接)</p></li><li><p>Cookie：身份标识 –&gt; Session </p><p>……</p></li></ul></li><li><p>请求数据：<br>xxxx</p></li><li><p>请求方法： </p><ul><li>GET：请求指定的页面信息</li><li>POST：向指定资源提交数据进行处理（表单）</li><li>HEAD： 类似GET请求，但是返回内容仅仅头部信息</li><li>PUT：从客户端向服务端传送的数据取代指定的文本内容</li><li>DELETE: 删除指定的页面信息</li><li>CONNECT： 预留给能够将连接改成管道方式的代理服务器</li><li>OPTIONS：允许客户端查看服务器性能</li><li>TRACE：回显服务端收到的请求，主要用于测试</li></ul></li><li><p>GET请求和POST请求的区别：</p><ul><li>关于参数位置：GET请求会放在浏览器输入栏中以? &amp; ；POST请求会将参数放到请求体中</li><li>关于大小限制：GET请求会有大小限制（浏览器对url长度会有限制）；POST对提交的数据没有大小限制</li><li>安全性方面：GET请求会把信息都在输入栏中显示（不安全的）；相对来说POST请求是比较安全的（登录时的用户名和密码）</li><li>后端代码对GET请求和POST请求的资源使用的方法是不一样的</li></ul></li></ul><h3 id="响应报文"><a href="#响应报文" class="headerlink" title="响应报文"></a>响应报文</h3><ul><li><p>状态行  响应头部 空行 响应数据 四个部分组成</p></li><li><p>状态行：协议/协议版本   状态码   状态消息</p></li><li><p>响应头部</p></li><li><p>响应数据:HTML文件 </p></li><li><p>状态码</p><ul><li>1xx：指示信息-表示请求已经接受，继续处理</li><li>2xx：成功-表示请求已经被成功接受，理解，并处理</li><li>3xx：重定向-要完成请求必须进行更进一步的操作</li><li>4xx：客户端错误 - 请求的语法存放错误</li><li>5xx：服务端错误 - 服务端不能够处理请求</li></ul><hr><ul><li>200： OK</li><li>301： 永久重定向 Moved Permanently</li><li>302： 临时重定向  Found</li><li>304： 请求被重定向到本地缓存 Not Modified</li><li>400： 客户端语法存在错误 </li><li>401： 客户端请求没有授权 Unauthorized</li><li>403： 客户端授权错误  Forbidden</li><li>404： 客户端请求的资源在服务端不存在 Not Found</li><li>500： 服务端内部错误 Internal Serve Error</li><li>502： 服务端不能处理请求 Bad Gateway </li><li>503： servcie .. : 客户端请求无法处理</li><li>504:    服务端没能接收到请求 Gateway Tiemout  </li></ul></li></ul><h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a>HTTP协议</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507220008611.png" alt="image-20200507220008611"></p><ul><li><p>http/0.9：1991，原型版本，功能简陋，<strong>只有一个命令GET。</strong>GET/index.html ,服务器只能回应HTML格式字符串，不能回应别的格式</p></li><li><p>http/1.0: 1996年5月,支持cache, MIME, method</p><ul><li><p>每个TCP连接只能发送一个请求，发送数据完毕，连接就关闭，如果还要请求其他资源，就必须再新建一个连接</p></li><li><p>引入了<strong>POST命令</strong>和<strong>HEAD命令</strong></p></li><li><p>头信息是 ASCII 码，后面数据可为任何格式。服务器回应时会告诉客户端， 数据是什么格式，即Content-Type字段的作用。这些数据类型总称为MIME 多 用途互联网邮件扩展，每个值包括一级类型和二级型，预定义的类型，也可自定义类型, 常见Content-Type值：text/xml image/jpeg audio/mp3</p></li></ul></li><li><p>http/1.1：1997年1月</p><ul><li><p>引入了持久连接（persistent connection），即TCP连接默认不关闭，可以被多个请求复用，不用声明Connection: keep-alive。对于同一个域名，大多数浏览器允许同 时建立6个持久连接</p></li><li><p>引入了管道机制（pipelining），即在同一个TCP连接里，客户端可以同时发送多个 请求，进一步改进了HTTP协议的效率</p></li><li><p>新增方法：<strong>PUT、PATxCH、OPTIONS、DELETE、TRACE</strong></p></li><li><p>同一个TCP连接里，所有的数据通信是按次序进行的。服务器只能顺序处理回应，前面的回应慢，会有许多请求排队，造成”队头堵塞”（Head-of-line blocking）</p></li><li><p>为避免上述问题，两种方法：一是减少请求数，二是同时多开持久连接。网页优化技巧，如合并脚本和样式表、将图片嵌入CSS代码、域名分片（domain sharding）等</p></li><li><p>HTTP 协议不带有状态，每次请求都必须附上所有信息。请求的很多字段都是重复的，浪费带宽，影响速度</p></li></ul></li></ul><h3 id="HTTP1-0和HTTP1-1的区别"><a href="#HTTP1-0和HTTP1-1的区别" class="headerlink" title="HTTP1.0和HTTP1.1的区别"></a>HTTP1.0和HTTP1.1的区别</h3><ul><li><p>缓存处理，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略</p></li><li><p>带宽优化及网络连接的使用，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），方便了开发者自由的选择以便于充分利用带宽和连接</p></li><li><p>错误通知的管理，在HTTP1.1中新增24个状态响应码，如409（Conflict）表示请求的资源与资 源当前状态冲突；410（Gone）表示服务器上的某个资源被永久性的删除</p></li><li><p>Host头处理，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的 URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以 存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）</p></li><li><p>长连接，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理， 在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在 HTTP1.1中默认开启Connection： keep-alive，弥补了HTTP1.0每次请求都要创建连接的缺点</p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507220413186.png" alt="image-20200507220413186"></p><h3 id="HTTP1-0和HTTP1-1的区别-1"><a href="#HTTP1-0和HTTP1-1的区别-1" class="headerlink" title="HTTP1.0和HTTP1.1的区别"></a>HTTP1.0和HTTP1.1的区别</h3><ul><li>HTTP1.x在传输数据时，每次都需要重新建立连接，无疑增加了大量的延迟时间，特别是在移动端更为突出</li><li>HTTP1.x在传输数据时，所有传输的内容都是明文，客户端和服务器端都无法 验证对方的身份，无法保证数据的安全性</li><li>HTTP1.x在使用时，header里携带的内容过大，增加了传输的成本，并且每次请求header基本不怎么变化，尤其在移动端增加用户流量</li><li>虽然HTTP1.x支持了keep-alive，来弥补多次创建连接产生的延迟，但是keep- alive使用多了同样会给服务端带来大量的性能压力，并且对于单个文件被不断请求的服务(例如图片存放网站)，keep-alive可能会极大的影响性能，因为它在文件被请求之后还保持了不必要的连接很长时间</li></ul><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><ul><li>为解决安全问题，网景在1994年创建了HTTPS，并应用在网景导航者浏览器中。 最初，HTTPS是与SSL一起使用的；在SSL逐渐演变到TLS时（其实两个是一个东西，只是名字不同而已），最新的HTTPS也由在2000年五月公布的RFC 2818正式确定下来。HTTPS就是安全版的HTTP，目前大型网站基本实现全站 HTTPS</li><li>HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费</li><li>HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS 之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的</li><li>HTTP和HTTPS使用的是不同的连接方式，端口不同，前者是80，后者是443</li><li>HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题</li><li>HTTPS 中的SSL握手等过程降低用户访问速度，但是只要经过合理优化和部署， HTTPS 对速度的影响完全可以接受</li></ul><h3 id="SPDY"><a href="#SPDY" class="headerlink" title="SPDY"></a>SPDY</h3><ul><li>SPDY：2009年,谷歌研发，综合HTTPS和HTTP两者有点于一体的传输协议，主要特点：</li><li>降低延迟，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。 多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题， 降低了延迟同时提高了带宽的利用率</li><li>请求优先级（request prioritization）。多路复用带来一个新的问题是，在连接共享的 基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，重要的 请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才 是各种静态资源文件，脚本文件等加载，可以保证用户能第一时间看到网页内容</li><li>header压缩。HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减 小包的大小和数量</li><li>基于HTTPS的加密协议传输，大大提高了传输数据的可靠性</li><li>服务端推送（server push），采用了SPDY的网页，例如网页有一个sytle.css的请求， 在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端 再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了</li></ul><h3 id="HTTP2"><a href="#HTTP2" class="headerlink" title="HTTP2"></a>HTTP2</h3><ul><li>http/2.0：2015年<ul><li>HTTP2.0是SPDY的升级版</li><li>头信息和数据体都是二进制，称为头信息帧和数据帧</li><li>复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，且不用按顺序一一对应，避免了“队头堵塞“,此双向的实时通信称为 多工（Multiplexing）</li><li>引入头信息压缩机制（header compression）,头信息使用gzip或compress 压缩后再发送；客户端和服务器同时维护一张头信息表，所有字段都会存入 这个表，生成一个索引号，不发送同样字段，只发送索引号，提高速度</li><li>HTTP/2 允许服务器未经请求，主动向客户端发送资源，即服务器推送（server push）</li></ul></li><li>HTTP2.0和SPDY区别：<ul><li>HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS</li><li>HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE</li></ul></li></ul><h2 id="URI"><a href="#URI" class="headerlink" title="URI"></a>URI</h2><ul><li><p>URI: Uniform Resource Identifier 统一资源标识，分为URL和URN</p><ul><li><p>URN: Uniform Resource Naming，统一资源命名</p><p>示例： P2P下载使用的磁力链接是URN的一种实现 </p><p>magnet:?xt=urn:btih:660557A6890EF888666</p></li><li><p>URL: Uniform Resorce Locator，统一资源定位符，用于描述某服务器某特定资源位置</p></li><li><p>两者区别：URN如同一个人的名称，而URL代表一个人的住址。换言之， URN定义某事物的身份，而URL提供查找该事物的方法。URN仅用于命名， 而不指定地址</p></li></ul></li></ul><h3 id="URL组成"><a href="#URL组成" class="headerlink" title="URL组成"></a>URL组成</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507221131219.png" alt="image-20200507221131219"></p><ul><li><p>&lt;scheme&gt;://&lt;user&gt;[:&lt;password&gt;]@&lt;host&gt;:&lt;port&gt;/&lt;path&gt;;&lt;params&gt;?&lt;query&gt;#&lt;frag&gt;</p></li><li><p>scheme:方案，访问服务器以获取资源时要使用哪种协议</p></li><li><p>user:用户，某些方案访问资源时需要的用户名</p></li><li><p>password:密码，用户对应的密码，中间用：分隔</p></li><li><p>Host:主机，资源宿主服务器的主机名或IP地址</p></li><li><p>port:端口,资源宿主服务器正在监听的端口号，很多方案有默认端口号</p></li><li><p>path:路径,服务器资源的本地名，由一个/将其与前面的URL组件分隔</p></li><li><p>params:参数，指定输入的参数，参数为名/值对，多个参数，用;分隔</p></li><li><p>query:查询，传递参数给程序，如数据库，用?分隔,多个查询用&amp;分隔</p></li><li><p>frag:片段,一小片或一部分资源的名字，此组件在客户端使用，用#分隔</p></li></ul><h3 id="URL示例"><a href="#URL示例" class="headerlink" title="URL示例"></a>URL示例</h3><ul><li><a href="ftp://kinmfer:password@172.16.0.1/pub/linux.ppt">ftp://kinmfer:password@172.16.0.1/pub/linux.ppt</a></li><li>rtsp://videoserver/video_demo/Real Time Streaming Protocol</li><li><a href="https://list.jd.com/list.html?cat=670,671,672&amp;ev=149_2992&amp;sort=sort_totalsales15_desc&amp;trans=1">https://list.jd.com/list.html?cat=670,671,672&amp;ev=149_2992&amp;sort=sort_totalsales15_desc&amp;trans=1</a></li><li><a href="http://apache.org/index.html">http://apache.org/index.html#projects-list</a></li></ul><h2 id="网站访问量"><a href="#网站访问量" class="headerlink" title="网站访问量"></a>网站访问量</h2><ul><li><p>IP(独立IP)：即Internet Protocol,指独立IP数。一天内来自相同客户机IP地址只 计算一次，记录远程客户机IP地址的计算机访问网站的次数，是衡量网站流量的重要指标</p></li><li><p>PV(访问量)： 即Page View, 页面浏览量或点击量，用户每次刷新即被计算一 次，PV反映的是浏览某网站的页面数，PV与来访者的数量成正比，PV并不是页面的来访者数量，而是网站被访问的页面数量</p></li><li><p>UV(独立访客)：即Unique Visitor,访问网站的一台电脑为一个访客。一天内相同的客户端只被计算一次。可以理解成访问某网站的电脑的数量。网站判断来访电脑的身份是通过来访电脑的cookies实现的。如果更换了IP后但不清除 cookies，再访问相同网站，该网站的统计中UV数是不变的</p><p>示例：</p><p>甲乙丙三人在同一台通过ADSL上网的电脑上（中间没有断网），分别访问xxx网站，并且每人各浏览了2个页面，那么网站的流量统计是：</p><p>IP: 1 PV:6 UV：1</p><p>若三人都是ADSL重新拨号后,各浏览了2个页面，则</p><p>IP: 3 PV:6 UV：1 </p></li><li><p>网站统计:<a href="http://www.alexa.cn/rank/">http://www.alexa.cn/rank/</a></p></li><li><p>QPS：request per second，每秒请求数</p></li><li><p>PV，QPS,并发连接数换算公式</p><ul><li>QPS= PV* 页⾯衍⽣连接次数/ 统计时间（86400）</li><li>并发连接数 =QPS * http平均响应时间</li></ul></li><li><p>峰值时间：每天80%的访问集中在20%的时间里，这20%时间为峰值时间</p></li><li><p>峰值时间每秒请求数(QPS)=( 总PV数 <em>页⾯衍⽣连接次数）</em>80% ) / ( 每天秒数* 20% )</p></li></ul><h2 id="Web服务请求处理步骤"><a href="#Web服务请求处理步骤" class="headerlink" title="Web服务请求处理步骤"></a>Web服务请求处理步骤</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507221706703.png" alt="image-20200507221706703"></p><h2 id="一次完整的http请求处理过程"><a href="#一次完整的http请求处理过程" class="headerlink" title="一次完整的http请求处理过程"></a>一次完整的http请求处理过程</h2><ol><li><p>建立连接：接收或拒绝连接请求</p></li><li><p>接收请求：接收客户端请求报文中对某资源的一次请求的过程</p><p>Web访问响应模型（Web I/O）</p><ul><li>单进程I/O模型：启动一个进程处理用户请求，而且一次只处理一个，多个 请求被串行响应</li><li>多进程I/O模型：由父进程并行启动多个子进程,每个子进程响应一个连接请求</li><li>复用I/O结构：启动一个进程，同时响应N个连接请求<ul><li>多线程模式：一个进程生成n个线程，一个线程处理一个请求；</li><li>事件驱动(event-driven)：一个进程直接处理n个请求</li></ul></li><li>复用的多进程I/O模型：启动M个进程，每个进程响应N个连接请求，同时接收M*N个请求</li></ul></li></ol><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200508130120574.png" alt="image-20200508130120574"></p><ol start="3"><li><p>处理请求：服务器对请求报文进行解析，并获取请求的资源及请求方法等相<br>关信息，根据方法，资源，首部和可选的主体部分对请求进行处理</p><ul><li><p>元数据：请求报文首部<br>&lt;method&gt; &lt;URL&gt; &lt;VERSION&gt;<br>HEADERS 格式 name:value<br>&lt;request body&gt;</p></li><li><p>示例：<br>Host: <a href="http://www.xxx.com/">www.xxx.com</a> 请求的主机名称<br>Server: Apache/2.4.7</p></li><li><p>HTTP常用请求方式，Method</p><p>GET、POST、HEAD、PUT、DELETE、TRACE、OPTIONS</p></li></ul></li><li><p>访问资源：</p><p>服务器获取请求报文中请求的资源web服务器，即存放了web资源的服务器，负责向请求者提供对方请求的静态资源，或动态运行后生成的资源</p><p>资源放置于本地文件系统特定的路径：DocRoot </p><p>DocRoot ➡ /var/www/html</p><p>/var/www/html/images/logo.jpg</p><p><a href="http://www.magedu.com/images/logo.jpg">http://www.magedu.com/images/logo.jpg</a></p><ul><li><p>web服务器资源路径映射方式：</p><p>(a)docroot</p><p>(b)alias</p><p>(c)虚拟主机docroot</p><p>(d)用户家目录docroot</p></li></ul></li><li><p>构建响应报文：</p><p>一旦Web服务器识别除了资源，就执行请求方法中描述的动作，并返回响应 报文。响应报文中 包含有响应状态码、响应首部，如果生成了响应主体的话，还包括响应主体</p><ol><li><p>响应实体：如果事务处理产生了响应主体，就将内容放在响应报文中回送过 去。响应报文中通常包括：</p><ul><li>描述了响应主体MIME类型的Content-Type首部 </li><li>描述了响应主体长度的Content-Length</li><li>实际报文的主体内容</li></ul></li><li><p>URL重定向：web服务构建的响应并非客户端请求的资源，而是资源另外一 个访问路径</p><p>永久重定向：<a href="http://www.360buy.com/">http://www.360buy.com</a></p><p>临时重定向：<a href="http://www.taobao.com/">http://www.taobao.com</a></p></li><li><p>MIME类型：</p><p>Web服务器要负责确定响应主体的MIME类型。多种配置服务器的方法可将MIME类型与资源管理起来</p><ul><li>魔法分类：Apache web服务器可以扫描每个资源的内容，并将其与一个已知模式表(被称为魔法文件)进行匹配，以决定每个文件的MIME类型。这样做可能比较 慢，但很方便，尤其是文件没有标准扩展名时</li><li>显式分类：可以对Web服务器进行配置，使其不考虑文件的扩展名或内容，强 制特定文件或目录内容拥有某个MIME类型</li><li>类型协商： 有些Web服务器经过配置，可以以多种文档格式来存储资源。在这 种情况下，可以配置Web服务器，使其可以通过与用户的协商来决定使用哪种格 式(及相关的MIME类型)”最好”</li></ul></li></ol></li><li><p>发送响应报文</p><p>Web服务器通过连接发送数据时也会面临与接收数据一样的问题。服务器 可能有很多条到各个客户端的连接，有些是空闲的，有些在向服务器发送数据，还 有一些在向客户端回送响应数据。服务器要记录连接的状态，还要特别注意对持久 连接的处理。对非持久连接而言，服务器应该在发送了整条报文之后，关闭自己这 一端的连接。对持久连接来说，连接可能仍保持打开状态，在这种情况下，服务器 要正确地计算Content-Length首部，不然客户端就无法知道响应什么时候结束了</p></li><li><p>记录日志</p><p>最后，当事务结束时，Web服务器会在日志文件中添加一个条目，来描述已执行的事务</p></li></ol><h2 id="HTTP服务器应用"><a href="#HTTP服务器应用" class="headerlink" title="HTTP服务器应用"></a>HTTP服务器应用</h2><ul><li>http服务器程序<ul><li>httpd apache，存在C10K（10K connections）问题</li><li>nginx  解决C10K问题</li><li>lighttpd</li></ul></li><li>应用程序服务器<ul><li>IIS .asp</li><li>tomcat .jsp</li><li>jetty 开源的servlet容器，基于Java的web容器</li><li>Resin CAUCHO公司，支持servlets和jsp的引擎</li><li>webshpere(IBM), weblogic(BEA), jboss,oc4j(Oracle)</li></ul></li><li>市场占有率统计<br><a href="http://www.netcraft.com/">http://www.netcraft.com</a></li></ul><h1 id="Httpd"><a href="#Httpd" class="headerlink" title="Httpd"></a>Httpd</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>httpd</p><p>20世纪90年代初，国家超级计算机应用中心NCSA开发 1995年开源社区发布apache（apatchy server）</p><ul><li>ASF: apache software foundatio</li><li>FSF：Free Software Foundation</li></ul></li><li><p>特性：</p><ul><li>高度模块化：core + modules</li><li>DSO：Dynamic Shared Object 动态加/卸载</li><li>MPM：multi-processing module多路处理模块</li></ul></li></ul><h2 id="MPM工作模式-多路处理模块"><a href="#MPM工作模式-多路处理模块" class="headerlink" title="MPM工作模式(多路处理模块)"></a>MPM工作模式(多路处理模块)</h2><ul><li><p>prefork：多进程I/O模型，每个进程响应一个请求，默认模型</p><ul><li>一个主进程：生成和回收n个子进程，创建套接字，不响应请求</li><li>多个子进程：工作work进程，每个子进程处理一个请求；系统初始时，预先生成多个空闲进程，等待请求，最大不超过1024个</li></ul></li><li><p>worker：复用的多进程I/O模型,多进程多线程，IIS使用此模型</p><ul><li>一个主进程：生成m个子进程，每个子进程负责生个n个线程，每个线程响应一个请求，并发响应请求：m*n</li></ul></li><li><p>event：事件驱动模型（worker模型的变种）</p><ul><li><p>一个主进程：生成m个子进程，每个子进程负责生个n个线程，每个线程响应一个请求，并发响应请求：m*n，有专门的监控线程来管理这些keep-alive类型的线程，当有真实请求时，将请求传递给服务线程，执行完毕后，又允许释放。这样增强了高并发场景下的请求处理能力</p><p>httpd-2.2：event 测试版，centos6默认</p><p>httpd-2.4：event 稳定版，centos7默认</p></li></ul></li></ul><h3 id="perfork-MPM"><a href="#perfork-MPM" class="headerlink" title="perfork MPM"></a>perfork MPM</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200508131153003.png" alt="image-20200508131153003"></p><ul><li>Prefork MPM: 预派生模式，有一个主控制进程，然后生成多个子进程,每个子进程有一个独立的线程响应用户请求，相对比较占用内存，但是比较稳定，可以设置最大和最小进程数，是最古老的一种模式，也是最稳定的模式，适用于访问量不是很大的场景</li><li>优点：稳定</li><li>缺点：慢，占用资源，不适用于高并发场景</li></ul><h3 id="worker-MPM"><a href="#worker-MPM" class="headerlink" title="worker MPM"></a>worker MPM</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200508131238486.png" alt="image-20200508131238486"></p><ul><li>worker MPM：是一种多进程和多线程混合的模型，有一个控制进程，启动多个子进程，每个子进程里面包含固定的线程，使用线程程来处理请求，当线程不够使用的时候会再启动一个新的子进程，然后在进程里面再启动线程处理请求，由于其使用了线程处理请求，因此可以承受更高的并发。</li><li>优点：相比prefork占用的内存较少，可以同时处理更多的请求</li><li>缺点：使用keep-alive的长连接方式，某个线程会一直被占据，即使没有传输数据，也需要一直等待到超时才会被释放。如果过多的线程，被这样占据，也 会导致在高并发场景下的无服务线程可用。（该问题在prefork模式下，同样会发生）</li></ul><h3 id="event-MPM"><a href="#event-MPM" class="headerlink" title="event MPM"></a>event MPM</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200508131314051.png" alt="image-20200508131314051"></p><ul><li><p>event MPM：Apache中最新的模式，属于事件驱动模型(epoll)，每个进程响应多个请求，在现在版本里的已经是稳定可用的模式。它和worker模式很像，最大的区别在于，它解决了keep-alive场景下，长期被占用的线程的资源浪费问题（某些线程因为被 keep-alive，空挂在哪里等待，中间几乎没有请求过来，甚至等到超时）。event MPM中，会有一个专门的线程来管理这些keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务线程，执行完毕后，又允许它释放。这样增强了高并发场景下的请求处理能力。</p></li><li><p>event只在有数据发送的时候才开始建立连接，连接请求才会触发工作线程，即使用了 TCP的一个选项，叫做延迟接受连接TCP_DEFER_ACCEPT，加了这个选项后，若客户端只进行TCP连接，不发送请求，则不会触发Accept操作，也就不会触发工作线程去 干活，进行了简单的防攻击（TCP连接）</p></li><li><p>优点：单线程响应多请求，占据更少的内存，高并发下表现更优秀，会有一个专门的线 程来管理keep-alive类型的线程，当有真实请求过来的时候，将请求传递给服务线程， 执行完毕后，又允许它释放</p></li><li><p>缺点：没有线程安全控制</p></li></ul><h2 id="Httpd功能特性"><a href="#Httpd功能特性" class="headerlink" title="Httpd功能特性"></a>Httpd功能特性</h2><ul><li><p>虚拟主机</p><p>IP、Port、FQDN</p></li><li><p>CGI：Common Gateway Interface，通用网关接口</p></li><li><p>反向代理</p></li><li><p>负载均衡</p></li><li><p>路径别名</p></li><li><p>丰富的用户认证机制 </p><ul><li>basi</li><li>digest</li></ul></li><li><p>支持第三方模块</p></li><li><p>httpd-2.4新特性</p><ul><li>MPM支持运行为DSO机制；以模块形式按需加载</li><li>event MPM生产环境可用</li><li>异步读写机制</li><li>支持每模块及每目录的单独日志级别定义</li><li>每请求相关的专用配置</li><li>增强版的表达式分析式</li><li>毫秒级持久连接时长定义</li><li>基于FQDN的虚拟主机不需要NameVirutalHost指令</li><li>新指令，AllowOverrideList</li><li>支持用户自定义变量</li><li>更低的内存消耗</li></ul></li></ul><h2 id="Httpd安装"><a href="#Httpd安装" class="headerlink" title="Httpd安装"></a>Httpd安装</h2><ul><li><p>版本:</p><p>CentOS 7: 2.4</p><p>CentOS 6: 2.2</p></li><li><p>安装方式：</p><p>rpm：centos发行版，稳定，建议使用 </p><p>编译：定制或特殊需求</p></li></ul><h2 id="Httpd程序环境"><a href="#Httpd程序环境" class="headerlink" title="Httpd程序环境"></a>Httpd程序环境</h2><p><strong>CentOS 7程序环境：httpd-2.4</strong></p><ul><li><p>配置文件：</p><ul><li>/etc/httpd/conf/httpd.conf  核心配置文件</li><li>/etc/httpd/conf.d/*.conf </li><li>/etc/httpd/conf.modules.d/*.conf  模块配置文件</li></ul></li><li><p>检查配置语法：</p><ul><li>httpd –t</li></ul></li><li><p>服务单元文件： /usr/lib/systemd/system/httpd.service </p></li><li><p>配置文件：/etc/sysconfig/httpd</p></li><li><p>服务控制和启动：</p><ul><li><p>systemctl enable|disable httpd.service</p></li><li><p>systemctl {start|stop|restart|status|reload} httpd.service</p></li></ul></li><li><p>站点网页文档根目录：/var/www/html</p></li><li><p>模块文件路径：</p><ul><li><p>/etc/httpd/modules</p></li><li><p>/usr/lib64/httpd/modules</p></li></ul></li><li><p>主程序文件：/usr/sbin/httpd</p><ul><li>httpd-2.4支持MPM的动态切换</li></ul></li><li><p>主进程文件：/etc/httpd/run/httpd.pid</p></li><li><p>日志文件目录：</p><ul><li>/var/log/httpd </li><li>access_log: 访问日志 </li><li>error_log：错误日志</li></ul></li><li><p>帮助文档包：httpd-manual</p></li></ul><h2 id="Httpd常见配置"><a href="#Httpd常见配置" class="headerlink" title="Httpd常见配置"></a>Httpd常见配置</h2><ul><li><p>httpd配置文件的组成：<br>主要组成</p><ul><li>Global Environment</li><li>Main server configuration</li><li>virtual host</li></ul></li><li><p>配置格式：directive value</p><ul><li>directive 不区分字符大小写</li><li>value 为路径时，是否区分大小写，取决于文件系统</li></ul></li><li><p>官方帮助<br><a href="http://httpd.apache.org/docs/2.4/">http://httpd.apache.org/docs/2.4/</a> </p></li><li><p>显示服务器版本信息</p><p>ServerTokens Major|Minor|Min[imal]|Prod[uctOnly]|OS|Full</p><p>ServerTokens Prod[uctOnly] ：Server: Apache ServerTokens Major: Server: Apache/2 ServerTokens Minor: Server: Apache/2.0 ServerTokens Min[imal]: Server: Apache/2.0.41 ServerTokens OS: Server: Apache/2.0.41 (Unix)</p><p>ServerTokens Full (or not specified): Server: Apache/2.0.41 (Unix) PHP/4.2.2 MyMod/1.2</p><p>This setting applies to the entire server and cannot be enabled or disable on a virtualhost-by-virtualhost basis.</p><p>After version 2.0.44, this directive also controls the information presented by the ServerSignature directive.</p><p>建议使用：ServerTokens Prod</p></li><li><p>监听的IP和Port<br>Listen [IP:]PORT [protocol]<br>(1) 省略IP表示为本机所有IP</p><p>(2) Listen指令至少一个，可重复出现多次</p><p>(3) 修改监听socket，重启服务进程方可生效</p><p>(4) 限制其必须通过ssl通信时，protocol需要定义为https</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listen 80</span><br><span class="line">Listen 8080</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Listen 192.168.1.100:8080</span><br><span class="line">Listen 80 https</span><br></pre></td></tr></table></figure></li><li><p>持久连接(保持连接，长连接)</p><ul><li><p>Persistent Connection：连接建立，每个资源获取完成后不会断开连接，而是继续等待其它的请求完成，默认关闭持久连接</p></li><li><p>断开条件：时间限制：以秒为单位， 默认5s，httpd-2.4 支持毫秒级 </p></li><li><p>副作用：对并发访问量大的服务器，持久连接会使有些请求得不到响应</p></li><li><p>折中：使用较短的持久连接时间</p></li><li><p>设置：KeepAlive On|Off </p><p>​            KeepAliveTimeout 15</p><p>​            MaxKeepAliveRequests 500 持久连接最大接收的请求数</p></li><li><p>测试：telnet WEB_SERVER_IP PORT </p><p>​            GET /URL HTTP/1.1</p><p>​            Host: WEB_SERVER_IP</p></li></ul></li><li><p>DSO： Dynamic Shared Object</p><p>加载动态模块配置，不需重启即生效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf </span><br><span class="line">Include conf.modules.d&#x2F;*.conf </span><br></pre></td></tr></table></figure><p>配置指定实现模块加载格式：</p><p><code>LoadModule &lt;mod_name&gt; &lt;mod_path&gt;</code></p><p>模块文件路径可使用相对路径：相对于ServerRoot（默认/etc/httpd）</p><p>示例：<code>LoadModule auth_basic_module modules/mod_auth_basic.so</code></p><ul><li>动态模块路径：<ul><li>/usr/lib64/httpd/modules/</li></ul></li><li>查看静态编译的模块 <ul><li><code>httpd -l</code></li></ul></li><li>查看静态编译及动态装载的模块<ul><li><code>httpd –M</code></li></ul></li></ul></li><li><p>MPM（ Multi-Processing Module）多路处理模块 </p><p>prefork, worker, event</p><p>切换使用的MPM</p><p>/etc/httpd/conf.modules.d/00-mpm.conf</p><p>启用要启用的MPM相关的LoadModule指令即可</p><ul><li><p>prefork的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">StartServers2000 进程启动时创建的子进程数</span><br><span class="line">MinSpareServers2000 最少空闲进程数</span><br><span class="line">MaxSpareServers3000 最大空闲进程数</span><br><span class="line">ServerLimit 2560 最多进程数,最大值 20000</span><br><span class="line">MaxRequestWorkers 2560 最大的并发连接数，默认256</span><br><span class="line">MaxRequestsPerChild 4000 子进程最多能处理的请求数量。在处理MaxRequestsPerChild 个请求之后,子进程将会被父进程终止，这时候子进程占用的内存就会释放(为0时永远不释放）</span><br><span class="line">MaxConnectionsPerChild 4000 子进程最多能处理的连接数量，代替上面MaxRequestsPerChild ，httpd.2.4.9开始支持</span><br></pre></td></tr></table></figure></li><li><p>worker的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ServerLimit16</span><br><span class="line">StartServers 2</span><br><span class="line">MaxRequestWorkers150</span><br><span class="line">MinSpareThreads 25</span><br><span class="line">MaxSpareThreads 75</span><br><span class="line">ThreadsPerChild25</span><br></pre></td></tr></table></figure></li></ul></li><li><p>定义’Main’ server的文档页面路径 </p><p><code>DocumentRoot &quot;/path&quot; </code></p><p>文档路径映射：DocumentRoot指向的路径为URL路径的起始位置 </p><p>示例：DocumentRoot “/app/data“</p><p>​            <a href="http://HOST:PORT/test/index.html">http://HOST:PORT/test/index.html</a> –&gt; /app/data/test/index.html 注意：SELinux和iptables的状态</p></li><li><p>定义站点主页面</p><p><code>DirectoryIndex index.html</code></p></li><li><p>站点访问控制常见机制</p><p>可基于两种机制指明对哪些资源进行何种访问控制访问控制机制有两种：客户端来源地址，用户账号</p><ul><li><p>文件系统路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory “&#x2F;path&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;File “&#x2F;path&#x2F;file”&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;File&gt;</span><br><span class="line"></span><br><span class="line">&lt;FileMatch &quot;PATTERN&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;FileMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>URL路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Location&quot;&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br><span class="line"></span><br><span class="line">&lt;LocationMatch &quot;PATTETN&quot;&gt;</span><br><span class="line">...</span><br><span class="line">&lt;&#x2F;LocationMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;\.(gif|jpe?g|png)$&quot;&gt;</span><br><span class="line">&lt;Files “?at.*”&gt;通配符</span><br><span class="line">&lt;Location &#x2F;status&gt;</span><br><span class="line">&lt;LocationMatch &quot;&#x2F;(extra|special)&#x2F;data&quot;&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>&lt;Directory&gt;中“基于源地址”实现访问控制</p><ol><li>Options：后跟1个或多个以空白字符分隔的选项列表 在选项前的+，- 表示增加或删除指定选项</li></ol><p>常见选项：</p><ul><li>Indexes：指明的URL路径下不存在与定义的主页面资源相符的资源文件时，返回索引列表给用户</li><li>FollowSymLinks：允许访问符号链接文件所指向的源文件 </li><li>None：全部禁用</li><li>All： 全部允许</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &#x2F;web&#x2F;docs&gt;</span><br><span class="line">Options Indexes FollowSymLinks</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">&lt;Directory &#x2F;web&#x2F;docs&#x2F;spec&gt;  </span><br><span class="line">Options FollowSymLinks</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure><ol start="2"><li>AllowOverride<br>与访问控制相关的哪些指令可以放在指定目录下的.htaccess（由AccessFileName指定）文件中，覆盖之前的配置指令<br>只对&lt;directory&gt;语句有效</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">AllowOverride  All: .htaccess中所有指令都有效</span><br><span class="line">AllowOverride None： .htaccess 文件无效</span><br><span class="line">AllowOverride AuthConfig .htaccess 文件中，除了AuthConfig其它指令都无法生效</span><br></pre></td></tr></table></figure><ul><li><p>基于IP的访问控制:</p><ul><li><p>无明确授权的目录，默认拒绝</p></li><li><p>允许所有主机访问：Require all granted</p></li><li><p>拒绝所有主机访问：Require all denied </p></li><li><p>控制特定的IP访问：</p><p>Require ip IPADDR：授权指定来源的IP访问 </p><p>Require not ip IPADDR：拒绝特定的IP访问</p></li><li><p>控制特定的主机访问：</p><p>Require host HOSTNAME：授权特定主机访问 </p><p>Require not host HOSTNAME：拒绝</p><p>HOSTNAME：</p><ul><li>FQDN：特定主机</li><li>domin.tld：指定域名下的所有主机</li></ul></li></ul></li><li><p>不能有失败，至少有一个成功匹配才成功，即失败优先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;RequireAll&gt;</span><br><span class="line">Require all granted</span><br><span class="line">Require not ip 172.16.1.1 拒绝特定IP</span><br><span class="line">&lt;&#x2F;RequireAll&gt;</span><br></pre></td></tr></table></figure></li><li><p>多个语句有一个成功，则成功，即成功优先</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;RequireAny&gt;</span><br><span class="line">Require all denied</span><br><span class="line">require ip 172.16.1.1 允许特定IP</span><br><span class="line">&lt;&#x2F;RequireAny&gt;</span><br></pre></td></tr></table></figure></li><li><p>日志设定</p><ul><li><p>日志类型：</p><ul><li>访问日志 </li><li>错误日志</li></ul></li><li><p>错误日志：</p><ul><li>ErrorLog logs/error_log </li><li>LogLevel warn</li><li>LogLevel 可选值: debug, info, notice, warn,error, crit, alert, emerg</li></ul></li><li><p>访问日志</p><ul><li><p>定义日志格式：LogFormat format strings</p><p><code>LogFormat &quot;%h %l %u %&#123; %F %T&#125;t \&quot;%r\&quot; %&gt;s %b \&quot;%&#123;Referer&#125;i\&quot;\&quot;%&#123;User-Agent&#125;i\&quot;&quot; testlog</code></p></li><li><p>使用日志格式：</p><p>CustomLog logs/access_log testlog </p><p>参考帮助：</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_log_config.html">http://httpd.apache.org/docs/2.4/mod/mod_log_config.html#formats</a></p><ul><li>%h 客户端IP地址</li><li>%l 远程用户,启用mod_ident才有效，通常为减号“-”</li><li>%u 验证（basic，digest）远程用户,非登录访问时，为一个减号“-”</li><li>%t 服务器收到请求时的时间</li><li>%r First line of request，即表示请求报文的首行；记录了此次请求的<strong>“方法”</strong>，<strong>“URL”</strong>以及<strong>协议版本</strong></li><li>%s  原始响应状态码</li><li>%&gt;s 响应状态码</li><li>%b 响应报文的大小，单位是字节；不包括响应报文http首部</li><li>%{Referer}i 请求报文中首部“referer”的值；即从哪个页面中的超链接跳转至当前页面的</li><li>%{User-Agent}i 请求报文中首部“User-Agent”的值；即发出请求的应用程序</li></ul></li></ul></li></ul></li><li><p>设定默认字符集</p><ul><li>AddDefaultCharset UTF-8 此为默认值 </li><li>中文字符集：GBK, GB2312, GB18030</li></ul></li><li><p>定义路径别名</p><p>格式：Alias /URL/ “/PATH/“</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">alias &#x2F;netScript &#x2F;data&#x2F;downloads&#x2F;network-scripts　　　　　　</span><br><span class="line">#千万要注意，&quot;&#x2F;netScript&quot;前面的&quot;&#x2F;&quot;别忘记写了哟~，当客户端访问&quot;&#x2F;netScript&quot;就会自动跳转到&quot;&#x2F;data&#x2F;downloads&#x2F;network-script&quot;目录下去找index.html,若没有index.html文件就会遵守咱们配置的Options指令，会列出所有文件包括链接文件哟~</span><br><span class="line"></span><br><span class="line">Alias &quot;&#x2F;image&quot; &quot;&#x2F;ftp&#x2F;pub&#x2F;image&quot;</span><br><span class="line">&lt;Directory &quot;&#x2F;ftp&#x2F;pub&#x2F;image&quot;&gt;</span><br><span class="line">    Require all granted</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br><span class="line"></span><br><span class="line">如果Alias指令在&lt;Location&gt;或&lt;LocationMatch&gt;节中使用，则省略URL路径，并使用表达式语法解释文件路径。此语法在Apache2.4.19及更高版本中可用。</span><br><span class="line">&lt;Location &quot;&#x2F;image&quot;&gt;</span><br><span class="line">    Alias &quot;&#x2F;ftp&#x2F;pub&#x2F;image&quot;</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br><span class="line">&lt;LocationMatch &quot;&#x2F;error&#x2F;(?&lt;NUMBER&gt;[0-9]+)&quot;&gt;</span><br><span class="line">    Alias &quot;&#x2F;usr&#x2F;local&#x2F;apache&#x2F;errors&#x2F;%&#123;env:MATCH_NUMBER&#125;.html&quot;</span><br><span class="line">&lt;&#x2F;LocationMatch&gt;</span><br></pre></td></tr></table></figure></li><li><p>基于用户的访问控制</p><ul><li>认证质询：WWW-Authenticate：响应码为401，拒绝客户端请求，并说明要求客户端提供账号和密码</li><li>认证：Authorization：客户端用户填入账号和密码后再次发送请求报文；认证通过时，则服务器发送响应的资源</li><li>认证方式两种：<ul><li>basic：明文</li><li>digest：消息摘要认证,兼容性差</li></ul></li><li>安全域：需要用户认证后方能访问的路径；应该通过名称对其进行标识，以便于告知用户认证的原因</li><li>用户的账号和密码<ul><li>虚拟账号：仅用于访问某服务时用到的认证标识</li><li>存储：文本文件，SQL数据库，ldap目录存储，nis等</li></ul></li></ul><p>basic认证配置示例：</p><p>(1)定义安全域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory “&#x2F;path&quot;&gt; </span><br><span class="line">Options None</span><br><span class="line">AllowOverride None </span><br><span class="line">AuthType Basic </span><br><span class="line">AuthName &quot;String&quot;</span><br><span class="line">AuthUserFile &quot;&#x2F;PATH&#x2F;HTTPD_USER_PASSWD_FILE&quot;</span><br><span class="line">Require user username1 username2 ...</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure><p>允许账号文件中的所有用户登录访问：</p><p><code>Require valid-user</code></p><p>(2) 提供账号和密码存储（文本文件）</p><p>​     使用专用命令完成此类文件的创建及用户管理</p><p>​    <code>htpasswd [options] /PATH/HTTPD_PASSWD_FILE username</code></p><ul><li>-c 自动创建文件，<strong>仅在文件不存在时使用</strong></li><li>-p 明文密码</li><li>-n 不加入文件，直接显示密码</li><li>-b 命令行中免交互直接指定密码</li><li>-d CRYPT格式加密，默认</li><li>-m md5格式加密</li><li>-s sha格式加密</li><li>-D 删除指定用户</li></ul></li><li><p>基于组账号进行认证</p><p>(1) 定义安全域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory “&#x2F;path&quot;&gt; </span><br><span class="line">AuthType Basic</span><br><span class="line">AuthName &quot;String“</span><br><span class="line">AuthUserFile &quot;&#x2F;PATH&#x2F;HTTPD_USER_PASSWD_FILE&quot; </span><br><span class="line">AuthGroupFile &quot;&#x2F;PATH&#x2F;HTTPD_GROUP_FILE&quot; </span><br><span class="line">Require group grpname1 grpname2 ...</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure><p>(2) 创建用户账号和组账号文件组文件：每一行定义一个组</p><p>​    GRP_NAME: username1 username2 …</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim &#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;.htgroup</span><br><span class="line">webadmins:xxx yyy</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;Directory &quot;&#x2F;www&#x2F;htdocs&#x2F;admin&quot;&gt;</span><br><span class="line">Options None</span><br><span class="line">AllowOverride None  </span><br><span class="line">AuthType Basic</span><br><span class="line">AuthName &quot;Administator private&quot;  </span><br><span class="line">AuthUserFile &quot;&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;.htpasswd&quot;  </span><br><span class="line">AuthGroupFile &quot;&#x2F;etc&#x2F;httpd&#x2F;conf.d&#x2F;.htgroup&quot;  </span><br><span class="line">Require group webadmins</span><br><span class="line">&lt;&#x2F;Directory&gt;</span><br></pre></td></tr></table></figure></li><li><p>远程客户端和用户验证的控制</p><p>Satisfy ALL|Any</p><ul><li>ALL 客户机IP和用户验证都需要通过才可以 </li><li>Any客户机IP和用户验证,有一个满足即可</li></ul><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Require valid-user</span><br><span class="line">Require all granted</span><br><span class="line">&lt;RequireAll&gt; </span><br><span class="line">Require not ip 172.16.1.1</span><br><span class="line">&lt;&#x2F;RequireAll&gt; Satisfy Any</span><br></pre></td></tr></table></figure></li><li><p>实现用户家目录的http共享<br>基于模块mod_userdir.so实现<br>相关设置：<br><code>vim /etc/httpd/conf.d/userdir.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_userdir.c&gt;</span><br><span class="line">#UserDir disabled</span><br><span class="line">UserDir public_html #指定共享目录的名称</span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure><ul><li><p>准备目录<br><code>su – kinmfer;mkdir ~/public_html</code><br><code>setfacl –m u:apache:x ~kinmfer</code></p></li><li><p>访问</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;localhost&#x2F;~kinmfer&#x2F;index.html</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ServerSignature On | Off | EMail</p><p>默认值Off，当客户请求的网页并不存在时，服务器将产生错误文档，如果打开 了 ServerSignature选项，错误文档的最后一行将包含服务器的名字、Apache 的版本等信息，如果不对外显示这些信息，就可以将这个参数设置为Off</p><p>设置为Email，将显示ServerAdmin 的Email提示</p></li><li><p>TraceEnable [on|off|extended]</p><p>是否支持trace方法，默认on，基于安全风险，建议关闭</p></li><li><p>status页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LoadModulestatus_modulemodules&#x2F;mod_status.so</span><br><span class="line">&lt;Location &quot;&#x2F;status&quot;&gt;  </span><br><span class="line">SetHandler server-status</span><br><span class="line">&lt;RequireAll&gt;</span><br><span class="line">Require 172.16</span><br><span class="line">        &lt;&#x2F;RequireAll&gt;产环境中不要使用Require all granted 这样不安全，或者直接做认证</span><br><span class="line">&lt;&#x2F;Location&gt;</span><br><span class="line">ExtendedStatus On显示扩展信息</span><br></pre></td></tr></table></figure></li><li><p>虚拟主机</p><p>站点标识： socket</p><ul><li>IP相同，但端口不同</li><li>IP不同，但端口均为默认端口</li><li>FQDN不同：请求报文中首部 Host:xxx</li></ul><p>有三种实现方案：</p><ul><li>基于ip：为每个虚拟主机准备至少一个ip地址</li><li>基于port：为每个虚拟主机使用至少一个独立的port </li><li>基于FQDN：为每个虚拟主机使用至少一个FQDN</li></ul><p>虚拟主机的配置方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost IP:PORT&gt; </span><br><span class="line">ServerName FQDN    如果不指定会反解IP所指定的域名</span><br><span class="line">DocumentRoot &quot;&#x2F;path&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>建议：上述配置存放在独立的配置文件中</p><p>其它可用指令：</p><ul><li>ServerAlias：虚拟主机的别名；可多次使用 </li><li>ErrorLog： 错误日志</li><li>CustomLog：访问日志</li><li>&lt;Directory “/path”&gt; &lt;/Directory&gt;</li><li>Alias</li></ul><p>示例：</p><ul><li><p>基于ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost 172.16.100.6:80&gt;  </span><br><span class="line">ServerName www.a.com</span><br><span class="line">DocumentRoot &quot;&#x2F;www&#x2F;a.com&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 172.16.100.7:80&gt;  </span><br><span class="line">ServerName www.b.net  </span><br><span class="line">DocumentRoot &quot;&#x2F;www&#x2F;b.net&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 172.16.100.8:80&gt;  </span><br><span class="line">ServerName www.c.org  </span><br><span class="line">DocumentRoot &quot;&#x2F;www&#x2F;c.org&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>基于端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">listen 808</span><br><span class="line">listen 8080</span><br><span class="line">&lt;VirtualHost 172.16.100.6:80&gt;  </span><br><span class="line">  ServerName www.a.com</span><br><span class="line">  DocumentRoot &quot;&#x2F;www&#x2F;a.com&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 172.16.100.6:808&gt;  </span><br><span class="line">  ServerName www.b.net  </span><br><span class="line">  DocumentRoot &quot;&#x2F;www&#x2F;b.net&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br><span class="line"></span><br><span class="line">&lt;VirtualHost 172.16.100.6:8080&gt;  </span><br><span class="line">  ServerName www.c.org  </span><br><span class="line">  DocumentRoot &quot;&#x2F;www&#x2F;c.org&#x2F;htdocs&quot;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li><li><p>基于FQDN</p><p>httpd2.4基于FQDN的虚拟主机不再需要NameVirutalHost指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *:80&gt;</span><br><span class="line">  ServerName www.b.net  </span><br><span class="line">  DocumentRoot &quot;&#x2F;apps&#x2F;b.net&#x2F;htdocs&quot;</span><br><span class="line">&lt;Directory &quot;&#x2F;apps&#x2F;b.net&#x2F;htdocs&quot;&gt;  </span><br><span class="line">  Options None  </span><br><span class="line">  AllowOverride None  </span><br><span class="line">  Require all granted</span><br><span class="line">  &lt;&#x2F;Directory&gt;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>任意目录下的页面只有显式授权才能被访问</li><li>三种方式的虚拟主机可以混和使用</li></ul></li></ul></li></ul><h2 id="mod-deflate模块"><a href="#mod-deflate模块" class="headerlink" title="mod_deflate模块"></a>mod_deflate模块</h2><ul><li><p>使用mod_deflate模块压缩页面优化传输速度</p><p><a href="http://httpd.apache.org/docs/2.4/mod/mod_deflate.html">http://httpd.apache.org/docs/2.4/mod/mod_deflate.html</a></p></li><li><p>适用场景：</p><p>(1)节约带宽，额外消耗CPU；同时，可能有些较老浏览器不支持</p><p>(2)压缩适于压缩的资源，例如文本文件</p></li><li><p>DeflateCompressionLevel 9  指定压缩比</p></li><li><p>排除特定旧版本的浏览器，不支持压缩 </p><p>Netscape 4.x 只压缩text/html</p><p>BrowserMatch ^Mozilla/4 gzip-only-text/html </p><p>Netscape 4.06-08三个版本 不压缩 </p><p>BrowserMatch ^Mozilla/4.0[678] no-gzip</p><p>Internet Explorer标识本身为“Mozilla / 4”，但实际上是能够处理请求的压 缩。如果用户代理首部匹配字符串“MSIE”（“B”为单词边界”），就关闭之前定义的限制</p><p>BrowserMatch \bMSI[E] !no-gzip !gzip-only-text/html</p></li><li><p>配置示例</p><p>编辑 http.conf 文件</p><p>去掉 #LoadModule headers_module modules/mod_headers.so 前面的注释#<br>去掉 #LoadModule deflate_module modules/mod_deflate.so 前面的注释#<br>去掉 #LoadModule filter_module modules/mod_filter.so 前面的注释#</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_deflate.c&gt;</span><br><span class="line">DeflateCompressionLevel 9</span><br><span class="line">SetOutputFilter DEFLATE</span><br><span class="line"></span><br><span class="line">AddOutputFilterByType DEFLATE text&#x2F;html </span><br><span class="line">AddOutputFilterByType DEFLATE text&#x2F;plain </span><br><span class="line">AddOutputFilterByType DEFLATE text&#x2F;xml </span><br><span class="line">AddOutputFilterByType DEFLATE text&#x2F;css </span><br><span class="line">AddOutputFilterByType DEFLATE text&#x2F;javascript </span><br><span class="line"></span><br><span class="line"># 或者这样设置</span><br><span class="line"># AddOutputFilterByType DEFLATE text&#x2F;* </span><br><span class="line">AddOutputFilterByType DEFLATE application&#x2F;x-javascript </span><br><span class="line">AddOutputFilterByType DEFLATE application&#x2F;javascript </span><br><span class="line">AddOutputFilterByType DEFLATE application&#x2F;json</span><br><span class="line">AddOutputFilterByType DEFLATE application&#x2F;ms* application&#x2F;vnd* </span><br><span class="line"></span><br><span class="line">#这段是告诉apache对php类型的文件进行压缩</span><br><span class="line">AddOutputFilterByType DEFLATE application&#x2F;x-httpd-php application&#x2F;x-httpd-fastphp</span><br><span class="line"></span><br><span class="line">#设置不对后缀gif，jpg，jpeg，png的图片文件进行压缩</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:gif|jpe?g|png)$ no-gzip dont-vary</span><br><span class="line">#同上，就是设置不对exe，tgz，gz。。。的文件进行压缩</span><br><span class="line">SetEnvIfNoCase Request_URI .(?:exe|t?gz|zip|bz2|sit|rar)$ no-gzip dont-vary </span><br><span class="line">SetEnvIfNoCase Request_URI .(?:pdf|mov|avi|mp3|mp4|rm)$ no-gzip dont-vary</span><br><span class="line"></span><br><span class="line"># 有一些问题，所以只压缩文件类型是text&#x2F;html的</span><br><span class="line">BrowserMatch ^Mozilla&#x2F;4 gzip-only-text&#x2F;html # Netscape 4.x </span><br><span class="line"># 有更多的问题，所以不开启压缩</span><br><span class="line">BrowserMatch ^Mozilla&#x2F;4.0[678] no-gzip # Netscape 4.06-4.08 </span><br><span class="line"># IE浏览器会伪装成 Netscape ，但是事实上它没有问题</span><br><span class="line">BrowserMatch \bMSIE !no-gzip !gzip-only-text&#x2F;html </span><br><span class="line">&lt;&#x2F;IfModule&gt;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Https"><a href="#Https" class="headerlink" title="Https"></a>Https</h2><ul><li><p>https：http over ssl</p></li><li><p>SSL会话的简化过程</p><p>(1)客户端发送可供选择的加密方式，并向服务器请求证书</p><p>(2)服务器端发送证书以及选定的加密方式给客户端</p><p>(3)客户端取得证书并进行证书验证</p><p>​    如果信任给其发证书的CA</p><p>​            (a)验证证书来源的合法性；用CA的公钥解密证书上数字签名</p><p>​            (b)验证证书的内容的合法性：完整性验证</p><p>​            (c)检查证书的有效期限</p><p>​            (d)检查证书是否被吊销</p><p>​            (e)证书中拥有者的名字，与访问的目标主机要一致</p><p>(4)客户端生成临时会话密钥（对称密钥），并使用服务器端的公钥加密此数据发送给服务器，完成密钥交换</p><p>(5)服务用此密钥加密用户请求的资源，响应给客户端</p></li><li><p>注意：SSL是基于IP地址实现,单IP的主机仅可以使用一个https虚拟主机</p></li><li><p><code>httpd -t -D DUMP_VHOSTS</code> 查看虚拟主机配置</p></li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>(1) 为服务器申请数字证书</p><p>​    测试：通过私建CA发证书</p><p>​            (a)创建私有CA</p><p>​            (b)在服务器创建证书签署请求</p><p>​            (c)CA签证</p><p>(2) 配置httpd支持使用ssl，及使用的证书</p><p>​    <code>yum -y install mod_ssl</code></p><p>​    配置文件：/etc/httpd/conf.d/ssl.conf </p><p>​                DocumentRoot</p><p>​                ServerName </p><p>​                SSLCertificateFile </p><p>​                SSLCertificateKeyFile</p><p>(3) 测试基于https访问相应的主机</p><p>​    <code>openssl s_client [-connect host:port] [-cert filename] [-CApath directory] [-CAfile filename]</code></p><h2 id="http重定向https"><a href="#http重定向https" class="headerlink" title="http重定向https"></a>http重定向https</h2><ul><li><p>将http请求转发至https的URL</p></li><li><p>重定向</p><p>Redirect [status] URL-path URL</p></li><li><p>status状态：</p><ul><li>permanent： 返回永久重定向状态码 301</li><li>temp：返回临时重定向状态码302. 此为默认值</li></ul></li><li><p>示例：</p><p>Redirect temp / <a href="https://www.kinmfer.com/">https://www.kinmfer.com/</a></p></li></ul><h2 id="HSTS"><a href="#HSTS" class="headerlink" title="HSTS"></a>HSTS</h2><ul><li><p>HSTS:HTTP Strict Transport Security</p><p>服务器端配置支持HSTS后，会在给浏览器返回的HTTP首部中携带HSTS字段。 浏览器获取到该信息后，会将所有HTTP访问请求在内部做307跳转到HTTPS。 而无需任何网络过程</p></li><li><p>HSTS preload list</p><p>是Chrome浏览器中的HSTS预载入列表，在该列表中的网站，使用Chrome浏 览器访问时，会自动转换成HTTPS。Firefox、Safari、Edge浏览器也会采用这 个列表</p></li><li><p>实现HSTS示例：</p><p><code>vim /etc/httpd/conf/httpd.conf</code></p><p>Header always set Strict-Transport-Security “max-age=31536000” RewriteEngine on</p><p>RewriteRule ^(/.*)$ https://%{HTTP_HOST}$1 [redirect=302]</p></li></ul><h2 id="正向代理和反向代理"><a href="#正向代理和反向代理" class="headerlink" title="正向代理和反向代理"></a>正向代理和反向代理</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200508141517838.png" alt="image-20200508141517838"></p><ul><li><p>启用反向代理</p><p>ProxyPass “/“  “<a href="http://www.example.com/&quot;">http://www.example.com/&quot;</a></p><p>ProxyPassReverse “/“ “<a href="http://www.example.com/&quot;">http://www.example.com/&quot;</a></p></li><li><p>特定URL反向代理</p><p>ProxyPass “/images” “<a href="http://www.example.com/&quot;">http://www.example.com/&quot;</a></p><p>ProxyPassReverse “/images” <a href="http://www.example.com/">http://www.example.com/</a></p></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;VirtualHost *&gt;</span><br><span class="line">ServerName www.magedu.com  ProxyPass &#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F; ProxyPassReverse &#x2F; http:&#x2F;&#x2F;localhost:8080&#x2F;</span><br><span class="line">&lt;&#x2F;VirtualHost&gt;</span><br></pre></td></tr></table></figure></li></ul><h1 id="Web相关工具"><a href="#Web相关工具" class="headerlink" title="Web相关工具"></a>Web相关工具</h1><ul><li><p>links [OPTION]… [URL]… 文本模式的WWW浏览器</p><ul><li>-dump 非交互式模式，显示输出结果</li><li>-source 打印源码</li><li>-g 以图形模式运行</li></ul></li><li><p>elinks 能实现一个纯文本界面的www浏览器</p><ul><li>-anonymous：是否使用匿名帐号方式；</li><li>-auto-submit：对于偶然遇到的第一个表单是否自动提交；</li><li>-config-dir：指定elinks指令运行时读取和写入自身的配置和运行状态的存放目录；</li><li>-dump：不进入交互模式，将HTML文档以纯文本的方式打印到标准输出设备；</li></ul></li><li><p>wget [OPTION]… [URL]…</p><ul><li>-q 静默模式</li><li>-c 断点续传</li><li>-P /path 保存在指定目录</li><li>-O filename 保存为指定文件名，filename 为 – 时，发送至标准输出</li><li>–limit-rate= 指定传输速率，单位K，M等</li></ul></li><li><p>curl工具</p><p>curl是基于URL语法在命令行方式下工作的文件传输工具，它支持FTP, FTPS,HTTP, HTTPS, GOPHER, TELNET, DICT, FILE及LDAP等协议。curl支持HTTPS认证，并且支持HTTP的POST、PUT等方法， FTP上传， kerberos认证，HTTP上 传，代理服务器，cookies，用户名/密码认证， 下载文件断点续传，上载文件断 点续传, http代理服务器管道（ proxy tunneling），还支持IPv6，socks5代理服 务器，通过http代理服务器上传文件到FTP服务器等，功能十分强大</p></li><li><p>curl [options] [URL…]</p><ul><li>-A/–user-agent &lt;string&gt; 设置用户代理发送给服务器</li><li>-e/–referer &lt;URL&gt; 来源网址</li><li>–cacert &lt;file&gt; CA证书 (SSL)</li><li>-k/–insecure 允许忽略证书进行 SSL 连接</li><li>–compressed 要求返回是压缩的格式</li><li>-H/–header &lt;line&gt;自定义首部信息传递给服务器</li><li>-i 显示页面内容，包括报文首部信息</li><li>-I/–head 只显示响应报文首部信息</li><li>-D/–dump-header &lt;file&gt;将url的header信息存放在指定文件中</li><li>–basic 使用HTTP基本认证</li><li>-u/–user &lt;user[:password]&gt;设置服务器的用户和密码</li><li>-L 如果有3xx响应码，重新发请求到新位置</li><li>-O 使用URL中默认的文件名保存文件到本地</li><li>-o &lt;file&gt; 将网络文件保存为指定的文件中</li><li>–limit-rate &lt;rate&gt; 设置传输速度</li><li>-0/–http1.0 数字0，使用HTTP 1.0</li><li>-v/–verbose 更详细</li><li>-C 选项可对文件使用断点续传功能</li><li>-c/–cookie-jar &lt;file name&gt; 将url中cookie存放在指定文件中</li><li>-x/–proxy &lt;proxyhost[:port]&gt; 指定代理服务器地址</li><li>-X/–request &lt;command&gt; 向服务器发送指定请求方法</li><li>-U/–proxy-user <a href="user:password">user:password</a> 代理服务器用户和密码</li><li>-T 选项可将指定的本地文件上传到FTP服务器上</li><li>–data/-d 方式指定使用POST方式传递数据</li><li>-b name=data 从服务器响应set-cookie得到值，返回给服务器</li></ul></li></ul><h2 id="Httpd自带的工具程序"><a href="#Httpd自带的工具程序" class="headerlink" title="Httpd自带的工具程序"></a>Httpd自带的工具程序</h2><ul><li><p>httpd自带的工具程序</p><ul><li><p>htpasswd：basic认证基于文件实现时，用到的账号密码文件生成工具 </p></li><li><p>apachectl：httpd 自 带 的 服 务 控 制 脚 本 ， 支 持 start 和 stop </p></li><li><p>rotatelogs：日志滚动工具</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">access.log --&gt;</span><br><span class="line">access.log, access.1.log --&gt;</span><br><span class="line">access.log, acccess.1.log, access.2.log</span><br></pre></td></tr></table></figure></li><li><p>apxs :由httpd自带的服务控制脚本，支持start和stop</p></li><li><p>suexec：访问某些有特殊权限配置的资源时，临时切换至指定用户身份运行</p></li></ul></li><li><p>httpd的压力测试工具</p><ul><li>ab, webbench, http_load, seige</li><li>Jmeter 开源</li><li>Loadrunner 商业，有相关认证</li><li>tcpcopy：网易，复制生产环境中的真实请求，并将之保存</li><li>ab [OPTIONS] URL 来自httpd-tools包<ul><li>-n：总请求数</li><li>-c：模拟的并行数</li><li>-k：以持久连接模式测试</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Apache </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Apache </tag>
            
            <tag> 网站服务 </tag>
            
            <tag> http服务 </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git常用命令</title>
      <link href="2020/05/09/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>2020/05/09/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h1 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支(*代表当前所在分支)</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure><h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示工作区与当前分支最新commit之间的差异</span></span><br><span class="line">$ git diff HEAD</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示两次提交之间的差异</span></span><br><span class="line">$ git diff [first-branch]...[second-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示今天你写了多少行代码</span></span><br><span class="line">$ git diff --shortstat <span class="string">&quot;@&#123;0 day ago&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交的元数据和内容变化</span></span><br><span class="line">$ git show [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交发生变化的文件</span></span><br><span class="line">$ git show --name-only [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某次提交时，某个文件的内容</span></span><br><span class="line">$ git show [commit]:[filename]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的最近几次提交</span></span><br><span class="line">$ git reflog</span><br></pre></td></tr></table></figure><h1 id="远程同步"><a href="#远程同步" class="headerlink" title="远程同步"></a>远程同步</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载远程仓库的所有变动</span></span><br><span class="line">$ git fetch [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有远程仓库</span></span><br><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个远程仓库的信息</span></span><br><span class="line">$ git remote show [remote]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 增加一个新的远程仓库，并命名</span></span><br><span class="line">$ git remote add [shortname] [url]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取回远程仓库的变化，并与本地分支合并</span></span><br><span class="line">$ git pull [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 上传本地指定分支到远程仓库</span></span><br><span class="line">$ git push [remote] [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 强行推送当前分支到远程仓库，即使有冲突</span></span><br><span class="line">$ git push [remote] --force</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送所有分支到远程仓库</span></span><br><span class="line">$ git push [remote] --all</span><br></pre></td></tr></table></figure><h1 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 恢复暂存区的指定文件到工作区</span></span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复某个commit的指定文件到暂存区和工作区</span></span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复暂存区的所有文件到工作区</span></span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span></span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置暂存区与工作区，与上一次commit保持一致</span></span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span></span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span></span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span></span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个commit，用来撤销指定commit</span></span><br><span class="line"><span class="comment"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span></span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 暂时将未提交的变化移除，稍后再移入</span></span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-16-DHCP和DNS</title>
      <link href="2020/05/09/Linux%E5%9F%BA%E7%A1%80-16-DHCP%E5%92%8CDNS/"/>
      <url>2020/05/09/Linux%E5%9F%BA%E7%A1%80-16-DHCP%E5%92%8CDNS/</url>
      
        <content type="html"><![CDATA[<h1 id="DHCP服务原理"><a href="#DHCP服务原理" class="headerlink" title="DHCP服务原理"></a>DHCP服务原理</h1><p>DHCP：动态主机设置协议，是一个局域网协议，使用UDP协议工作</p><h2 id="主要有两个用途"><a href="#主要有两个用途" class="headerlink" title="主要有两个用途"></a>主要有两个用途</h2><ul><li>用于局域网或网络服务供应商自动分配IP地址</li><li>给用户用于内部网管理员作为所有计算机的中央管理的手段</li></ul><h2 id="DHCP优点"><a href="#DHCP优点" class="headerlink" title="DHCP优点"></a>DHCP优点</h2><ul><li>减少管理员的工作量</li><li>避免IP地址冲突</li><li>提高IP地址的利用率</li><li>移动计算机之后不用重新配置网络信息，能够方便更改错误的可能性</li></ul><h2 id="DHCP相关概念"><a href="#DHCP相关概念" class="headerlink" title="DHCP相关概念"></a>DHCP相关概念</h2><ul><li>DHCP客户端：获取网络配置信息</li><li>DHCP服务端：提供网络配置参数（IP地址、DNS、Gateway等）</li><li>DHCP中继代理：服务端和客户端之间转发DHCP的设备</li><li>作用域：一个网络中所有可分配的IP地址的连续范围，主要用来定义物理子网的单一IP地址范围</li><li>超级作用域：一组作用域的集合，实现一个物理子网中多个逻辑IP地址</li><li>排除范围：移除作用域中有限的IP地址序列（不使用DHCP服务）</li><li>地址池：定义作用域-排除范围之后，剩余的所有地址形成可用地址池 </li><li>保留：DHCP服务器提供永久地址租约，确保客户端始终使用相同的IP地址</li><li>租用：客户从服务器上获得并临时占用某个IP地址的过程</li><li>租约：<ul><li>获得的IP地址使用时间</li><li>获得IP地址时租约会被激活并更新其地址租约，当租约到期或者被删除时租约会停止</li></ul></li></ul><h2 id="DHCP租约更新"><a href="#DHCP租约更新" class="headerlink" title="DHCP租约更新"></a>DHCP租约更新</h2><ul><li>自动更新租约：<ul><li>当租约 &gt;= 50%  自动尝试更新租约</li><li>当租约 &gt;= 87.5% 发出广播再次更新租约</li><li>当租约 &gt;= 100% 客户端停止使用当前的IP地址，只能够重新进行DHCP租约过程</li></ul></li></ul><h2 id="DHCP运行过程"><a href="#DHCP运行过程" class="headerlink" title="DHCP运行过程"></a>DHCP运行过程</h2><ol><li>C端向局域网中发送一个DHCP discover包，主要用于发现S端</li><li>S端接收到discover包，回应offer包给C端，告诉它“我能够提供IP地址”</li><li>C端收到offer包之后，发送Request包请求IP地址</li><li>S端发送ACK包，确认信息</li></ol><p><strong>注意：如果局域网中DHCP服务器没有响应请求，则主机会默认配置169.254.xxx.xxx来实现局域网的通信。</strong></p><p>日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">/var/<span class="built_in">log</span>/message </span><br><span class="line">Feb 22 20:28:25 <span class="built_in">test</span> dhclient[1779]: DHCPDISCOVER on ens34 to 255.255.255.255 port 67 interval 11 (xid=0x65b7cc35)</span><br><span class="line">Feb 22 20:28:26 <span class="built_in">test</span> dhclient[1779]: DHCPREQUEST on ens34 to 255.255.255.255 port 67 (xid=0x65b7cc35)</span><br><span class="line">Feb 22 20:28:26 <span class="built_in">test</span> dhclient[1779]: DHCPOFFER from 192.168.10.254</span><br><span class="line">Feb 22 20:28:26 <span class="built_in">test</span> dhclient[1779]: DHCPACK from 192.168.10.254 (xid=0x65b7cc35)</span><br><span class="line">bound to 192.168.10.131 -- renewal <span class="keyword">in</span> 772 seconds.</span><br></pre></td></tr></table></figure><h2 id="手动更新租约"><a href="#手动更新租约" class="headerlink" title="手动更新租约"></a>手动更新租约</h2><ul><li>Windows：<code>ipconfig /renew | /release </code></li><li>Linux：<code>dhclient -r </code></li></ul><h1 id="DNS服务"><a href="#DNS服务" class="headerlink" title="DNS服务"></a>DNS服务</h1><h2 id="DNS介绍"><a href="#DNS介绍" class="headerlink" title="DNS介绍"></a>DNS介绍</h2><ul><li>DNS：域名解析提供，一个分布式数据系统，作用是将域名解析成IP地址；它能让用户使用名字来代替IP地址进行记忆，来访问Internet上的服务主机</li><li>DNS是基于c/s模型设计的</li></ul><h2 id="DNS域名"><a href="#DNS域名" class="headerlink" title="DNS域名"></a>DNS域名</h2><ul><li>根域</li><li>一级域名：Top Level Domain: tld<br>com, edu, mil, gov, net, org, int,arpa<br>三类：组织域、国家域(.cn, .ca, .hk, .tw)、反向域</li><li>二级域名</li><li>三级域名</li><li>最多127级域名</li><li>ICANN（The Internet Corporation for Assigned Names and Numbers）互联网名称与数字地址分配机构，负责在全球范围内对互联网通用顶级域名（gTLD）以及国家和地区顶级域名（ccTLD）系统的管理、以及根服务器系统的管理</li></ul><h2 id="DNS域名结构"><a href="#DNS域名结构" class="headerlink" title="DNS域名结构"></a>DNS域名结构</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200724201208660.png" alt="image-20200724201208660"></p><h2 id="DNS系统组成"><a href="#DNS系统组成" class="headerlink" title="DNS系统组成"></a>DNS系统组成</h2><ul><li>域名空间：表示一组数据并提供它们的有关信息的树结构的详细说明</li><li>域名服务器：保持和维护域名空间中的数据</li><li>Stub解析器：简单的程序，它从服务器中获取信息来响应对域名空间中主机的查询,用于DNS客户端</li></ul><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><ul><li>DNS查询类型：<ul><li>递归查询：DNS服务代理请求客户端联系其他DNS服务器，以完全解析，返回给客户端(帮助你一级一级查找)</li><li>迭代查询：客户机自己不断请求DNS服务来解析名称，典型的DNS服务器之间的交互(告诉你服务器IP，让你自己找)</li></ul></li><li>名称服务器：域内负责解析本域内的名称的主机<ul><li>根服务器：13组服务器</li></ul></li><li>解析类型：<ul><li>FQDN –&gt; IP</li><li>IP –&gt; FQDN</li></ul></li><li>注意：正反向解析是两个不同的名称空间，是两棵不同的解析树</li></ul><hr><ul><li>一次完整的查询请求经过的流程：<br>Client –&gt;hosts文件 –&gt;DNS Service Local Cache –&gt; DNS Server<br>(recursion) –&gt; Server Cache –&gt; iteration(迭代) –&gt; 根–&gt; 顶级域名DNS–&gt;<br>二级域名DNS…</li><li>解析答案：<ul><li>肯定答案</li><li>否定答案：请求的条目不存在等原因导致无法返回结果</li><li>权威答案</li><li>非权威答案</li></ul></li></ul><h2 id="DNS解析过程"><a href="#DNS解析过程" class="headerlink" title="DNS解析过程"></a>DNS解析过程</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200724201426926.png" alt="image-20200724201426926"></p><ol><li>浏览器缓存</li><li>系统缓存</li><li>路由器缓存 —–&gt; 客户端的使用</li><li>ISP DNS缓存</li><li>根域名服务器</li><li>顶级域名服务器</li><li>主机名服务器</li><li>保存结果（缓存）</li></ol><h2 id="DNS服务器类型"><a href="#DNS服务器类型" class="headerlink" title="DNS服务器类型"></a>DNS服务器类型</h2><ul><li><p>权威性服务器</p><ul><li>主域名服务器</li><li>辅助域名服务器：作为主域名服务器的冗余服务<ul><li>主域名服务器和辅助域名服务器之间的数据同步使用的是TCP协议；其他情况下<br>一般都是使用UDP协议</li><li>残根域名服务器</li><li>秘密域名服务器</li></ul></li></ul></li><li><p>非权威服务器</p><ul><li>高速缓存服务器</li><li>转发服务器</li></ul></li><li><p>主DNS服务器：管理和维护所负责解析的域内解析库的服务器</p></li><li><p>从DNS服务器：从主服务器或从服务器“复制”（区域传输）解析库副本</p><ul><li>序列号：解析库版本号，主服务器解析库变化时，其序列递增</li><li>刷新时间间隔：从服务器从主服务器请求同步解析的时间间隔</li><li>重试时间间隔：从服务器请求同步失败时，再次尝试时间间隔</li><li>过期时长：从服务器联系不到主服务器时，多久后停止服务</li></ul></li><li><p>“通知”机制：主服务器解析库发生变化时，会主动通知从服务器</p></li><li><p>说明：</p><ol><li>所有的服务器均设置了缓存服务器来提供域名解析（提高解析效率）</li><li>一些域的主域名服务器可以是另一些域名服务器</li><li>一个域只能创建一个主机域名服务器，另外至少去创建两个辅助域名服务器（冗余和负载）</li><li>转发服务器一般用于不希望用户直接访问域名服务器的情况下</li></ol></li></ul><h2 id="DNS区域"><a href="#DNS区域" class="headerlink" title="DNS区域"></a>DNS区域</h2><ul><li>方便根据实际情况来分散域名管理工作的负载，将DNS域名空间划分为多个区域进行管理<ul><li>区域是DNS服务器管理的范围</li><li>DNS服务器以区域为单位来管理域名空间的</li></ul></li><li>一台DNS服务器可以管理一个或多个区域，而一个区域也可以由多台DNS服务进行管理<ul><li>将DNS域名空间划分为几个zone，它存储着有关一个或多个DNS域的名称信息</li><li>在DNS服务器中必须先建立区域，再在区域中建立子域，然后去添加主机信息</li></ul></li></ul><h2 id="域的委托管理"><a href="#域的委托管理" class="headerlink" title="域的委托管理"></a>域的委托管理</h2><ul><li>管理是分布式，DNS将子域授权给其他组织进行管理</li><li>优点：<ol><li>工作负载减轻</li><li>提高域名服务器的响应速率</li><li>提高网络带宽的利用率</li></ol></li></ul><h2 id="区域传输"><a href="#区域传输" class="headerlink" title="区域传输"></a>区域传输</h2><ul><li>区域传输：<ul><li>完全传输：传送整个解析库</li><li>增量传输：传递解析库变化的那部分内容</li></ul></li><li>Domain: Fully Qualified Domain Name<ul><li>正向：FQDN –&gt; IP</li><li>反向: IP –&gt; FQDN</li></ul></li><li>负责本地域名的正向和反向解析库<ul><li>正向区域</li><li>反向区域</li></ul></li></ul><h2 id="资源记录"><a href="#资源记录" class="headerlink" title="资源记录"></a>资源记录</h2><ul><li><p>区域解析库：由众多RR组成</p><ul><li>资源记录：Resource Record, RR</li><li>记录类型：A, AAAA, PTR, SOA, NS, CNAME, MX</li></ul></li><li><p>SOA：Start Of Authority，起始授权记录；一个区域解析库有且仅能有一个 SOA记录，必须位于解析库的第一条记录</p></li><li><p>A：internet Address，作用，FQDN –&gt; IPv4</p></li><li><p>AAAA：FQDN –&gt; IPv6</p></li><li><p>PTR：PoinTeR，IP –&gt; FQDN</p></li><li><p>NS：Name Server，专用于标明当前区域的DNS服务器</p></li><li><p>CNAME ： Canonical Name，别名记录</p></li><li><p>MX：Mail eXchanger，邮件交换器</p></li><li><p>TXT：对域名进行标识和说明的一种方式，一般做验证记录时会使用此项，如： SPF（反垃圾邮件）记录，https验证等</p><p>示例：_dnsauth TXT 2012011200000051qgs69bwoh4h6nht4n1h0lr038x</p></li></ul><h3 id="资源记录定义的格式"><a href="#资源记录定义的格式" class="headerlink" title="资源记录定义的格式"></a>资源记录定义的格式</h3><p>语法：name [TTL] IN rr_type value<br>注意：</p><ol><li>TTL可从全局继承</li><li>@可用于引用当前区域的名字</li><li>同一个名字可以通过多条记录定义多个不同的值；此时DNS服务器会以轮询方式响应</li><li>同一个值也可能有多个不同的定义名字；通过多个不同的名字指向同一个值进行定义；此仅表示通过多个不同的名字可以找到同一个主机</li></ol><h3 id="SOA记录"><a href="#SOA记录" class="headerlink" title="SOA记录"></a>SOA记录</h3><ul><li><p>name: 当前区域的名字，例如“kinmfer.com.”</p></li><li><p>value: 有多部分组成</p><ol><li>当前区域的主DNS服务器的FQDN，也可以使用当前区域的名字；</li><li>当前区域管理员的邮箱地址；但地址中不能使用@符号，一般用.替换<br>例如：admin.kinmfer.com</li><li>主从服务区域传输相关定义以及否定的答案的统一的TTL</li></ol></li><li><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">kinmfer.com. 86400 IN SOA ns.kinmfer.com.nsadmin.kinmfer.com. (</span><br><span class="line">2015042201 ;序列号</span><br><span class="line">2H ;刷新时间</span><br><span class="line">10M ;重试时间</span><br><span class="line">1W ;过期时间</span><br><span class="line">1D ;否定答案的TTL值</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li></ul><h3 id="NS记录"><a href="#NS记录" class="headerlink" title="NS记录"></a>NS记录</h3><ul><li><p>name: 当前区域的名字</p></li><li><p>value: 当前区域的某DNS服务器的名字，例如ns.kinmfer.com.</p></li><li><p>注意：</p><ol><li><p>一个区域可以有多个NS记录<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kinmfer.com. IN NS ns1.kinmfer.com.</span><br><span class="line">kinmfer.com. IN NS ns2.kinmfer.com.</span><br></pre></td></tr></table></figure></li><li><p>相邻的两个资源记录的name相同时，后续的可省略</p></li><li><p>对NS记录而言，任何一个ns记录后面的服务器名字，都应该在后续有<br>一个A记录</p></li></ol></li></ul><h3 id="MX记录"><a href="#MX记录" class="headerlink" title="MX记录"></a>MX记录</h3><ul><li><p>name: 当前区域的名字</p></li><li><p>value: 当前区域的某邮件服务器(smtp服务器)的主机名</p></li><li><p>一个区域内，MX记录可有多个；但每个记录的value之前应该有一个数字(0-99)，表示此服务器的优先级；数字越小优先级越高<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kinmfer.com.IN MX 10 mx1.kinmfer.com.</span><br><span class="line">IN MX 20 mx2.kinmfer.com.</span><br></pre></td></tr></table></figure></li><li><p>注意：对MX记录而言，任何一个MX记录后面的服务器名字，都应该在后续有一个A记录</p></li></ul><h3 id="A记录"><a href="#A记录" class="headerlink" title="A记录"></a>A记录</h3><ul><li><p>name: 某主机的FQDN，例如：<a href="http://www.kinmfer.com/">www.kinmfer.com</a>.</p></li><li><p>value: 主机名对应主机的IP地址<br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">www.kinmfer.com. IN A 1.1.1.1</span><br><span class="line">www.kinmfer.com. IN A 2.2.2.2</span><br><span class="line">mx1.kinmfer.com. IN A 3.3.3.3</span><br><span class="line">mx2.kinmfer.com. IN A 4.4.4.4</span><br><span class="line">$GENERATE 1-254 HOST$ IN A 1.2.3.$</span><br><span class="line">*.kinmfer.com. IN A 5.5.5.5</span><br><span class="line">kinmfer.com. IN A 6.6.6.6</span><br></pre></td></tr></table></figure></li><li><p>避免用户写错名称时给错误答案，可通过泛域名解析进行解析至某特定地址</p></li></ul><h3 id="别名记录"><a href="#别名记录" class="headerlink" title="别名记录"></a>别名记录</h3><p>CNAME：</p><ul><li>name: 别名的FQDN</li><li>value: 真正名字的FQDN</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.kinmfer.com. IN CNAME websrv.kinmfer.com.</span><br></pre></td></tr></table></figure><h3 id="其他记录"><a href="#其他记录" class="headerlink" title="其他记录"></a>其他记录</h3><ul><li><p>AAAA:</p><ul><li>name: FQDN</li><li>value: IPv6</li></ul></li><li><p>PTR:</p><ul><li>name: IP，有特定格式，把IP地址反过来写，1.2.3.4，要写作4.3.2.1；而有特定后缀：in-addr.arpa.，所以完整写法为：4.3.2.1.in-addr.arpa.</li><li>value: FQDN</li></ul><p>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4.3.2.1.in-addr.arpa. IN PTR www.kinmfer.com.</span><br></pre></td></tr></table></figure><p>如1.2.3为网络地址，可简写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4 IN PTR www.kinmfer.com.</span><br></pre></td></tr></table></figure><p>注意：网络地址及后缀可省略；主机地址依然需要反着写</p></li></ul><h3 id="子域"><a href="#子域" class="headerlink" title="子域"></a>子域</h3><ul><li><p>子域授权：每个域的名称服务器，都是通过其上级名称服务器在解析库进行授权</p></li><li><p>类似根域授权tld：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.com. IN NS ns1.com.</span><br><span class="line">.com. IN NS ns2.com.</span><br><span class="line">ns1.com. IN A 2.2.2.1</span><br><span class="line">ns2.com. IN A 2.2.2.2</span><br></pre></td></tr></table></figure></li><li><p>kinmfer.com. 在.com的名称服务器上，解析库中添加资源记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">kinmfer.com. IN NS ns1.kinmfer.com.</span><br><span class="line">kinmfer.com. IN NS ns2.kinmfer.com.</span><br><span class="line">kinmfer.com. IN NS ns3.kinmfer.com.</span><br><span class="line">ns1.kinmfer.com. IN A 3.3.3.1</span><br><span class="line">ns2.kinmfer.com. IN A 3.3.3.2</span><br><span class="line">ns3.kinmfer.com. IN A 3.3.3.3</span><br></pre></td></tr></table></figure></li><li><p>glue record：粘合记录，父域授权子域的记录</p></li></ul><h2 id="系统DNS配置文件"><a href="#系统DNS配置文件" class="headerlink" title="系统DNS配置文件"></a>系统DNS配置文件</h2><ul><li>读取的配置文件：<ul><li>控制文件: /etc/host.conf  /etc/hosts </li><li>配置文件： /etc/resolv.conf</li></ul></li><li>/etc/host.conf配置文件：<ul><li>Order：指定使用不同的名称解析机制的顺序      <ul><li>hosts：/etc/hosts文件      </li><li>bind：使用DNS服务器      </li><li>nis：使用NIS服务  </li></ul></li><li>Alert：以off和on为参数。若为on，则任何试图骗取IP地址的行为都通过syslog工具进行记录   </li><li>Nospoof ：若在反向解析找出与指定的地址匹配的主机名，则对返回的地址进行解析以确认它确实与您的查询地址相匹配。为了防止“骗取”IP地址，通过指定nospoof on来允许此功能  </li><li>multi on ：表示是否运行/etc/hosts文件允许主机指定多个地址 ，on表示运行<br>rccorder ：如果被设置为on，那么所有查询将被重新排序。 </li></ul></li><li>/etc/resolv.conf配置文件：<ul><li>search localdomain    # 允许查询本地域名空间</li><li>nameserver 172.16.0.2   # 指定域名服务器</li><li>domain: 定义默认的域名（主机的本地域名）</li><li>options: <ul><li>rotate: 打开客户端，进行轮询查询，多个nameserver的时候</li><li>nochecnames: 当需要使用到“_”的域名时，需要设置该选项</li></ul></li></ul></li></ul><h2 id="智能DNS"><a href="#智能DNS" class="headerlink" title="智能DNS"></a>智能DNS</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725204455016.png" alt="image-20200725204455016"></p><h2 id="GSLB和CDN"><a href="#GSLB和CDN" class="headerlink" title="GSLB和CDN"></a>GSLB和CDN</h2><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725204543047.png" alt="image-20200725204543047"></p><h3 id="GSLB"><a href="#GSLB" class="headerlink" title="GSLB"></a>GSLB</h3><ul><li>GSLB：Global Server Load Balance全局负载均衡</li><li>GSLB是对服务器和链路进行综合判断来决定由哪个地点的服务器来提供服务，实现异地服务器群服务质量的保证</li><li>GSLB主要的目的是在整个网络范围内将用户的请求定向到最近的节点（或者区域）</li><li>GSLB分为基于DNS实现、基于重定向实现、基于路由协议实现，其中最通用的是基于DNS解析方式</li></ul><h3 id="CDN"><a href="#CDN" class="headerlink" title="CDN"></a>CDN</h3><p>内容分发网络：Content Delivery Network</p><p>服务商：蓝汛，网宿，帝联等</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725204729205.png" alt="image-20200725204729205"></p><p><strong>工作原理</strong></p><p>1.用户向浏览器输入<a href="http://www.a.com这个域名,浏览器第一次发现本地没有dns缓存,则向网站的dns服务器请求/">www.a.com这个域名，浏览器第一次发现本地没有dns缓存，则向网站的DNS服务器请求</a></p><p>2.网站的DNS域名解析器设置了CNAME，指向了<a href="http://www.a.tbcdn.com,请求指向了cdn网络中的智能dns负载均衡系统/">www.a.tbcdn.com,请求指向了CDN网络中的智能DNS负载均衡系统</a></p><p>3.智能DNS负载均衡系统解析域名，把对用户响应速度最快的IP节点返回给用户；</p><p>4.用户向该IP节点（CDN服务器）发出请求</p><p>5.由于是第一次访问，CDN服务器会通过Cache内部专用DNS解析得到此域名的原web站点IP，向原站点服务器发起请求，并在CDN服务器上缓存内容</p><p>6.请求结果发给用户</p><p><img src="https://gitee.com/kinmfer/BlogImages/raw/master/img/image-20200725204827830.png" alt="image-20200725204827830"></p><h2 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h2><h3 id="dig"><a href="#dig" class="headerlink" title="dig"></a>dig</h3><ul><li>dig [-t type] name [@SERVER] [query options]<br>dig只用于测试dns系统，不会查询hosts文件进行解析<ul><li>-t    指定要查询的DNS数据类型(默认为A)</li><li>-x   执行逆向域名查询</li><li>-b   使用指定的本机ip地址向域名服务器发送域名查询请求</li></ul></li><li>查询选项：<ul><li>+[no]trace：跟踪解析过程 : dig +trace magedu.com</li><li>+[no]recurse：进行递归解析</li><li>+[no]short：提供简要答复。缺省值是以冗长格式显示答复信息。</li><li>测试反向解析：<br>dig -x IP = dig –t ptr reverseip.in-addr.arpa</li><li>模拟区域传送：<br>dig -t axfr ZONE_NAME @SERVER<br>dig -t axfr magedu.com @10.10.10.11<br>dig –t axfr 100.1.10.in-addr.arpa @172.16.1.1<br>dig -t NS . @114.114.114.114<br>dig -t NS . @a.root-servers.net</li></ul></li></ul><h3 id="host"><a href="#host" class="headerlink" title="host"></a>host</h3><h3 id="nslookup"><a href="#nslookup" class="headerlink" title="nslookup"></a>nslookup</h3><h2 id="BIND"><a href="#BIND" class="headerlink" title="BIND"></a>BIND</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ul><li>DNS服务器软件：bind，powerdns，unbound</li><li>BIND相关程序包：yum list all bind*<ul><li>bind：服务器</li><li>bind-libs：相关库</li><li>bind-utils:客户端</li><li>bind-chroot: /var/named/chroot/</li></ul></li><li>BIND程序名：named</li></ul><hr><p><strong>yum安装</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install <span class="built_in">bind</span> -y</span><br></pre></td></tr></table></figure><p><strong>编译安装</strong></p><ul><li><p>下载bind:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">isc.org:</span><br><span class="line">bind-9.10</span><br><span class="line">bind-9.11</span><br><span class="line">bind-10</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>编译安装bind</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">tar xvf bind-9.11.0a3.tar.gz</span><br><span class="line"><span class="built_in">cd</span> bind-9.11.0a3/</span><br><span class="line">groupadd -r -g 53 named</span><br><span class="line">useradd -r -u 53 -g 53 named</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/bind9 --sysconfdir=/etc/named/ --withoutopenssl</span><br><span class="line">--disable-ipv6 --disable-chroot --enable-threads</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>环境变量：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/profile.d/named.sh</span><br><span class="line"><span class="built_in">export</span> PATH=/usr/<span class="built_in">local</span>/bind9/bin:/usr/<span class="built_in">local</span>/bind9/sbin/:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure></li><li><p>库和头文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/ld.so.conf.d/named.conf</span><br><span class="line">/usr/<span class="built_in">local</span>/bind9/lib</span><br><span class="line"></span><br><span class="line">ldconfig –v</span><br><span class="line"></span><br><span class="line">ls -sv /usr/<span class="built_in">local</span>/bind9/include /usr/include/named</span><br></pre></td></tr></table></figure></li><li><p>man帮助</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/man.config | /etc/man_db.conf</span><br><span class="line">MANPATH /usr/<span class="built_in">local</span>/bind9/share/man</span><br><span class="line">man named.conf</span><br></pre></td></tr></table></figure></li><li><pre><code class="sh">vim /etc/named/named.conf    options &#123;        directory “/var/named/”;    &#125;;    zone &quot;.&quot; IN &#123;        type hint;        file &quot;named.ca&quot;;    &#125;;    zone &quot;localhost&quot; IN &#123;        type master;        file “named.localhost&quot;;        allow-update &#123;none;&#125;;    &#125;;zone “1.0.0.127.in-addr.arpa&quot; IN &#123;        type master;        file &quot;named.loopback&quot;;        allow-update &#123;none;&#125;;    &#125;;<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 区域数据库</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  mkdir &#x2F;var&#x2F;named</span><br><span class="line">  named-checkconf</span><br><span class="line">  dig +norec @a.root-servers.net &gt; &#x2F;var&#x2F;named&#x2F;named.ca</span><br><span class="line">  vim &#x2F;var&#x2F;named&#x2F;named.localhost</span><br><span class="line">  $TTL 1d </span><br><span class="line">  @ IN SOA localhost. admin.localhost. (</span><br><span class="line">  2016061801</span><br><span class="line">  1h</span><br><span class="line">  5m</span><br><span class="line">  7d</span><br><span class="line">  1d)</span><br><span class="line">  IN NS localhost.</span><br><span class="line">  localhost. IN A 127.0.0.1</span><br></pre></td></tr></table></figure></code></pre></li><li><pre><code class="sh">vim /var/named/named.loopback$TTL 1d@ IN SOA localhost. admin.localhost. (                        2016061801                        1h                        5m                        7d                        1d)NS @A 127.0.0.1PTR localhost.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 设置权限</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;sh</span><br><span class="line">  chmod 640 &#x2F;var&#x2F;named&#x2F;*</span><br><span class="line">  chmod 640 &#x2F;etc&#x2F;named&#x2F;named.conf</span><br><span class="line">  chgrp -R named &#x2F;var&#x2F;named&#x2F;</span><br><span class="line">  chgrp named &#x2F;etc&#x2F;named&#x2F;named.conf</span><br></pre></td></tr></table></figure></code></pre></li><li><p>启动服务和测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">man named</span><br><span class="line">named -u named -f -g -d 3 前端级别3方式运行</span><br><span class="line">named -u named 后台运行</span><br><span class="line">killall named</span><br><span class="line">ss -tuln</span><br><span class="line">tail /var/<span class="built_in">log</span>/message</span><br><span class="line">named -u named</span><br></pre></td></tr></table></figure></li><li><p>支持rndc</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">rndc reload 观察错误提示</span><br><span class="line">rndc-confgen -r /dev/urandom &gt; /etc/named/rndc.conf 生成key</span><br><span class="line">tail /etc/named/rndc.conf &gt;&gt; /etc/named/named.conf</span><br><span class="line">killall -SIGHUP named</span><br><span class="line">rndc status</span><br></pre></td></tr></table></figure></li></ul><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><ul><li>服务脚本和名称：/etc/rc.d/init.d/named /usr/lib/systemd/system/named.service</li><li>主配置文件：/etc/named.conf, /etc/named.rfc1912.zones, /etc/rndc.key</li><li>解析库文件：/var/named/ZONE_NAME.ZONE<br>注意：<ol><li>一台物理服务器可同时为多个区域提供解析</li><li>必须要有根区域文件；named.ca</li><li>应该有两个（如果包括ipv6的，应该更多）实现localhost和本地回环地址的解析库</li></ol></li><li>rndc：remote name domain controller，<br>默认与bind安装在同一主机，且只能通过127.0.0.1连接named进程<br>提供辅助性的管理功能；953/tcp</li></ul><hr><p>主配置文件：</p><ul><li>全局配置：options {};</li><li>日志子系统配置：logging {};</li><li>区域定义：本机能够为哪些zone进行解析，就要定义哪些zone<br>zone “ZONE_NAME” IN {};</li></ul><p>注意：任何服务程序如果期望其能够通过网络被其它主机访问，至少应该监听在一个能与外部主机通信的IP地址上<br>缓存名称服务器的配置：</p><ul><li>监听外部地址即可</li><li>dnssec: 建议关闭dnssec，设为no</li></ul><h3 id="rndc命令"><a href="#rndc命令" class="headerlink" title="rndc命令"></a>rndc命令</h3><p><code>rndc COMMAND</code><br>COMMAND:</p><ul><li>reload: 重载主配置文件和区域解析库文件</li><li>reload zonename: 重载区域解析库文件</li><li>retransfer zonename: 手动启动区域传送，而不管序列号是否增加</li><li>notify zonename: 重新对区域传送发通知</li><li>reconfig: 重载主配置文件</li><li>querylog: 开启或关闭查询日志文件/var/log/message</li><li>trace: 递增debug一个级别</li><li>trace LEVEL: 指定使用的级别</li><li>notrace：将调试级别设置为 0</li><li>flush：清空DNS服务器的所有缓存记录</li></ul><h3 id="实现主服务器"><a href="#实现主服务器" class="headerlink" title="实现主服务器"></a>实现主服务器</h3><ul><li><p>主DNS名称服务器</p><ol><li><p>在主配置文件中定义区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">type &#123;master|slave|hint|forward&#125;;</span><br><span class="line">file &quot;ZONE_NAME.zone&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>定义区域解析库文件<br>出现的内容<br>宏定义<br>资源记录</p></li></ol></li><li><p>主配置文件语法检查：<br><code>named-checkconf</code></p></li><li><p>解析库文件语法检查：<br><code>named-checkzone &quot;kinmfer.com&quot; /var/named/magedu.com.zone</code></p></li><li><p>配置生效：<br><code>rndc reload</code> 或 <code>systemctl reload named</code></p></li></ul><p><strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$TTL 86400</span><br><span class="line">$ORIGIN kinmfer.com.</span><br><span class="line">@ IN SOA ns1.kinmfer.com. admin.kinmfer.com (</span><br><span class="line">2015042201</span><br><span class="line">1H</span><br><span class="line">5M</span><br><span class="line">7D</span><br><span class="line">1D )</span><br><span class="line">IN NS ns1</span><br><span class="line">IN NS ns2</span><br><span class="line">IN MX 10 mx1</span><br><span class="line">IN MX 20 mx2</span><br><span class="line">ns1 IN A 172.16.100.11</span><br><span class="line">ns2 IN A 172.16.100.12</span><br><span class="line">mx1 IN A 172.16.100.13</span><br><span class="line">mx2 IN A 172.16.100.14</span><br><span class="line">websrv IN A 172.16.100.11</span><br><span class="line">websrv IN A 172.16.100.12</span><br><span class="line">www IN CNAME websrv</span><br></pre></td></tr></table></figure><h3 id="实现从服务器"><a href="#实现从服务器" class="headerlink" title="实现从服务器"></a>实现从服务器</h3><ul><li><p>应该为一台独立的名称服务器</p></li><li><p>主服务器的区域解析库文件中必须有一条NS记录指向从服务器</p></li><li><p>从服务器只需要定义区域，而无须提供解析库文件；解析库文件应该放置于/var/named/slaves/目录中</p></li><li><p>主服务器得允许从服务器作区域传送</p></li><li><p>主从服务器时间应该同步，可通过ntp进行；</p></li><li><p>bind程序的版本应该保持一致；否则，应该从高，主低<br>定义从区域的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">type slave;</span><br><span class="line">masters &#123; MASTER_IP; &#125;;</span><br><span class="line">file &quot;slaves&#x2F;ZONE_NAME.zone&quot;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="实现子域"><a href="#实现子域" class="headerlink" title="实现子域"></a>实现子域</h3><ul><li><p>子域授权：分布式数据库</p></li><li><p>正向解析区域子域方法</p></li><li><p>定义一个子区域：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ops.kinmfer.com. IN NS ns1.ops.kinmfer.com.</span><br><span class="line">ops.kinmfer.com. IN NS ns2.ops.kinmfer.com.</span><br><span class="line">ns1.ops.kinmfer.com. IN A 1.1.1.1</span><br><span class="line">ns2.ops.kinmfer.com. IN A 1.1.1.2</span><br><span class="line">fin.kinmfer.com. IN NS ns1.fin.kinmfer.com.</span><br><span class="line">fin.kinmfer.com. IN NS ns2.fin.kinmfer.com.</span><br><span class="line">ns1.fin.kinmfer.com. IN A 3.1.1.1</span><br><span class="line">ns2.fin.kinmfer.com. IN A 3.1.1.2</span><br></pre></td></tr></table></figure></li></ul><h3 id="反向区域"><a href="#反向区域" class="headerlink" title="反向区域"></a>反向区域</h3><ul><li><p>反向区域：<br>区域名称：网络地址反写.in-addr.arpa.<br>172.16.100. –&gt; 100.16.172.in-addr.arpa.</p></li><li><p>定义区域</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">type &#123;master|slave|forward&#125;；</span><br><span class="line">file &quot;网络地址.zone&quot;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>定义区域解析库文件<br>注意：不需要MX,以PTR记录为主</p></li></ul><p><strong>示例</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$TTL 86400</span><br><span class="line">$ORIGIN 100.16.172.in-addr.arpa.</span><br><span class="line">@ IN SOA ns1.kinmfer.com. admin.kinmfer.com. (</span><br><span class="line">2015042201</span><br><span class="line">1H</span><br><span class="line">5M</span><br><span class="line">7D</span><br><span class="line">1D )</span><br><span class="line">IN NS ns1.kinmfer.com.</span><br><span class="line">IN NS ns2.kinmfer.com.</span><br><span class="line">11 IN PTR ns1.kinmfer.com.</span><br><span class="line">11 IN PTR www.kinmfer.com.</span><br><span class="line">12 IN PTR mx1.kinmfer.com.</span><br><span class="line">12 IN PTR www.kinmfer.com.</span><br><span class="line">13 IN PTR mx2.kinmfer.com.</span><br></pre></td></tr></table></figure><h3 id="允许动态更新"><a href="#允许动态更新" class="headerlink" title="允许动态更新"></a>允许动态更新</h3><ul><li><p>指定的zone语句块中：Allow-update {any;};</p></li><li><p><code>chmod 770 /var/named</code></p></li><li><p><code>setsebool -P named_write_master_zones on</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nsupdate</span><br><span class="line">&gt;server 127.0.0.1</span><br><span class="line">&gt;zone kinmfer.com</span><br><span class="line">&gt;update add ftp.kinmfer.com 88888 IN A 8.8.8.8</span><br><span class="line">&gt;send</span><br><span class="line">&gt;update delete www.kinmfer.com A</span><br><span class="line">&gt;send</span><br></pre></td></tr></table></figure></li><li><p>测试：</p><p><code>dig ftp.kinmfer.com @127.0.0.1</code><br><code>ll /var/named/kinmfer.com.zone.jnl</code><br><code>cat /var/named/kinmfer.com.zone</code></p></li></ul><h3 id="转发服务器"><a href="#转发服务器" class="headerlink" title="转发服务器"></a>转发服务器</h3><ul><li><p>注意：被转发的服务器需要能够为请求者做递归，否则转发请求不予进行</p></li><li><p>全局转发: 对非本机所负责解析区域的请求，全转发给指定的服务器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Options &#123;</span><br><span class="line">forward first|only;</span><br><span class="line">forwarders &#123; ip;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>特定区域转发：仅转发对特定的区域的请求，比全局转发优先级高</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">zone &quot;ZONE_NAME&quot; IN &#123;</span><br><span class="line">type forward;</span><br><span class="line">forward first|only;</span><br><span class="line">forwarders &#123; ip;&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>注意：关闭dnssec功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dnssec-enable no;</span><br><span class="line">dnssec-validation no;</span><br></pre></td></tr></table></figure></li></ul><h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h3><ul><li><p>bind中基础的安全相关的配置：<br>acl: 把一个或多个地址归并为一个集合，并通过一个统一的名称调用</p></li><li><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">acl acl_name &#123;</span><br><span class="line">ip;</span><br><span class="line">net&#x2F;prelen;</span><br><span class="line">……</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">acl mynet &#123;</span><br><span class="line">172.16.0.0&#x2F;16;</span><br><span class="line">10.10.10.10;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>bind有四个内置的acl:</p><ul><li>none 没有一个主机</li><li>any 任意主机</li><li>localhost 本机</li><li>localnet 本机的IP同掩码运算后得到的网络地址</li></ul></li><li><p>注意：只能先定义后使用；因此一般定义在配置文件中，处于options的前面</p></li><li><p>访问控制的指令：</p><ul><li>allow-query {}： 允许查询的主机；白名单</li><li>allow-transfer {}：允许区域传送的主机；白名单</li><li>allow-recursion {}: 允许递归的主机,建议全局使用</li><li>allow-update {}: 允许更新区域数据库中的内容</li></ul></li></ul><h3 id="View"><a href="#View" class="headerlink" title="View"></a>View</h3><ul><li><p>View：视图，实现智能DNS</p><ul><li>一个bind服务器可定义多个view，每个view中可定义一个或多个zone</li><li>每个view用来匹配一组客户端</li><li>多个view内可能需要对同一个区域进行解析，但使用不同的区域解析库文件</li></ul></li><li><p>注意：</p><ol><li>一旦启用了view，所有的zone都只能定义在view中</li><li>仅在允许递归请求的客户端所在view中定义根区域</li><li>客户端请求到达时，是自上而下检查每个view所服务的客户端列表</li></ol></li><li><p>格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">view VIEW_NAME &#123;</span><br><span class="line">match-clients &#123; testacl; &#125;;</span><br><span class="line">zone “magedu.com” &#123;</span><br><span class="line">type master;</span><br><span class="line">file “magedu.com.zone”;</span><br><span class="line">&#125;;</span><br><span class="line">include “&#x2F;etc&#x2F;named.rfc1912.zones”;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h2 id="压力测试"><a href="#压力测试" class="headerlink" title="压力测试"></a>压力测试</h2><ul><li><p>/root/bind-xxx/contrib/scripts</p></li><li><p>编译压力测试工具</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root/bind-xxx/contrib/queryperf</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">cp queryperf /usr/<span class="built_in">local</span>/bind9/bin</span><br><span class="line">queryperf -h</span><br></pre></td></tr></table></figure></li><li><p>压力测试</p><ul><li><pre><code class="sh">vim test.txtwww.kinmfer.com Akinmfer.com NSkinmfer.com MXpop3.kinmfer.com Aweb.kinmfer.com A<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- &#96;&#96;&#96;</span><br><span class="line">  queryperf -d test.txt -s 127.0.0.1</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>打开日志功能</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rndc querylog</span><br><span class="line">rndc status</span><br><span class="line">queryperf -d test.txt -s 127.0.0.1</span><br><span class="line">wc -l &#x2F;var&#x2F;log&#x2F;message</span><br></pre></td></tr></table></figure></li></ul><h2 id="DNS排错"><a href="#DNS排错" class="headerlink" title="DNS排错"></a>DNS排错</h2><ul><li><pre><code>#dig A example.com; &lt;&lt;&gt;&gt; DiG 9.9.4-RedHat-9.9.4-14.el7 &lt;&lt;&gt;&gt; A example.com;; global options: +cmd;; Got answer:;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NOERROR, id: 30523...SERVFAIL:The nameserver encountered a problem while processing the query.<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  可使用dig +trace排错，可能是网络和防火墙导致</span><br><span class="line"></span><br><span class="line">- NXDOMAIN：The queried name does not exist in the zone.</span><br><span class="line">  可能是CNAME对应的A记录不存在导致</span><br><span class="line"></span><br><span class="line">- REFUSED：The nameserver refused the client&#39;s DNS request due to policy restrictions.</span><br><span class="line">  可能是DNS策略导致</span><br><span class="line"></span><br><span class="line">- NOERROR不代表没有问题，也可以是过时的记录</span><br><span class="line"></span><br><span class="line">- 查看是否为权威记录，flags:aa标记判断</span><br><span class="line"></span><br><span class="line">- 被删除的记录仍能返回结果，可能是因为*记录存在</span><br><span class="line">  如：&#96; *.example.com． IN A　172.25.254.254&#96;</span><br><span class="line"></span><br><span class="line">- 注意“.”的使用</span><br><span class="line"></span><br><span class="line">- 避免CNAME指向CNAME记录，可能产生回环</span><br><span class="line"></span><br></pre></td></tr></table></figure>test.example.com. IN CNAME lab.example.com.lab.example.com. IN CNAME test.example.com.</code></pre></li><li><p>正确配置PTR记录，许多服务依赖PTR，如sshd,MTA</p></li><li><p>正确配置轮询round-robin记录</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-15-Shell脚本</title>
      <link href="2020/05/07/Linux%E5%9F%BA%E7%A1%80-15-Shell%E8%84%9A%E6%9C%AC/"/>
      <url>2020/05/07/Linux%E5%9F%BA%E7%A1%80-15-Shell%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="shell脚本基础"><a href="#shell脚本基础" class="headerlink" title="shell脚本基础"></a>shell脚本基础</h1><ul><li><p>shell脚本:包含一些命令或声明，并符合一定格式的文本文件</p></li><li><p>格式要求：首行</p><ul><li><p> #!/bin/bash</p></li><li><p>#!/usr/bin/python</p></li><li><p>#!/usr/bin/perl</p></li></ul></li><li><p>shell脚本的用途有：</p><ul><li>自动化常用命令</li><li>执行系统管理和故障排除</li><li>创建简单的应用程序</li><li>处理文本或文件</li></ul></li></ul><h2 id="创建shell脚本"><a href="#创建shell脚本" class="headerlink" title="创建shell脚本"></a>创建shell脚本</h2><ul><li><p>第一步：使用文本编辑器来创建文本文件</p><ul><li><p>第一行必须包括shell声明序列：#! 示例：#!/bin/bash</p></li><li><p>添加注释</p><p>注释以#开头</p></li></ul></li><li><p>第二步：运行脚本</p><ul><li>给予执行权限，在命令行上指定脚本的绝对或相对路径</li><li>直接运行解释器，将脚本作为解释器程序的参数运行</li></ul></li></ul><h2 id="脚本规范"><a href="#脚本规范" class="headerlink" title="脚本规范"></a>脚本规范</h2><ul><li><p>脚本代码开头约定</p><ol><li><p>第一行一般为调用使用的语言</p></li><li><p>程序名，避免更改文件名为无法找到正确的文件</p></li><li><p>版本号</p></li><li><p>更改后的时间</p></li><li><p>作者相关信息</p></li><li><p>该程序的作用，及注意事项</p></li><li><p>最后是各版本的更新简要说明</p></li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="comment"># Filename: hello.sh</span></span><br><span class="line"><span class="comment"># Revision: 1.1</span></span><br><span class="line"><span class="comment"># Date: 2020.5.7</span></span><br><span class="line"><span class="comment"># Author: kinmfer</span></span><br><span class="line"><span class="comment"># Email: xxx@gmail.com</span></span><br><span class="line"><span class="comment"># Website: www.xxx.com</span></span><br><span class="line"><span class="comment"># Description: This is the first script</span></span><br><span class="line"><span class="comment"># Copyright: 2020 xxx</span></span><br><span class="line"><span class="comment"># License: GPL</span></span><br><span class="line"><span class="comment"># ------------------------------------------</span></span><br><span class="line"><span class="built_in">echo</span> “hello world”</span><br></pre></td></tr></table></figure></li></ul><h2 id="脚本调试"><a href="#脚本调试" class="headerlink" title="脚本调试"></a>脚本调试</h2><ul><li><p>检测脚本中的语法错误</p><p><code>bash -n /path/to/some_script</code></p></li><li><p>调试执行</p><p><code>bash -x /path/to/some_script</code></p></li></ul><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><ul><li><p>按生效范围划分，存在两类：</p><ul><li><p>全局配置：</p><ul><li>/etc/profile</li><li>/etc/profile.d/*.sh</li><li>/etc/bashrc</li></ul></li><li><p>个人配置：</p><ul><li>~/.bash_profile</li><li>~/.bashrc</li></ul></li></ul></li></ul><h3 id="Profile类"><a href="#Profile类" class="headerlink" title="Profile类"></a>Profile类</h3><ul><li><p>按功能划分，存在两类： </p><p>profile类和bashrc类</p></li><li><p>profile类：为交互式登录的shell提供配置 </p><ul><li><p>全局：/etc/profile, /etc/profile.d/*.sh</p></li><li><p>个人：~/.bash_profile</p></li><li><p>功用：</p><p>(1)用于定义环境变量</p><p>(2)运行命令或脚本</p></li></ul></li></ul><h3 id="Bashrc类"><a href="#Bashrc类" class="headerlink" title="Bashrc类"></a>Bashrc类</h3><ul><li><p>bashrc类：为非交互式和交互式登录的shell提供配置 </p><ul><li><p>全局：/etc/bashrc</p></li><li><p>个人：~/.bashrc </p></li><li><p>功用：</p><p>(1)定义命令别名和函数</p><p>(2)定义本地变量</p></li></ul></li></ul><h3 id="退出任务"><a href="#退出任务" class="headerlink" title="退出任务"></a>退出任务</h3><ul><li>保存在~/.bash_logout文件中（用户）</li><li>在退出登录shell时运行</li><li>用于<ul><li>创建自动备份</li><li>清除临时文件</li></ul></li></ul><h3 id="编辑配置文件生效"><a href="#编辑配置文件生效" class="headerlink" title="编辑配置文件生效"></a>编辑配置文件生效</h3><ul><li><p>修改profile和bashrc文件后需生效 两种方法:</p><ol><li>重新启动shell进程 </li><li>或source</li></ol><p>例:</p><ul><li>.  ~/.bashrc</li><li>source ~/bashrc</li></ul></li></ul><h2 id="登录两种方式"><a href="#登录两种方式" class="headerlink" title="登录两种方式"></a>登录两种方式</h2><ul><li><p>交互式登录：</p><p>(1)直接通过终端输入账号密码登录</p><p>(2)使用“su - UserName” 切换的用户</p><p>执行顺序：/etc/profile –&gt; /etc/profile.d/*.sh –&gt; <del>/.bash_profile –&gt;</del>/.bashrc –&gt; /etc/bashrc</p></li><li><p>非交互式登录：</p><p>(1)su UserName</p><p>(2)图形界面下打开的终端</p><p>(3)执行脚本</p><p>(4)任何其它的bash实例</p><p>执行顺序： /etc/profile.d/*.sh –&gt; /etc/bashrc –&gt;~/.bashrc</p></li></ul><h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><ul><li><p>静态编译语言：使用变量前，先声明变量类型，之后类型不能改变，在编译时 检查，如：java，c</p></li><li><p>动态编译语言：不用事先声明，可随时改变类型，如bash，Python</p></li><li><p>强类型语言：不同类型数据操作，必须经过强制转换才同一类型才能运算，如 java ， c# ，python</p><p>如：以下python代码</p><p>print(‘kinmfer’+ 10) 提示出错，不会自动转换类型 </p><p>print(‘kinmfer’+str(10)) 结果为kinmfer10，需要显示转换类型</p></li><li><p>弱类型语言：语言的运行时会隐式做数据类型转换。无须指定类型，默认均为字符型；参与运算会自动进行隐式类型转换；变量无须事先定义可直接调用</p><p>如：bash 不支持浮点数，php，javascript</p></li><li><p>Shell中变量命名法则：</p><ol><li>不能使程序中的保留字：例如if, for</li><li>只能使用数字、字母及下划线，且不能以数字开头</li><li>见名知义</li><li>统一命名规则：驼峰命名法</li></ol></li><li><p>Shell中命名建议规则： </p><ol><li>变量名大写</li><li>局部变量小写</li><li>函数名小写</li><li>用英文名字，并体现出实际作用</li></ol></li></ul><h2 id="变量的种类"><a href="#变量的种类" class="headerlink" title="变量的种类"></a>变量的种类</h2><ul><li><p>根据变量的生效范围等标准划分下面变量类型</p><ul><li>局部变量：生效范围为当前shell进程；对当前shell之外的其它shell进程， 包括当前shell的子shell进程均无效</li></ul></li><li><p>环境变量：生效范围为当前shell进程及其子进程</p><ul><li>本地变量：生效范围为当前shell进程中某代码片断，通常指函数</li><li>位置变量：$1, $2, …来表示，用于让脚本在脚本代码中调用通过命令行传递给它的参数</li><li>特殊变量：$?, $0, $*, $@, $#,$$</li></ul></li></ul><h2 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h2><ul><li><p>变量赋值：name=‘value’</p><p>注意：</p><ol><li>等号“=”前后不可以有空格</li><li>和C语言不同，Shell中不需要显式的语法来声明变量</li><li>变量名不可以直接和其他字符相连，如果想相连，必须用括号：<code>echo “this is $(he)llo!”</code></li></ol></li><li><p>可以使用引用value</p><p>​    (1)可以是直接字串：name=“root”</p><p>​    (2)变量引用：name=”$USER”</p><p>​    (3)命令引用：name=`COMMAND`</p><p>​                            name=$(COMMAND)</p></li><li><p>变量引用：${name} 或者 $name</p><ul><li>“ “ 弱引用，其中的变量引用会被替换为变量值</li><li>‘ ‘ 强引用，其中的变量引用不会被替换为变量值，而保持原字符串</li></ul></li><li><p>显示已定义的所有变量：set</p></li><li><p>删除变量：unset name</p></li></ul><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul><li><p>变量声明、赋值：</p><ul><li>export name=VALUE</li><li>declare -x name=VALUE</li></ul></li><li><p>declare命令</p><ul><li>-a 声明数组变量</li><li>-f 显示函数</li><li>-i 声明整数型变量</li><li>-x 设置变量为环境变量,同export命令功能相同</li><li>-r 设置变量为只读</li><li>+/- 改变属性 “-” 设置，+“+”取消</li></ul></li><li><p>变量引用：</p><ul><li>$name, ${name}</li></ul></li><li><p>显示所有环境变量： </p><p>env</p><ul><li>printenv </li><li>export </li><li>declare -x</li></ul></li><li><p>删除变量：</p><ul><li>unset name</li></ul></li><li><p>bash内建的环境变量</p><ul><li>PATH</li><li>SHELL</li><li>USER</li><li>UID</li><li>HOME</li><li>PWD</li><li>SHLVL</li><li>LANG</li><li>MAIL</li><li>HOSTNAME</li><li>HISTSIZE</li><li>_ 下划线</li></ul></li></ul><h2 id="只读和位置变量"><a href="#只读和位置变量" class="headerlink" title="只读和位置变量"></a>只读和位置变量</h2><ul><li><p>只读变量：只能声明，但不能修改和删除</p><ul><li><p>声明只读变量： </p><ul><li>readonly name </li><li>declare -r name</li></ul></li><li><p>查看只读变量： </p><ul><li>readonly -p</li></ul></li></ul></li><li><p>位置变量：在脚本代码中调用通过命令行传递给脚本的参数</p><ul><li><p>$1, $2, … 对应第1、第2等参数，shift [n]换位置</p></li><li><p>$0 命令本身</p></li><li><p>basename 获取脚本的基名</p></li><li><p>$* 传递给脚本的所有参数，全部参数合为一个字符串</p></li><li><p>$@ 传递给脚本的所有参数，每个参数为独立字符串</p></li><li><p>$# 传递给脚本的参数的个数</p><p>注意：$@ ​$* 只在被双引号包起来的时候才会有差异 </p></li><li><p>set – 清空所有位置变量</p></li></ul></li></ul><h1 id="set命令"><a href="#set命令" class="headerlink" title="set命令"></a>set命令</h1><ul><li><p>h：hashall，打开这个选项后，Shell 会将命令所在的路径hash下来，避免每次都要查询。通过set +h将h选项关闭</p></li><li><p>i：interactive-comments，包含这个选项说明当前的 shell 是一个交互式的shell。所谓的交互式shell,在脚本中，i选项是关闭的。</p></li><li><p>m：monitor，打开监控模式，就可以通过Job control来控制进程的停止、继续，后台或者前台执行等。</p></li><li><p>B：braceexpand，大括号扩展</p></li><li><p>H：history，H选项打开，可以展开历史列表中的命令，可以通过!感叹号来完 成，例如“!!”返回上最近的一个历史命令，“!n”返回第 n 个历史命令</p></li><li><p>u 在扩展一个没有设置的变量时，显示错误信息</p><p>​    等同set -o nounset</p></li><li><p>e 如果一个命令返回一个非0退出状态值(失败)就退出 等同set -o errexit</p></li></ul><h1 id="read命令"><a href="#read命令" class="headerlink" title="read命令"></a>read命令</h1><p>使用read来把输入值分配给一个或多个shell变量，即变量赋值操作，不能加 $符</p><ul><li>-p 指定要显示的提示</li><li>-s 静默输入，一般用于密码</li><li>-n N 指定输入的字符长度N</li><li>-d ‘字符’ 输入结束符</li><li>-t N TIMEOUT为N秒</li><li>-e  在输入的时候可以使用命令补全功能</li><li>-a array    将词语赋值给 ARRAY 数组变量的序列下标成员，从零开始。</li></ul><p>read 从标准输入中读取值，给每个单词分配一个变量 所有剩余单词都被分配给最后一个变量</p><p>​    <code>read -p “Enter a filename: “ FILE</code></p><h1 id="退出状态"><a href="#退出状态" class="headerlink" title="退出状态"></a>退出状态</h1><ul><li><p>进程使用退出状态来报告成功或失败</p><p>0 代表成功，1－255代表失败</p><p>$? 变量保存最近的命令退出状态</p></li><li><p>例如：</p><p><code>ping -c1 -W1 hostdown &amp;&gt; /dev/null</code></p><p><code>echo $?</code></p></li><li><p>bash自定义退出状态码</p><p>exit [n]：自定义退出状态码</p><p>注意：脚本中一旦遇到exit命令，脚本会立即终止；终止退出状态取决于exit命令后面的数字</p><p>注意：如果未给脚本指定退出状态码，整个脚本的退出状态码取决于脚本中执行的最后一条命令的状态码</p></li></ul><h1 id="运算"><a href="#运算" class="headerlink" title="运算"></a>运算</h1><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><ul><li><p>bash中的算术运算:help let</p><p>+, -, <em>(有些时候\</em>符号需要转义), /, %取模（取余）, **（乘方），乘法符号有些场景中需要转义</p><p>实现算术运算：</p><p>(1)let var=算术表达式</p><p>(2)var=$[算术表达式]</p><p>(3)var=$((算术表达式))</p><p>(4)var=$(expr arg1 arg2 arg3 …)</p><p>(5)declare –i var = 数值</p><p>(6)echo ‘算术表达式’ | bc</p></li><li><p>bash有内建的随机数生成器变量：$RANDOM（0-32767） </p><p>示例：生成 0 - 49 之间随机数</p><p><code>echo $[$RANDOM%50]</code></p></li></ul><h2 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h2><ul><li><p>增强型赋值(变量做某种算数运算后回存至此变量中)：</p><p>+=, -=, *=, /=, %=</p></li><li><p>let var OPER value</p><p>例如:let count+=3 自加3后自赋值</p></li><li><p>自增，自减：</p><ul><li>let var+=1 </li><li>let var++ </li><li>let var-=1 </li><li>let var–</li></ul></li></ul><h2 id="逻辑运算"><a href="#逻辑运算" class="headerlink" title="逻辑运算"></a>逻辑运算</h2><ul><li><p>true, false</p><p>1, 0</p></li><li><p>与</p><p>1 与 1 = 1</p><p>1 与 0 = 0</p><p>0 与 1 = 0</p><p>0 与 0 = 0</p></li><li><p>或</p><p>1 或 1 = 1</p><p>1 或 0 = 1</p><p>0 或 1 = 1</p><p>0 或 0 = 0</p></li><li><p>非：！<br>! 1 = 0 ! true<br>! 0 = 1 ! false</p></li><li><p>短路运算</p><ul><li><p>短路与<br>第一个为0，结果必定为0<br>第一个为1，第二个必须要参与运算</p></li><li><p>短路或<br>第一个为1，结果必定为1<br>第一个为0，第二个必须要参与运算</p></li></ul></li><li><p>异或：^</p><p>异或的两个值，相同为假，不同为真</p></li></ul><h1 id="条件测试"><a href="#条件测试" class="headerlink" title="条件测试"></a>条件测试</h1><ul><li><p>判断某需求是否满足，需要由测试机制来实现</p><p>专用的测试表达式需要由测试命令辅助完成测试过程</p></li><li><p>评估布尔声明，以便用在条件性执行中</p><ul><li>若真，则返回0</li><li>若假，则返回1</li></ul></li><li><p>测试命令：</p><ul><li>test EXPRESSION</li><li>[ EXPRESSION ]</li><li>[[ EXPRESSION ]]</li></ul></li><li><p>[[ EXPRESSION ]]相对于[ ], 能出现&amp;&amp;、||、&lt;和&gt; 、正则表达式等高级操作符。注意：不是所有的shell都支持双方括号</p><p>注意：EXPRESSION前后必须有空白字符</p></li></ul><h2 id="数值测试"><a href="#数值测试" class="headerlink" title="数值测试"></a>数值测试</h2><ul><li><p>-v VAR 变量VAR是否设置</p></li><li><p>-gt 是否大于</p></li><li><p>-ge 是否大于等于</p></li><li><p>-eq 是否等于</p></li><li><p>-ne 是否不等于</p></li><li><p>-lt 是否小于</p></li><li><p>-le 是否小于等于</p></li></ul><h2 id="字符串测试"><a href="#字符串测试" class="headerlink" title="字符串测试"></a>字符串测试</h2><ul><li><p>= 是否等于</p></li><li><p>&gt; ascii码是否大于ascii码</p></li><li><p>&lt; 是否小于</p></li><li><p>!= 是否不等于</p></li><li><p>=~ 左侧字符串是否能够被右侧的PATTERN所匹配</p><p>注意: 此表达式一般用于[[ ]]中；扩展的正则表达式</p></li><li><p>-z “STRING“ 字符串是否为空，空为真，不空为假</p></li><li><p>-n “STRING“ 字符串是否不空，不空为真，空为假</p></li><li><p>注意：用于字符串比较时的用到的操作数都应该使用引号，否则当字符串为真时，将会报错</p></li><li><p>尽量使用 [[  ]]，可以使用更高级的运算符</p></li></ul><h2 id="文件测试"><a href="#文件测试" class="headerlink" title="文件测试"></a>文件测试</h2><ul><li><p>存在性测试</p><ul><li><p>-a FILE：同 -e</p></li><li><p>-e FILE: 文件存在性测试，存在为真，否则为假</p></li></ul></li><li><p>存在性及类别测试</p><ul><li>-b FILE：是否存在且为块设备文件</li><li>-c FILE：是否存在且为字符设备文件</li><li>-d FILE：是否存在且为目录文件</li><li>-f FILE：是否存在且为普通文件</li><li>-h FILE 或 -L FILE：是否存在且为符号链接文件</li><li>-p FILE：是否存在且为命名管道文件</li><li>-S FILE：是否存在且为套接字文件</li></ul></li><li><p>文件权限测试：</p><ul><li>-r FILE：是否存在且对当前用户可读</li><li>-w FILE: 是否存在且对当前用户可写</li><li>-x FILE: 是否存在且对当前用户可执行</li></ul></li><li><p>文件特殊权限测试：</p><ul><li>-u FILE：是否存在且拥有suid权限</li><li>-g FILE：是否存在且拥有sgid权限</li><li>-k FILE：是否存在且拥有sticky权限</li></ul></li><li><p>文件大小测试：</p><ul><li>-s FILE: 是否存在且非空</li></ul></li><li><p>文件是否打开：</p><ul><li>-t fd: fd 文件描述符是否在某终端已经打开</li><li>-N FILE：文件自从上一次被读取之后是否被修改过</li></ul></li><li><p>文件从属关系测试</p><ul><li>-O FILE：当前有效用户是否为文件属主</li><li>-G FILE：当前有效用户是否为文件属组</li></ul></li><li><p>双目测试：</p><ul><li>FILE1 -ef FILE2: FILE1与FILE2是否为指向同一个文件系统的相同的inode的硬链接</li><li>FILE1 -nt FILE2: FILE1是否新于FILE2（mtime） </li><li>FILE1 -ot FILE2: FILE1是否旧于FILE2</li></ul></li></ul><h2 id="组合测试条件"><a href="#组合测试条件" class="headerlink" title="组合测试条件"></a>组合测试条件</h2><ul><li><p>第一种方式：</p><ul><li><p>[ EXPRESSION1 -a EXPRESSION2 ] 并且</p></li><li><p>[ EXPRESSION1 -o EXPRESSION2 ] 或者</p></li><li><p>[ ! EXPRESSION ] 取反</p></li><li><p>-a 和 -o 需要使用测试命令进行，[[ ]] 不支持</p></li></ul></li><li><p>第二种方式：</p><ul><li>[[COMMAND1 &amp;&amp; COMMAND2]] 并且，短路与，代表条件性的AND THEN</li><li>[[COMMAND1 || COMMAND2]] 或者，短路或，代表条件性的OR ELSE</li><li>! COMMAND 非</li><li>示例：<br>[ -f “$FILE” ] &amp;&amp; [ [ “​$FILE”=~ .*.sh$ ] ]</li></ul></li><li><p>条件性的执行操作符</p><ul><li><p><code>grep -q no_such_user /etc/passwd || echo &#39;No such user&#39;</code></p></li><li><p><code>ping -c1 -W2 station1 &amp;&gt; /dev/null \&gt;&amp;&amp; echo &quot;station1 is up&quot; &gt;|| (echo &#39;station1 is unreachable&#39;; exit 1)</code></p></li></ul></li><li><p>示例</p><ul><li><code>test &quot;\$A&quot; =&quot;\$B&quot; &amp;&amp; echo &quot;Strings are equal&quot; </code></li><li><code>test “$A”-eq “$B” &amp;&amp; echo &quot;Integers are equal“</code></li><li><code>[ &quot;$A&quot; =&quot;$B&quot; ] &amp;&amp; echo &quot;Strings are equal&quot; </code></li><li><code>[ &quot;$A&quot; -eq &quot;$B&quot; ] &amp;&amp; echo &quot;Integers are equal“</code></li><li><code>[ -f /bin/cat -a -x /bin/cat ] &amp;&amp; cat /etc/fstab</code></li><li><code>[ -z “$HOSTNAME” -o $HOSTNAME = &quot;localhost.localdomain&quot; ] &amp;&amp; hostname www.xxx.com</code></li></ul></li></ul><h1 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h1><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><ul><li><p>选择执行：</p></li><li><p>注意：if语句可嵌套</p></li><li><p>单分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件; <span class="keyword">then</span></span><br><span class="line">条件为真的分支代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>双分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件; <span class="keyword">then</span></span><br><span class="line">条件为真的分支代码</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">条件为假的分支代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li><li><p>多分支</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 判断条件1; <span class="keyword">then</span></span><br><span class="line">条件1为真的分支代码 </span><br><span class="line"><span class="keyword">elif</span> 判断条件2; <span class="keyword">then</span></span><br><span class="line">条件2为真的分支代码 </span><br><span class="line"><span class="keyword">elif</span> 判断条件3; <span class="keyword">then</span></span><br><span class="line">条件3为真的分支代码 </span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">以上条件都为假的分支代码</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>逐条件进行判断，第一次遇为“真”条件时，执行其分支，而后结束整个if语句</p></li><li><p>根据命令的退出状态来执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ping -c1 -W2 station1 &amp;&gt; /dev/null; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Station1 is UP&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> grep <span class="string">&quot;station1&quot;</span> ~/maintenance.txt &amp;&gt; /dev/null; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Station1 is undergoing maintenance&#x27;</span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;Station1 is unexpectedly DOWN!&#x27;</span> <span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="case"><a href="#case" class="headerlink" title="case"></a>case</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">case</span> 变量引用 <span class="keyword">in</span> </span><br><span class="line">PAT1)</span><br><span class="line">分支1</span><br><span class="line">;;</span><br><span class="line">PAT2)</span><br><span class="line">分支2</span><br><span class="line">;;</span><br><span class="line">...</span><br><span class="line">*)</span><br><span class="line">默认分支</span><br><span class="line">;;</span><br><span class="line"><span class="keyword">esac</span></span><br></pre></td></tr></table></figure><p>PAT为字符串之间的等值比较或模式匹配</p><p>case仅支持glob风格的通配符：</p><p>*: 任意长度任意字符</p><p>?: 任意单个字符 </p><p>[]：指定范围内的任意单个字符 </p><p>a|b: a或b</p><h1 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h1><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 变量名 <span class="keyword">in</span> 列表;<span class="keyword">do</span> </span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li><p>执行机制：</p><p>依次将列表中的元素赋值给“变量名”; 每次赋值后即执行一次循环体; 直到列表中的元素耗尽，循环结束</p></li><li><p>列表生成方式：</p><ol><li><p>直接给出列表</p></li><li><p>整数列表：</p><p>(a){start..end}</p><p>(b)$(seq [start [step]] end)</p></li><li><p>返回列表的命令</p><p>$(COMMAND)</p></li><li><p>使用glob，如：*.sh</p></li><li><p>变量引用</p><p>$@, $*</p></li></ol></li><li><p>特殊格式</p><ul><li><p>双小括号方法，即((…))格式，也可以用于算术运算</p></li><li><p>双小括号方法也可以使bash Shell实现C语言风格的变量操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">I&#x3D;10 </span><br><span class="line">((I++))</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><pre><code class="sh">for ((控制变量初始化;条件判断表达式;控制变量的修正表达式)) do    循环体done<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    - 控制变量初始化：仅在运行到循环代码段时执行一次</span><br><span class="line">    - 控制变量的修正表达式：每轮循环结束会先进行控制变量修正运算，而后再做条件判断</span><br><span class="line"></span><br><span class="line">## while</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;sh</span><br><span class="line">while CONDITION; do</span><br><span class="line">循环体</span><br><span class="line">done</span><br></pre></td></tr></table></figure></code></pre></li><li><p>CONDITION：循环控制条件；进入循环之前，先做一次判断；每一次循环之后会再次做判断；条件为“true”，则执行一次循环；直到条件测试状态为“false”终止循环。因此：CONDTION一般应该有循环控制变量；而此变量的值会在循环体不断地被修正。</p></li><li><p>进入条件：CONDITION为true</p></li><li><p>退出条件：CONDITION为false</p></li></ul><p><strong>特殊用法</strong></p><ul><li><p>while循环的特殊用法（遍历文件的每一行） </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="built_in">read</span> line; <span class="keyword">do</span></span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">done</span> &lt; /PATH/FROM/SOMEFILE</span><br></pre></td></tr></table></figure></li><li><p>依次读取/PATH/FROM/SOMEFILE文件中的每一行，且将行赋值给变量line</p></li></ul><h2 id="until循环"><a href="#until循环" class="headerlink" title="until循环"></a>until循环</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">until CONDITION; <span class="keyword">do</span> </span><br><span class="line">循环体</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>进入条件： CONDITION 为false</li><li>退出条件： CONDITION 为true</li></ul><h2 id="循环控制语句continue"><a href="#循环控制语句continue" class="headerlink" title="循环控制语句continue"></a>循环控制语句continue</h2><ul><li><p>用于循环体中</p></li><li><p>continue [N]：提前结束第N层的本轮循环，而直接进入下一轮判断；最内层为第1层</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> CONDTIITON1; <span class="keyword">do</span> </span><br><span class="line">CMD1</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> CONDITION2; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">continue</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">CMDn</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环控制语句break"><a href="#循环控制语句break" class="headerlink" title="循环控制语句break"></a>循环控制语句break</h2><ul><li><p>用于循环体中</p></li><li><p>break [N]：提前结束第N层循环，最内层为第1层</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> CONDTIITON1; <span class="keyword">do</span> </span><br><span class="line">CMD1</span><br><span class="line">...</span><br><span class="line"><span class="keyword">if</span> CONDITION2; <span class="keyword">then</span> </span><br><span class="line"><span class="built_in">break</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">CMDn</span><br><span class="line">...</span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="循环控制shift命令"><a href="#循环控制shift命令" class="headerlink" title="循环控制shift命令"></a>循环控制shift命令</h2><ul><li><p>shift [n]</p></li><li><p>用于将参量列表 list 左移指定次数，缺省为左移一次。</p></li><li><p>参量列表 list 一旦被移动，最左端的那个参数就从列表中删除。while 循环遍历位置参量列表时，常用到 shift</p></li><li><p>示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#step through all the positional parameters</span></span><br><span class="line">until [ -z <span class="string">&quot;<span class="variable">$1</span>&quot;</span> ] </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span></span><br><span class="line"><span class="built_in">shift</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="select循环与菜单"><a href="#select循环与菜单" class="headerlink" title="select循环与菜单"></a>select循环与菜单</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select variable <span class="keyword">in</span> list </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">循环体命令 </span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><ul><li>select 循环主要用于创建菜单，按数字顺序排列的菜单项将显示在标准错误上，并显示 PS3 提示符，等待用户输入</li><li>用户输入菜单列表中的某个数字，执行相应的命令</li><li>用户输入被保存在内置变量 REPLY 中</li><li>select 是个无限循环，因此要记住用 break 命令退出循环，或用 exit 命令终止 脚本。也可以按 ctrl+c 退出循环</li><li>select 经常和 case 联合使用</li><li>与 for 循环类似，可以省略 in list，此时使用位置参量</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;What is your favourite OS?&quot;</span></span><br><span class="line"></span><br><span class="line">select var <span class="keyword">in</span> <span class="string">&quot;Linux&quot;</span> <span class="string">&quot;Gnu Hurd&quot;</span> <span class="string">&quot;Free BSD&quot;</span> <span class="string">&quot;Other&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">break</span>;</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;You have selected <span class="variable">$var</span>&quot;</span></span><br><span class="line">---------------------------------------------------------------------------------------------------</span><br><span class="line">[root@template ~]<span class="comment"># bash 1.sh</span></span><br><span class="line">What is your favourite OS?</span><br><span class="line">1) Linux</span><br><span class="line">2) Gnu Hurd</span><br><span class="line">3) Free BSD</span><br><span class="line">4) Other</span><br><span class="line"><span class="comment">#? 1</span></span><br><span class="line">You have selected Linux</span><br></pre></td></tr></table></figure><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>函数function是由若干条shell命令组成的语句块，实现代码重用和模块化编程</p></li><li><p>它与shell程序形式上是相似的，不同的是它不是一个单独的进程，不能独立运行，而是shell程序的一部分</p></li><li><p>函数和shell程序比较相似，区别在于</p><ul><li><p>Shell程序在子Shell中运行</p></li><li><p>而Shell函数在当前Shell中运行。因此在当前Shell中，函数可以对shell中变量进行修改</p></li></ul></li></ul><h2 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h2><ul><li><p>函数由两部分组成：函数名和函数体</p><p>help function</p></li><li><p>语法一：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f_name （）&#123;</span><br><span class="line">...函数体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法二：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f_name &#123;</span><br><span class="line">...函数体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>语法三：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> f_name （） &#123;</span><br><span class="line">...函数体...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用函数"><a href="#使用函数" class="headerlink" title="使用函数"></a>使用函数</h2><ul><li><p>函数在使用前必须定义，因此应将函数定义放在脚本开始部分，直至shell首次发现它后才能使用</p></li><li><p>调用函数仅使用其函数名即可</p><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"><span class="comment"># func1 </span></span><br><span class="line">hello()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Hello there today&#x27;s date is date +%F&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;now going to the function hello&quot;</span></span><br><span class="line">hello</span><br><span class="line"><span class="built_in">echo</span> “back from the <span class="keyword">function</span>”</span><br></pre></td></tr></table></figure></li><li><p>函数可以接受参数：</p><ul><li><p>传递参数给函数：调用函数时，在函数名后面以空白分隔给定参数列表即可；</p><p>例如  <code>testfunc arg1 arg2 ...</code></p></li><li><p>在函数体中当中，可使用$1, ​$2, …调用这些参数,, 注意并不是位置变量；还可以使用​$@, ​$*, $# 等特殊变量</p></li></ul></li></ul><h2 id="函数文件"><a href="#函数文件" class="headerlink" title="函数文件"></a>函数文件</h2><ul><li>可以将经常使用的函数存入函数文件，然后将函数文件载入shell</li><li>文件名可任意选取，但最好与相关任务有某种联系。例如：functions.main</li><li>一旦函数文件载入shell，就可以在命令行或脚本中调用函数。可以使用set命 令查看所有定义的函数，其输出列表包括已经载入shell的所有函数</li><li>若要改动函数，首先用unset命令从shell中删除函数。改动完毕后，再重新载 入此文件</li></ul><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">!/bin/bash</span><br><span class="line"><span class="comment">#functions.main </span></span><br><span class="line">findit()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ] ; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Usage:findit file&quot;</span> <span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">find / -name <span class="variable">$1</span> –<span class="built_in">print</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="载入"><a href="#载入" class="headerlink" title="载入"></a>载入</h3><ul><li><p>函数文件已创建好后，要将它载入shell</p></li><li><p>定位函数文件并载入shell的格式</p><p>. filename 或 source filename</p></li><li><p>注意：此即&lt;点&gt; &lt;空格&gt; &lt;文件名&gt; 这里的文件名要带正确路径</p></li><li><p>示例：</p><p>上例中的函数，可使用如下命令</p><p>. functions.main</p></li></ul><h3 id="检查-amp-执行"><a href="#检查-amp-执行" class="headerlink" title="检查&amp;执行"></a>检查&amp;执行</h3><ul><li><p>使用set命令检查函数是否已载入。set命令将在shell中显示所有的载入函数</p><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span></span><br><span class="line">findit=( )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> [ <span class="variable">$#</span> -lt 1 ]; <span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;usage :findit file&quot;</span>; </span><br><span class="line"><span class="built_in">return</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line">find / -name <span class="variable">$1</span> -<span class="built_in">print</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>要执行函数，简单地键入函数名即可</p><p>示例：</p><ul><li>findit groups</li><li>/usr/bin/groups</li><li>/usr/local/backups/groups.bak</li></ul></li></ul><h2 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h2><ul><li><p>现在对函数做一些改动后，需要先删除函数，使其对shell不可用。使用unset命 令完成删除函数</p></li><li><p>命令格式为：</p><ul><li><code>unset function_name</code></li></ul></li><li><p>示例：</p><ul><li><p><code>unset findit</code></p><p>再键入set命令，函数将不再显示</p></li></ul></li></ul><h2 id="环境函数"><a href="#环境函数" class="headerlink" title="环境函数"></a>环境函数</h2><p>使子进程也可使用</p><ul><li>声明：export -f function_name </li><li>查看：export -f 或 declare -xf</li></ul><h2 id="函数变量"><a href="#函数变量" class="headerlink" title="函数变量"></a>函数变量</h2><ul><li><p>变量作用域：</p><ul><li>环境变量：当前shell和子shell有效</li><li>本地变量：只在当前shell进程有效，为执行脚本会启动专用子shell进程； 因此，本地变量的作用范围是当前shell脚本程序文件，包括脚本中的函数</li><li>局部变量：函数的生命周期；函数结束时变量被自动销毁</li></ul></li><li><p>注意：如果函数中有局部变量，如果其名称同本地变量，使用局部变量</p></li><li><p>在函数中定义局部变量的方法 </p><p><code>local NAME=VALUE</code></p></li></ul><h1 id="信号捕捉trap"><a href="#信号捕捉trap" class="headerlink" title="信号捕捉trap"></a>信号捕捉trap</h1><ul><li><p>trap ‘触发指令’ 信号</p><p>进程收到系统发出的指定信号后，将执行自定义指令，而不会执行原操作</p></li><li><p>trap ‘’ 信号</p><p>忽略信号的操作</p></li><li><p>trap ‘-‘ 信号</p><p>恢复原信号的操作</p></li><li><p>trap -p</p><p>列出自定义信号操作</p></li><li><p>trap finish EXIT</p><p>当脚本退出时，执行finish函数</p></li><li><p>示例</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;echo “signal:SIGINT&quot;&#x27;</span> int </span><br><span class="line"><span class="built_in">trap</span> -p</span><br><span class="line"><span class="keyword">for</span>((i=0;i&lt;=10;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sleep 1  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span>  </span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;&#x27;</span> int</span><br><span class="line"><span class="built_in">trap</span> -p  </span><br><span class="line"><span class="keyword">for</span>((i=11;i&lt;=20;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sleep 1  </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">trap</span> <span class="string">&#x27;-&#x27;</span> int  </span><br><span class="line"><span class="built_in">trap</span> -p</span><br><span class="line"><span class="keyword">for</span>((i=21;i&lt;=30;i++))</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">sleep 1</span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$i</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><ul><li><p>变量：存储单个元素的内存空间</p></li><li><p>数组：存储多个元素的连续的内存空间，相当于多个变量的集合</p></li><li><p>数组名和索引</p><ul><li><p>索引：编号从0开始，属于数值索引</p></li><li><p>注意：索引可支持使用自定义的格式，而不仅是数值格式，即为关联索引， bash4.0版本之后开始支持</p></li><li><p>bash的数组支持稀疏格式（索引不连续）</p></li></ul></li><li><p>声明数组：</p><ul><li><code>declare -a ARRAY_NAME</code></li><li><code>declare -A ARRAY_NAME</code> 关联数组 </li><li>注意：两者不可相互转换</li></ul></li></ul><h2 id="数组赋值"><a href="#数组赋值" class="headerlink" title="数组赋值"></a>数组赋值</h2><ul><li><p>数组元素的赋值</p><p>(1)一次只赋值一个元素 </p><p>ARRAY_NAME[INDEX]=VALUE</p><p>weekdays[0]=”Sunday”</p><p>weekdays[4]=”Thursday”</p><p>(2)一次赋值全部元素</p><p>ARRAY_NAME=(“VAL1” “VAL2” “VAL3” …)</p><p>(3)只赋值特定元素 </p><p>ARRAY_NAME=([0]=”VAL1” [3]=”VAL2” …)</p><p>(4)交互式数组值对赋值</p><p>​    <code>read -a ARRAY</code></p></li><li><p>显示所有数组：declare -a</p></li></ul><h2 id="引用数组"><a href="#引用数组" class="headerlink" title="引用数组"></a>引用数组</h2><ul><li><p>引用数组元素</p><p>${ARRAY_NAME[INDEX]}  大括号不可省略</p><p>注意：</p><ul><li><p>省略[INDEX]表示引用下标为0的元素</p></li><li><p>bash-4及之后的版本，支持自定义索引格式，而不仅仅是0，1，2，此数组称之为“关联数组”</p></li></ul></li><li><p>引用数组所有元素</p><p>${ARRAY_NAME[*]}</p><p>${ARRAY_NAME[@]}</p></li><li><p>数组的长度(数组中元素的个数)</p><p>${ #ARRAY_NAME[*] }</p><p>${ #ARRAY_NAME[@] } </p></li></ul><h2 id="数据处理"><a href="#数据处理" class="headerlink" title="数据处理"></a>数据处理</h2><ul><li><p>引用数组中的元素：<br>数组切片：</p><ul><li>${ARRAY[@]:offset:number}<br>offset 要跳过的元素个数<br>number 要取出的元素个数</li><li>取偏移量之后的所有元素<br>${ARRAY[@]:offset}</li></ul></li><li><p>向数组中追加元素：</p><ul><li>ARRAY[ ${ #ARRAY[*]} ]=value</li></ul></li><li><p>删除数组中的某元素：导致稀疏格式 </p><ul><li>unset ARRAY[INDEX]</li></ul></li><li><p>删除整个数组</p><ul><li>unset ARRAY</li></ul></li><li><p>关联数组：</p><ul><li>declare -A ARRAY_NAME </li><li>ARRAY_NAME=([idx_name1]=’val1’ [idx_name2]=’val2‘…)</li><li>注意：关联数组必须先声明再调用</li></ul></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生成10个随机数保存于数组中，并找出其最大值和最小值</span></span><br><span class="line"><span class="meta">#!/bin/bash  </span></span><br><span class="line"><span class="built_in">declare</span> -i min max  </span><br><span class="line"><span class="built_in">declare</span> -a nums</span><br><span class="line"><span class="keyword">for</span> ((i=0;i&lt;10;i++));<span class="keyword">do</span></span><br><span class="line">nums[<span class="variable">$i</span>]=<span class="variable">$RANDOM</span></span><br><span class="line">[ <span class="variable">$i</span> -eq 0] &amp;&amp; min=<span class="variable">$&#123;nums[$i]&#125;</span> &amp;&amp;max=<span class="variable">$&#123;nums[$i]&#125;</span>&amp;&amp; <span class="built_in">continue</span>  [ <span class="variable">$&#123;nums[$i]&#125;</span> -gt <span class="variable">$max</span> ] &amp;&amp; max=<span class="variable">$&#123;nums[$i]&#125;</span></span><br><span class="line">[ <span class="variable">$&#123;nums[$i]&#125;</span> -lt <span class="variable">$min</span> ] &amp;&amp; min=<span class="variable">$&#123;nums[$i]&#125;</span>  </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> “All numbers are <span class="variable">$&#123;nums[*]&#125;</span>”</span><br><span class="line"><span class="built_in">echo</span> Max is <span class="variable">$max</span></span><br><span class="line"><span class="built_in">echo</span> Min is <span class="variable">$min</span></span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#编写脚本，定义一个数组，数组中的元素对应的值是/var/log目录下所有以.log结尾的文件；统计出其下标为偶数的文件中的行数之和</span></span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="built_in">declare</span> -a files  </span><br><span class="line">files=(/var/<span class="built_in">log</span>/*.<span class="built_in">log</span>)  </span><br><span class="line"><span class="built_in">declare</span> -i lines=0</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> $(seq 0 $[<span class="variable">$&#123;#files[*]&#125;</span>-1]); <span class="keyword">do</span>  </span><br><span class="line"><span class="keyword">if</span> [ $[<span class="variable">$i</span>%2] -eq 0 ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">let</span> lines+=$(wc -l <span class="variable">$&#123;files[$i]&#125;</span> | cut -d<span class="string">&#x27; &#x27;</span> -f1)</span><br><span class="line"><span class="keyword">fi</span>  </span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Lines: <span class="variable">$lines</span>.&quot;</span></span><br></pre></td></tr></table></figure><h1 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h1><ul><li><p>切片</p><ul><li><p>${ #var}:返回字符串变量var的长度</p></li><li><p>${var:offset}:返回字符串变量var中从第offset个字符后（不包括第offset个字符）的字符开始，到最后的部分，offset的取值在0 到 ${ #var}-1 之间(bash4.2后，允许为负值)</p></li><li><p>${var:offset:number}：返回字符串变量var中从第offset个字符后（不包括第offset个 字符）的字符开始，长度为number的部分</p></li><li><p>${var: -length}：取字符串的最右侧几个字符 注意：冒号后必须有一空白字符</p></li><li><p>${var:offset:-length}：从最左侧跳过offset字符，一直向右取到距离最右侧lengh个字符之前的内容</p></li><li><p>${var: -length:-offset}：先从最右侧向左取到length个字符开始，再向右取到距离最右侧offset个字符之间的内容</p><p>注意：-length前空格</p></li></ul></li><li><p>基于模式取子串</p><ul><li><p>${var#*word}：其中word可以是指定的任意字符</p><p>功能：自左而右，查找var变量所存储的字符串中，第一次出现的word, 删除字符串开头至第一次出现word字符串（含）之间的所有字符</p></li><li><p>${var##*word}：同上，贪婪模式，不同的是，删除的是字符串开头至最后 一次由word指定的字符之间的所有内容</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;“var&#x2F;log&#x2F;messages”</span><br><span class="line">$&#123;file#*&#x2F;&#125;: log&#x2F;messages</span><br><span class="line">$&#123;file##*&#x2F;&#125;: messages</span><br></pre></td></tr></table></figure></li><li><p>${var%word*}：其中word可以是指定的任意字符</p><p>功能：自右而左，查找var变量所存储的字符串中，第一次出现的word, 删 除字符串最后一个字符向左至第一次出现word字符串（含）之间的所有字符</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">file&#x3D;&quot;&#x2F;var&#x2F;log&#x2F;messages&quot;</span><br><span class="line">$&#123;file%&#x2F;*&#125;: &#x2F;var&#x2F;log</span><br></pre></td></tr></table></figure></li><li><p>${var%%word*}：同上，只不过删除字符串最右侧的字符向左至最后一次出现 word字符之间的所有字符</p><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url&#x3D;http:&#x2F;&#x2F;www.kinmfer.com:80</span><br><span class="line">$&#123;url##*:&#125; 80</span><br><span class="line">$&#123;url%%:*&#125; http</span><br></pre></td></tr></table></figure></li></ul></li><li><p>查找替换</p><ul><li>${var/pattern/substr}：查找var所表示的字符串中，第一次被pattern所匹 配到的字符串，以substr替换之</li><li>${var//pattern/substr}: 查找var所表示的字符串中，所有能被pattern所匹 配到的字符串，以substr替换之</li><li>${var/#pattern/substr}：查找var所表示的字符串中，行首被pattern所匹配到的字符串，以substr替换之</li><li>${var/%pattern/substr}：查找var所表示的字符串中，行尾被pattern所匹 配到的字符串，以substr替换之</li></ul></li><li><p>查找 删除</p><ul><li><p>${var/pattern}：删除var表示的字符串中第一次被pattern匹配到的字符串</p></li><li><p>${var//pattern}：删除var表示的字符串中所有被pattern匹配到的字符串</p></li><li><p>${var/#pattern}：删除var表示的字符串中所有以pattern为行首匹配到的字符串</p></li><li><p>${var/%pattern}：删除var所表示的字符串中所有以pattern为行尾所匹配到的字符串</p></li></ul></li><li><p>字符大小写转换</p><ul><li>${var^^}：把var中的所有小写字母转换为大写</li><li>${var,,}：把var中的所有大写字母转换为小写</li></ul></li><li><p>变量赋值</p><ul><li>${var:-VALUE} :如果var变量为空,或未设置,那么返回VALUE ;否则,则返回var变量的值;</li><li>${var:=VALUE} :如果var变量为空,或未设置,那么返回VALUE ,并将VALUE赋值给var变量;否则返回var变量的值;</li><li>${var:+VALUE} :如果var变量不空,则返回VALUE ;</li><li>${var:?ERROR_ INFO} :如果var为空,或未设置,那么返回ERROR_INFO为错误提示;否则,返回var值;</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-14-加密和安全</title>
      <link href="2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/"/>
      <url>2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>墨菲定律：一种心理学效应，是由爱德华·墨菲（Edward A. Murphy）提出的， 原话：如果有两种或两种以上的方式去做某件事情，而其中一种选择方式将导 致灾难，则必定有人会做出这种选择</p><p>主要内容：</p><ol><li>任何事都没有表面看起来那么简单</li><li>所有的事都会比你预计的时间长</li><li>会出错的事总会出错</li><li>如果你担心某种情况发生，那么它就更有可能发生</li></ol></blockquote><h1 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h1><h2 id="安全机制"><a href="#安全机制" class="headerlink" title="安全机制"></a>安全机制</h2><ul><li><p>信息安全防护的目标</p><ul><li>保密性 Confidentiality</li><li>完整性 Integrity</li><li>可用性 Usability</li><li>可控制性 Controlability</li><li>不可否认性 Non-repudiation</li></ul></li><li><p>安全防护环节</p><ul><li>物理安全：各种设备/主机、机房环境</li><li>系统安全：主机或设备的操作系统</li><li>应用安全：各种网络服务、应用程序</li><li>网络安全：对网络访问的控制、防火墙规则</li><li>数据安全：信息的备份与恢复、加密解密</li><li>管理安全：各种保障性的规范、流程、方法</li></ul></li><li><p>安全攻击： STRIDE</p><ul><li>Spoofing 假冒</li><li>Tampering 篡改</li><li>Repudiation 否认</li><li>Information Disclosure 信息泄漏</li><li>Denial of Service 拒绝服务</li><li>Elevation of Privilege 提升权限</li></ul></li></ul><h2 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h2><ul><li>使用成熟的安全系统</li><li>以小人之心度输入数据</li><li>外部系统是不安全的</li><li>最小授权</li><li>减少外部接口</li><li>缺省使用安全模式</li><li>安全不是似是而非</li><li>从STRIDE思考</li><li>在入口处检查</li><li>从管理上保护好你的系统</li></ul><h2 id="安全算法"><a href="#安全算法" class="headerlink" title="安全算法"></a>安全算法</h2><ul><li>常用安全技术<ul><li>认证</li><li>授权</li><li>审计</li><li>安全通信</li></ul></li><li>加密算法和协议<ul><li>对称加密</li><li>公钥加密</li><li>单向加密</li><li>认证协议</li></ul></li></ul><h3 id="对称加密算法"><a href="#对称加密算法" class="headerlink" title="对称加密算法"></a>对称加密算法</h3><ul><li>对称加密：加密和解密使用同一个密钥<ul><li>DES：Data Encryption Standard，64bits</li><li>3DES：Triple DES</li><li>AES：Advanced (128, 192, 256, 384bits)</li><li>Blowfish</li><li>Twofish</li><li>IDEA</li><li>RC6</li><li>CAST5</li></ul></li><li>特性：<ol><li>加密、解密使用同一个密钥，效率高</li><li>将原始数据分割成固定大小的块，逐个进行加密</li></ol></li><li>缺陷：<ol><li>密钥过多</li><li>密钥分发</li><li>数据来源无法确认</li></ol></li></ul><h3 id="非对称加密算法"><a href="#非对称加密算法" class="headerlink" title="非对称加密算法"></a>非对称加密算法</h3><ul><li>基于一对公钥/密钥对<ul><li>用密钥对中的一个加密，另一个解密</li></ul></li><li>实现加密：<ul><li>接收者<ul><li>生成公钥/密钥对：P和S</li><li>公开公钥P，保密密钥S</li></ul></li><li>发送者<ul><li>使用接收者的公钥来加密消息M</li><li>将P(M)发送给接收者</li></ul></li><li>接收者<ul><li>使用密钥S来解密：M=S(P(M))</li></ul></li></ul></li></ul><ul><li>实现数字签名：<ul><li>发送者<ul><li>生成公钥/密钥对：P和S</li><li>公开公钥P，保密密钥S</li><li>使用密钥S来加密消息M</li><li>发送给接收者S(M)</li></ul></li><li>接收者<ul><li>使用发送者的公钥来解密M=P(S(M))</li></ul></li></ul></li><li>结合签名和加密</li><li>分离签名</li></ul><h3 id="RSA和DSA"><a href="#RSA和DSA" class="headerlink" title="RSA和DSA"></a>RSA和DSA</h3><ul><li><p>RSA：公钥加密算法是1977年由Ron Rivest、Adi Shamirh和LenAdleman在（美国麻省理工学院）开发的，RSA取名来自开发他们三者的名字，后成立RSA 数据安全有限公司。RSA是目前最有影响力的公钥加密算法，它能够抵抗到目 前为止已知的所有密码攻击，已被ISO推荐为公钥数据加密标准。RSA算法基于 一个十分简单的数论事实：将两个大素数相乘十分容易，但那时想要对其乘积 进行因式分解却极其困难，因此可以将乘积公开作为加密密钥</p></li><li><p>DSA (Digital Signature Algorithm)：1991年7月26日提交，并归属于DavidW. Kravitz前NSA员工，DSA是Schnorr和ElGamal签名算法的变种，被美国 NIST作为SS(DigitalSignature Standard)， DSA是基于整数有限域离散对数难 题的，其安全性与RSA相比差不多。DSA只是一种算法，和RSA不同之处在于<strong>它不能用作加密和解密，也不能进行密钥交换，只用于签名</strong>,它比RSA要快很多</p></li></ul><h3 id="单向散列"><a href="#单向散列" class="headerlink" title="单向散列"></a>单向散列</h3><ul><li><p>将任意数据缩小成固定大小的“指纹”</p><ul><li>任意长度输入</li><li>固定长度输出</li><li>有雪崩效应</li><li>若修改数据，指纹也会改变（“不会产生冲突”）</li></ul></li><li><p>无法从指纹中重新生成数据（“单向”）</p></li><li><p>功能：校验数据完整性</p></li><li><p>常见算法</p><ul><li>md5: 128bits</li><li>sha1: 160bits</li><li>sha224 </li><li>sha256</li><li>sha384</li><li>512</li></ul></li><li><p>常用工具</p><ul><li>md5sum | sha1sum [ –check ] file</li><li>openssl、gpg</li><li>rpm -V</li></ul></li></ul><h3 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507082258192.png" alt="image-20200507082258192"></p><h3 id="应用程序：RPM"><a href="#应用程序：RPM" class="headerlink" title="应用程序：RPM"></a>应用程序：RPM</h3><ul><li><p>文件完整性的两种实施方式</p></li><li><p>被安装的文件</p><ul><li><p>MD5单向散列</p></li><li><p><code>rpm --verify package_name</code> (or -V)</p></li></ul></li><li><p>发行的软件包文件</p><ul><li>GPG公钥签名</li><li>rpm –import /etc/pki/rpm-gpg/RPM-GPG-KEY-redhat*</li><li>rpm –checksig pakage_file_name (or -K)</li></ul></li></ul><h3 id="密钥交换"><a href="#密钥交换" class="headerlink" title="密钥交换"></a>密钥交换</h3><ul><li><p>密钥交换：IKE（ Internet Key Exchange ） </p><p>公钥加密：DH (Deffie-Hellman)：生成会话密钥，由惠特菲尔德·迪菲（Bailey Whitfield Diffie）和马丁·赫尔曼（Martin Edward Hellman）在1976年发表，参看：<a href="https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange">https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange</a></p></li><li><p>DH：</p><ul><li><p>A: g,p 协商生成公开的整数g, 大素数p </p><p>B: g,p</p></li><li><p>A:生成隐私数据 :a (a&lt;p )，计算得出 g^a%p，发送给B</p><p>B:生成隐私数据 :b,计算得出 g^b%p，发送给A</p></li><li><p>A:计算得出 [(g^b%p)^a] %p = g^ab%p，生成为密钥</p><p>B:计算得出 [(g^a%p)^b] %p = g^ab%p，生成为密钥</p></li></ul></li></ul><h3 id="gpg加密"><a href="#gpg加密" class="headerlink" title="gpg加密"></a>gpg加密</h3><h4 id="对称加密"><a href="#对称加密" class="headerlink" title="对称加密"></a>对称加密</h4><ul><li><p>对称加密file文件</p><p><code>gpg -c file</code></p><p><code>ls file.gpg</code></p></li><li><p>在另一台主机上解密file </p><p><code>gpg -o file -d file.gpg</code></p></li></ul><h4 id="公钥加密"><a href="#公钥加密" class="headerlink" title="公钥加密"></a>公钥加密</h4><ul><li><p>在hostB主机上用公钥加密，在hostA主机上解密</p></li><li><p>在hostA主机上生成公钥/私钥对</p><p><code>gpg --gen-key</code></p></li><li><p>在hostA主机上查看公钥 </p><p><code>gpg --list-keys</code></p></li><li><p>在hostA主机上导出公钥到xxx.pubkey</p><p><code>gpg -a --export -o xxx.pubkey</code></p></li><li><p>从hostA主机上复制公钥文件到需加密的B主机上</p><p><code>scp xxx.pubkey hostB:</code></p></li><li><p>在需加密数据的hostB主机上生成公钥/私钥对 </p><p><code>gpg --list-keys</code></p><p><code>gpg --gen-key</code></p></li><li><p>在hostB主机上导入公钥</p><p><code>gpg --import xxx.pubkey</code></p><p><code>gpg --list-keys</code></p></li><li><p>用从hostA主机导入的公钥，加密hostB主机的文件file,生成file.gpg </p><p><code>gpg -e -r wangxiaochun file</code></p><p><code>file file.gpg</code></p></li><li><p>复制加密文件到hostA主机 </p><p><code>scp fstab.gpg hostA:</code></p></li><li><p>在hostA主机解密文件 </p><p><code>gpg -d file.gpg</code></p><p><code>gpg -o file -d file.gpg</code></p></li><li><p>删除公钥和私钥</p><p><code>gpg --delete-keys xxx</code></p><p><code>gpg --delete-secret-keys xxx</code></p></li></ul><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507083125751.png" alt="image-20200507083125751"></p><h2 id="CA和证书"><a href="#CA和证书" class="headerlink" title="CA和证书"></a>CA和证书</h2><ul><li>PKI：Public Key Infrastructure<ul><li>签证机构：CA（Certificate Authority)</li><li>注册机构：RA</li><li>证书吊销列表：CRL</li><li>证书存取库：</li></ul></li><li>X.509：定义了证书的结构以及认证协议标准<ul><li>版本</li><li>序列</li><li>签名算法</li><li>颁发者</li><li>有效期限</li><li>主体名称</li><li>主体公钥</li><li>CRL分发点</li><li>扩展信息</li><li>发行者签名</li></ul></li></ul><h3 id="证书获取"><a href="#证书获取" class="headerlink" title="证书获取"></a>证书获取</h3><ul><li>证书类型：<ul><li>证书授权机构的证书</li><li>服务器</li><li>用户证书</li></ul></li><li>获取证书两种方法：<ul><li>使用证书授权机构<ul><li>生成证书请求（csr）</li><li>将证书请求csr发送给CA</li><li>CA签名颁发证书</li></ul></li><li>自签名的证书<ul><li>自已签发自己的公钥</li></ul></li></ul></li></ul><h2 id="安全协议"><a href="#安全协议" class="headerlink" title="安全协议"></a>安全协议</h2><ul><li><p>SSL：Secure Socket Layer，TLS: Transport Layer Security</p><ul><li>1995：SSL 2.0 Netscape</li><li>1996：SSL 3.0</li><li>1999：TLS 1.0</li><li>2006：TLS 1.1 IETF(Internet工程任务组) RFC 4346</li><li>2008：TLS 1.2 当前使用</li><li>2015：TLS 1.3</li></ul><p>功能：机密性，认证，完整性，重放保护</p></li><li><p>两阶段协议，分为握手阶段和应用阶段</p><ul><li><p>握手阶段(协商阶段):客户端和服务器端认证对方身份（依赖于PKI体系，利用数字证书进行身份认证），并协商通信中使用的安全参数、密码套件以及主密钥。后续通信使 用的所有密钥都是通过MasterSecret生成</p></li><li><p>应用阶段:在握手阶段完成后进入，在应用阶段通信双方使用握手阶段协商好的密 钥进行安全通信</p></li></ul></li></ul><h3 id="SSL-TLS"><a href="#SSL-TLS" class="headerlink" title="SSL/TLS"></a>SSL/TLS</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507083702027.png" alt="image-20200507083702027"></p><ul><li>Handshake协议：包括协商安全参数和密码套件、服务器身份认证（客户端身 份认证可选）、密钥交换</li><li>ChangeCipherSpec 协议：一条消息表明握手协议已经完成</li><li>Alert 协议：对握手协议中一些异常的错误提醒，分为fatal和warning两个级别， fatal类型错误会直接中断SSL链接，而warning级别的错误SSL链接仍可继续， 只是会给出错误警告</li><li>Record 协议：包括对消息的分段、压缩、消息认证和完整性保护、加密等</li><li>HTTPS 协议：就是“HTTP 协议”和“SSL/TLS 协议”的组合。HTTP over SSL”或“HTTP over TLS”，对http协议的文本数据进行加密处理后，成为二 进制形式传输</li></ul><h3 id="HTTPS结构"><a href="#HTTPS结构" class="headerlink" title="HTTPS结构"></a>HTTPS结构</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507083805300.png" alt="image-20200507083805300"></p><h3 id="HTTPS工作过程"><a href="#HTTPS工作过程" class="headerlink" title="HTTPS工作过程"></a>HTTPS工作过程</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507083826548.png" alt="image-20200507083826548"></p><h2 id="OpenSSL"><a href="#OpenSSL" class="headerlink" title="OpenSSL"></a>OpenSSL</h2><ul><li><p>OpenSSL：开源项目 </p><p>三个组件：</p><ul><li>openssl：多用途的命令行工具，包openssl </li><li>libcrypto：加密算法库，包openssl-libs，主要由开发者使用</li><li>libssl：加密模块应用库，实现了ssl及tls，包nss，主要由开发者使用</li></ul></li></ul><h3 id="openssl命令"><a href="#openssl命令" class="headerlink" title="openssl命令"></a>openssl命令</h3><ul><li><p>两种运行模式：交互模式和批处理模式 </p></li><li><p>openssl version：程序版本号</p></li><li><p>标准命令、消息摘要命令(dgst子命令)、加密命令(enc子命令)</p><p>标准命令：enc, ca, req, …</p></li><li><p>对称加密：</p><ul><li><p>工具：openssl enc, gpg</p></li><li><p>算法：3des, aes, blowfish, twofish</p></li></ul></li><li><p>enc命令：</p><ul><li>帮助：<code>man enc</code><ul><li>-e 加密 后+算法</li><li>-d 解密 后+算法</li></ul></li><li>-a 以base64文本格式编码<ul><li>-salt 加盐</li><li>-in 要加密的文件</li><li>-out 加密后生成的文件</li></ul></li><li>加密：<code>openssl enc -e -des3 -a -salt -in testfile -out testfile.cipher </code></li><li>解密：<code>openssl enc -d -des3 -a -salt –in testfile.cipher -out testfile</code></li></ul></li><li><p>单向加密：</p><p>工具：md5sum, sha1sum, sha224sum,sha256sum…openssl dgst</p></li><li><p>dgst命令：</p><ul><li><p>帮助：<code>man dgst</code></p></li><li><p><code>openssl dgst -md5 [-hex默认] /PATH/SOMEFILE </code></p></li><li><p><code>openssl dgst -md5 testfile</code></p></li><li><p><code>md5sum /PATH/TO/SOMEFILE</code></p></li></ul></li><li><p>MAC: Message Authentication Code，单向加密的一种延伸应用，用于实现 网络通信中保证所传输数据的完整性机制</p><ul><li>CBC-MAC</li><li>HMAC：使用md5或sha1算法</li></ul></li><li><p>生成用户密码：</p><p>passwd命令:</p><ul><li>帮助：<code>man sslpasswd</code></li><li><code>openssl passwd -1 -salt SALT</code>(最多8位)  -1表示使用md5算法</li><li>例：<code>openssl passwd -1 –salt centos</code></li></ul></li><li><p>生成随机数：</p><ul><li><p>帮助：<code>man sslrand</code></p></li><li><p><code>openssl rand -base64|-hex NUM</code></p><p>NUM: 表示字节数，使用-hex，每个字符为十六进制，相当于4位二进制， 出现的字符数为NUM*2</p></li></ul></li><li><p>公钥加密：</p><ul><li>算法：RSA, ELGamal</li><li>工具：gpg, openssl rsautl（man rsautl）</li></ul></li><li><p>数字签名：</p><ul><li>算法：RSA, DSA, ELGamal</li><li>工具：gpg, openssl rsautl（man rsautl）</li></ul></li><li><p>密钥交换：</p><ul><li><p>算法：dh</p></li><li><p>DSA：Digital Signature Algorithm </p></li><li><p>DSS：Digital Signature Standard </p></li><li><p>RSA：</p></li></ul></li><li><p>生成密钥对：<code>man genrsa</code></p><p><strong>生成私钥</strong></p><p><code>openssl genrsa -out /PATH/TO/PRIVATEKEY.FILE NUM_BITS </code></p><p><code>(umask 077; openssl genrsa –out test.key –des 2048) </code></p><ul><li>umask用来设定/PATH/TO/PRIVATE_KEY文件的权限</li><li>NUMBER_BITS 用来声明字节数，为2的整数倍</li><li>( )用来表示在子shell中运行，设定的内容对当前shell不产生影响</li></ul><p><code>openssl rsa -in test.key –out test2.key</code> 将加密key解密</p><p><strong>从私钥中提取出公钥</strong></p><p><code>openssl rsa -in PRIVATEKEYFILE –pubout –out PUBLICKEYFILE</code></p><p><code>openssl rsa –in test.key –pubout –out test.key.pub</code></p></li><li><p>随机数生成器：伪随机数字 </p><ul><li>键盘和鼠标，块设备中断</li><li>/dev/random：仅从熵池返回随机数；随机数用尽，阻塞</li><li>/dev/urandom：从熵池返回随机数；随机数用尽，会利用软件生成伪随机数,非阻塞</li></ul></li></ul><h3 id="CA和申请证书"><a href="#CA和申请证书" class="headerlink" title="CA和申请证书"></a>CA和申请证书</h3><ul><li><p>PKI：Public Key Infrastructure </p><ul><li>CA</li><li>RA </li><li>CRL</li><li>证书存取库</li></ul></li><li><p>建立私有CA:</p><ul><li>OpenCA </li><li>openssl</li></ul></li><li><p>证书申请及签署步骤： </p><ol><li>生成申请请求</li><li>RA核验</li><li>CA签署</li><li>获取证书</li></ol></li><li><p>创建私有CA：</p><ul><li><p>openssl的配置文件：/etc/pki/tls/openssl.cnf</p></li><li><p>三种策略：match匹配、optional可选、supplied提供 match：要求申请填写的信息跟CA设置信息必须一致 optional：可有可无，跟CA设置信息可不一致 supplied：必须填写这项申请信息，</p><ol><li><p>创建所需要的文件</p><p><code>touch /etc/pki/CA/index.txt</code> 生成证书索引数据库文件 </p><p><code>echo 01 &gt; /etc/pki/CA/serial</code> 指定第一个颁发证书的序列号</p></li><li><p>CA自签证书</p><ul><li><p>生成私钥</p><p><code>cd /etc/pki/CA/</code></p><p><code>(umask 077; openssl genrsa -des3 -out private/cakey.pem 2048)</code></p></li><li><p>生opem成自签名证书</p><p><code>openssl req -new -x509 -key /etc/pki/CA/private/cakey.pem -out /etc/pki/CA/cacert.pem -days 3650</code><br>选项说明：</p><ul><li>-new：生成新证书签署请求</li><li>-x509：生成自签格式证书，<strong>专用于创建私有CA时</strong><ul><li>-key：生成请求时用到的<strong>私钥文件</strong></li><li>-days n：证书的有效期限</li><li>-out /PATH/TO/SOMECERTFILE: 证书的保存路径</li></ul></li></ul></li></ul></li></ol><ul><li>以上两步可以合成一步：</li></ul></li></ul></li></ul><pre><code>   `openssl req -newkey rsa:4096 -nodes -sha256 -keyout ca.key -x509 -days 3650 -out ca.crt`</code></pre><ul><li>为CA提供所需的目录及文件<ul><li><code>mkdir -pv /etc/pkl/CA/&#123;certs,crl,newcerts&#125;</code></li></ul></li></ul><ol start="3"><li><p>颁发证书</p><ul><li><p>在需要使用证书的主机生成证书请求</p></li><li><p>给web服务器生成私钥</p><pre><code>`(umask 077; openssl genrsa –out /data/test.key 2048)`</code></pre><p><strong>注意：在CentOS8.1中，密钥的长度不能指定1024，否则会报错！！！</strong></p></li><li><p>生成证书申请文件</p><pre><code>`openssl req -new -key /data/test.key -out /data/test.csr -days 365`</code></pre></li><li><p>以上两步可合成一步<br>   <code>openssl req - newkey rsa:4096 -nodes sha256 -keyout client.key -out client.csr</code><br>   将证书请求文件传输给CA</p></li><li><p>CA签署证书</p><pre><code>`openssl ca -in /tmp/test.csr –out /etc/pki/CA/certs/test.crt -days 365`</code></pre><p>  或者使用以下命令</p><p><code>openssl x509 -req -days 3650 -in client.csr -CA ca.crt -CAkey ca.key - CAcreateserial out client.crt</code></p><ul><li>注意：默认要求国家，省，公司名称三项必须和CA一致</li></ul></li><li><p>将证书颁发给请求者</p></li><li><p>查看证书中的信息：</p><pre><code>`openssl x509 -in /PATH/FROM/CERT_FILE -noout -text|issuer|subject|serial|dates``openssl ca -status SERIAL`  查看指定编号的证书状态</code></pre></li></ul><ol start="4"><li><p>吊销证书</p><ul><li><p>在客户端获取要吊销的证书的serial<br><code>openssl x509 -in /PATH/FROM/CERT_FILE -noout -serial -subject</code></p></li><li><p>在CA上，根据客户提交的serial与subject信息，对比检验是否与index.txt文件中的信息一致，<br>吊销证书：<br><code>openssl ca -revoke /etc/pki/CA/newcerts/SERIAL.pem</code></p><p>SERIAL要换成证书真正的序列号</p></li><li><p>指定第一个吊销证书的编号,注意：第一次更新证书吊销列表前，才需要执行<br><code>echo 01 &gt; /etc/pki/CA/crlnumber</code></p></li><li><p>更新证书吊销列表<br><code>openssl ca -gencrl -out /etc/pki/CA/crl.pem</code></p></li><li><p>查看crl文件：<br><code>openssl crl -in /etc/pki/CA/crl.pem -noout -text</code></p></li></ul></li></ol></li></ol><h1 id="SSH"><a href="#SSH" class="headerlink" title="SSH"></a>SSH</h1><ul><li><p>ssh: secure shell, protocol, 22/tcp, 安全的远程登录</p></li><li><p>具体的软件实现：</p><ul><li>OpenSSH: ssh协议的开源实现，CentOS默认安装 </li><li>dropbear：另一个开源实现</li></ul></li><li><p>SSH协议版本</p><ul><li>v1: 基于CRC-32做MAC，不安全；man-in-middle </li><li>v2：双方主机协议选择安全的MAC方式</li><li>基于DH算法做密钥交换，基于RSA或DSA实现身份认证</li></ul></li></ul><h2 id="Openssh软件组成"><a href="#Openssh软件组成" class="headerlink" title="Openssh软件组成"></a>Openssh软件组成</h2><ul><li><p>OpenSSH介绍</p><p>相关包：</p><ul><li>openssh </li><li>openssh-clients</li><li>openssh-server</li></ul></li><li><p>工具：</p><ul><li>基于C/S结构</li><li>Linux Client: ssh, scp, sftp，slogin</li><li>Windows Client：xshell, putty, securecrt, sshsecureshellclient</li><li>Server: sshd</li></ul></li></ul><h2 id="公钥交换"><a href="#公钥交换" class="headerlink" title="公钥交换"></a>公钥交换</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507091133009.png" alt="image-20200507091133009"></p><ol><li>客户端发起链接请求</li><li>服务端返回自己的公钥，以及一个会话ID（这一步客户端得到服务端公钥）</li><li>客户端生成密钥对</li><li>客户端用自己的公钥异或会话ID，计算出一个值Res，并用服务端的公钥加密</li><li>客户端发送加密后的值到服务端，服务端用私钥解密,得到Res</li><li>服务端用解密后的值Res异或会话ID，计算出客户端的公钥（这一步服务端得到客户端公钥）</li><li>最终：双方各自持有三个秘钥，分别为自己的一对公、私钥，以及对方的公钥，之后的所有通讯都会被加密</li></ol><h2 id="ssh加密通讯"><a href="#ssh加密通讯" class="headerlink" title="ssh加密通讯"></a>ssh加密通讯</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507091336347.png" alt="image-20200507091336347"></p><h2 id="ssh客户端"><a href="#ssh客户端" class="headerlink" title="ssh客户端"></a>ssh客户端</h2><ul><li><p>ssh配置文件：/etc/ssh/ssh_config</p></li><li><p>格式：</p><p><code>ssh [user@]host [COMMAND]</code></p><p><code>ssh [-l user] host [COMMAND]</code></p></li><li><p>常见选项</p><ul><li>-p：远程服务器监听的端口</li><li>-b：指定连接的源IP</li><li>-v：调试模式</li><li>-C：压缩方式</li><li>-X：支持x11转发</li><li>-t：强制伪tty分配<br><code>ssh -t remoteserver1 ssh -t remoteserver2 ssh remoteserver3</code></li></ul></li><li><p>允许实现对远程系统经验证地加密安全访问</p></li><li><p>当用户远程连接ssh服务器时，会复制ssh服务器/etc/ssh/ssh_host*key.pub（CentOS7默认是ssh_host_ecdsa_key.pub）文件中的公钥到客户机的~./ssh/know_hosts中。下次连接时，会自动匹配相应私钥，不能匹配，将拒绝连接</p></li></ul><h2 id="ssh服务登录验证"><a href="#ssh服务登录验证" class="headerlink" title="ssh服务登录验证"></a>ssh服务登录验证</h2><ul><li>ssh服务登录的验证方式<ul><li>用户/口令</li><li>基于密钥</li></ul></li></ul><h3 id="基于用户-口令"><a href="#基于用户-口令" class="headerlink" title="基于用户/口令"></a>基于用户/口令</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507091835522.png" alt="image-20200507091835522"></p><ol><li><p>客户端发起ssh请求，服务器会把自己的公钥发送给用户</p></li><li><p>用户会根据服务器发来的公钥对密码进行加密</p></li><li><p>加密后的信息回传给服务器，服务器用自己的私钥解密，如果密码正确，则用户登录成功</p></li></ol><h3 id="基于密钥"><a href="#基于密钥" class="headerlink" title="基于密钥"></a>基于密钥</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200507091958071.png" alt="image-20200507091958071"></p><ul><li><p>基于密钥的登录方式</p><ol><li>首先在客户端生成一对密钥（ssh-keygen）</li><li>并将客户端的公钥ssh-copy-id 拷贝到服务端</li><li>客户端再次发送一个连接请求，包括ip、用户名</li><li>服务端得到客户端的请求后，会到authorized_keys中查找，如果有响应的IP和用户，就会随机生成一个字符串，例如：abcdefg</li><li>服务端将使用客户端拷贝过来的公钥进行加密，然后发送给客户端</li><li>得到服务端发来的消息后，客户端会使用私钥进行解密，然后将解密后的字符串用服务端的公钥发送给服务端</li><li>服务端接受到客户端发来的字符串后，用自己的私钥跟之前的字符串进行对比，如果一 致，就允许免密码登录</li></ol></li><li><p>基于密钥的认证</p><ol><li><p>在客户端生成密钥对</p><p><code>ssh-keygen -t rsa [-P &#39;&#39;] [-f “~/.ssh/id_rsa&quot;]</code></p></li><li><p>把公钥文件传输至远程服务器对应用户的家目录 </p><p><code>ssh-copy-id [-i [identity_file]] [user@]host</code></p></li><li><p>测试</p></li><li><p>在SecureCRT或Xshell实现基于key验证</p><p>在SecureCRT工具—&gt;创建公钥—&gt;生成Identity.pub文件</p><p>转化为openssh兼容格式（适合SecureCRT，Xshell不需要转化格式），并复制到 需登录主机上相应文件authorized_keys中,注意权限必须为600，在需登录的ssh 主机上执行：</p><p><code>ssh-keygen -i -f Identity.pub &gt;&gt; .ssh/authorized_keys</code></p></li><li><p>重设私钥口令：</p><p><code>ssh-keygen –p</code></p></li><li><p>验证代理（authentication agent）保密解密后的密钥 这样口令就只需要输入一次。在GNOME中，代理被自动提供给root用户,否则运行</p><p><code>ssh-agent bash</code></p></li><li><p>钥匙通过命令添加给代理 ssh-add</p></li></ol></li></ul><h2 id="有关ssh的命令"><a href="#有关ssh的命令" class="headerlink" title="有关ssh的命令"></a>有关ssh的命令</h2><ul><li><p>scp命令：</p><p><code>scp [options] SRC... DEST/</code></p><p>两种方式：</p><ul><li><code>scp [options] [user@]host:/sourcefile/destpath</code> </li><li><code>scp [options] /sourcefile [user@]host:/destpath</code></li></ul><p>常用选项：</p><ul><li><p>-C 压缩数据流</p></li><li><p>-r 递归复制</p></li><li><p>-p 保持原文件的属性信息</p></li><li><p>-q 静默模式</p></li><li><p>-P PORT 指明remote host的监听的端口</p></li></ul></li><li><p>rsync</p><p>参考</p></li><li><p>sftp</p><ul><li><p>交互式文件传输工具</p></li><li><p>用法和传统的ftp工具相似</p></li><li><p>利用ssh服务实现安全的文件上传和下载</p></li><li><p>使用ls cd mkdir rmdir pwd get put等指令，可用？或help获取帮助信息 </p><p><code>sftp [user@]host</code></p><p><code>sftp&gt; help</code></p></li></ul></li></ul><h2 id="ssh端口转发"><a href="#ssh端口转发" class="headerlink" title="ssh端口转发"></a>ssh端口转发</h2><ul><li><p>SSH端口转发</p><p>SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是， SSH 还能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了 相应的加密及解密服务。这一过程也被叫做“隧道”（tunneling），这是因为 SSH 为其他 TCP 链接提供了一个安全的通道来进行传输而得名。例如，Telnet， SMTP，LDAP 这些 TCP 应用均能够从中得益，避免了用户名，密码以及隐私信 息的明文传输。而与此同时，如果工作环境中的防火墙限制了一些网络端口的使 用，但是允许 SSH 的连接，也能够通过将 TCP 端口转发来使用 SSH 进行通讯</p></li><li><p>SSH 端口转发能够提供两大功能：</p><ul><li>加密 SSH Client 端至 SSH Server 端之间的通讯数据</li><li>突破防火墙的限制完成一些之前无法建立的 TCP 连接</li></ul></li><li><p>本地转发：</p><p>-L localport:remotehost:remotehostport sshserver</p></li><li><p>选项：</p><ul><li>-f 后台启用</li><li>-N 不打开远程shell，处于等待状态</li><li>-g 启用网关功能</li></ul><p>示例<br><code>ssh –L 9527:telnetsrv:23 -Nfg sshsrv</code><br><code>telnet 127.0.0.1 9527</code></p><ul><li>当访问本机的9527的端口时，被加密后转发到sshsrv的ssh服务，再解密被转发到telnetsrv:23</li><li>data ⬅➡ localhost:9527  ⬅➡localhost:XXXXX  ⬅➡sshsrv:22  ⬅➡<br>sshsrv:YYYYY  ⬅➡telnetsrv:23</li></ul></li><li><p>远程转发:</p><p>-R sshserverport:remotehost:remotehostport sshserver<br>示例：<br>ssh –R 9527:telnetsrv:23 –Nf  sshsrv</p><ul><li>让sshsrv侦听9527端口的访问，如有访问，就加密后通过ssh服务转发请求到本机ssh客户端，再由本机解密后转发到telnetsrv:23</li><li>Data ⬅➡ sshsrv:9527 ⬅➡ sshsrv:22 ⬅➡ localhost:XXXXX ⬅➡<br>localhost:YYYYY⬅➡ telnetsrv:23</li></ul></li><li><p>动态端口转发：<br>当用firefox访问internet时，本机的1080端口做为代理服务器，firefox的访问请求被转发到sshserver上，由sshserver替之访问internet</p><p><code>ssh -D 1080 root@sshserver -fNg</code></p><p>在本机firefox设置代理socket proxy:127.0.0.1:1080</p><p><code>curl --socks5 127.0.0.1:1080 http://www.google.com</code></p></li></ul><h2 id="ssh服务端"><a href="#ssh服务端" class="headerlink" title="ssh服务端"></a>ssh服务端</h2><ul><li><p>服务器端：sshd, 配置文件: /etc/ssh/sshd_config</p></li><li><p>常用参数：</p><ul><li>Port</li><li>ListenAddress ip</li><li>LoginGraceTime 2m</li><li>PermitRootLogin yes</li><li>StrictModes yes  检查.ssh/文件的所有者，权限等</li><li>MaxAuthTries 6</li><li>MaxSessions 10 同一个连接最大会话</li><li>PubkeyAuthentication yes</li><li>PermitEmptyPasswords no</li><li>PasswordAuthentication yes</li><li>PermitEmptyPasswords no</li><li>PasswordAuthentication yes</li><li>GatewayPorts no</li><li>ClientAliveInterval 单位:秒</li><li>ClientAliveCountMax 默认3</li><li>UseDNS yes </li><li>GSSAPIAuthentication yes 提高速度可改为no</li><li>MaxStartups 未认证连接最大值，默认值10</li><li>Banner /path/file</li></ul></li><li><p>限制可登录用户的办法：</p><ul><li>AllowUsers user1 user2 user3</li><li>DenyUsers</li><li>AllowGroups</li><li>DenyGroups</li><li>DenyGroups</li></ul></li><li><p>最佳实践</p><ul><li><p>禁止使用protocol version 1</p></li><li><p>限制可登录用户</p></li><li><p>设定空闲会话超时时长</p></li><li><p>利用防火墙设置ssh访问策略</p></li><li><p>仅监听特定的IP地址</p></li><li><p>基于口令认证时，使用强密码策略</p><p>​    <code>tr -dc A-Za-z0-9_ &lt; /dev/urandom | head -c 12| xargs</code></p></li><li><p>使用基于密钥的认证</p></li><li><p>禁止使用空密码</p></li><li><p>禁止root用户直接登录</p></li><li><p>限制ssh的访问频度和并发在线数</p></li><li><p>经常分析日志</p></li></ul></li></ul><h1 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h1><ul><li><p>配置文件：/etc/sudoers, /etc/sudoers.d/</p></li><li><p>时间戳文件：/var/db/sudo</p></li><li><p>日志文件：/var/log/secure</p></li><li><p>配置文件支持使用通配符glob</p><ul><li><p>? 任意单一字符</p></li><li><p>*匹配任意长度字符</p></li><li><p>[wxc] 匹配其中一个字符</p></li><li><p>[!wxc] 除了这三个字符的其它字符</p></li><li><p>\x 转义</p></li><li><p>[[alpha]] 字母 示例： /bin/ls [[alpha]]*</p></li></ul></li><li><p>配置文件规则有两类</p><ol><li>别名定义：不是必须的</li><li>授权规则：必须的</li></ol></li></ul><h2 id="更改身份"><a href="#更改身份" class="headerlink" title="更改身份"></a>更改身份</h2><ul><li><p>su 切换身份：su –l username –c ‘command’</p></li><li><p>sudo</p><ul><li><p>来自sudo包，man 5 sudoers</p></li><li><p>sudo能够授权指定用户在指定主机上运行某些命令。如果未授权用户尝试使用 sudo，会提示联系管理员</p></li><li><p>sudo可以提供日志，记录每个用户使用sudo操作</p></li><li><p>sudo为系统管理员提供配置文件，允许系统管理员集中地管理用户的使用权 限和使用的主机</p></li><li><p>sudo使用时间戳文件来完成类似“检票”的系统，默认存活期为5分钟的“入 场券”</p></li><li><p>通过visudo命令编辑配置文件，具有语法检查功能 visudo -c 检查语法</p><p><code>visudo -f /etc/sudoers.d/test</code></p></li></ul></li></ul><h2 id="sudoers"><a href="#sudoers" class="headerlink" title="sudoers"></a>sudoers</h2><ul><li><p>授权规则格式：</p><p>用户 登入主机=(代表用户) 命令</p><p>user host=(runas) command</p></li><li><p>示例：</p><p>root ALL=(ALL) ALL</p></li><li><p>格式说明：</p><ul><li>user: 运行命令者的身份 </li><li>host: 通过哪些主机 </li><li>runas：以哪个用户的身份 </li><li>command: 运行哪些命令</li></ul></li></ul><h2 id="sudo别名和示例"><a href="#sudo别名和示例" class="headerlink" title="sudo别名和示例"></a>sudo别名和示例</h2><h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><ul><li><p>别名有四种类型：User_Alias，Runas_Alias，Host_Alias，Cmnd_Alias</p></li><li><p>别名格式：[A-Z]([A-Z][0-9]_)*</p></li><li><p>别名定义：<br>Alias_Type NAME1 = item1,item2,item3 : NAME2 = item4, item5</p></li><li><p>User和runas: </p><ul><li>username</li><li>#uid</li><li>%group_name</li><li>%#gid</li><li>user_alias|runas_alias</li></ul></li><li><p>host:</p><ul><li>ip或hostname</li><li>network(/netmask)</li><li>host_alias</li></ul></li><li><p>command:</p><ul><li>command name</li><li>directory</li><li>sudoedit</li><li>Cmnd_Alias</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>示例1：</p><p>Student ALL=(ALL) ALL</p><p>%wheel ALL=(ALL) ALL</p></li><li><p>示例2：</p><p>student ALL=(root) /sbin/pidof,/sbin/ifconfig</p><p>%wheel ALL=(ALL) NOPASSWD: ALL</p></li><li><p>示例3：</p><p>User_Alias NETADMIN= netuser1,netuser2 </p><p>Cmnd_Alias NETCMD = /usr/sbin/ip</p><p>NETADMIN ALL=（root） NETCMD</p></li><li><p>示例4</p><p>User_Alias SYSADER=wang,mage,%admins </p><p>User_Alias DISKADER=tom</p><p>Host_Alias SERS=<a href="http://www.xxx.com,172.16.0.0/24">www.xxx.com,172.16.0.0/24</a></p><p>Runas_Alias OP=root</p><p>Cmnd_Alias SYDCMD=/bin/chown,/bin/chmod </p><p>Cmnd_Alias DSKCMD=/sbin/parted,/sbin/fdisk </p><p>SYSADER SERS= SYDCMD,DSKCMD </p><p>DISKADER ALL=(OP) DSKCMD</p></li><li><p>示例5：</p><p>User_Alias ADMINUSER = adminuser1,adminuser2</p><p>Cmnd_Alias ADMINCMD = /usr/sbin/useradd，/usr/sbin/usermod,/usr/bin/passwd [a-zA-Z]*, !/usr/bin/passwd root</p><p>ADMINUSER ALL=(root) NOPASSWD:ADMINCMD，PASSWD:/usr/sbin/userdel</p></li><li><p>示例6：</p><p>Defaults:wang runas_default=tom </p><p>xxx ALL=(tom,jerry) ALL</p></li><li><p>示例7：</p><p>wang 192.168.1.6,192.168.1.8=(root) /usr/sbin/,!/usr/sbin/useradd</p></li><li><p>示例8：</p><p>wang ALL=(ALL) /bin/cat /var/log/messages*</p></li></ul><h3 id="sudo命令"><a href="#sudo命令" class="headerlink" title="sudo命令"></a>sudo命令</h3><ul><li>ls -l /usr/bin/sudo</li><li>sudo –i –u wang 切换身份</li><li>sudo [-u user] COMMAND<ul><li>-V 显示版本信息等配置信息</li><li>-u user 默认为root</li><li>-l,ll 列出用户在主机上可用的和被禁止的命令</li><li>-v 再延长密码有效期限5分钟,更新时间戳</li><li>-k 清除时间戳（1970-01-01），下次需要重新输密码</li><li>-K 与-k类似，还要删除时间戳文件</li><li>-b 在后台执行指令</li><li>-p 改变询问密码的提示符号</li><li>示例：-p ”password on %h for user %p:”</li></ul></li></ul><h1 id="SELinux"><a href="#SELinux" class="headerlink" title="SELinux"></a>SELinux</h1><p>安全扩展的Linux</p><ul><li><p>工作于Linux内核中</p></li><li><p>DAC：自主访问控制法则 </p><ul><li>MAC：强制访问控制</li></ul></li><li><p>SELINUX工作级别：</p></li><li><p>strict： 每个进程都会受到selinux控制</p><ul><li>argetd： 仅有限的进程受到selinux控制，只监控容易被入侵的进程</li></ul></li><li><p>sandbox: </p></li><li><p>ubject: 进程</p><ul><li>object：进程、文件 <ul><li>文件这里：根据 open read close 等操作作selinux限制</li></ul></li><li>SELINUX为每个文件提供安全变迁，也为进程提供了安全标签<ul><li>user:role:type </li><li>user: selinux用户</li><li>role：角色</li><li>type：类型</li></ul></li></ul></li><li><p>selinux规则库： </p><ul><li>规则：哪种域能够访问哪种文件或那个进程等</li><li>配置selinux：<ul><li>selinux是否开启</li><li>给文件重新打标签</li><li>设定布尔值特性</li></ul></li></ul></li><li><p>selinux状态：</p><ul><li>enforcing： 强制； 每个受限的进程都必须执行selinux策略</li><li>permissive： 启用，每个受限的进程违规操作不会禁止，但是会被记录到审计日志中</li><li>disabled： 关闭</li></ul></li><li><p>相关命令：</p><ul><li><p>getenforce    # 获取selinux当前状态</p></li><li><p>setenforce [0|1]  # 设置当前selinux状态； </p><ul><li>0：设置为permissive </li><li>1: 设置为enforcing </li><li>临时设置；重启后会失效</li></ul></li><li><p>配置文件： /etc/selinux/config    永久生效<br>SELINUX={ enforcing|permissive|disabled }    </p></li><li><p>给文件重新打标签： </p><ul><li><p>chcon命令： Change the SELinux security context of each FILE to CONTEXT.<br>使用方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Usage: chcon [OPTION]... CONTEXT FILE...</span><br><span class="line">  or:  chcon [OPTION]... [-u USER] [-r ROLE] [-l RANGE] [-t TYPE] FILE...</span><br><span class="line">  or:  chcon [OPTION]... --reference=RFILE FILE...</span><br><span class="line">Change the SELinux security context of each FILE to CONTEXT.</span><br></pre></td></tr></table></figure></li><li><p>-R ： 能够递归打标签    </p></li></ul></li><li><p>还原文件标签：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># restorecon --help  </span></span><br><span class="line">usage:  restorecon [-iFnprRv0] [-e excludedir] pathname...</span><br><span class="line">usage:  restorecon [-iFnprRv0] [-e excludedir] -f file</span><br></pre></td></tr></table></figure></li><li><p>布尔型规则：</p><ul><li>getsebool # 获取bool规则 -a 参数： 获取所有</li><li>setsebool # 设置bool规则 </li></ul></li><li><p>设置布尔型规则：</p><ul><li><code>setsebool [ -NPV ] boolean value | bool1=val1 bool2=val2...</code></li></ul></li></ul></li></ul><h1 id="Iptables"><a href="#Iptables" class="headerlink" title="Iptables"></a>Iptables</h1><h2 id="防火墙基本概念"><a href="#防火墙基本概念" class="headerlink" title="防火墙基本概念"></a>防火墙基本概念</h2><ul><li><p>根据逻辑分类：</p><ul><li>主机防火墙： 对单个主机进行防护<ul><li>window上的防火墙</li><li>云上的安全组    </li></ul></li><li>网络防火墙：对网络入口进行防护，防火墙的背后是本地局域网<ul><li> 安全厂商设备</li><li> 云上的FaaS服务（对VPC网络进行防护）</li></ul></li><li>主机防火墙（个人）和网络防火墙（集体）相辅相成的 </li></ul></li><li><p>根据物理分类</p><ul><li>物理防火墙： 硬件级别实现部分防火墙功能；性能高，但是成本也高</li><li>软件防火墙： 应用软件出力逻辑运行于通用硬件平台上的防火墙；成本低，但是性能低</li></ul></li><li><p>IPtables： 是一个客户端代理软件，用于将用户安全设定执行到对应的“安全框架”中；所以它能够实现的是软件防火墙</p></li><li><p>“安全框架” - Netfilter 位于在内核中</p><ul><li><p>Netfilter - 内核空间；是真正去实现软件防火墙功能</p></li><li><p>Iptables - 用户空间；是一个用户空间的客户端代理软件</p></li><li><p>在用户空间中使用IPtables工具，将安全策略执行到内核空间中netfilter上从而来实现<br>Linux主机上的防火墙功能</p></li><li><p>Netfilter是Linux操作系统下的包过滤防火墙的“安全框架”（免费）；所以说IPtables没有守护进程，不是真正的服务，而是内核提供的功能</p></li><li><p>功能：</p><ul><li>网络地址转换</li><li>数据包内容修改</li><li>数据包过滤的防火墙功能(***)</li></ul></li></ul></li></ul><h2 id="IPtables基础"><a href="#IPtables基础" class="headerlink" title="IPtables基础"></a>IPtables基础</h2><ul><li><p>IPtables能够根据它的rule匹配而进对数据包进行处理：accept drop reject </p><ul><li>不同的处理方式 -&gt; 动作</li></ul></li><li><p>rule存储在内核空间的信息过滤表中，这些规则指定：SIP DIP 传输协议类型（Tcp/Udp）等等</p></li><li><p>Netfilter 位于在内核空间中，设置了”关卡”： Input Output等等</p></li><li><p>网卡的驱动 也是位于内核空间中，所以IPtables+Netfilter可以在内核空间中设置“关卡”，<br>当用户去访问应用服务的时候，数据包是通过网卡流经内核空间之后到达用户空间</p></li><li><p>如果我们的报文需要转发，则不会经过Input和output链（即不会从用户空间绕一圈）；只需要通过prerouting FORWARD postrouting链</p><ul><li>Input链 和 Output链 ： 作用于数据包于用户空间和内核空间的流入流出</li><li>prerouting FORWARD postrouting链： 在内核空间中关于数据包的流入流出及转发</li></ul></li><li><p>常见应用场景：</p><ul><li>到本地某个进程（服务）的报文： prerouting -&gt; input -&gt; ouput -&gt; postrouting</li><li>由本地进行转发的报文： prerouting -&gt; forward -&gt; postrouting </li></ul></li></ul><h2 id="IPtables缺点"><a href="#IPtables缺点" class="headerlink" title="IPtables缺点"></a>IPtables缺点</h2><blockquote><p>高并发的情况下，不建议开启IPtables，会影响性能。</p><p>没有绝对安全的操作系统，虽然防火墙有这些缺点，但还是能阻挡大多数来自于外网的攻击!</p></blockquote><ol><li>防火墙虽然可以过滤互联网的数据包，但却无法过滤内部网络的数据包。因此若有人从内部网络攻击时，防火墙没有作用。</li><li>电脑本身的操作系统亦可能因一些系统漏洞，使入侵者可以利用这些漏洞绕过防火墙过滤，从而入侵电脑。</li><li>防火墙无法有效阻挡病毒攻击，尤其是隐藏在数据中的病毒。</li><li>正常状况下，所有互联网的数据包软件都应经过防火墙的过滤，这将造成网络交通的瓶颈。例如在攻击性数据包出现时，攻击者会不时寄出数据包，让防火墙疲于过滤数据包，而使一些合法数据包软件亦无法正常进出防火墙。</li></ol><h2 id="链的概念"><a href="#链的概念" class="headerlink" title="链的概念"></a>链的概念</h2><ul><li>防火墙的作用在于对经过的报文匹配“规则”，然后执行相对应的动作，如果有多个“规则”组合到一起，那么我们就称之“链”</li><li>每经过一条链则需要把所有规则都匹配一遍；如果有符合条件的规则，则执行相应动作即可</li><li>简单来说：多个规则组成链，经过链时，链上的所有规则需要匹配一遍，符合规则的条件，执行相应动作</li><li>prerouting链：对数据包作路由选择前应用此链中的规则（所有的数据包进来的时侯都先由这个链处理）</li><li>input链：进来的数据包应用此规则链中的策略</li><li>forward链：转发数据包时应用此规则链中的策略</li><li>output链：外出的数据包应用此规则链中的策略</li><li>postrouting链： 对数据包作路由选择后应用此链中的规则（所有的数据包出来的时侯都先由这个链处理）</li></ul><h2 id="表的概念"><a href="#表的概念" class="headerlink" title="表的概念"></a>表的概念</h2><ul><li><p>每个链上都有一些规则，但是有许多相似的规则，这些规则可能是：</p><ul><li>对IP或者端口进行过滤</li><li>对报文进行修改</li><li>对网络地址进行转化<br>….</li></ul></li><li><p>把这些功能相似的规则的集合称之为“表”； 多张表的规则的集合叫做“链”</p></li><li><p>IPtables所有规则的定义：都是去定义到不同的表中</p></li><li><p>IPtables表：</p><ul><li>raw表：决定是否开启nat上启动的连接追踪机制； iptable_raw模块</li><li>mangle表：解析报文，做出修改，并重新封装的功能； iptable_mangle模块</li><li>nat表： 网络地址转换； iptable_nat模块</li><li>filter表：负责过滤功能（包过滤防火墙使用到的表）；iptables_filter模块</li></ul></li><li><p>表存在优先级：raw -&gt; mangle -&gt; nat -&gt; filter ； 优先级越高的表中规则优先匹配处理</p></li></ul><h2 id="表链关系"><a href="#表链关系" class="headerlink" title="表链关系"></a>表链关系</h2><ul><li><p>是不是每类链上的规则都会存在于4张表中？ 肯定不是；每个链只能有某些规则 -&gt; 拥有某些表</p></li><li><p>总结：每个链中的规则都会存在于哪些表中</p><ul><li>prerouting链： raw mangle nat </li><li>input链： mangle filter nat </li><li>forward链： mangle filter </li><li>output链：raw mangle nat filter </li><li>postrouting链： mangle nat </li></ul></li><li><p>实际操作过程中，往往都是通过表为操作入口，查看表中对应的规则，以及该表上规则所作用的“链”<br>表 —— 链 </p><ul><li>raw表：prerouting output</li><li>mangle表： prerouting input output forward postrouting </li><li>nat表： prerouting input output postrouting </li><li>filter表： input forward output </li></ul></li><li><p>当一个数据包经过一个“链”的时候，会将当前链上的所有规则进行匹配，而定义的规则都汇聚到表中；匹配时，因此会存在于优先级，所以就拥有了表的优先级</p></li><li><p>注意：想要主机支持转发功能，需要开启内核中ip_forward参数</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;1&quot;</span>&gt;/proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>  <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200505160351522.png" alt="image-20200505160351522"></p><h2 id="规则概念"><a href="#规则概念" class="headerlink" title="规则概念"></a>规则概念</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200505162214040.png" alt="image-20200505162214040"></p><ul><li><p>匹配条件 + 动作</p></li><li><p>规则：规则指定的匹配条件来尝试匹配流经的报文，一旦匹配成功，则由规则后面指定的处理动作进行处理，并不再进行匹配，LOG除外。若未匹配到规则，则按默认的规则处理。</p></li><li><p>匹配条件： </p><ul><li>基本匹配条件： SIP DIP等等</li><li>扩展匹配条件： Sport Dport等等</li><li>扩展匹配条件也是Netfilter中的一部门，以模块插件的形式存在，如果想要使用，则需要依赖对应的模块</li></ul></li><li><p>处理动作：在IPtables中称之为“target”</p><ul><li>常用动作：<ul><li>ACCEPT： 允许数据包通过</li><li>DROP：直接丢弃数据包，没有任何响应信息</li><li>REJECT：拒绝数据包通过，必要的时候会向发送端发送一个响应的拒接消息</li><li>SNAT：源地址转换，解决内网用户同一个公网地址上网问题</li><li>MASQUERADE： 是SNAT的一种特殊处理动作，适用于动态的，临时会变的公网IP地址</li><li>DNAT：目的地址转换，解决外部网络访问内部局域网中的服务</li><li>REDIRECT：在本地端口做端口映射,即重定向</li><li>LOG：/var/log/message系统日志文件中记录日志信息，然后将数据包传递给下一条匹配条件，不催数据包做任何处理，只是进行记录</li></ul></li></ul></li><li><p>规则查询： 以filter表进行操作，filter负责过滤功能<br><code>[root@test ~]# iptables -t filter -L</code></p><ul><li><p>-t： 指定表</p></li><li><p>-L： 列出表中的规则，默认是所有链的规则</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -vnL INPUT</span></span><br><span class="line">Chain INPUT (policy ACCEPT 172 packets, 12678 bytes)</span><br><span class="line">pkts bytes target     prot opt <span class="keyword">in</span>     out     <span class="built_in">source</span>               destination  </span><br></pre></td></tr></table></figure></li><li><p>-v ： 显示详细信息</p></li><li><p>-n ： 展开数字</p></li><li><p>–line-numbers: 显示有序序号 </p></li><li><p>policy : 当前链的默认策略</p></li><li><p>packets: 当前链默认策略匹配到的包的数量</p></li><li><p>bytes: 当前链默认策略匹配到的包的大小总和</p></li><li><p>pkts: 对应匹配到的报文个数</p></li><li><p>bytes: 对应匹配到的报文大小综合</p></li><li><p>target: 规则对应的处理动作</p></li><li><p>prot: 规则对应的传输协议 </p></li><li><p>opt: 规格对应的选项</p></li><li><p>in: 数据包由哪个接口流入</p></li><li><p>out：数据包由哪个接口流出</p><ul><li>即设置哪块网卡的报文需要匹配当前规则</li></ul></li><li><p>source： 规则对应的SIP</p></li><li><p>destination： 规则对应的DIP</p></li></ul></li><li><p>规则操作 ： 增删改</p><p><code>iptables [-t 表名] 选项 [链名] [条件] [-j 控制类型]</code></p><ul><li><p>增： <code>iptables -t filter -A INPUT -s x.x.x.x -j &lt;action&gt;</code><br>实例1： <code>[root@test ~]# iptables -t filter -A INPUT -s 172.16.0.1 -j DROP</code>    # 关于源地址为172.16.0.1/16主机数据包报文的流入给drop掉</p><ul><li><p>-A : 追加</p></li><li><p>-I ：在链的开头插入   在链名后可加数字代表第几个序列</p><p><code>iptables -t filter -I INPUT 2 -p icmp -j ACCEPT</code></p></li></ul></li><li><p>-j ：匹配条件中的所对应动作</p></li><li><p>清除规则：iptables -t &lt;tables..&gt; -F &lt;chains…&gt;</p><ul><li><p>方法1：根据规则的编号去删除规则</p></li><li><p>方法2：根据具体的匹配条件去删除规则</p></li><li><p>-D：删除指定链中的规则</p></li></ul><p><code>iptables -D INPUT 3</code></p><ul><li>-F：删除操作，清空当前表的所有规则</li></ul></li><li><p>修改规则：<br><code>[root@test ~]# iptables -t filter -R INPUT 1 -s 172.16.10.0/24 -j ACCEPT</code><br><code>[root@test ~]# iptables -t filter -P FORWARD DROP</code>    </p><ul><li>-R：修改规则</li><li>-P：修改链的默认规则的处理动作</li></ul></li><li><p>保存规则：<br><code>iptables-save &gt; /etc/sysconfig/iptables # 是系统启动后可导入的规则</code></p></li><li><p>导入规则：<br><code>iptables-restore &lt; /etc/sysconfig/iptables</code></p></li></ul></li><li><p>注意事项：</p><ul><li>不指定表名，默认指filter表</li><li>不指定链名，默认指表内的所有链</li><li>除非设置链的默认策略，否则必须指定匹配条件</li><li>选项、链名、控制类型使用大写字母，其余均为小写字母</li></ul></li></ul><h2 id="匹配条件"><a href="#匹配条件" class="headerlink" title="匹配条件"></a>匹配条件</h2><ul><li><p>基本条件：</p><ul><li><p>-s：指定源地址</p></li><li><p>-d：指定目的地址</p></li><li><p>-p：指定协议类型</p></li><li><p>-i / -o ： 指定网卡流入和流出</p><ul><li>-i : prerouting INPUT FORWARD </li><li>-o : output postrouting</li></ul></li><li><p>tcp/udp扩展模块</p><ul><li>–sport: 指定源端口</li><li>–dport：指定目的端口</li></ul></li><li><p>–icmp-type     ICMP类型</p><p>示例：我可以ping别人，别人不能ping通我</p><p><code>iptables -I INPUT -p icmp --icmp-type 0 -i ACCEPT</code></p><p><code>iptables -I INPUT 2 -p icmp --icmp-type 3 -i ACCEPT</code> </p></li></ul></li><li><p>扩展条件：-m 需要模块支持</p><ul><li>tcp/udp扩展模块<ul><li>multiport 多端口 （，不连续；- 连续）<ul><li>–sport: 指定源端口</li><li>–dport：指定目的端口</li></ul></li></ul></li><li>iprange扩展模块<ul><li>–src-range: 指定源地址范围</li><li>–dst-range：指定目的地址范围</li></ul></li><li>string扩展模块：指定匹配报文中的字符串<ul><li>–algo: 指定匹配算法（bm和kmp）</li><li>–string: 指定需要匹配的字符串</li></ul></li><li>time扩展模块：时间段匹配，如果报文在到达时间范围内，则符合匹配条件<ul><li>–timestart [起始时间] –tiemstop [结束时间]</li><li>–weekdays: 指定星期</li><li>–mouthdays: 指定日</li><li>–datastart [起始日期] –datastop [结束日期]</li></ul></li><li>connlimit扩展模块：限制每个IP地址同时连接到Server端的连接数量，不需要指定IP地址，默认就是针对每个客户端IP地址<ul><li>–connlimit-above : 限制每个客户端IP的并发连接数量；如果高于此数量则执行响应动作</li><li>–connlimit-upto  : 限制每个客户端IP的并发连接数量；如果低于次数量则执行响应动作</li></ul></li><li>state<ul><li>–state  连接状态</li></ul></li><li>mac<ul><li>–mac-source 指定源mac地址</li></ul></li></ul></li></ul><h2 id="自定义链"><a href="#自定义链" class="headerlink" title="自定义链"></a>自定义链</h2><blockquote><p>当默认链的规则非常多的时候，不方便我们管理，如果INPUT链中放置了几百条规则，我们可以针对不同服务(httpd ftp mysql)；有针对性将规则放置到自定义链中，在其他5个链进行引用即可，此时当我们想要去修改关于某个服务的规则时，只需要去对应的自定义链中修改即可</p></blockquote><ul><li>创建自定义链：</li></ul>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -N httpd</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -I httpd -s 172.16.0.0/16 -p icmp -j REJECT </span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -I INPUT -j httpd# 去引用自定义链中的规则</span></span><br></pre></td></tr></table></figure><ul><li><p>-N： 创建自定链</p></li><li><p>关于自定义链的增删改查同上</p></li><li><p>删除自定义链：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -F httpd# 1.清除自定义链中的规则</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -D INPUT 1 # 2.删除引用自定义链中的相关规则</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># iptables -t filter -X httpd# 3.通过-X参数删除自定义链</span></span><br></pre></td></tr></table></figure><ul><li>关于删除自定义链规则：<ol><li>自定义链中没有任何默认链的引用,即引用参数refer为0</li><li>自定义链中不能有任何规则，即自定义链为空</li></ol></li></ul></li></ul><h2 id="实验操作"><a href="#实验操作" class="headerlink" title="实验操作"></a>实验操作</h2><p><strong>1.批量添加防火墙的脚本(参考，自行更改)</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/<span class="built_in">local</span>/bin:/usr/1ocal/ sbin:~/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="function"><span class="title">support_distro</span></span>()&#123;</span><br><span class="line"><span class="keyword">if</span>[ -z <span class="string">&quot;`egrep -i &quot;</span>centos<span class="string">&quot; /etc/issue`&quot;</span> ];<span class="keyword">then</span></span><br><span class="line"><span class="built_in">echo</span><span class="string">&quot; Sorry,iptables script only support centos system now. &quot;</span></span><br><span class="line"><span class="built_in">exit</span> 1</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">support_distro</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;=======================iptables configure=======================&quot;</span></span><br><span class="line"><span class="comment"># Only support CentOs system</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取SSH端口</span></span><br><span class="line"><span class="keyword">if</span> grep <span class="string">&quot;^Port&quot;</span> /etc/ssh/sshd_config&gt;/dev/null;<span class="keyword">then</span></span><br><span class="line">sshdport=`grep <span class="string">&quot;^Port&quot;</span> /etc/ssh/sshd config|sed <span class="string">&quot;s/Port\s//g&quot;</span>`</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">sshdport=22</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取DNS服务器IP</span></span><br><span class="line"><span class="keyword">if</span> [ -s /etc/resolv.conf ];<span class="keyword">then</span></span><br><span class="line">nameserver1=`cat /etc/reso1v.conf|grep nameserver | awk <span class="string">&#x27;NR==1&#123;print $2 &#125;&#x27;</span>`</span><br><span class="line">nameserver1=`cat /etc/reso1v.conf|grep nameserver | awk <span class="string">&#x27;NR==2&#123;print $2 &#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line">IPT=<span class="string">&quot;/sbin/iptables&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#删除已有规则</span></span><br><span class="line"><span class="variable">$IPT</span> --delete-chain</span><br><span class="line"><span class="variable">$IPT</span> --flush</span><br><span class="line"></span><br><span class="line"><span class="comment">#禁止进,允许出,允许回环网卡</span></span><br><span class="line"><span class="variable">$IPT</span> -P INPUT DROP</span><br><span class="line"><span class="variable">$IPT</span> -P FORWARD DROP</span><br><span class="line"><span class="variable">$IPT</span> -P OUTPUT ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -i lo -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许已建立的或相关连接的通行</span></span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -m state --state RELATED, ESTABLISHED -j ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A OUTPUT -m state --state RELATED, ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#限制80端口单个IP的最大连接数为10</span></span><br><span class="line"><span class="variable">$IPT</span> -I INPUT -p tcp --dport 80 -m connlimit --connlimit-above 10 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许80 (HTTP) /873 (RSYNC) /443 (HTTPS) /20,21 (FTP) /25 (SMTP)端口的连接</span></span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT </span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -p tcp -m tcp --dport 873 -j ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -p tcp -m tcp --dport 443 - j ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -p tcp -m tcp --dport 20 -j ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -P tcp -m tcp --dport 21 -j ACCEPT </span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -P tcp -m tcp --dport 25 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许SSH端口的连接,脚本自动侦测目前的SSH端口，否则默认为22端口</span></span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -P tcp -m tcp --dport <span class="variable">$sshdport</span> -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许ping</span></span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"><span class="variable">$IPT</span> -A INPUT -P icmp -m icmp --icmp-type 11 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#允许DNS</span></span><br><span class="line">[ ! -z <span class="string">&quot;<span class="variable">$nameserver1</span>&quot;</span> ] &amp;&amp; <span class="variable">$IPT</span> -A OUTPUT -p udp -m udp -d <span class="variable">$nameserver1</span> --dport 53 -j ACCEPT</span><br><span class="line">[ ! -z <span class="string">&quot;<span class="variable">$nameserver2</span>&quot;</span> ] &amp;&amp; <span class="variable">$IPT</span> -A OUTPUT -p udp -m udp -d <span class="variable">$nameserver2</span> --dport 53 - j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存规则并重启IPTABLES</span></span><br><span class="line">iptables save</span><br><span class="line">systemctl restart iptables</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;==================iptables configure completed==================&quot;</span></span><br></pre></td></tr></table></figure><hr><p><strong>2.网络地址转换</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line"><span class="comment">#重启后失效</span></span><br></pre></td></tr></table></figure><p>SNAT:将内网地址转化为公网地址</p><p>一个数据包在经过路由之后（或者说在通过防火墙的过滤之后)才被知道他的源IP是谁，在路由之前只能看到目标IP，如果我看不到你的源IP，那怎么匹配想过滤的数据包并进行源地址转换?我防火墙根本就不能确定你是否是符合匹配条件的IP，所以只能使用POSTROUTING</p><p><code>iptables -t nat-A POSTROUTING -s 192.168.123.0/24 -j SNAT --to-source 10.0.0.1</code></p><p>DNAT:将公网地址转化为内网地址</p><p>如果我不在路由之前就把目标地址转换完成，很显然当数据包到达入口IP之后，他的目的已经达到了，因为他本来的目标IP就是防火墙的对外公网IP，那么数据包还会往里面走吗?显然不可能了，所以只能使用PREROUTING</p><p><code>iptables -t nat -A PREROUTING -d 10.0.0.1 -j DNAT --to-destination 192.168.123.0</code></p><h1 id="Firewalld"><a href="#Firewalld" class="headerlink" title="Firewalld"></a>Firewalld</h1><ul><li><p>动态防火墙后台服务程序：提供一个动态管理的防火墙，用以支持网络“Zone”，来分配对一个<br>网络链接和界面一定程序的信息，它具备对IPv4和Ipv6防火墙设置的支持</p></li><li><p>它支持以太网桥，并有分离运行时间和永久配置选项，可以通过服务程序直接增加规则</p></li><li><p>图形化配置工具：firewall-config </p></li><li><p>命令行配置工具：firewall-cmd</p></li><li><p>用于配置firewalld服务永久性或者非永久性运行时间的改变，它依次用IPtables工具与执行<br>数据包筛选的内核中Netfilter通信</p></li></ul><h2 id="Firewalld和IPtables的关系"><a href="#Firewalld和IPtables的关系" class="headerlink" title="Firewalld和IPtables的关系"></a>Firewalld和IPtables的关系</h2><ol><li>firewalld和IPtables本身都不具备防火墙功能 </li><li>他们都是在用户空间将执行规则放到内核空间的“安全框架”- Netfilter中去实现</li></ol><h2 id="Firewalld和IPtables的区别"><a href="#Firewalld和IPtables的区别" class="headerlink" title="Firewalld和IPtables的区别"></a>Firewalld和IPtables的区别</h2><ol><li>iptables 在 /etc/sysconfig/iptables-config中存放IPtables规则设置；Firewalld 在<br>/usr/lib/firewalld/* 中进行系统配置和/etc/firewalld/* 中关于服务xml文件格式的配置</li><li>在使用IPtables的时候，每去操作一条规则立即生效</li><li>Firewalld不会创建任何新的规则，仅仅运行规则中的不同之处，因此Firewalld可以在运行时间内改变配置而不丢失现有的连接</li></ol><h2 id="Zone区域"><a href="#Zone区域" class="headerlink" title="Zone区域"></a>Zone区域</h2><p>不同区域对于网络连接的设置规范不同</p><ul><li>trusted 信任区域，接受所有网络连接</li><li>home 家庭区域</li><li>internal 内部区域</li><li>worker 工作区域</li><li>public 公共区域</li><li>extenal 外部区域</li><li>dmz 非军事区域</li><li>block 限制区域</li><li>drop 丢弃区域</li></ul><h2 id="管理防火墙"><a href="#管理防火墙" class="headerlink" title="管理防火墙"></a>管理防火墙</h2><p>每个zone中都有一套规则集，对于接收到的请求具体使用哪个zone，Firewalld通过三种方式来判断</p><ol><li>source 源地址优先级最高</li><li>Interface 接收请求的网卡</li><li>firewall.config 中配置的默认zone </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# cat /etc/firewalld/firewalld.conf | grep Zone</span><br><span class="line">DefaultZone=public</span><br></pre></td></tr></table></figure><ul><li>查看默认zone： <code>[root@test ~]# firewall-cmd --get-default-zone</code></li><li>设置默认zone：   <code>--set-default-zone=&lt;zone&gt;</code></li><li>查看当前firewalld状态： <code>[root@test ~]# firewall-cmd --state</code></li><li>查看当前活动的zone：<code>[root@test ~]# firewall-cmd --get-active-zones</code></li><li>列出所有可用zone： <code>[root@test ~]# firewall-cmd --list-all-zones</code></li><li>列出所有区域设置：<code>--list-all</code></li><li>列出所有预定服务：<code>--get-services    # 所有已经设定好的可直接使用的服务规则</code></li><li>将某个网络地址放置/移除某个zone<br><code>--add-source=&lt;source&gt;[/&lt;mask&gt;]|&lt;MAC&gt;|ipset:&lt;ipset&gt;</code><br><code>--remove-source=&lt;source&gt;[/&lt;mask&gt;]|&lt;MAC&gt;|ipset:&lt;ipset&gt;</code></li></ul><h2 id="管理操作"><a href="#管理操作" class="headerlink" title="管理操作"></a>管理操作</h2><ul><li>添加、删除、改变网络接口到制定域中（域中会有一条规则）<ul><li><code>--list-interfaces</code></li><li><code>--add-interface=&lt;interface&gt;</code></li><li><code>--change-interface=&lt;interface&gt;</code></li><li><code>--remove-interface=&lt;interface&gt;</code></li><li><code>--query-interface=&lt;interface&gt;</code></li></ul></li><li>添加、删除、列出服务<ul><li><code>--get-services</code></li><li><code>--delete-service=&lt;service&gt;</code></li><li><code>--add-service=&lt;service&gt;</code></li><li><code>--list-services</code></li><li><code>--remove-service=&lt;service&gt;</code></li><li><code>--query-service=&lt;service&gt;</code></li></ul></li><li>列出、添加、删除端口<ul><li><code>--list-ports         List ports added for a zone [P] [Z]</code></li><li><code>--add-port=&lt;portid&gt;[-&lt;portid&gt;]/&lt;protocol&gt;</code></li><li><code>--remove-port=&lt;portid&gt;[-&lt;portid&gt;]/&lt;protocol&gt;</code></li><li><code>--query-port=&lt;portid&gt;[-&lt;portid&gt;]/&lt;protocol&gt;</code></li></ul></li><li>永久生效： <code> --permanent</code></li><li>重载防火墙： <code>--reload </code></li></ul><h2 id="实验操作-1"><a href="#实验操作-1" class="headerlink" title="实验操作"></a>实验操作</h2><p>部署http服务，并在防火墙开启的情况能够正常访问：</p><p>1.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# firewall-cmd --add-service=http</span><br><span class="line">/usr/lib/firewalld/services</span><br><span class="line">[root@test services]# cat http.xml </span><br><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span><br><span class="line">&lt;service&gt;</span><br><span class="line">&lt;short&gt;WWW (HTTP)&lt;/short&gt;</span><br><span class="line">&lt;description&gt;HTTP is the protocol used to serve Web pages. If you plan to make your Web server publicly available, enable this option. This option is not required for viewing pages locally or developing Web pages.&lt;/description&gt;</span><br><span class="line">&lt;port protocol=&quot;tcp&quot; port=&quot;80&quot;/&gt;# 每个可添加的服务都有对应的xml文件</span><br><span class="line">&lt;/service&gt;</span><br></pre></td></tr></table></figure><ul><li>每个服务的xml文件当中都定义了规则（协议+端口）, 所以当我们去添加服务到当前zone中，也就意味只 对xml当中的设定的规则生效(允许放行)</li></ul><ol start="2"><li><p><code>[root@test services]# firewall-cmd --add-port=80/tcp </code></p><p>总结来说：去添加服务的方式最终还是涉及到添加端口的方式（要看对应服务的xml文件如何定义）</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible-03-Role</title>
      <link href="2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-03-Role/"/>
      <url>2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-03-Role/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><ul><li><p>roles</p><p>ansible自1.2版本引入的新特性，用于层次性、结构化地组织playbook。roles 能够根据层次型结构自动装载变量文件、tasks以及handlers等。要使用roles只需要在playbook中使用include指令即可。简单来讲，roles就是通过分别将变量、 文件、任务、模板及处理器放置于单独的目录中，并可以便捷地include它们的一 种机制。角色一般用于基于主机构建服务的场景中，但也可以是用于构建守护进程等场景中</p></li><li><p>复杂场景：建议使用roles，代码复用度高</p><ul><li>变更指定主机或主机组</li><li>如命名不规范维护和传承成本大</li><li>某些功能需多个Playbook，通过includes即可实现</li></ul></li></ul><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><h2 id="编排"><a href="#编排" class="headerlink" title="编排"></a>编排</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504211825178.png" alt="image-20200504211825178"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><ul><li><p>每个角色，以特定的层级目录结构进行组织</p></li><li><p>roles目录结构： </p><p>playbook.yml </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">roles/</span></span><br><span class="line">  <span class="string">project/</span> </span><br><span class="line">    <span class="string">tasks/</span> </span><br><span class="line">    <span class="string">files/</span> </span><br><span class="line">    <span class="string">vars/</span></span><br><span class="line">    <span class="string">templates/</span> </span><br><span class="line">    <span class="string">handlers/</span> </span><br><span class="line">    <span class="string">default/</span>  <span class="string">不常用</span> </span><br><span class="line">    <span class="string">meta/</span> <span class="string">不常用</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li><p>roles/appname 目录结构</p><ul><li>tasks目录：至少应该包含一个名为main.yml的文件，其定义了此角色的任务列表；此文件可以使用include包含其它的位于此目录中的task文件</li><li>files目录：存放由copy或script等模块调用的文件；</li><li>templates目录：template模块会自动在此目录中寻找Jinja2模板文件</li><li>handlers目录：此目录中应当包含一个main.yml文件，用于定义此角色用到的各handler；在 handler中使用include包含的其它的handler文件也应该位于此目录中；</li><li>vars目录：应当包含一个main.yml文件，用于定义此角色用到的变量；</li><li>meta目录：应当包含一个main.yml文件，用于定义此角色的特殊设定及其依赖关系；ansible 1.3及其以后的版本才支持；</li><li>default目录：为当前角色设定默认变量时使用此目录；应当包含一个main.yml文件</li></ul></li><li><p>roles/example_role/files/ 所有文件，都将可存放在这里</p></li><li><p>roles/example_role/templates/ 所有模板都存放在这里</p></li><li><p>roles/example_role/tasks/main.yml：主函数，包括在其中的所有任务将被执行</p></li><li><p>roles/example_role/handlers/main.yml：所有包括其中的 handlers 将被执行</p></li><li><p>roles/example_role/vars/main.yml：所有包括在其中的变量将在roles中生效</p></li><li><p>roles/example_role/meta/main.yml：roles所有依赖将被正常登入</p></li></ul><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ol><li>创建以roles命名的目录</li><li>在roles目录中分别创建以各角色名称命名的目录，如webservers等</li><li>在每个角色命名的目录中分别创建files、handlers、meta、tasks、 templates和vars目录；用不到的目录可以创建为空目录，也可以不创建</li><li>在playbook文件中，调用各角色</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504213200695.png" alt="image-20200504213200695"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504213243943.png" alt="image-20200504213243943"></p><h1 id="相关使用"><a href="#相关使用" class="headerlink" title="相关使用"></a>相关使用</h1><h2 id="playbook中调用角色"><a href="#playbook中调用角色" class="headerlink" title="playbook中调用角色"></a>playbook中调用角色</h2><p><strong>方法1</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span> </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">memcached</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><hr><p><strong>方法2： 传递变量给角色</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> </span><br><span class="line">  <span class="attr">remote_user:</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="string">-&#123;</span> <span class="attr">role:</span> <span class="string">nginx,</span> <span class="attr">username:</span> <span class="string">nginx</span> <span class="string">&#125;</span> </span><br></pre></td></tr></table></figure><p>键role用于指定角色名称</p><p>后续的k/v用于传递变量给角色</p><hr><p>**方法3：还可基于条件测试实现角色调用 **</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">roles:</span></span><br><span class="line"><span class="string">-&#123;</span> <span class="attr">role:</span> <span class="string">nginx,</span> <span class="attr">username:</span> <span class="string">nginx,</span> <span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">‘7’</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>以下介绍</p><h2 id="通过roles传递变量"><a href="#通过roles传递变量" class="headerlink" title="通过roles传递变量"></a>通过roles传递变量</h2><p>当给一个主机应用角色的时候可以传递变量，然后在角色内使用这些变量</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webservers</span> </span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">foo_app_instance</span>, <span class="attr">dir:</span> <span class="string">&#x27;/web/htdocs/a.com&#x27;</span>, <span class="attr">port:</span> <span class="number">8080</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="向roles传递参数"><a href="#向roles传递参数" class="headerlink" title="向roles传递参数"></a>向roles传递参数</h2><ul><li><p>而在playbook中，可以这样使用roles：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">webservers</span></span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">webservers</span></span><br></pre></td></tr></table></figure></li><li><p>也可以向roles传递参数</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">webservers</span> </span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">common</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">foo_app_instance</span>, <span class="attr">dir:</span> <span class="string">&#x27;/opt/a&#x27;</span>, <span class="attr">port:</span> <span class="number">5000</span> &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">foo_app_instance</span>, <span class="attr">dir:</span> <span class="string">&#x27;/opt/b&#x27;</span>, <span class="attr">port:</span> <span class="number">5001</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="条件式地使用roles"><a href="#条件式地使用roles" class="headerlink" title="条件式地使用roles"></a>条件式地使用roles</h2><ul><li><p>甚至也可以条件式地使用roles</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">webservers</span> </span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">some_role</span>, <span class="attr">when:</span> <span class="string">&quot;ansible_os_family == &#x27;RedHat&#x27;&quot;</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="Roles条件及变量等案例"><a href="#Roles条件及变量等案例" class="headerlink" title="Roles条件及变量等案例"></a>Roles条件及变量等案例</h2><ul><li><p>When条件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">role:</span> <span class="string">nginx</span>, <span class="attr">when:</span> <span class="string">&quot;ansible_distribution_major_version == &#x27;7&#x27; &quot;</span> ,<span class="attr">username:</span> <span class="string">nginx</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>变量调用</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">zabbix</span></span><br><span class="line"><span class="attr">proxy sudo:</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">geerlingguy.php-mysql</span> &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">dj-wasabi.zabbix-proxy</span>, <span class="attr">zabbix_server_host:</span> <span class="number">192.168</span><span class="number">.37</span><span class="number">.167</span> &#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="完整的roles结构"><a href="#完整的roles结构" class="headerlink" title="完整的roles结构"></a>完整的roles结构</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504215010141.png" alt="image-20200504215010141"></p><h2 id="roles-playbook-tags使用"><a href="#roles-playbook-tags使用" class="headerlink" title="roles playbook tags使用"></a>roles playbook tags使用</h2><p><code>ansible-playbook --tags=&quot;nginx,httpd,mysql&quot; nginx-role.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">testweb</span>  </span><br><span class="line"><span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line"><span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> &#123; <span class="attr">role:</span> <span class="string">nginx</span> ,<span class="attr">tags:</span> [ <span class="string">&#x27;nginx&#x27;</span>, <span class="string">&#x27;web&#x27;</span> ] ,<span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">&quot;6“ &#125;</span></span><br><span class="line"><span class="string">  - &#123; role: httpd ,tags: [ &#x27;httpd&#x27;, &#x27;web&#x27; ]&#125;</span></span><br><span class="line"><span class="string">  - &#123; role: mysql ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span></span><br><span class="line"><span class="string">  - &#123; role: marridb ,tags: [ &#x27;mysql&#x27;, &#x27;db&#x27; ] &#125;</span></span><br><span class="line"><span class="string">  - &#123; role: php &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">ansible-playbook --tags=&#x27;nginx,httpd,mysql&#x27; nginx-role.yaml</span></span><br></pre></td></tr></table></figure><h1 id="实战案例"><a href="#实战案例" class="headerlink" title="实战案例"></a>实战案例</h1><h2 id="案例1：实现Httpd角色"><a href="#案例1：实现Httpd角色" class="headerlink" title="案例1：实现Httpd角色"></a>案例1：实现Httpd角色</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">-pv</span> <span class="string">/data/ansib1e/roles/httpd/&#123;tasks</span> <span class="string">,handlers,files&#125;</span></span><br><span class="line"><span class="comment">#创建角色相关的文件</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/data/ansible/roles/httpd/</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">install.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">index.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">service.yml</span></span><br><span class="line"></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/install.yml</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">httpd</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=httpd</span></span><br><span class="line">  </span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span> <span class="string">backup=yes</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">restart</span></span><br><span class="line">  </span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/index.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">index.html</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=index.html</span> <span class="string">dest=/var/www/html/</span></span><br><span class="line">  </span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/service.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">service</span> </span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line">  </span><br><span class="line"><span class="string">vim</span> <span class="string">handlers/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">#在playbook中调用角色</span></span><br><span class="line"><span class="string">vim</span> <span class="string">/data/ansible/role_httpd.yml</span></span><br><span class="line"><span class="comment"># httpd role</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">appsrvs</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">httpd</span></span><br><span class="line"><span class="comment">#运行playbook</span></span><br><span class="line"><span class="string">ansible-playbook</span> <span class="string">/data/ansib1e/role_httpd.yml</span></span><br></pre></td></tr></table></figure><h2 id="案例2：实现Nginx角色"><a href="#案例2：实现Nginx角色" class="headerlink" title="案例2：实现Nginx角色"></a>案例2：实现Nginx角色</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">-pv</span> <span class="string">/data/ansib1e/roles/nginx/</span> &#123;<span class="string">tasks，handlers，templates</span> ,<span class="string">vars</span>&#125;</span><br><span class="line"><span class="comment">#创建task文件</span></span><br><span class="line"><span class="string">cd</span> <span class="string">/data/ansib1e/ro1es/nginx/</span></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/main.yml</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">install.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">file.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">include:</span> <span class="string">service.yml</span></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/install.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span></span><br><span class="line">  <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/config.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">file</span> <span class="string">for</span> <span class="string">centos7</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">src=nginx7.conf.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansible_distribution</span> <span class="string">major.version==&quot;7&quot;</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">restart</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">file</span> <span class="string">for</span> <span class="string">centos8</span></span><br><span class="line">  <span class="attr">template:</span> <span class="string">src=nginx8.conf.j2</span> <span class="string">dest=/etc/nginx/nginx.</span> <span class="string">conf</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">ansib1e_distribution</span> <span class="string">major_</span> <span class="string">version==&quot;8&quot;</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="string">restart</span></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/file.yml</span> </span><br><span class="line"><span class="bullet">-</span> <span class="attr">name :</span> <span class="string">index.html</span></span><br><span class="line">  <span class="attr">copy:</span> <span class="string">src=roles/httpd/files/index.html</span> <span class="string">dest=/usr/share/nginx/html/</span></span><br><span class="line"><span class="string">vim</span> <span class="string">tasks/service.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">service</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br><span class="line"><span class="comment">#创建handler文件</span></span><br><span class="line"><span class="string">cat</span> <span class="string">handlers/main.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span></span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=restarted</span></span><br><span class="line"><span class="comment">#创建两个template文件</span></span><br><span class="line"><span class="string">cat</span> <span class="string">templates/nginx7.conf.j2</span></span><br><span class="line"><span class="string">user</span> &#123;&#123;<span class="string">user</span>&#125;&#125;<span class="string">;</span></span><br><span class="line"><span class="string">worker_processes</span> &#123;&#123;<span class="string">ansib1e_processor.vcpus**2</span>&#125;&#125;<span class="string">;</span> <span class="comment">#修改此行</span></span><br><span class="line"><span class="string">error_log</span> <span class="string">/var/log/nginx/error.log;</span></span><br><span class="line"><span class="string">pid</span> <span class="string">/run/nginx.pid;</span></span><br><span class="line"><span class="string">省略...</span></span><br><span class="line"><span class="string">cat</span> <span class="string">templates/nginx8.conf.</span> <span class="string">j2</span></span><br><span class="line"><span class="string">...省略...</span></span><br><span class="line"><span class="string">user</span> <span class="string">nginx;</span></span><br><span class="line"><span class="string">worker_processes</span> &#123;&#123;<span class="string">ansib1e_processor_vcpus+2</span>&#125;&#125;<span class="string">;</span> <span class="comment">#修改此行</span></span><br><span class="line"><span class="string">error_log</span> <span class="string">/var/log/nginx/error.log;</span></span><br><span class="line"><span class="string">pid</span> <span class="string">/run/nginx.pid;</span></span><br><span class="line"><span class="string">省略...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建变量文件</span></span><br><span class="line"><span class="string">vim</span> <span class="string">vars/main.yml</span></span><br><span class="line"><span class="attr">user :</span> <span class="string">daemon</span></span><br></pre></td></tr></table></figure><h2 id="案例3：实现多角色的选择"><a href="#案例3：实现多角色的选择" class="headerlink" title="案例3：实现多角色的选择"></a>案例3：实现多角色的选择</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">vim</span> <span class="string">/data/ansib1e/role_httpd_nginx.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">appsrvs</span></span><br><span class="line">  <span class="attr">roles:</span></span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">role:</span> <span class="string">httpd，tags:</span> [<span class="string">httpd</span> ,<span class="string">web</span>]<span class="string">，</span> <span class="attr">when:</span> <span class="string">ansib1e_distribution_major__version==&quot;7&quot;</span> &#125;</span><br><span class="line">  <span class="bullet">-</span> &#123;<span class="attr">role:</span> <span class="string">nginx</span>, <span class="attr">tags:</span> [<span class="string">nginx，web</span>], <span class="attr">when:</span> <span class="string">ansible_</span> <span class="string">distribution_major__version==&quot;8&quot;</span> &#125;</span><br><span class="line">  </span><br><span class="line"><span class="string">ansible-playbook</span> <span class="string">-t</span> <span class="string">nginx</span> <span class="string">/data/ansib1e/role__httpd__nginx.yml</span></span><br></pre></td></tr></table></figure><h1 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h1><ul><li><a href="http://galaxy.ansible.com/">http://galaxy.ansible.com</a></li><li><a href="https://galaxy.ansible.com/explore#/">https://galaxy.ansible.com/explore#/</a></li><li><a href="http://ansible.com.cn/">http://ansible.com.cn/</a></li><li><a href="https://github.com/ansible/ansible">https://github.com/ansible/ansible</a></li><li><a href="https://github.com/ansible/ansible-examples">https://github.com/ansible/ansible-examples</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible-02-Playbook</title>
      <link href="2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-02-Playbook/"/>
      <url>2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-02-Playbook/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注意：对于本文中出现的 { {    } }和{ %   % }，前后  “{ {“  以及  “{ %”  中间在实际操作中是没有空格的，由于hexo模板渲染问题，导致不得不加空格</p></blockquote><h1 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a>YAML</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>YAML是一个可读性高的用来表达资料序列的格式。YAML参考了其他多种语言，包括： XML、C语言、Python、Perl以及电子邮件格式RFC2822等。Clark Evans在2001年首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者</p></li><li><p>YAML Ain’t Markup Language，即YAML不是XML。不过，在开发的这种语言时， YAML的意思其实是：”Yet Another Markup Language”（仍是一种标记语言）</p></li><li><p>特性</p><ul><li>YAML的可读性好</li></ul><ul><li>YAML和脚本语言的交互性好 </li><li>YAML使用实现语言的数据类型 </li><li>YAML有一个一致的信息模型 </li><li>YAML易于实现</li><li>YAML可以基于流来处理 </li><li>YAML表达能力强，扩展性好</li></ul></li><li><p>更多的内容及规范参见：<a href="http://www.yaml.org/">http://www.yaml.org</a></p></li></ul><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><ul><li><p>在单一档案中，可用连续三个连字号(-)区分多个档案。另外，还有选择性的连续三个点号( … )用来表示档案结尾</p></li><li><p>次行开始正常写Playbook的内容，一般建议写明该Playbook的功能</p></li><li><p>使用#号注释代码</p></li><li><p>缩进必须是统一的，不能空格和tab混用</p></li><li><p>缩进的级别也必须是一致的，同样的缩进代表同样的级别，程序判别配置的级别是通过缩进结合换行来实现的</p></li><li><p>YAML文件内容是区别大小写的，k/v的值均需大小写敏感</p></li><li><p>多个k/v可同行写也可换行写，同行使用，分隔</p></li><li><p>v可是个字符串，也可是另一个列表</p></li><li><p>一个完整的代码块功能需最少元素需包括 name 和 task</p></li><li><p>一个name只能包括一个task</p></li><li><p>YAML文件扩展名通常为yml或yaml</p></li><li><p>List：列表，其所有元素均使用“-”打头</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># A list of tasty fruits</span></span><br><span class="line"><span class="string">-Apple</span></span><br><span class="line"><span class="string">-Orange</span></span><br><span class="line"><span class="string">-Strawberry</span></span><br><span class="line"><span class="string">-Mango</span></span><br></pre></td></tr></table></figure></li><li><p>Dictionary：字典，通常由多个key与value构成</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># An employee record </span></span><br><span class="line"><span class="attr">name:</span> <span class="string">Example</span> <span class="string">Developer</span> </span><br><span class="line"><span class="attr">job:</span> <span class="string">Developer</span></span><br><span class="line"><span class="attr">skill:</span> <span class="string">Elite</span></span><br></pre></td></tr></table></figure><p>也可以将key:value放置于{}中进行表示，用,分隔多个key:value</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># An employee record</span></span><br><span class="line">&#123;<span class="attr">name:</span> <span class="string">Example</span> <span class="string">Developer</span>, <span class="attr">job:</span> <span class="string">Developer</span>, <span class="attr">skill:</span> <span class="string">Elite</span>&#125;</span><br></pre></td></tr></table></figure></li><li><p>YAML的语法和其他高阶语言类似，并且可以简单表达清单、散列表、标量等数据结构。其结构（Structure）通过空格来展示，序列（Sequence）里的项用”-“来代表，Map里的键值对用”:”分隔</p><p>示例</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">John</span> <span class="string">Smith</span> </span><br><span class="line"><span class="attr">age:</span> <span class="number">41</span></span><br><span class="line"><span class="attr">gender:</span> <span class="string">Male</span> </span><br><span class="line"><span class="attr">spouse:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">Jane</span> <span class="string">Smith</span> </span><br><span class="line">  <span class="attr">age:</span> <span class="number">37</span></span><br><span class="line">  <span class="attr">gender:</span> <span class="string">Female</span> </span><br><span class="line"><span class="attr">children:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jimmy</span> <span class="string">Smith</span> </span><br><span class="line">    <span class="attr">age:</span> <span class="number">17</span></span><br><span class="line">    <span class="attr">gender:</span> <span class="string">Male</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Jenny</span> <span class="string">Smith</span> </span><br><span class="line">    <span class="attr">age:</span> <span class="number">13</span></span><br><span class="line">    <span class="attr">gender:</span> <span class="string">Female</span></span><br></pre></td></tr></table></figure></li></ul><hr><p>三种常见的数据交换格式</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504191555869.png" alt="image-20200504191555869"></p><h1 id="Playbook"><a href="#Playbook" class="headerlink" title="Playbook"></a>Playbook</h1><h2 id="核心元素"><a href="#核心元素" class="headerlink" title="核心元素"></a>核心元素</h2><ul><li><p>Host 执行的远程主机列表</p></li><li><p>Task 任务集</p></li><li><p>Variables 内置变量或自定义变量在playbook中调用</p></li><li><p>Templates 模板，可替换模板文件中的变量并实现一些简单逻辑的文件</p></li><li><p>Handlers 和 notify 结合使用，由特定条件触发的操作，满足条件方才执行， 否则不执行</p></li><li><p>tags 标签 指定某条任务执行，用于选择运行playbook中的部分代码。ansible 具有幂等性，因此会自动跳过没有变化的部分，即便如此，有些代码为测试其 确实没有发生变化的时间依然会非常地长。此时，如果确信其没有变化，就可 以通过tags跳过此些代码片断</p><p><code>ansible-playbook -t tagsname useradd.yml</code></p></li></ul><h2 id="基础组件"><a href="#基础组件" class="headerlink" title="基础组件"></a>基础组件</h2><ul><li><p>Hosts：</p><ul><li><p>playbook中的每一个play的目的都是为了让特定主机以某个指定的用户身份执行任务。hosts用于指定要执行指定任务的主机，须事先定义在主机清单中</p></li><li><p>可以是如下形式： </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="bullet">-</span> <span class="string">one.example.com</span></span><br><span class="line"><span class="string">one.example.com:two.example.com</span> </span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="number">.50</span></span><br><span class="line"><span class="number">192.168</span><span class="number">.1</span><span class="string">.*</span></span><br></pre></td></tr></table></figure></li><li><p>Websrvs:dbsrvs  或者，两个组的并集</p></li><li><p>Websrvs:&amp;dbsrvs 与，两个组的交集</p></li><li><p>webservers:!phoenix 在websrvs组，但不在dbsrvs组<br>示例: - host: websrvs：dbsrvs</p></li></ul></li><li><p>remote_user: 可用于Host和task中。也可以通过指定其通过sudo的方式在远程主机上执行任务，其可用于play全局或某任务；此外，甚至可以在sudo时使用sudo_user指定sudo时切换的用户</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="string">remote_user:root</span></span><br><span class="line">  <span class="attr">task:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">test</span> <span class="string">conection</span></span><br><span class="line">      <span class="attr">ping:</span></span><br><span class="line">      <span class="attr">remote_user:</span> <span class="string">xxx</span></span><br><span class="line">      <span class="attr">sudo:</span> <span class="literal">yes</span> <span class="string">默认sudo为root</span></span><br><span class="line">      <span class="string">sudo_user:kinmfer</span> <span class="string">sudo为kinmfer</span></span><br></pre></td></tr></table></figure></li><li><p>task列表和action</p><ul><li>play的主体部分是task list，task list中的各任务按次序逐个在hosts中指定 的所有主机上执行，即在所有主机上完成第一个任务后，再开始第二个任务</li><li>task的目的是使用指定的参数执行模块，而在模块参数中可以使用变量。模块执行是幂等的，这意味着多次执行是安全的，因为其结果均一致</li><li>每个task都应该有其name，用于playbook的执行结果输出，建议其内容能清晰地描述任务执行步骤。如果未提供name，则action的结果将用于输出</li></ul></li><li><p>tasks：任务列表</p><ul><li><p>两种格式：</p><ol><li>action: module arguments</li><li>module: arguments 建议使用</li></ol><ul><li>注意：shell和command模块后面跟命令，而非key=value</li></ul></li><li><p>某任务的状态在运行后为changed时，可通过“notify”通知给相应的handlers</p></li><li><p>任务可以通过”tags“打标签，可在ansible-playbook命令上使用-t指定进行调用 示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">disable</span> <span class="string">selinux</span> </span><br><span class="line">    <span class="attr">command:</span> <span class="string">/sbin/setenforce</span> <span class="number">0</span></span><br></pre></td></tr></table></figure></li><li><p>如果命令或脚本的退出码不为零，可以使用如下方式替代 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span> </span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/bin/somecommand</span> <span class="string">||</span> <span class="string">/bin/true</span></span><br></pre></td></tr></table></figure></li><li><p>或者使用ignore_errors来忽略错误信息</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">run</span> <span class="string">this</span> <span class="string">command</span> <span class="string">and</span> <span class="string">ignore</span> <span class="string">the</span> <span class="string">result</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">/usr/bin/somecommand</span> </span><br><span class="line">    <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="运行playbook"><a href="#运行playbook" class="headerlink" title="运行playbook"></a>运行playbook</h2><ul><li>运行playbok的方式<br><code>ansible-playbook &lt;filename.yml&gt; ... [options]</code></li><li>常见选项<ul><li>–syntax-check 检查语法格式</li><li>–check  -C   只检测可能会发生的改变，但不真正执行操作</li><li>–list-hosts  列出运行任务的主机</li><li>–list-tags    列出tag</li><li>–list-task   列出task</li><li>–limit 主机列表 只针对主机列表中的主机执行</li><li>-v  -vv -vvv 显示过程</li><li>-e  在Playbook中引入外部参数变量</li><li>-t –tags 指定执行该tags的任务</li><li>–skip-tags 跳过指定的tags任务</li></ul></li><li>示例<ul><li><code>ansible-playbook file.yml --check</code> 只检测</li><li><code>ansible-playbook file.yml</code></li><li><code>ansible-playbook file.yml --limit websrvs</code></li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>sysuser.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">all</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span> <span class="comment"># 不收集信息</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">mysql</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=mysql</span> <span class="string">system=yes</span> <span class="string">uid=36</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">a</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">name=httpd</span> <span class="string">system=yes</span></span><br></pre></td></tr></table></figure></li><li><p>httpd.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">gather_facts:</span> <span class="literal">no</span> <span class="comment"># 不收集信息</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">configure</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=files/httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure></li><li><p>nginx.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">group</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">user</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span> <span class="string">group=nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Start</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="handlers和notify"><a href="#handlers和notify" class="headerlink" title="handlers和notify"></a>handlers和notify</h2><ul><li><p>Handlers</p><p>是task列表，这些task与前述的task并没有本质上的不同,用于当关注的资源发生变化时，才会采取一定的操作</p></li></ul><ul><li>Notify此action可用于在每个play的最后被触发，这样可避免多次有改变发生时每次都执行指定的操作，仅在所有的变化发生完成后一次性地执行指定操作。 在notify中列出的操作称为handler，也即notify中调用handler中定义的操作</li></ul><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">configure</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=files/httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span>  </span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span>  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">webnodes</span>  </span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">http_port:</span> <span class="number">80</span></span><br><span class="line">    <span class="attr">max_clients:</span> <span class="number">256</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">at</span> <span class="string">the</span> <span class="string">latest</span> <span class="string">version</span>  </span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=latest</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">ensure</span> <span class="string">apache</span> <span class="string">is</span> <span class="string">running</span>  </span><br><span class="line">  <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">configure</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=files/httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span>  </span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">apache</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=restarted</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">group</span> <span class="string">nginx</span>  </span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">user</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span> <span class="string">group=nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=/root/config.txt</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line">      <span class="attr">notify:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Restart</span> <span class="string">Nginx</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">Check</span> <span class="string">Nginx</span> <span class="string">Process</span>  </span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Restart</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=restarted</span> <span class="string">enabled=yes</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Check</span> <span class="string">Nginx</span> <span class="string">process</span></span><br><span class="line">      <span class="attr">shell:</span> <span class="string">killall</span> <span class="number">-0</span> <span class="string">nginx</span> <span class="string">&gt;</span> <span class="string">/tmp/nginx.log</span></span><br></pre></td></tr></table></figure><h2 id="tags"><a href="#tags" class="headerlink" title="tags"></a>tags</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">configure</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=files/httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span>  </span><br><span class="line">      <span class="attr">tags:</span> <span class="string">conf</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">start</span> <span class="string">httpd</span> </span><br><span class="line">      <span class="attr">service  tags:</span> <span class="string">service</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">state=started</span> <span class="string">enabled=yes</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook –t conf httpd.yml</code></p><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">testsrv</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">inshttpd</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=httpd</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">configure</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=files/httpd.conf</span> <span class="string">dest=/etc/httpd/conf/</span></span><br><span class="line">      <span class="attr">tags:</span> <span class="string">rshttpd</span>  </span><br><span class="line">      <span class="attr">notify:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">  <span class="attr">handlers:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">httpd</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=httpd</span> <span class="string">status=restarted</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook –t rshttpd httpd2.yml</code></p><p><code>ansible-playbook –-skip-tags rshttpd httpd2.yml</code></p><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><ul><li><p>变量来源：</p><ol><li><p>ansible setup facts 远程主机的所有变量都可直接调用</p></li><li><p>在/etc/ansible/hosts中定义</p><p>普通变量：主机组中主机单独定义，优先级高于公共变量 </p><p>公共（组）变量：针对主机组中所有主机定义统一变量</p></li><li><p>通过命令行指定变量，优先级最高 </p><p><code>ansible-playbook –e varname=value</code></p></li><li><p>在playbook中定义 </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">vars:</span></span><br><span class="line">  <span class="string">-var1:</span> <span class="string">value1</span></span><br><span class="line">  <span class="string">-var2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure></li><li><p>在独立的变量YAML文件中定义</p></li><li><p>在role中定义</p></li></ol></li><li><p>变量命名</p><p>变量名仅能由字母、数字和下划线组成，且只能以字母开头</p></li><li><p>变量定义：key=value </p><p>示例：http_port=80</p></li><li><p>变量调用方式：</p><ul><li><p>通过{ { variable_name } } 调用变量，且变量名前后必须有空格，有时用 “{ { variable_name } }”才生效</p></li><li><p>ansible-playbook –e 选项指定</p><p><code>ansible-playbook test.yml -e &quot;hosts=www user=xxx&quot;</code></p></li></ul></li><li><p>主机变量</p><p>可以在inventory中定义主机时为其添加主机变量以便于在playbook中使用</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">websrvs</span>]</span><br><span class="line"><span class="string">www1.kinmfer.com</span> <span class="string">http_port=80</span> <span class="string">maxRequestsPerChild=808</span>  <span class="string">www2.kinmfer.com</span> <span class="string">http_port=8080</span> <span class="string">maxRequestsPerChild=909</span></span><br></pre></td></tr></table></figure></li><li><p>组变量</p><p>组变量是指赋予给指定组内所有主机上的在playbook中可用的变量</p><p>示例 ：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">websrvs</span>]</span><br><span class="line"><span class="string">www1.xxx.com</span> <span class="string">www2.xxx.com</span></span><br><span class="line">[<span class="string">websrvs:vars</span>] </span><br><span class="line"><span class="string">ntp_server=ntp.xxx.com</span> </span><br><span class="line"><span class="string">nfs_server=nfs.xxx.com</span></span><br></pre></td></tr></table></figure></li><li><p>命令行指定变量：</p><p><code>ansible websvrs –e http_port=8000 –m hostname –a ‘name=&#123; &#123; hname &#125; &#125;&#123; &#123; mark &#125; &#125;&#123; &#123; http_port &#125; &#125;’</code></p></li><li><p>使用变量文件</p><p><code>cat vars.yml  </code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">var1:</span> <span class="string">httpd</span>  </span><br><span class="line"><span class="attr">var2:</span> <span class="string">nginx</span></span><br></pre></td></tr></table></figure><hr><p><code>cat var.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">web</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">vars_files:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">vars.yml</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">httpd</span> <span class="string">log</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">name=/app/&#123;</span> &#123; <span class="string">var1</span> &#125; <span class="string">&#125;.log</span> <span class="string">state=touch</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">nginx</span> <span class="string">log</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">name=/app/&#123;</span> &#123; <span class="string">var2</span> &#125; <span class="string">&#125;.log</span> <span class="string">state=touch</span></span><br></pre></td></tr></table></figure></li><li><p>setup变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">host:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="string">remote_user:root</span></span><br><span class="line">  <span class="attr">task:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">log</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">name=/var/log/</span> &#123;&#123; <span class="string">ansible_fqdn</span> &#125;&#125; <span class="string">stae=touch</span></span><br></pre></td></tr></table></figure><p>获取内置变量方法：<br><code>ansible oldboy -m setup -a &quot;filter=ansible_hostname&quot;</code></p><p>常见主机信息：</p><table><thead><tr><th>变量</th><th>含义</th></tr></thead><tbody><tr><td>ansible_all_ipv4_addresses：</td><td>仅显示ipv4的信息。</td></tr><tr><td>ansible_devices：</td><td>仅显示磁盘设备信息。</td></tr><tr><td>ansible_distribution：</td><td>显示是什么系统，例：centos,suse等。</td></tr><tr><td>ansible_distribution_major_version：</td><td>显示是系统主版本。</td></tr><tr><td>ansible_distribution_version：</td><td>仅显示系统版本。</td></tr><tr><td>ansible_machine：</td><td>显示系统类型，例：32位，还是64位。</td></tr><tr><td>ansible_eth0：</td><td>仅显示eth0的信息。</td></tr><tr><td>ansible_hostname：</td><td>仅显示主机名。</td></tr><tr><td>ansible_kernel：</td><td>仅显示内核版本。</td></tr><tr><td>ansible_lvm：</td><td>显示lvm相关信息。</td></tr><tr><td>ansible_memtotal_mb：</td><td>显示系统总内存。</td></tr><tr><td>ansible_memfree_mb：</td><td>显示可用系统内存。</td></tr><tr><td>ansible_memory_mb：</td><td>详细显示内存情况。</td></tr><tr><td>ansible_swaptotal_mb：</td><td>显示总的swap内存。</td></tr><tr><td>ansible_swapfree_mb：</td><td>显示swap内存的可用内存。</td></tr><tr><td>ansible_mounts：</td><td>显示系统磁盘挂载情况。</td></tr><tr><td>ansible_processor：</td><td>显示cpu个数(具体显示每个cpu的型号)。</td></tr><tr><td>ansible_processor_vcpus：</td><td>显示cpu个数(只显示总的个数)。</td></tr></tbody></table></li></ul><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><p>var.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">package</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=&#123;</span> &#123; <span class="string">pkname</span> &#125; <span class="string">&#125;</span> <span class="string">state=present</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook –e pkname=httpd var.yml</code></p><hr><p>var.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">username:</span> <span class="string">user1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">groupname:</span> <span class="string">group1</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">group</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">name=&#123;</span> &#123; <span class="string">groupname</span> &#125; <span class="string">&#125;</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">create</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=&#123;</span> &#123; <span class="string">username</span> &#125; <span class="string">&#125;</span> <span class="string">state=present</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook    var.yml</code><br><code>ansible-playbook -e &quot;username=user2 groupname=group2”    var2.yml</code></p><h2 id="when"><a href="#when" class="headerlink" title="when"></a>when</h2><ul><li><p>条件测试:如果需要根据变量、facts或此前任务的执行结果来做为某task执行与 否的前提时要用到条件测试,通过when语句实现，在task中使用，jinja2的语法 格式</p></li><li><p>when语句</p><p>在task后添加when子句即可使用条件测试；when语句支持Jinja2表达式语法</p></li><li><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&quot;shutdown RedHat flavored systems&quot;</span> </span><br><span class="line">    <span class="attr">command:</span> <span class="string">/sbin/shutdown</span> <span class="string">-h</span> <span class="string">now</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_os_family</span> <span class="string">==</span> <span class="string">&quot;RedHat&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>when语句中还可以使用Jinja2的大多“filter”，例如要忽略此前某语句的错误并基于其结果（failed或者success）运行后面指定的语句，可使用类似如下形式：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span> <span class="string">/bin/false</span>  </span><br><span class="line">    <span class="attr">register:</span> <span class="string">result</span>  </span><br><span class="line">    <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span> <span class="string">/bin/something</span>  </span><br><span class="line">    <span class="attr">when:</span> <span class="string">result|failed</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span> <span class="string">/bin/something_else</span>  </span><br><span class="line">    <span class="attr">when:</span> <span class="string">result|success</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">command:</span> <span class="string">/bin/still/something_else</span>  </span><br><span class="line">    <span class="attr">when:</span> <span class="string">result|skipped</span></span><br></pre></td></tr></table></figure></li><li><p>此外，when语句中还可以使用facts或playbook中定义的变量</p></li></ul><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">group</span> <span class="string">nginx</span>  </span><br><span class="line">      <span class="attr">tags:</span> <span class="string">user</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">user</span> <span class="string">nginx</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=nginx</span> <span class="string">state=present</span> <span class="string">group=nginx</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Install</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">yum:</span> <span class="string">name=nginx</span> <span class="string">state=present</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">restart</span> <span class="string">Nginx</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">name=nginx</span> <span class="string">state=restarted</span></span><br><span class="line">      <span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">“6”</span></span><br></pre></td></tr></table></figure><hr><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">conf</span> <span class="string">file</span> <span class="string">to</span> <span class="string">centos7</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">src=nginx.conf.c7.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">&quot;7&quot;</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">install</span> <span class="string">conf</span> <span class="string">file</span> <span class="string">to</span> <span class="string">centos6</span></span><br><span class="line">    <span class="attr">template:</span> <span class="string">src=nginx.conf.c6.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line">    <span class="attr">when:</span> <span class="string">ansible_distribution_major_version</span> <span class="string">==</span> <span class="string">&quot;6&quot;</span></span><br></pre></td></tr></table></figure><h2 id="with-items"><a href="#with-items" class="headerlink" title="with_items"></a>with_items</h2><ul><li><p>迭代：当有需要重复性执行的任务时，可以使用迭代机制</p><ul><li>对迭代项的引用，固定变量名为”item“</li><li>要在task中使用with_items给定要迭代的元素列表</li><li>列表格式： <ul><li>字符串</li><li>字典</li></ul></li></ul></li><li><p>ansible的循环机制还有更多的高级功能，具体请参见官方文档</p><p><a href="http://docs.ansible.com/playbooks_loops.html">http://docs.ansible.com/playbooks_loops.html</a></p></li></ul><h3 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">add</span> <span class="string">several</span> <span class="string">users</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span> <span class="string">groups=wheel</span>  </span><br><span class="line"><span class="attr">with_items:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testuser1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">testuser2</span></span><br></pre></td></tr></table></figure><p>上面语句的功能等同于下面的语句：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">add</span> <span class="string">user</span> <span class="string">testuser1</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">name=testuser1</span> <span class="string">state=present</span> <span class="string">groups=wheel</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">add</span> <span class="string">user</span> <span class="string">testuser2</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">name=testuser2</span> <span class="string">state=present</span> <span class="string">groups=wheel</span></span><br></pre></td></tr></table></figure><hr><p>with_items中可以使用元素还可为hashes</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">add</span> <span class="string">several</span> <span class="string">users</span></span><br><span class="line"><span class="attr">user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span> <span class="string">groups=&#123;&#123;</span> <span class="string">item.groups</span> <span class="string">&#125;&#125;</span> </span><br><span class="line"><span class="attr">with_items:</span></span><br><span class="line">  <span class="string">-&#123;</span> <span class="attr">name:</span> <span class="string">&#x27;testuser1&#x27;</span><span class="string">,</span> <span class="attr">groups:</span> <span class="string">&#x27;wheel&#x27;</span> <span class="string">&#125;</span></span><br><span class="line">  <span class="string">-&#123;</span> <span class="attr">name:</span> <span class="string">&#x27;testuser2&#x27;</span><span class="string">,</span> <span class="attr">groups:</span> <span class="string">&#x27;root&#x27;</span> <span class="string">&#125;</span></span><br></pre></td></tr></table></figure><hr><p>将多个文件进行copy到被控端</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">testsrv</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Create</span> <span class="string">rsyncd</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">copy:</span> <span class="string">src=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">dest=/etc/&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span>  </span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">rsyncd.secrets</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">rsyncd.conf</span></span><br></pre></td></tr></table></figure><hr><p>迭代嵌套自变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">hosts：websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span>  </span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">some</span> <span class="string">groups</span></span><br><span class="line">      <span class="attr">group:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span>  </span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">group1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">group2</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">group3</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">add</span> <span class="string">some</span> <span class="string">users</span></span><br><span class="line">      <span class="attr">user:</span> <span class="string">name=&#123;&#123;</span> <span class="string">item.name</span> <span class="string">&#125;&#125;</span> <span class="string">group=&#123;&#123;</span> <span class="string">item.group</span> <span class="string">&#125;&#125;</span> <span class="string">state=present</span>  </span><br><span class="line">      <span class="attr">with_items:</span></span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;user1&#x27;</span>, <span class="attr">group:</span> <span class="string">&#x27;group1&#x27;</span> &#125;</span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;user2&#x27;</span>, <span class="attr">group:</span> <span class="string">&#x27;group2&#x27;</span> &#125;</span><br><span class="line">        <span class="bullet">-</span> &#123; <span class="attr">name:</span> <span class="string">&#x27;user3&#x27;</span>, <span class="attr">group:</span> <span class="string">&#x27;group3&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><hr><p>字典 with_items</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">使用ufw模块来管理哪些端口需要开启</span> </span><br><span class="line">  <span class="attr">ufw:</span></span><br><span class="line">  <span class="attr">rule:</span> <span class="string">“&#123;&#123;</span> <span class="string">item.rule</span> <span class="string">&#125;&#125;”</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">“&#123;&#123;</span> <span class="string">item.port</span> <span class="string">&#125;&#125;”</span></span><br><span class="line">  <span class="attr">proto:</span> <span class="string">“&#123;&#123;</span> <span class="string">item.proto</span> <span class="string">&#125;&#125;”</span>  </span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">rule:</span> <span class="string">‘allow’</span>, <span class="attr">port:</span> <span class="number">22</span>, <span class="attr">proto:</span> <span class="string">‘tcp’</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">rule:</span> <span class="string">‘allow’</span>, <span class="attr">port:</span> <span class="number">80</span>, <span class="attr">proto:</span> <span class="string">‘tcp’</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">rule:</span> <span class="string">‘allow’</span>, <span class="attr">port:</span> <span class="number">123</span>, <span class="attr">proto:</span> <span class="string">‘udp’</span> &#125;</span><br><span class="line"><span class="bullet">-</span> <span class="attr">name:</span> <span class="string">配置网络进出方向的默认规则</span> </span><br><span class="line">  <span class="attr">ufw:</span></span><br><span class="line">  <span class="attr">direction:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.direction &#125;&#125;</span>&quot;</span>  <span class="attr">policy:</span> <span class="string">&quot;<span class="template-variable">&#123;&#123; item.policy &#125;&#125;</span>&quot;</span> <span class="attr">state:</span> <span class="string">enabled</span></span><br><span class="line">  <span class="attr">with_items:</span></span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">direction:</span> <span class="string">outgoing</span>, <span class="attr">policy:</span> <span class="string">allow</span> &#125;</span><br><span class="line">    <span class="bullet">-</span> &#123; <span class="attr">direction:</span> <span class="string">incoming</span>, <span class="attr">policy:</span> <span class="string">deny</span> &#125;</span><br></pre></td></tr></table></figure><h2 id="基础元素"><a href="#基础元素" class="headerlink" title="基础元素"></a>基础元素</h2><ul><li><p>Facts：是由正在通信的远程目标主机发回的信息，这些信息被保存在ansible变量中。要获取指定的远程主机所支持的所有facts，可使用如下命令进行</p><p><code>ansible websrvs -m setup</code></p></li><li><p>通过命令行传递变量</p><p>在运行playbook的时候也可以传递一些变量供playbook使用 </p><p>示例：</p><p><code>ansible-playbook test.yml -e &quot;hosts=www user=kinmfer&quot;</code></p></li><li><p>register</p><p>把任务的输出定义为变量，然后用于其他任务</p><p>示例 : </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">check</span> <span class="string">server</span> <span class="string">port</span></span><br><span class="line">    <span class="attr">shell:</span> <span class="string">netstat</span> <span class="string">-lntup</span></span><br><span class="line">    <span class="attr">register:</span> <span class="string">get_server_port</span></span><br><span class="line">    <span class="attr">ignore_errors:</span> <span class="literal">True</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">display</span> <span class="string">port</span> <span class="string">info</span></span><br><span class="line">    <span class="attr">debug:</span> <span class="string">msg=&#123;</span> &#123; <span class="string">get_server_port.stdout_lines</span> &#125; <span class="string">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="剧本整合"><a href="#剧本整合" class="headerlink" title="剧本整合"></a>剧本整合</h2><p>方式一：include_tasks: f1.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">hosts:</span> <span class="string">all</span></span><br><span class="line"><span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">tasks:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">f1.yml</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">include_tasks:</span> <span class="string">f2.yml</span></span><br></pre></td></tr></table></figure><p>方式二：include: f1.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">include：f1.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">include：f2.yml</span></span><br></pre></td></tr></table></figure><p>方式三：import_playbook:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">root@m01</span> <span class="string">ansible-playbook</span>]<span class="comment"># cat main.yml </span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">base.yml</span>     </span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">rsync.yml</span>    </span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">nfs.yml</span>      </span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">oxxx.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">rsync.yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">import_playbook:</span> <span class="string">nfs.yml</span></span><br></pre></td></tr></table></figure><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ol><li>剧本语法规范是否符合(空格 冒号 短横线)</li><li>剧本中模块使用是否正确</li><li>剧本中一个name标识下面只能写一个模块任务信息</li><li>剧本中尽量不要大量使用shell模块</li></ol><h1 id="模板template"><a href="#模板template" class="headerlink" title="模板template"></a>模板template</h1><p><strong>注意：</strong></p><blockquote><p>在模板语法中，对于 { {    } }和{ %   % }，前后的  “{ {“  以及  “{ %”  中间是没有空格的，由于hexo渲染的问题，本篇文章的某些部分不得已在中间加空格，但切记是没有的！！！</p></blockquote><ul><li><p>文本文件，嵌套有脚本（使用模板编程语言编写）</p></li><li><p>template功能：根据模块文件动态生成对应的配置文件</p><ul><li><p>template文件必须存放于templates目录下，且命名为 .j2 结尾</p></li><li><p>yaml/yml 文件需和templates目录平级，目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;</span><br><span class="line">├─ temnginx.yml</span><br><span class="line">└─ templates</span><br><span class="line">└─ nginx.conf.j2</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>Jinja2语言，使用字面量，有下面形式 </p><ul><li>字符串：使用单引号或双引号</li><li>数字：整数，浮点数</li><li>列表：[item1, item2, …]</li><li>元组：(item1, item2, …)</li><li>字典：{ key1:value1, key2:value2, … } </li><li>布尔型：true/false</li><li>算术运算：+, -, *, /, //, %, **</li><li>比较操作：==, !=, &gt;, &gt;=, &lt;, &lt;=</li><li>逻辑运算：and，or，no</li><li>流表达式：For，If，When</li></ul></li></ul><h2 id="Jinja2"><a href="#Jinja2" class="headerlink" title="Jinja2"></a>Jinja2</h2><ul><li><p>字面量</p><ul><li>表达式最简单的形式就是字面量。字面量表示诸如字符串和数值的 Python 对象。如“Hello World”</li><li>双引号或单引号中间的一切都是字符串。无论何时你需要在模板中使用一个 字符串（比如函数调用、过滤器或只是包含或继承一个模板的参数），如42 42.23</li><li>数值可以为整数和浮点数。如果有小数点，则为浮点数，否则为整数。在 Python 里， 42 和 42.0 是不一样的</li></ul></li><li><p>算术运算</p><p>Jinja 允许你用计算值。这在模板中很少用到，但为了完整性允许其存在</p><p>支持下面的运算符</p><ul><li><p>+：把两个对象加到一起。通常对象是素质，但是如果两者是字符串或列表，你可以用这 种方 式来衔接它们。无论如何这不是首选的连接字符串的方式！连接字符串见 ~ 运算符。 { { 1 + 1 } } 等于 2</p></li><li><p>-：用第一个数减去第二个数。 { { 3 - 2 } } 等于 1</p></li><li><p>/：对两个数做除法。返回值会是一个浮点数。 { { 1 / 2 } } 等于 { { 0.5 } }</p></li><li><p>//：对两个数做除法，返回整数商。 { { 20 // 7 } } 等于 2</p></li><li><p>%：计算整数除法的余数。 { { 11 % 7 } } 等于 4</p></li><li><p>*：用右边的数乘左边的操作数。 { { 2 * 2 } } 会返回 4 。也可以用于重复一个字符串多次。{ { ‘=’ * 80 } } 会打印 80 个等号的横条</p></li><li><p>**：取左操作数的右操作数次幂。 { { 2**3 } } 会返回 8</p></li></ul></li><li><p>比较操作符</p><ul><li>== 比较两个对象是否相等</li><li>!= 比较两个对象是否不等</li><li>&gt; 如果左边大于右边，返回 true</li><li>&gt;= 如果左边大于等于右边，返回 true</li><li>&lt; 如果左边小于右边，返回 true</li><li>&lt;= 如果左边小于等于右边，返回 true</li></ul></li><li><p>逻辑运算符</p><p>对于 if 语句，在 for 过滤或 if 表达式中，它可以用于联合多个表达式</p><ul><li><p>and</p><p>如果左操作数和右操作数同为真，返回 true</p></li></ul><ul><li><p>or</p><p>如果左操作数和右操作数有一个为真，返回 true</p></li><li><p>not</p><p>对一个表达式取反（见下）</p></li><li><p>(expr)</p><p>表达式组</p></li></ul></li><li><p>[‘list’, ‘of’, ‘objects’]:</p><p>一对中括号括起来的东西是一个列表。列表用于存储和迭代序列化的数据。例如 你可以容易地在 for 循环中用列表和元组创建一个链接的列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% for href, caption in [(&#39;index.html&#39;, &#39;Index&#39;), (&#39;about.html&#39;, &#39;About&#39;), (&#39;downloads.html&#39;, &#39;Downloads&#39;)] %&#125;</span><br><span class="line">&lt;li&gt;&#123; &#123; caption &#125; &#125;&lt;&#x2F;li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">(‘tuple’, ‘of’, ‘values’):</span><br></pre></td></tr></table></figure></li><li><p>元组与列表类似，只是你不能修改元组。如果元组中只有一个项，你需要以逗号 结尾它。元组通常用于表 示两个或更多元素的项。更多细节见上面的例子</p><p>{‘dict’: ‘of’, ‘key’: ‘and’, ‘value’: ‘pairs’}:</p></li><li><p>Python 中的字典是一种关联键和值的结构。键必须是唯一的，并且键必须只有一个值。字典在模板中很少使用，罕用于诸如 xmlattr() 过滤器之类</p><p>true / false:</p><p>true 永远是 true ，而 false 始终是 false</p></li></ul><h2 id="示例-5"><a href="#示例-5" class="headerlink" title="示例"></a>示例</h2><p>利用template 同步nginx配置文件</p><p>准备templates/nginx.conf.j2文件</p><p><code>vim temnginx.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">config</span> <span class="string">to</span> <span class="string">remote</span> <span class="string">hosts</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=nginx.conf.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook temnginx.yml</code></p><h2 id="变更替换"><a href="#变更替换" class="headerlink" title="变更替换"></a>变更替换</h2><ul><li><p>修改文件nginx.conf.j2 下面行为 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">worker_processes &#123;&#123; ansible_processor_vcpus &#125;&#125;;</span><br></pre></td></tr></table></figure></li><li><p><code>cat temnginx2.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span>  </span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">config</span> <span class="string">to</span> <span class="string">remote</span> <span class="string">hosts</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=nginx.conf.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br></pre></td></tr></table></figure><p><code>ansible-playbook temnginx2.yml</code></p></li></ul><h2 id="算数运算"><a href="#算数运算" class="headerlink" title="算数运算"></a>算数运算</h2><p><code>vim nginx.conf.j2</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">worker_processes</span> &#123; &#123; <span class="string">ansible_processor_vcpus**2</span> &#125; &#125;<span class="string">;</span>  </span><br><span class="line"><span class="string">worker_processes</span> &#123; &#123; <span class="string">ansible_processor_vcpus+2</span> &#125; &#125;<span class="string">;</span></span><br></pre></td></tr></table></figure><h2 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#temnginx1.yml</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span> </span><br><span class="line">    <span class="attr">nginx_vhosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">listen:</span> <span class="number">8080</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">config</span> <span class="string">file</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=nginx2.conf.j2</span> <span class="string">dest=/data/nginx2.conf</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#templates/nginx.conf1.j2</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">for</span> <span class="string">vhost</span> <span class="string">in</span> <span class="string">nginx_vhosts</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> &#123;&#123; <span class="string">vhost.listen</span> &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="comment">#生成的结果</span></span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> <span class="number">8080</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#temnginx4. yml</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">nginx_vhosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">listen:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">server_name:</span> <span class="string">&quot;web1.kinmfer.com&quot;</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">&quot;/var/www/nginx/web1/&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">listen:</span> <span class="number">8081</span></span><br><span class="line">        <span class="attr">server_name:</span> <span class="string">&quot;web2.kinmfer.com&quot;</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">&quot;/var/www/nginx/web2/&quot;</span></span><br><span class="line">      <span class="bullet">-</span> &#123;<span class="attr">listen:</span> <span class="number">8082</span><span class="string">，</span> <span class="attr">server_ name:</span> <span class="string">&quot;web3.kinmfer.com&quot;</span><span class="string">，root:&quot;/var/www/nginx/web3/&quot;</span>&#125;</span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">config</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=nginx.conf4.j2</span> <span class="string">dest=/data/nginx4.conf</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">for</span> <span class="string">vhost</span> <span class="string">in</span> <span class="string">nginx_vhosts</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> &#123;&#123; <span class="string">vhost.listen</span> &#125;&#125;</span><br><span class="line">  <span class="string">server_name</span> &#123;&#123; <span class="string">vhost.server_name</span> &#125;&#125;</span><br><span class="line">  <span class="string">root</span> &#123;&#123; <span class="string">vhost.root</span> &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="attr">hosts:</span> <span class="string">websrvs</span></span><br><span class="line">  <span class="attr">remote_user:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">vars:</span></span><br><span class="line">    <span class="attr">nginx_vhosts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">web1:</span></span><br><span class="line">        <span class="attr">listen:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">&quot;/var/www/nginx/web1/&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">web2:</span></span><br><span class="line">        <span class="attr">listen:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">server_name:</span> <span class="string">&quot;web2.kinmfer.com&quot;</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">&quot;/var/www/nginx/web2/&quot;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">web3:</span></span><br><span class="line">        <span class="attr">listen:</span> <span class="number">8080</span></span><br><span class="line">        <span class="attr">server_name:</span> <span class="string">&quot;web3.kinmfer.com&quot;</span></span><br><span class="line">        <span class="attr">root:</span> <span class="string">&quot;/var/www/nginx/web3/&quot;</span></span><br><span class="line">  <span class="attr">tasks:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">template</span> <span class="string">config</span> <span class="string">to</span></span><br><span class="line">      <span class="attr">template:</span> <span class="string">src=nginx.conf.j2</span> <span class="string">dest=/etc/nginx/nginx.conf</span></span><br><span class="line">&#123;<span class="string">%</span> <span class="string">for</span> <span class="string">vhost</span> <span class="string">in</span> <span class="string">nginx_vhosts</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">server</span> &#123;</span><br><span class="line">  <span class="string">listen</span> &#123;&#123; <span class="string">vhost.listen</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">if</span> <span class="string">vhost.</span> <span class="string">server_name</span> <span class="string">is</span> <span class="string">defined</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">server_name</span> &#123;&#123; <span class="string">vhost.server_name</span> &#125;&#125;</span><br><span class="line">  &#123;<span class="string">%</span> <span class="string">endif</span> <span class="string">%</span>&#125;</span><br><span class="line"><span class="string">root</span>  &#123;&#123; <span class="string">vhost.</span> <span class="string">root</span> &#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#123;<span class="string">%</span> <span class="string">endfor</span> <span class="string">%</span>&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ansible01-简介</title>
      <link href="2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-01-%E7%AE%80%E4%BB%8B/"/>
      <url>2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-Ansible-01-%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Ansible之前"><a href="#Ansible之前" class="headerlink" title="Ansible之前"></a>Ansible之前</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504132245297.png" alt="image-20200504132245297"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504132329133.png" alt="image-20200504132329133"></p><h2 id="运维工程师职能划分"><a href="#运维工程师职能划分" class="headerlink" title="运维工程师职能划分"></a>运维工程师职能划分</h2><h3 id="云计算"><a href="#云计算" class="headerlink" title="云计算"></a>云计算</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504145257181.png" alt="image-20200504145257181"></p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504145309817.png" alt="image-20200504145309817"></p><h2 id="企业实际应用场景分析"><a href="#企业实际应用场景分析" class="headerlink" title="企业实际应用场景分析"></a>企业实际应用场景分析</h2><ul><li><p>Dev开发环境</p><ul><li>使用者：程序员</li><li>功能：程序员开发软件，测试BUG的环境 </li><li>管理者：程序员</li></ul></li><li><p>测试环境</p><ul><li><p>使用者：QA测试工程师</p></li><li><p>功能：测试经过Dev环境测试通过的软件的功能 </p></li><li><p>管理者：运维</p></li><li><p>说明：测试环境往往有多套,测试环境满足测试功能即可，不宜过多</p><p>1、测试人员希望测试环境有多套,公司的产品多产品线并发，即多个版本， 意味着多个版本同步测试</p><p>2、通常测试环境有多少套和产品线数量保持一样 </p></li></ul></li></ul><ul><li><p>发布环境：代码发布机，有些公司为堡垒机（安全屏障） </p><ul><li><p>使用者：运维</p></li><li><p>功能：发布代码至生产环境 </p></li><li><p>管理者：运维（有经验）</p></li><li><p>发布机：往往需要有2台（主备）</p></li></ul></li></ul><ul><li><p>生产环境</p><ul><li>使用者：运维，少数情况开放权限给核心开发人员，极少数公司将权限完全 开放给开发人员并其维护</li><li>功能：对用户提供公司产品的服务 </li><li>管理者：只能是运维</li><li>生产环境服务器数量：一般比较多，且应用非常重要。往往需要自动工具协 助部署配置应用</li></ul></li><li><p>灰度环境（生产环境的一部分） </p><ul><li><p>使用者：运维</p></li><li><p>功能：在全量发布代码前将代码的功能面向少量精准用户发布的环境,可基 于主机或用户执行灰度发布</p></li><li><p>案例：共100台生产服务器，先发布其中的10台服务器，这10台服务器就是灰度服务器</p></li><li><p>管理者：运维</p></li><li><p>灰度环境：往往该版本功能变更较大，为保险起见特意先让一部分用户优化体验该功能，待这部分用户使用没有重大问题的时候，再全量发布至所有服务器</p></li></ul></li></ul><h2 id="程序发布"><a href="#程序发布" class="headerlink" title="程序发布"></a>程序发布</h2><ul><li><p>程序发布要求：</p><ul><li>不能导致系统故障或造成系统完全不可用</li><li>不能影响用户体验</li></ul></li><li><p>预发布验证：</p><ul><li>新版本的代码先发布到服务器（跟线上环境配置完全相同，只是未接入到调度器）</li></ul></li><li><p>灰度发布：</p><ul><li>基于主机，用户，业务</li></ul></li><li><p>发布路径：</p><ul><li>/webap/tuangou</li><li>/webap/tuangou-1.</li><li>/webap/tuangou-1.2</li></ul></li><li><p>发布过程：在调度器上下线一批主机(标记为maintance状态) -&gt; 关闭服务 -&gt; 部署新版本的应用程序 -&gt; 启动服务 -&gt; 在调度器上启用这一批服务器</p></li><li><p>自动化灰度发布：脚本、发布平台</p></li></ul><h2 id="运维自动化发展例程"><a href="#运维自动化发展例程" class="headerlink" title="运维自动化发展例程"></a>运维自动化发展例程</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504145951721.png" alt="image-20200504145951721"></p><h3 id="自动化运维应用场景"><a href="#自动化运维应用场景" class="headerlink" title="自动化运维应用场景"></a>自动化运维应用场景</h3><ul><li>文件传输</li><li>应用部署</li><li>配置管理</li><li>任务流编排</li></ul><h3 id="常用自动化运维工具"><a href="#常用自动化运维工具" class="headerlink" title="常用自动化运维工具"></a>常用自动化运维工具</h3><ul><li>Ansible：python，Agentless，中小型应用环境</li><li>Saltstack：python，一般需部署agent，执行效率更高</li><li>Puppet：ruby, 功能强大，配置复杂，重型,适合大型环境</li><li>Fabric：python，agentless</li><li>Chef：ruby，国内应用少</li><li>Cfengine</li><li>func</li></ul><h1 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h1><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><ul><li><p>Ansible</p><ul><li>Michael DeHaan（ Cobbler 与 Func 作者）</li><li>名称来自《安德的游戏》中跨越时空的即时通信工具</li><li>2012-03-09，发布0.0.1版，2015-10-17，Red Hat宣布收购</li><li>官网：https://<a href="http://www.ansible.com/">www.ansible.com/</a></li><li>官方文档：<a href="https://docs.ansible.com/">https://docs.ansible.com/</a></li></ul></li><li><p>同类自动化工具GitHub关注程度（2016-07-10）</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504150237464.png" alt="image-20200504150237464"></p></li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><ul><li>模块化：调用特定的模块，完成特定任务</li><li>Paramiko（python对ssh的实现），PyYAML，Jinja2（模板语言）三个关键模块</li><li>支持自定义模块，可使用任何编程语言写模块</li><li>基于Python语言实现</li><li>部署简单，基于python和SSH(默认已安装)，agentless</li><li>安全，基于OpenSSH</li><li>支持playbook编排任务</li><li>幂等性：一个任务执行1遍和执行n遍效果一样，不因重复执行带来意外情况</li><li>无需代理不依赖PKI（无需ssl）</li><li>可使用任何编程语言写模块</li><li>YAML格式，编排任务，支持丰富的数据结</li><li>较强大的多层解决方案</li></ul><h2 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504150356647.png" alt="image-20200504150356647"></p><h2 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504150413852.png" alt="image-20200504150413852"></p><h2 id="主要组成部分"><a href="#主要组成部分" class="headerlink" title="主要组成部分"></a>主要组成部分</h2><ul><li><p>ANSIBLE PLAYBOOKS：任务剧本（任务集），编排定义Ansible任务集的配置文件，由Ansible顺序依次执行，通常是JSON格式的YML文件</p></li><li><p>INVENTORY：Ansible管理主机的清单/etc/anaible/hosts</p></li><li><p>MODULES：Ansible执行命令的功能模块，多数为内置核心模块，也可自定义</p></li><li><p>PLUGINS：模块功能的补充，如连接类型插件、循环插件、变量插件、过滤插 件等，该功能不常用</p></li><li><p>API：供第三方程序调用的应用程序编程接口</p></li><li><p>ANSIBLE：组合INVENTORY、API、MODULES、PLUGINS的绿框，可以理解 为是ansible命令工具，其为核心执行工具</p></li><li><p>Ansible命令执行来源：</p><ul><li>USER，普通用户，即SYSTEM ADMINISTRATOR</li><li>CMDB（配置管理数据库） API 调用</li><li>PUBLIC/PRIVATE CLOUD API调用</li><li>USER-&gt; Ansible Playbook -&gt; Ansibile</li></ul></li><li><p>利用ansible实现管理的方式：</p><ul><li>Ad-Hoc 即ansible命令，主要用于临时命令使用场景</li><li>Ansible-playbook 主要用于长期规划好的，大型项目的场景，需要有前期的规划过程</li></ul></li><li><p>Ansible-playbok（剧本）执行过程</p><ul><li>将已有编排好的任务集写入Ansible-Playbok</li><li>通过ansible-playbok命令分拆任务集至逐条ansible命令，按预定规则逐条执行</li></ul></li><li><p>Ansible主要操作对象</p><ul><li>HOST主机</li><li>NETWORKING网络设备</li></ul></li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>执行ansible的主机一般称为主控端，中控，master或堡垒机</li><li>主控端Python版本需要2.6或以上</li><li>被控端Python版本小于2.4需要安装python-simplejson</li><li>被控端如开启SELinux需要安装libselinux-python</li><li>windows不能做为主控端</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul><li><p>rpm包安装: EPEL源<br><code>dnf install ansible -y</code></p></li><li><p>编译安装:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">yum -y instal python-jina2 PyYAML python-parmiko python-bael</span><br><span class="line">python-crypto</span><br><span class="line">tar xf ansible-1.54.tar.gz</span><br><span class="line"><span class="built_in">cd</span> ansible-1.54</span><br><span class="line">python setup.y build</span><br><span class="line">python setup.y install</span><br><span class="line">mkdir /etc/ansible</span><br><span class="line">cp -r examples/*etc/ansible</span><br></pre></td></tr></table></figure></li><li><p>Git方式:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git:/github.com/ansible/ansible.git -recursive</span><br><span class="line"><span class="built_in">cd</span> ./ansible</span><br><span class="line"><span class="built_in">source</span> ./hacking/env-setup</span><br></pre></td></tr></table></figure></li><li><p>pip安装： pip是安装Python包的管理器，类似dnf </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">dnf install python-pip python-devel</span><br><span class="line">dnf install gcc glibc-devel zibl-devel rpm-bulid openssl-devel</span><br><span class="line">pip install --upgrade pip </span><br><span class="line">pip install ansible --upgrade</span><br></pre></td></tr></table></figure></li><li><p>确认安装 ： </p><p><code>ansible --version</code></p></li></ul><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p>关于ssh的部署请参看此篇博客<a href="https://kinmfer.github.io/2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/">https://kinmfer.github.io/2020/05/05/Linux%E5%9F%BA%E7%A1%80-14-%E5%8A%A0%E5%AF%86%E5%92%8C%E5%AE%89%E5%85%A8/</a></p><h2 id="相关文件"><a href="#相关文件" class="headerlink" title="相关文件"></a>相关文件</h2><ul><li><p>配置文件</p><ul><li><p>/etc/ansible/ansible.cfg 主配置文件，配置ansible工作特性（一般保持默认）</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[defaults]</span></span><br><span class="line"><span class="comment">#inventory = /etc/ansible/host # 主机列表配置文件</span></span><br><span class="line"><span class="comment">#library = /usr/share/my_modules/ # 库文件存放目录</span></span><br><span class="line"><span class="comment">#remote_tmp = $HOME/.ansible/tmp #临时py命令文件存放在远程主机目录</span></span><br><span class="line"><span class="comment">#local_tmp = $HOME/.ansible/tmp # 本机的临时命令执行目录</span></span><br><span class="line"><span class="comment">#forks = 5 # 默认并发数</span></span><br><span class="line"><span class="comment">#sudo_user = root # 默认sudo 用户</span></span><br><span class="line"><span class="comment">#ask_sudo_pass = True #每次执行ansible命令是否询问sh密码</span></span><br><span class="line"><span class="comment">#ask_pass = True</span></span><br><span class="line"><span class="comment">#remote_port = 2</span></span><br><span class="line"><span class="comment">#host_key_checking = False # 检查对应服务器的host_key，建议取消注释</span></span><br><span class="line"><span class="comment">#log_path=/var/log/ansible.log #日志文件</span></span><br><span class="line"><span class="comment">#module_name = comand #默认模块</span></span><br></pre></td></tr></table></figure></li><li><p>/etc/ansible/host 主机清单</p></li><li><p>/etc/ansible/roles/ 存放角色的目录</p></li></ul></li><li><p>程序</p><ul><li>/usr/bin/ansible 主程序，临时命令执行工具</li><li>/usr/bin/ansible-doc 查看配置文档，模块功能查看工具</li><li>/usr/bin/ansible-galxy 下载/上传优秀代码或Roles模块的官网平台</li><li>/usr/bin/ansible-playbok 定制自动化任务，编排剧本工具</li><li>/usr/bin/ansible-pul 远程执行命令的工具</li><li>/usr/bin/ansible-vault 文件加密工具</li><li>/usr/bin/ansible-console 基于Console界面与用户交互的执行工具</li></ul></li></ul><h2 id="系列命令"><a href="#系列命令" class="headerlink" title="系列命令"></a>系列命令</h2><ul><li><p>Ansible系列命令</p><ul><li><p>ansible </p><p>此工具通过ssh协议，实现对远程主机的配置管理、应用部署、任务执行等功能<br>建议:使用此工具前，先配置ansible主控端能基于密钥认证的方式联系各个被管理节点<br>范例:利用sshpass批量实现基于key验证</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f /root/.ssh/id_ rsa -P</span><br><span class="line">NET=192.168.100</span><br><span class="line"><span class="built_in">export</span> SSHPASS=kinmfer</span><br><span class="line"><span class="keyword">for</span> IP <span class="keyword">in</span> &#123;1. .200&#125;;<span class="keyword">do</span></span><br><span class="line">sshpass -e ssh-copy-id <span class="variable">$NET</span>. <span class="variable">$IP</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure></li><li><p><code>ansible &lt;host-patern&gt; [-m module_name] [-a args] </code></p><ul><li><p>–version 显示版本</p></li><li><p>-m module 指定模块，默认为comand</p></li><li><p>-v 详细过程 –vv -vvv更详细</p></li><li><p>–list-host 显示主机列表，可简写 –list </p></li><li><p>-k, –ask–pass 提示输入ssh连接密码，默认Key验证</p></li><li><p>-C, –check 检查，并不执行</p></li><li><p>-a,  指定执行模块使用的参数, 必须写上一个合法linux命令信息</p></li><li><p>-T, –timeout=TIMEOUT 执行命令的超时间，默认10s</p></li><li><p>-u, –user=REMOTE_USER 执行远程执行的用户</p></li><li><p>-b, –become 代替旧版的sudo 切换</p></li><li><p>–become-user=USERNAME 指定sudo的run as用户，默认为root</p></li><li><p>-K, –ask-become-pass 提示输入sudo时的口令</p></li><li><p>–list-hosts 查看主机列表</p></li><li><p>ansible-doc [options] [module.]  : 显示模块帮助</p><ul><li>-l,-list 列出可用模块</li><li>-s, -snipet显示指定模块的playbok片段</li></ul></li></ul><p>示例：</p><ul><li><code>ansible-doc -l</code> 列出所有模块</li></ul></li></ul></li><li><p><code>ansible-doc ping</code> 查看指定模块帮助用法</p><ul><li><p><code>ansible-doc -s ping</code> 查看指定模块帮助用法</p></li><li><p>ansible-playbok 执行playbook</p><p>示例：<code>ansible-playbook hello.yml </code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cathello.yml</span><br><span class="line">  <span class="comment">#hello world yml file</span></span><br><span class="line">  - hosts: websrvs  </span><br><span class="line">    remote_user: root  </span><br><span class="line">    tasks:</span><br><span class="line">      - name: hello world</span><br><span class="line">        <span class="built_in">command</span>: /usr/bin/wall hello world</span><br></pre></td></tr></table></figure></li><li><p>ansible-vault 管理加密解密yml文件</p><ul><li><code>ansible-vault [create|decrypt|edit|encrypt|rekey|view]</code></li></ul></li><li><p><code>ansible-vault encrypt hello.yml</code> 加密</p><ul><li><code>ansible-vault decrypt hello.yml </code>解密</li><li><code>ansible-vault view hello.yml</code>查看</li><li><code>ansible-vault edit hello.yml</code> 编辑加密文件</li><li><code>ansible-vault rekey hello.yml</code> 修改口令</li><li><code>ansible-vault create new.yml</code> 创建新文件</li></ul></li><li><p>ansible-console 2.0+新增，可交互执行命令，支持tab</p><ul><li><p>root@test (2)[f:10] $</p><p>执行用户@当前操作的主 机组 (当前组的主机数量)[f:并发数]$</p></li><li><p>设置并发数： forks n 例如： forks 10</p></li><li><p>切换组： cd 主机组 例如： cd web</p></li><li><p>列出当前组主机列表： list</p></li><li><p>列出所有的内置命令： ?或help</p></li><li><p>示例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@all (2)[f:5]$ list</span><br><span class="line">  root@all (2)[f:5] <span class="built_in">cd</span> appsrvs </span><br><span class="line">  root@appsrvs (2)[f:5] list</span><br><span class="line">  root@appsrvs (2)[f:5] yum name=httpd state=present </span><br><span class="line">  root@appsrvs (2)[f:5] service name=httpd state=started</span><br></pre></td></tr></table></figure></li></ul></li><li><p>ansible-galxy</p><ul><li>连接 <a href="https://galaxy.ansible.com/">https://galaxy.ansible.com</a> 下载相应的roles</li></ul></li><li><p>列出所有已安装的galaxy </p><ul><li><p><code>ansible-galaxy list</code></p></li><li><p>安装galaxy</p><ul><li><code>ansible-galaxy install geerlingguy.redis</code></li></ul></li><li><p>删除galaxy</p></li><li><p><code>ansible-galaxy remove geerlingguy.redis </code></p></li></ul></li><li><p>ansible-pull 推送命令至远程，效率无限提升，对运维要求较高</p></li></ul></li><li><p>ansible通过ssh实现配置管理、应用部署、任务执行等功能，建议配置ansible端能基于密钥认证的方式联系各被管理节点</p></li></ul><h2 id="命令执行过程"><a href="#命令执行过程" class="headerlink" title="命令执行过程"></a>命令执行过程</h2><ul><li><p>ansible命令执行过程</p><ol><li><p>加载自己的配置文件 默认/etc/ansible/ansible.cfg</p></li><li><p>加载自己对应的模块文件，如command</p></li><li><p>通过ansible将模块或命令生成对应的临时py文件，并将该文件传输至远程服务器的对应执行用户$HOME/.ansible/tmp/ansible-tmp-数字/XXX.PY文件</p></li><li><p>给文件+x执行</p></li><li><p>执行并返回结果</p></li><li><p>删除临时py文件，退出</p></li></ol></li><li><p>执行状态：</p><ul><li>绿色：执行成功并且不需要做改变的操作</li><li>黄色：执行成功并且对目标主机做变更</li><li>红色：执行失败</li></ul></li></ul><h2 id="主机清单inventory"><a href="#主机清单inventory" class="headerlink" title="主机清单inventory"></a>主机清单inventory</h2><ul><li><p>Inventory 主机清单<br>ansible的主要功用在于批量主机操作，为了便捷地使用其中的部分主机，可以在inventory file中将其分组命名</p></li><li><p>默认的inventory file为/etc/ansible/hosts</p></li><li><p>inventory file可以有多个，且也可以通过Dynamic Inventory来动态生成</p></li><li><p>/etc/ansible/host文件格式</p></li><li><p>inventory文件遵循INI文件风格，中括号中的字符为组名。可以将同一个主机同时归并到多个不同的组中；此外，当如若目标主机使用了非默认的SSH端口，还可以在主机名称之后使用冒号加端口号来标明</p></li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">webservers</span>]</span><br><span class="line"><span class="string">ww1.xxx.com:22</span></span><br><span class="line"><span class="string">ww2.xxx.com</span></span><br><span class="line">[<span class="string">dbservers</span>]</span><br><span class="line"><span class="string">db1.xxx.com</span></span><br><span class="line"><span class="string">db2.xxx.com</span></span><br><span class="line"><span class="string">db3.xxx.com</span></span><br></pre></td></tr></table></figure><ul><li><p>如果主机名称遵循相似的命名模式，还可以使用列表的方式标识各主机</p><p>示例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">websrvs</span>]</span><br><span class="line"><span class="string">ww[1:0].example.com</span></span><br><span class="line">[<span class="string">dbsrvs</span>]</span><br><span class="line"><span class="string">db-[a:f].example.com</span></span><br></pre></td></tr></table></figure></li><li><p>跟上非标准远程端口</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">websrvs</span>]</span><br><span class="line">  <span class="string">web01:52113</span></span><br></pre></td></tr></table></figure></li><li><p>使用特殊的变量</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">websrvs</span>]</span><br><span class="line"><span class="string">web01</span> <span class="string">ansible_ssh_host=172.16.1.7</span> <span class="string">ansible_ssh_port=52113</span> <span class="string">ansible_ssh_user=root</span> <span class="string">ansible_ssh_pass=123456</span></span><br></pre></td></tr></table></figure></li><li><p>嵌入配置</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">rsync:children</span>]    <span class="string">---</span> <span class="string">嵌入子组信息</span></span><br><span class="line"><span class="string">rsync_server</span></span><br><span class="line"><span class="string">rsync_client</span></span><br><span class="line"></span><br><span class="line">[<span class="string">rsync_server</span>]</span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.41</span></span><br><span class="line">[<span class="string">rsync_client</span>]</span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.31</span></span><br><span class="line"><span class="number">172.16</span><span class="number">.1</span><span class="number">.7</span></span><br><span class="line"></span><br><span class="line">[<span class="string">web:vars</span>]         <span class="string">---</span> <span class="string">嵌入式变量信息</span></span><br><span class="line"><span class="string">ansible_ssh_host=172.16.1.7</span></span><br><span class="line"><span class="string">ansible_ssh_port=52113</span></span><br><span class="line"><span class="string">ansible_ssh_user=root</span></span><br><span class="line"><span class="string">ansible_ssh_pass=123456</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="string">web</span>]</span><br><span class="line"><span class="string">web01</span></span><br></pre></td></tr></table></figure></li><li><p>invertory参数：用于定义ansible远程连接目标主机时使用的参数，而非传递给 playbook的变量</p><ul><li><p>ansible_ssh_host </p></li><li><p>ansible_ssh_port </p></li><li><p>ansible_ssh_user</p></li><li><p>nsible_ssh_pass </p></li><li><p>ansbile_sudo_pass</p></li><li><p>示例：</p><p><code>cat /etc/ansible/hosts [websrvs]</code></p><p>1.<code>ansible_ssh_user=root ansible_ssh_pass=123123</code></p><p>2.<code>ansible_ssh_user=root ansible_ssh_pass=123123</code></p></li></ul></li><li><p>更多配置方法</p><p><a href="https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html">https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html</a></p></li></ul><h2 id="Host-pattern"><a href="#Host-pattern" class="headerlink" title="Host-pattern"></a>Host-pattern</h2><ul><li>ansible的Host-patern<br>匹配主机的列表<ul><li>all ：表示所有Inventory中的所有主机<br><code>ansible all –m ping</code></li><li>* :通配符<br><code>ansible “*” -m ping</code><br><code>ansible 192.168.1* -m ping</code><br><code>ansible “*srvs” -m ping</code></li><li>或关系<br><code>ansible “websrvs:apsrvs” -m ping</code><br><code>ansible “192.168.10:192.168.120” -m ping</code></li><li>逻辑与<br><code>ansible “websrvs:&amp;dbsrvs” –m ping</code><br>在websrvs组并且在dbsrvs组中的主机</li><li>逻辑非<br><code>ansible ‘websrvs:!dbsrvs’ –m ping</code><br>在websrvs组，但不在dbsrvs组中的主机<br>注意：此处为单引号</li><li>综合逻辑<br><code>ansible ‘websrvs:dbsrvs:&amp;apsrvs:!ftpsrvs’ –m ping</code></li><li>正则表达式<br><code>ansible “websrvs:&amp;dbsrvs” –m ping</code><br><code>ansible “~(web|db).*\kinmfer\.com” –m ping</code></li></ul></li></ul><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><ul><li><p>以king用户执行ping存活检测 </p><p><code>ansible all -m ping -u king -k</code></p></li><li><p>以king sudo至root执行ping存活检测</p><p><code>ansible all -m ping -u king -k -b</code></p></li><li><p>以king sudo至k1用户执行ping存活检测</p><p><code>ansible all -m ping -u king -k -b --become-user=k1</code></p></li><li><p>以king sudo至root用户执行ls</p><p><code>ansible all -m command -u king -a &#39;ls /root&#39; -b --become-user=root -k -K</code></p></li></ul><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><ul><li><p>模块文档：</p><p><a href="https://docs.ansible.com/ansible/latest/modules/modules_by_category.html">https://docs.ansible.com/ansible/latest/modules/modules_by_category.html</a></p></li><li><p><strong>Command</strong>：在远程主机执行命令，默认模块，可忽略-m选项</p><p>简单用法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@m01 scripts]<span class="comment"># ansible 172.16.1.31 -m command -a &quot;hostname&quot;</span></span><br><span class="line">172.16.1.31 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line">nfs01</span><br></pre></td></tr></table></figure><p>扩展应用:</p><ol><li><p>chdir      在执行命令之前对目录进行切换<br> <code>ansible 172.16.1.31 -m command -a &quot;chdir=/tmp touch xxx.txt&quot;</code></p></li><li><p>creates    如果文件存在了,不执行命令操作</p></li></ol><p>​    <code>ansible 172.16.1.31 -m command -a &quot;creates=/tmp/hosts touch xxx.txt&quot; </code></p><ol start="3"><li>removes     如果文件存在了,    这个步骤将执行<br> <code>ansible 172.16.1.31 -m command -a &quot;removes=/tmp/hosts chdir=/tmp touch xxx.txt&quot;</code></li><li>free_form(required)<br>The command module takes a free form command to run.<br>There is no parameter actually named ‘free form’. See the examples!</li></ol><ul><li>此命令不支持 $VARNAME &lt; &gt; | ; &amp; 等，用shell模块实现</li></ul></li><li><p><strong>Shell</strong>：和command相似，用shell执行命令</p><ul><li><p><code>ansible srv -m shell -a ‘echo 123123|passwd –stdin kinmfer’</code></p></li><li><p>调用bash执行命令类似<code> cat /tmp/stanley.md | awk -F‘|’ ‘&#123;print $1,$2&#125;’ &amp;&gt; /tmp/example.txt</code> 这些复杂命令，即使使用shell也可能会失败，解决办法：写到脚本时，copy到远程，执行，再把需要的结果拉回执行命令的机器</p></li><li><p>修改默认模块</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@ansible ~]#vim &#x2F;etc&#x2F;ansib1e&#x2F;ansible.cfg</span><br><span class="line">module_name &#x3D; shell</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>Script</strong>：在远程主机上运行ansible服务器上的脚本</p><ul><li><p>-a “/PATH/TO/SCRIPT_FILE“</p></li><li><p><code>ansible websrvs -m script -a /data/test.sh</code></p></li></ul></li><li><p><strong>Copy</strong>：从主控端复制文件到远程主机</p><ul><li><p><code>ansible srv -m copy -a “src=/root/test1.sh dest=/tmp/test2.sh owner=wang mode=600 backup=yes”</code></p><p>如目标存在，默认覆盖，此处指定先备份</p></li><li><p><code>ansible srv -m copy -a “content=&#39;test content\n&#39; dest=/tmp/test.txt”</code> 指定内容，直接生成目标文件</p></li></ul></li><li><p><strong>Fetch</strong>：从远程主机提取文件至主控端，copy相反，目前不支持目录</p><p><code>ansible srv -m fetch -a ‘src=/root/test.sh dest=/data/scripts’</code></p></li><li><p><strong>File</strong>：设置文件属性</p><ul><li><p>state  参数</p><ul><li>absent    — 缺席/删除数据信息</li><li>directory — 创建一个目录信息</li><li>file      — 检查创建的数据信息是否存在 绿色存在 红色不存在</li><li>hard      — 创建一个硬链接文件</li><li>link      — 创建一个软链接文件</li><li>touch     — 创建一个文件信息</li></ul></li><li><p><code>ansible srv -m file -a &quot;path=/root/test.sh owner=kinmfer mode=755“</code></p></li><li><p><code>ansible srv -m file -a &quot;path=/data/testdir state=directory&quot;</code></p></li><li><p><code>ansible srv -m file -a ‘src=/data/testfile dest=/data/testfile-link state=link’</code></p></li></ul></li><li><p><strong>unarchive</strong>：解包解压缩，有两种用法：</p><p>1、将ansible主机上的压缩包传到远程主机后解压缩至特定目录，设置copy=yes. </p><p>2、将远程主机上的某个压缩包解压缩到指定路径下，设置copy=no</p><p>常见参数：</p><ul><li><p>copy：默认为yes，当copy=yes，拷贝的文件是从ansible主机复制到远程主机上，如果设置为copy=no，会在远程主机上寻找src源文件</p></li><li><p>src：源路径，可以是ansible主机上的路径，也可以是远程主机上的路径，如果是远程主机上的路径，则需要设置copy=no</p></li><li><p>dest：远程主机上的目标路径 </p></li><li><p>mode：设置解压缩后的文件权限 </p></li><li><p>示例：</p><ul><li><p><code>ansible srv -m unarchive -a &#39;src=foo.tgz dest=/var/lib/foo&#39;</code></p></li><li><p><code>ansible srv -m unarchive -a &#39;src=/tmp/foo.zip dest=/data copy=no mode=0777&#39;</code></p></li><li><p><code>ansible srv -m unarchive -a &#39;src=https://example.com/example.zip dest=/data copy=no&#39;</code></p></li></ul></li></ul></li><li><p><strong>Archive</strong>：打包压缩</p><p><code>ansible all -m archive -a &#39;path=/etc/sysconfig dest=/data/sysconfig.tar.bz2 format=bz2 owner=king mode=0777&#39;</code></p></li><li><p><strong>Hostname</strong>：管理主机名</p><p><code>ansible node1 -m hostname -a “name=websrv”</code></p></li><li><p><strong>Cron</strong>：计划任务</p><p>支持时间：minute，hour，day，month，weekday</p><ul><li><p>job 用于定义定时任务需要干的事情</p></li><li><p>disabled  用于批量注释任务</p></li><li><p><code>ansible srv -m cron -a “minute=*/5 job=‘/usr/sbin/ntpdate 172.16.0.1 &amp;&gt;/dev/null’ name=Synctime”</code> 创建任务</p></li><li><p><code>ansible srv -m cron -a ‘state=absent name=Synctime’</code> 删除任务</p></li><li><p><code>ansible srv -m cron -a &quot;name=&#39;time sync&#39; job=&#39;/usr/sbin/ntpdate ntp1.aliyun.com &gt;/dev/null 2&gt;&amp;1&#39; disabled=yes&quot;</code> 批量注释任务</p></li></ul></li><li><p><strong>Yum</strong>：管理包</p><ul><li><p>name  — 指定安装软件名称</p></li><li><p>state — 指定是否安装软件</p><ul><li>installed   — 安装软件</li><li>present</li><li>latest</li><li>absent      — 卸载软件</li></ul></li><li><p><code>ansible srv -m yum -a ‘name=httpd state=present’</code> 安装</p></li><li><p><code>ansible srv -m yum -a ‘name=httpd state=absent’</code> 删除</p></li></ul></li><li><p><strong>mount</strong>：挂载服务</p><ul><li>src:  需要挂载的存储设备或文件信息</li><li>path: 指定目标挂载点目录</li><li>fstype: 指定挂载时的文件系统类型</li><li>state<ul><li>present/mounted     — 进行挂载</li><li>present: 不会实现立即挂载,修改fstab文件,实现开机自动挂载</li><li>mounted: 会实现立即挂载, 并且会修改fstab文件,实现开机自动挂载</li><li>absent/unmounted    — 进行卸载</li><li>absent:     会实现立即卸载, 并且会删除fstab文件信息,禁止开机自动挂载</li><li>unmounted:  会实现立即卸载, 但是不会删除fstab文件信息</li></ul></li></ul></li><li><p><strong>Service</strong>：管理服务</p><ul><li><p>name:   — 指定管理的服务名称</p></li><li><p>state:  — 指定服务状态</p><ul><li>started   启动</li><li>restarted 重启</li><li>stopped   停止</li><li>reloaded  重载</li></ul></li><li><p>enabled — 指定服务是否开机自启动</p></li><li><p><code>ansible srv -m service -a &#39;name=httpd state=stopped&#39;</code></p></li><li><p><code>ansible srv -m service -a &#39;name=httpd state=started enabled=yes&#39;</code></p></li><li><p><code>ansible srv -m service -a &#39;name=httpd state=reloaded’</code></p></li><li><p><code>ansible srv -m service -a &#39;name=httpd state=restarted&#39;</code></p></li></ul></li><li><p><strong>User</strong>：管理用户</p><ul><li><p><code>ansible srv -m user -a &#39;name=user1 comment=“test user” uid=2048 home=/app/user1 group=root groups=xxx shell=xxx create_home=no‘</code></p></li><li><p><code>ansible srv -m user -a &#39;name=sysuser1 system=yes home=/app/sysuser1 ’</code></p></li><li><p><code>ansible srv -m user -a ‘name=user1 state=absent remove=yes‘ </code>删除用户及家目录等数据</p></li></ul></li><li><p><strong>Group</strong>：管理组</p><ul><li><p><code>ansible srv -m group -a &quot;name=testgroup system=yes“</code></p></li><li><p><code>ansible srv -m group -a &quot;name=testgroup state=absent&quot;</code></p></li></ul></li><li><p><strong>Lineinfile</strong>：</p><p>ansible在使用sed进行替换时，经常会遇到需要转义的问题，而且ansible在遇到特殊符号进行替换时，存在问题，无法正常进行替换.其实在ansible自身提供了两个模块: lineinfile模块和replace模块, 可以方便的进行替换<br>功能:相当于sed,可以修改文件内容</p><ul><li><p><code>ansible all -m lineinfile -a &quot;path=/etc/selinux/config regexp= &#39;^SELINUX=&#39; line=&#39;SELINUX=enforcing&#39;&quot;</code></p></li><li><p><code>ansible all -m lineinfile -a &#39;dest=/etc/fstab state=absent regexp=&quot;^#&quot;&#39;</code></p></li></ul></li><li><p><strong>Replace</strong>：</p><p>该模块有点类似于sed命令,主要也是基于正则进行匹配和替换</p><ul><li><code>ansible all -m replace -a &quot;path=/etc/fstab regexp= &#39;^(UUID.*)&#39; replace= &#39;#\1&#39;&quot;</code></li></ul></li><li><p><strong>Setup</strong>：</p><p>功能: setup 模块来收集主机的系统信息，这些facts信息可以直接以变量的形式使用，但是如果主机较多，会影响执行速度，可以使用gather_facts: no来禁止Ansible收集facts信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ansible srv -m setup</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_nodename&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_hostname &quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_domain&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_memtotal_mb&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_memory_mb&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_memfree_mb&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_os_family&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_distribution_major_version&#39;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansib1e_distribution_version&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_processor_vcpus&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_al1_ipv4_addresses&quot;</span><br><span class="line">ansible srv -m setup -a &quot;filter&#x3D;ansible_architecture&quot;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
          <category> Ansible </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Ansible </tag>
            
            <tag> 管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>综合架构-文件共享服务&amp;传输服务</title>
      <link href="2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB&amp;%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/"/>
      <url>2020/05/05/%E7%BB%BC%E5%90%88%E6%9E%B6%E6%9E%84-%E6%96%87%E4%BB%B6%E5%85%B1%E4%BA%AB&amp;%E4%BC%A0%E8%BE%93%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="FTP服务"><a href="#FTP服务" class="headerlink" title="FTP服务"></a>FTP服务</h1><h2 id="ftp协议"><a href="#ftp协议" class="headerlink" title="ftp协议"></a>ftp协议</h2><p>文件传输协议</p><ul><li>协议定义了一个远程计算机系统和本地计算机系统之间传输文件的一个标准</li><li>FTP运载OSI七层模型的应用层，并利用传输协议TCP在不同主机之间提供可靠的数据传输</li><li>FTP在文件传输中还支持断点续传功能，可以大幅的减少CPU网络带宽的开销</li></ul><h2 id="ftp模型"><a href="#ftp模型" class="headerlink" title="ftp模型"></a>ftp模型</h2><ul><li>用户接口: 提供了一个用户接口并使用用户端协议解释器的服务</li><li>客户端协议解释器：向远程主机发送命令，并建立客户端数据传输过程</li><li>服务端协议解释器：响应客户端协议发出的命令并驱动服务器的数据传输</li><li>客户端数据传输协议：负责完成和服务端数据传输过程及客户端本地文件系统的通信</li><li>服务端数据传输协议：负责完成和客户端数据传输过程及服务端本地文件系统的通信</li><li>连接方式：不同的连接方式需要合适的服务质量<ul><li>命令连接： 建立连接及命令发送和响应（需要更小的延迟时间） 21端口</li><li>数据连接： 用于数据传输（需要更大的数据吞吐量） 20端口</li></ul></li></ul><h2 id="控制连接"><a href="#控制连接" class="headerlink" title="控制连接"></a>控制连接</h2><ul><li>主要用来传输实际通信中需要执行的FTP命令以及命令响应</li><li>只需要很小的网络带宽</li><li>FTP服务器监听在21端口来等待控制连接建立</li><li>建立控制连接之后，还需要验证客户端身份，决定是否建立数据连接</li><li>当需要目录列表，传输文件时，才建立数据连接，并且每次客户端都会使用不同的随机端口来建立数据连接；当数据传输完毕之后，就断开数据连接</li><li>在FTP连接期间，控制连接始终保持连接状态，在数据连接存在的期间，控制连接必须存在，一旦控制连接断开，数据连接会自动断开</li></ul><h2 id="数据连接"><a href="#数据连接" class="headerlink" title="数据连接"></a>数据连接</h2><ul><li>FTP服务端监听在20端口上等待数据连接</li><li>数据连接依赖于控制连接</li></ul><h3 id="主动模式"><a href="#主动模式" class="headerlink" title="主动模式"></a>主动模式</h3><ol><li>三次握手建立命令连接，客户端的端口是随机的，目标端口是21 </li><li>控制连接建立完成之后，客户端进行验证，协商数据连接采用的模式（主动模式）<br>随后客户端会向FTP服务端发送Port报文(端口为命令连接使用的端口向后的第一个可用端口)，表明自己的IP地址及端口号信息；等待FTP服务端20端口主动地发起数据连接请求</li><li>服务端发送数据连接请求，连接建立之后开始进行数据传输</li></ol><h3 id="被动模式"><a href="#被动模式" class="headerlink" title="被动模式"></a>被动模式</h3><ol><li>三次握手建立控制连接，客户端的端口是随机的，目标端口是21 </li><li>控制连接建立完成之后，客户端进行验证，协商数据连接采用的模式（被动模式）<br>客户端向服务端发送PASV报文，表示我们用被动模式</li><li>服务端在收到PASV报文，向客户端发送Port报文，表明自己的IP地址及端口号信息；</li><li>客户端发送数据连接请求，建立数据连接 </li></ol><ul><li>关键点： 主动和被动在于服务端是主动建立数据连接还是被动建立数据连接</li></ul><h1 id="Vsftpd服务"><a href="#Vsftpd服务" class="headerlink" title="Vsftpd服务"></a>Vsftpd服务</h1><ul><li>是一个安全，高速，稳定的FTP服务器</li><li>可设定多个基于IP的虚拟FTP服务器</li><li>匿名FTP服务器更是十分容易的</li><li>不执行任何外部程序，从而减少了安全隐患</li><li>支持虚拟用户，且支持每个虚拟用户具有独立的配置</li><li>支持带宽限制等等</li><li><strong>注意：</strong>一个用户通过文件共享服务访问文件系统上的文件的生效权限为此两者的交集</li></ul><h2 id="FTP服务的使用者"><a href="#FTP服务的使用者" class="headerlink" title="FTP服务的使用者"></a>FTP服务的使用者</h2><ul><li>vsftpd以ftp用户的身份运行进程，默认用户即为ftp用户，匿名用户的默认路径即ftp用户的家目录/var/ftp</li><li>匿名用户<ul><li>anonymous用户并没有设置密码进行登录ftp服务端</li><li>一般情况下匿名用户只能够拥有下载查看功能</li></ul></li><li>本地用户<ul><li>既可以登录shell也可以登录ftp服务端</li><li>本地用户登录系统后，其登录目录为本地家目录</li><li>一般情况下拥有上传和下载功能</li></ul></li><li>虚拟用户<ul><li>如果用户在远程FTP服务端上拥有账号，但是不能登录shell</li><li>虚拟用户登录系统后，其登录为指定目录</li><li>一般情况下拥有上传和下载功能</li></ul></li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><code>[root@test ~]# dnf install vsftpd -y</code></p><ul><li><p>服务包：vsftpd </p></li><li><p>服务类型： 是由systemd启动的守护进程</p></li><li><p>配置单元：/usr/lib/systemd/system/vsftpd.service</p></li><li><p>守护进程： /usr/sbin/vsftpd </p></li><li><p>端口： 21（controller） 20 (data)</p></li><li><p>主配置文件： /etc/vsftpd/vsftpd.conf</p></li><li><p>用户访问控制配置文件：</p><ul><li><p>/etc/vsftpd/ftpusers</p></li><li><p>/etc/vsftpd/user_list</p></li></ul></li><li><p>日志文件：/etc/logrotate.d/vsftpd</p></li><li><p>URL：</p><ul><li><p>SCHEME://username:password@HOST:PORT/PATH/TO/FILE</p></li><li><p>路径映射：</p><ul><li>用户家目录：每个用户的URL的/映射到当前用户的家目录</li></ul></li></ul></li></ul><p>主配置文件：<br>默认配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/vsftpd/vsftpd.conf | grep -Ev &quot;^$|^#&quot;</span></span><br><span class="line">anonymous_enable=YES<span class="comment"># 匿名用户是否开启</span></span><br><span class="line">local_enable=YES<span class="comment"># 是否允许本地用户可以登录</span></span><br><span class="line">write_enable=YES<span class="comment"># 是否对登录用户可写</span></span><br><span class="line">local_umask=022<span class="comment"># 本地用户上传文件默认权限的umask值</span></span><br><span class="line">dirmessage_enable=YES<span class="comment"># 是否激活目录欢迎信息功能</span></span><br><span class="line">xferlog_enable=YES<span class="comment"># 是否让系统自动维护上传和下载的日志工作</span></span><br><span class="line">connect_from_port_20=YES<span class="comment"># 是否设置FTP服务器端将启用FTP数据端口的连接请求</span></span><br><span class="line">xferlog_std_format=YES<span class="comment"># 以xferlog日志格式写入到日志文件中</span></span><br><span class="line">listen=NO<span class="comment"># 是否监听</span></span><br><span class="line">listen_ipv6=YES<span class="comment"># 是否支持IPv6</span></span><br><span class="line">pam_service_name=vsftpd<span class="comment"># PAM模式提供的认证服务</span></span><br><span class="line">userlist_enable=YES<span class="comment"># 是否允许ftpusers文件中的用户登录ftp服务器</span></span><br><span class="line">tcp_wrappers=YES<span class="comment"># 是否使用tcp_wrappers作为主机访问控制访问</span></span><br></pre></td></tr></table></figure><h2 id="实例1：匿名用户"><a href="#实例1：匿名用户" class="headerlink" title="实例1：匿名用户"></a>实例1：匿名用户</h2><ol><li><p>关闭防火墙和SELINUX</p></li><li><p>配置参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 匿名用户相关配置参数：</span></span><br><span class="line">anonymous_enable=YES</span><br><span class="line">anon_umask=022 </span><br><span class="line">anon_upload_enable=YES</span><br><span class="line">anon_mkdir_write_enable=YES</span><br><span class="line">anon_other_write_enable=YES</span><br><span class="line">anon_root = /path/to/file <span class="comment"># 指定匿名用户登录系统后的目录所在位置 ；默认情况下是：/var/ftp/</span></span><br></pre></td></tr></table></figure></li><li><p>修改指定目录的属主<br><code>[root@test pub]# chown -Rf ftp /var/ftp/pub/</code></p></li><li><p>使用anonymous用户登录测试<br><a href="ftp://x.x.x.x/">ftp://x.x.x.x</a>  用户名： anonymous 密码： </p></li></ol><h2 id="实例2-本地用户"><a href="#实例2-本地用户" class="headerlink" title="实例2: 本地用户"></a>实例2: 本地用户</h2><ol><li><p>关闭防火墙和SELINUX</p></li><li><p>配置参数：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本地用户相关配置参数：</span></span><br><span class="line">local_enable=YES</span><br><span class="line">pam_service_name=vsftpd</span><br><span class="line"><span class="comment"># 控制可登录vsftpd服务的用户列表</span></span><br><span class="line">userlist_enable=YES</span><br><span class="line"><span class="comment"># YES意味着此为黑名单，NO意味着此为白名单</span></span><br><span class="line">userlist_deny=YES|NO</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁锢所有本地用户与家目录；需要事先去除用户对家目录的写权限 </span></span><br><span class="line">chroot_local_user=YES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁锢列表中文件存在的用户于其家目录中；需要事先去除用户对家目录的写权限 </span></span><br><span class="line">chroot_list_enable=YES</span><br><span class="line">chroot_list_file=/etc/vstpd/chroot_list</span><br></pre></td></tr></table></figure></li><li><p>检查/etc/pam.d/vsftpd文件中 </p><p>列在此文件中的所有用户，均被禁止使用ftp服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">auth  requiredpam_listfile.so item=user sense=deny file=/etc/vsftpd/ftpusers onerr=succeed<span class="comment"># 参数必须要有</span></span><br></pre></td></tr></table></figure></li><li><p>检查user_list和ftpuser文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/vsftpd/ftpusers </span></span><br><span class="line"><span class="comment"># Users that are not allowed to login via ftp# “黑名单”</span></span><br><span class="line"><span class="comment"># root</span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/vsftpd/user_list</span></span><br><span class="line"><span class="comment"># If userlist_deny=YES (default), never allow users in this file, and# 默认情况是“黑名单”</span></span><br><span class="line"><span class="comment"># root</span></span><br></pre></td></tr></table></figure></li><li><p>重启vsftpd服务并使用本地用户root进行登录测试</p></li></ol><h2 id="实例3：虚拟用户"><a href="#实例3：虚拟用户" class="headerlink" title="实例3：虚拟用户"></a>实例3：虚拟用户</h2><ol><li><p>关闭防火墙和SELINUX</p></li><li><p>创建用于FTP认证的用户数据文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir /etc/vsftpd/vconf  </span><br><span class="line">cat &gt; /etc/vsftpd/vconf/vftpuser.txt &lt;&lt;<span class="string">EOF  </span></span><br><span class="line"><span class="string">xiaohong  # 用户名1</span></span><br><span class="line"><span class="string">xiaohong  # 密码 </span></span><br><span class="line"><span class="string">xiaoming  # 用户名2 </span></span><br><span class="line"><span class="string">xiaoming  # 密码 </span></span><br><span class="line"><span class="string">EOF</span>  </span><br></pre></td></tr></table></figure></li><li><p>将明文信息转成数据文件<br><code>db_load ‐T ‐t hash ‐f /etc/vsftpd/vconf/vftpuser.txt /etc/vsftpd/vconf/vftpuser.db </code></p></li><li><p>创建vsftpd服务应用程序用于存储文件的根目录已经虚拟用户映射的系统本地用户<br><code>useradd -d /var/ftproot -s /sbin/nologin virtual</code><br><code>chmod -Rf 755 /var/ftproot/</code></p></li><li><p>建立用户支持虚拟用户的PAM文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. [root@<span class="built_in">test</span> pam.d]<span class="comment"># cat /etc/pam.d/vsftpd</span></span><br><span class="line">auth   required     pam_userdb.so db=/etc/vsftpd/vconf/vftpuser</span><br><span class="line">account   required     pam_userdb.so db=/etc/vsftpd/vconf/vftpuser</span><br></pre></td></tr></table></figure></li><li><p>配置参数:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 虚拟用户相关配置参数：</span></span><br><span class="line">guest_enable=YES</span><br><span class="line">guest_username=virtual </span><br><span class="line">allow_writeable_chroot=YES </span><br><span class="line">user_config_dir=/etc/vsftpd/vconf/</span><br></pre></td></tr></table></figure></li><li><p>为不同虚拟用户设置不同的权限</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> vconf]<span class="comment"># cat /etc/vsftpd/vconf/zhangsan </span></span><br><span class="line">local_root=/var/ftproot/  </span><br><span class="line">write_enable=YES  </span><br><span class="line">anon_upload_enable=YES  </span><br><span class="line">anon_mkdir_write_enable=YES  </span><br><span class="line">anon_other_write_enable=YES</span><br></pre></td></tr></table></figure></li><li><p>重启vsftpd服务并登陆测试</p></li></ol><h1 id="lftp命令详解"><a href="#lftp命令详解" class="headerlink" title="lftp命令详解"></a>lftp命令详解</h1><h2 id="登录ftp"><a href="#登录ftp" class="headerlink" title="登录ftp"></a>登录ftp</h2><p>代码:<br><code>lftp 用户名:密码@ftp地址:传送端口（默认21）</code><br>用法<br>(1)<code>lftp username:password@127.0.0.1:21</code><br>(2)<code>lftp username@127.0.0.1</code> 回车   ##默认21端口 回车后输入密码<br>(3)<code>lftp 127.0.0.1</code> 回车  ##回车后 login 登录<br>(4)<code>lftp</code> 回车 –&gt; open 127.0.0.1 –&gt; login 登录</p><h2 id="lftp中文乱码问题"><a href="#lftp中文乱码问题" class="headerlink" title="lftp中文乱码问题"></a>lftp中文乱码问题</h2><p>登录后看到的都是中文乱码(因为一般本地都是utf-8的编码)，用 set 命令来解决</p><p><code>set ftp:charset gbk(或者 gb2312 或 utf-8) </code>##设置ftp端的编码格式<br><code>set file:charset utf-8 (...同上)</code> ##设置本地编码格式</p><p>附:set命令的技巧 (1)输入set 查看已经设置好的命令 (2)set -a 查看所有可以设置的命令清晰网</p><h2 id="查找ftp端文件"><a href="#查找ftp端文件" class="headerlink" title="查找ftp端文件"></a>查找ftp端文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls *.txt <span class="comment">##查找当前目录下的所有txt文件</span></span><br><span class="line">ls ./123/ <span class="comment">##列出123目录下所有文件</span></span><br><span class="line">find . -name <span class="string">&quot;*.txt&quot;</span>  <span class="comment">##递归查找站点上所有的txt文件</span></span><br><span class="line">find ./xx -name <span class="string">&quot;*.txt&quot;</span> <span class="comment">##查找xx目录下所有的txt文件</span></span><br></pre></td></tr></table></figure><p>附1: ls第二次读取的是本地缓存,可以用 rels 代替 ls 或者catch off / catch on 来开关catch,catch flush清空本地catch<br>附2: 浏览本地目录的命令可用 !ls , 如 !ls /usr/local/bin/</p><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>下载文件之前要先设置好本地的目录，用来存放下载的文件<br>lcd /home/123/web  ##设置本地存放目录 默认为 /home/usr</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">get 123.txt   <span class="comment">##下载123.txt文件到 /home/123/web 中</span></span><br><span class="line">get -c 123.txt <span class="comment">##断点续传下载</span></span><br><span class="line">mget *.txt   <span class="comment">##批量下载所有txt文件</span></span><br><span class="line">mget -c *.txt <span class="comment">##断点续传</span></span><br><span class="line">mget -c ./123/aaa/*.txt  <span class="comment">##断点续传、批量[下载](http://apps.hi.baidu.com/w_empty/blog/item/:void(0);/.1212516110553*/)ftp端aaa目录下的所有txt文件</span></span><br><span class="line"></span><br><span class="line">pget -c -n 10 file.dat</span><br><span class="line">\<span class="comment">##以最多10个线程以允许断点续传的方式下载file.dat</span></span><br><span class="line">\<span class="comment">##可以通过设置 set pget:default-n 5 的值而使用默认值。</span></span><br><span class="line"></span><br><span class="line">mirror aaa/</span><br><span class="line">\<span class="comment">##将aaa目录整个的下载下来，子目录也会自动复制 本地自动建立目录</span></span><br></pre></td></tr></table></figure><h2 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">put 123.txt   <span class="comment">##同下载</span></span><br><span class="line">mput *.txt   <span class="comment">##同下载</span></span><br><span class="line">mirror -R aaa/ <span class="comment">##同下载</span></span><br></pre></td></tr></table></figure><h2 id="设置被动-非被动模式"><a href="#设置被动-非被动模式" class="headerlink" title="设置被动/非被动模式"></a>设置被动/非被动模式</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">set</span> ftp:passive-mode 1 <span class="comment">## 1 被动 0非主动</span></span><br></pre></td></tr></table></figure><h2 id="多任务处理"><a href="#多任务处理" class="headerlink" title="多任务处理"></a>多任务处理</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ctrl+z <span class="comment">##将当前进行的任务移交后台处理</span></span><br><span class="line"><span class="built_in">wait</span>  <span class="comment">##将后台处理任[务调](http://apps.hi.baidu.com/w_empty/blog/item/:void(0);/.1212516124164*/)至前台查看</span></span><br><span class="line"><span class="built_in">jobs</span>  <span class="comment">##查看后台进行的任务列表</span></span><br><span class="line"><span class="built_in">kill</span> all 或者 job_no <span class="comment">##删除所有任务 或 指定的任务</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">##将任务加入任务列表</span></span><br><span class="line">queue get 123.txt</span><br><span class="line">queue put 234.txt</span><br><span class="line">queue mirror aaa/ </span><br><span class="line"></span><br><span class="line">queue <span class="comment">##查看任务列表</span></span><br><span class="line"><span class="built_in">jobs</span>  <span class="comment">##查看后台任务列表</span></span><br><span class="line"></span><br><span class="line">queue start <span class="comment">##开始任务列表</span></span><br><span class="line">queue stop <span class="comment">##停止任务列表</span></span><br></pre></td></tr></table></figure><h2 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h2><p>定义别名</p><p>alias less more<br>alias reconnect “close; cd .”<br>直接输入 alias 即可看到目前定义了<a href="http://apps.hi.baidu.com/w_empty/blog/item/:void(0);/.1212516138250*/">那些别名</a>。如果只输入 alias name 的话, 则是取消 name 这个别名。</p><p>bookmark SUBCMD<br>设定书签, 可将目前站台及所在目录设成书签, 下次可直接进来, 不用再 cd 来 cd 去的</p><p>bookmark add name 用来新增名称为 name 的书签<br>bookmark del name 删除名称为 name 的书签<br>bookmark list 显示目前有设定那些书签(另外直接打 bookmark 和 bookmark list 的结果一样)<br>bookmark edit 呼叫编辑器修改书签 (~/.lftp/bookmarks)</p><p>cd 切换远端目录</p><p>cache SUBCMD<br>管理 lftp 的 cache</p><p>rels []<br>从 cache 中显示远端档案列表<br>rels 则不会从 cache 中读取</p><p>recls opts [path/]pattern<br>从 cache 中显示远端的档案列表, 应该算是 ls 的加强版, 有很多参数可用,应该是可用来产生各种不同&gt;的档案列表以供其他程式使用。<br>recls 则不会从 cache 中读取</p><p>du options<br>计算远端整个目录占用容量</p><p>get OPTS -o<br>抓取远端档案 清晰网 </p><p>get rfile -o lfile<br>抓 rfile 到本地改名为 lfile<br>-c 为续传<br>-E 抓档完成后, 将远端的档案砍了<br>-a 为 ascii mode, 预设为 binary mode<br>-O 设定 base directory 为本地端放档案的目录</p><p>mget OPTS<br>下载远端档案(可用 wildcard expansion 也就是 *)</p><p>pget OPTS -o<br>使用多个连结来下载档案, 预设为五个。<br>-n 3 为叁个连结</p><p>jobs -v<br>显示目前有那些程序在背景执行<br>-v 显示详细的资讯(-v 可多加几个来显示更详细的资讯)</p><p>lcd<br>切换本地端的目录</p><p>mirror OPTS remote [local]<br>下载整个目录(楼上的 get 只能用来抓档案)<br>-c 续传<br>-e 这个要小心一些, 比较远端和本地端的档案, 假如远端没有的, 就将本地端的档案删除, 也就是将本地端和远端资料同步。<br>-R 上传整个目录<br>-n 只下载较新的档案<br>-r 不用递回到目录中<br>–parallel=n 同时下载 n 个档案(预设一次只下载一个)清晰网 </p><p>module name args<br>载入模组</p><p>put OPTS -o<br>上传档案</p><p>mput OPTS<br>上传档案(可用 wildcard expansion 也就是 *)</p><p>mv<br>将远端的 file1 改名为 file2</p><p>mrm<br>用 wildcard expansion 方式来删除远端档案</p><p>open OPTS<br>开启某个站台<br>open -u , -p site</p><p>queue OPTS []<br>将 cmd 放到伫列中等待执行<br>-d index 将编号为 index 的 job 删除<br>-m index new_index 将编号为 index 的 job 移至编号 new_index, 插队专用。<br>-n index 在编号 index 之前新增一个 job</p><p>wait []<br>将背景执行中的程序移至前景(也可用 fg)</p><p>kill all|<br>删除全部的 jobs 或 job_no</p><p>repeat delay command<br>每隔 delay 秒, 重覆执行 command, 预设是每隔一秒</p><p>rm -r -f<br>移除远端档案</p><p>mkdir -p<br>建立远端目录</p><p>rmdir -f<br>移除远端目录</p><p>set OPT []<br>设定变数<br>直接键入 set 可看目前定义了那些变数</p><p>source<br>读取 file, 并执行 file 中的命令(应该是和 bash 中的 source 命令是一样的吧)</p><p>debug [|off] -o<br>设定 debug level 为 level<br>-o 将输出导向至 file</p><p>exit [|bg]<br>结束 lftp<br>此时若还有 jobs, 则会将 lftp 放至背景执行, 继续未完成的工作</p><p>history -w file-r file-c|-l cnt<br>和 bash 中的 history 功能一样</p><p>renlist []<br>只显示远端的档名</p><p>pwd -p<br>显示目前远端所在目录<br>-p 连登入密码也显示</p><p>scache []<br>只打 scache 显示目前所有的 session, 加上 session_no 可切换至其他的 session,<br>对於同时开启多个站台或同个站台不同目录间切换。</p><p>国内的大多数ftp服务器使用的中文编码是gbk，而linxu大多数版本（包括debian，redhat，centOS，fc等版本）默认的编码是utf-8,于是会出现访问ftp服务器是出现中文乱码的问题，解决办法有两种：<br>1、临时解决<br>用lftp登录到ftp服务器上，设置远程服务器编码为gbk，而设置本地编码为utf-8，做法为：输入下面两个命令：<br>set ftp:charset gbk<br>set file:charset utf8</p><p>2、永久解决<br>在目录$HOME/.lftp编辑文件（如果没有则建立）rc,输入下面两行，设置远程编码为gbk，本地编码为utf-8：<br>set ftp:charset gbk<br>set file:charset utf8<br>这种方法会导致访问utf8编码的服务器时出现中文乱码，不过就目前国内环境来说机会比较少。如果出现乱码时则临时输入下面两行就可以了：<br>set ftp:charset utf8<br>set file:charset utf8</p><p>另外一个用的很多的图形界面的ftp客户端是gftp，在选项中可以选择编码，用惯了win下客户端的人应该能够很快的早到编码选择的地方，选择服务器端的编码为gbk就可以了。</p><h1 id="Samba服务"><a href="#Samba服务" class="headerlink" title="Samba服务"></a>Samba服务</h1><p>Samba服务程序现在已经成为在Linux系统与Windows系统之间共享文件的最佳选择</p><h2 id="SMB协议"><a href="#SMB协议" class="headerlink" title="SMB协议"></a>SMB协议</h2><p>高层协议</p><ul><li>提供网络上不同主机之间共享文件</li><li>为Window客户程序和服务提供了一个通过虚拟链路，按照请求-响应方式进行通信的机制</li><li>SMB工作原理是让NetBIOS与SMB协议运行在TCP/IP上，从而让Linux系统在网络邻居中可见</li></ul><h2 id="CIFS协议"><a href="#CIFS协议" class="headerlink" title="CIFS协议"></a>CIFS协议</h2><ul><li>通用网际文件系统是微软服务器消息块协议（SMB）的增强版</li><li>提供计算机用户在企业内部网和因特网上共享文件的标准方法 </li><li>CIFS在TCP/IP运行，利用英特网上的全球域名服务系统（DNS）增强其可扩展性</li></ul><h2 id="CIFS协议特点"><a href="#CIFS协议特点" class="headerlink" title="CIFS协议特点"></a>CIFS协议特点</h2><ul><li>文件访问的完整性</li><li>为慢连接优化</li><li>为文件或目录的访问提供安全性</li><li>使用同一编码（Unicode）文件名</li><li>使用全局文件名</li></ul><h2 id="Samba服务简介"><a href="#Samba服务简介" class="headerlink" title="Samba服务简介"></a>Samba服务简介</h2><ul><li>应用程序，使Linux支持SMB/CIFS协议 </li><li>可以运行在所有Unix平台上</li><li>Samba应用程序更新较快并是基于GPL协议发行的</li></ul><h2 id="Samba功能"><a href="#Samba功能" class="headerlink" title="Samba功能"></a>Samba功能</h2><ul><li>Linux系统和Window系统实现资源共享</li><li>让Linux系统使用Window系统共享的文件和打印机</li><li>提供用户认证功能</li><li>支持SSL安全套阶层协议</li><li>让Linux主机单位Window域控制和Window域成员服务器</li><li>让Linux主机担任Wins名字服务器，提供NetBIOS名字解析器</li></ul><h2 id="Samba提供服务"><a href="#Samba提供服务" class="headerlink" title="Samba提供服务"></a>Samba提供服务</h2><ul><li>文件和打印机共享</li><li>用户认证和授权</li><li>名字解析</li><li>浏览（服务通信）</li></ul><h2 id="Samba的守护进程"><a href="#Samba的守护进程" class="headerlink" title="Samba的守护进程"></a>Samba的守护进程</h2><ul><li>Smbd：实现共享和验证授权服务</li><li>Nmbd：实现名字解析和浏览服务</li></ul><h2 id="Samba的软件包"><a href="#Samba的软件包" class="headerlink" title="Samba的软件包"></a>Samba的软件包</h2><ul><li>samba-common : 包括Samba服务器和客户端所需要的文件</li><li>samba： Samba服务端软件</li><li>samba-winbind： 可选的Window服务</li><li>samba-client： 客户端软件</li><li>samba-swat： Web配置工具</li></ul><h2 id="Samba服务概览"><a href="#Samba服务概览" class="headerlink" title="Samba服务概览"></a>Samba服务概览</h2><ul><li><p>安装： <code>[root@test ~]# yum install samba -y</code> </p></li><li><p>服务包： samba</p></li><li><p>服务类型： 由Systemd启动的守护进程</p></li><li><p>守护进程：</p><ul><li>/usr/sbin/nmbd</li><li>/usr/sbin/smbd</li></ul></li><li><p>监听的端口：</p><ul><li>NetBIOS： udp 137 138 tcp 139</li><li>SMB基于TCP之上： tcp 445 </li></ul></li><li><p>配置文件： /etc/samba/* </p></li><li><p>相关软件包： samba‐swat, samba‐client , testparm，cifs‐utils</p></li></ul><h2 id="Samba相关工具"><a href="#Samba相关工具" class="headerlink" title="Samba相关工具"></a>Samba相关工具</h2><ul><li>服务端工具<ul><li>/usr/bin/smbpasswd : 用户设置Samba用户账号和口令</li><li>/usr/bin/testparm: 用于检测配置文件的正确性</li><li>/usr/bin/smbstatus: 用于查看年网络中的Samba服务器状态</li></ul></li><li>客户端工具：<ul><li>/usr/bin/findsmb: 用于查找网络中的Samba服务器</li><li>/usr/bin/smbclient: Linux下的samba客户端</li><li>/usr/bin/smbget: 基于SMB/CIFS协议的类似于wget工具</li><li>/usr/bin/smbtar: 类似于tar工具</li></ul></li></ul><h2 id="Samba相关配置"><a href="#Samba相关配置" class="headerlink" title="Samba相关配置"></a>Samba相关配置</h2><ul><li>/etc/sysconfig/samba ： 用于设置守护进程的启动参数</li><li>/etc/samba/smb.conf     ： 主配置文件</li><li>/etc/samba/smbusers  :  用于映射Linux用户和Window用户</li><li>/etc/samba/lmhosts   ： 用作与设置NetBIOS名字与IP地址的对应关系</li><li>/etc/pam.d/samba     ： 用于Samba服务的PAM相关配置</li></ul><h2 id="Samba安全等级"><a href="#Samba安全等级" class="headerlink" title="Samba安全等级"></a>Samba安全等级</h2><ul><li>User：由本地Samba服务器负责账户验证     </li><li>使用smbpasswd 设置账号（默认的安全等级）</li></ul><h2 id="Samba账户及口令数据库"><a href="#Samba账户及口令数据库" class="headerlink" title="Samba账户及口令数据库"></a>Samba账户及口令数据库</h2><ul><li>账户/口令的工作机制和系统本省分离开来</li><li>当设置User安全等级之后，账户验证将有Samba服务器本地进行</li><li>用.tdb 格式的口令数据库，初始情况下口令数据库文件并不存在</li><li>在创建Samba用户时可以创建口令数据库文件</li><li>管理员可以使用smbpasswd命令配置smaba账户及口令</li></ul><h2 id="默认配置文件"><a href="#默认配置文件" class="headerlink" title="默认配置文件"></a>默认配置文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/samba/smb.conf | grep -Ev &quot;^$|^#&quot;</span></span><br><span class="line">[global]<span class="comment"># 全局参数</span></span><br><span class="line">    workgroup = SAMBA</span><br><span class="line">    security = user</span><br><span class="line">    passdb backend = tdbsam</span><br><span class="line">    printing = cups</span><br><span class="line">    printcap name = cups</span><br><span class="line">    netbios name = MYSERVER <span class="comment"># 解析ip</span></span><br><span class="line">    log_level= 2  <span class="comment"># 设置日志级别</span></span><br><span class="line">    host_deny/allow</span><br><span class="line">    config file xxx <span class="comment"># 每个用户有独立的配置文件</span></span><br><span class="line">    <span class="comment"># 打印机启动参数 </span></span><br><span class="line">    load printers = yes</span><br><span class="line">    cups options = raw</span><br><span class="line">[homes]<span class="comment"># 共享参数</span></span><br><span class="line">    comment = Home Directories</span><br><span class="line">    valid users = %S, %D%w%S</span><br><span class="line">    browseable = No</span><br><span class="line">    <span class="built_in">read</span> only = No</span><br><span class="line">    inherit acls = Yes</span><br><span class="line">[printers]<span class="comment"># 共享打印机参数</span></span><br><span class="line">    comment = All Printers</span><br><span class="line">    path = /var/tmp</span><br><span class="line">    printable = Yes</span><br><span class="line">    create mask = 0600</span><br><span class="line">    browseable = No</span><br><span class="line">[<span class="built_in">print</span>$]<span class="comment"># 扩展参数</span></span><br><span class="line">    comment = Printer Drivers</span><br><span class="line">    path = /var/lib/samba/drivers</span><br><span class="line">    write list = @printadmin root</span><br><span class="line">    force group = @printadmin</span><br><span class="line">    create mask = 0664</span><br><span class="line">    directory mask = 0775</span><br></pre></td></tr></table></figure><h2 id="Samba服务权限"><a href="#Samba服务权限" class="headerlink" title="Samba服务权限"></a>Samba服务权限</h2><ul><li>所以在使用Samba服务共享资源的时候涉及到本地文件系统权限和Samba本身权限<ul><li>本地文件系统权限管理：chown chmod selinux (x)</li><li>Samba本身权限： 配置文件中使用相关参数去控制</li></ul></li></ul><h2 id="Samba服务部署"><a href="#Samba服务部署" class="headerlink" title="Samba服务部署"></a>Samba服务部署</h2><p>更多信息可以参考<a href="https://www.cnblogs.com/kevingrace/p/8662088.html">https://www.cnblogs.com/kevingrace/p/8662088.html</a></p><p>第1步：创建用于访问共享资源的账户信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># useradd wangwu &amp;&amp; pdbedit -a -u wangwu</span></span><br><span class="line">pdbedit命令：</span><br><span class="line">-a ：建立Samba用户</span><br><span class="line">-x 用户名：删除Samba用户</span><br><span class="line">-L：列出用户列表</span><br><span class="line">-Lv：列出用户详细信息的列表</span><br><span class="line">-u：指定用户</span><br><span class="line"><span class="comment"># 或者使用smbpassed</span></span><br><span class="line">-a: 建立用户</span><br><span class="line">不加：更改密码</span><br><span class="line">-x：删除用户</span><br></pre></td></tr></table></figure><p>第2步：创建用于共享资源的文件目录<br><code>[root@node1 ~]# mkdir /home/database</code><br><code>[root@node1 ~]# chown -Rf wangwu:wangwu /home/database</code></p><p>第3步：修改主配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">每个共享目录应该有独立的[ ]部分</span><br><span class="line">[共享名称]远程网络看到的共享名称</span><br><span class="line">comment注释信息</span><br><span class="line">path所共享的目录路径</span><br><span class="line">public能否被guest访问的共享,默认no,和guest ok类似</span><br><span class="line">browsable是否允许所有用户浏览此共享默认为yes,no为隐藏</span><br><span class="line">writable&#x3D;yes可以被所有用户读写，默认为no</span><br><span class="line">read only&#x3D;no和writable&#x3D;yes等价，如与以上设置冲突,放在后面的设置生效,默认只读</span><br><span class="line">write list 用户，@组名，+组名,用，分隔，如writable&#x3D;no, 列表中用户或组可读写,不在列表中用户只读</span><br><span class="line">valid users特定用户才能访问该共享,如为空,将允许所有用户，用户名之间用空格分隔,@组名，+组名,用，分隔</span><br></pre></td></tr></table></figure><p>添加如下配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[database]</span><br><span class="line">comment = this is my <span class="built_in">test</span> </span><br><span class="line">path = /home/database</span><br><span class="line">public = no</span><br><span class="line">writable = yes</span><br></pre></td></tr></table></figure><p>第4步：正确性检查</p><p><code>[root@node1 ~]# testparm  --show-all-paraments</code><br><code>[root@node1 ~]# systemctl restart smb</code><br><code>[root@node1 ~]# netstat -lunt | egrep &#39;137|138|139|445&#39;</code></p><p>第5步：测试</p><ul><li><p>Window挂载共享</p><pre><code>在Window运行输入地址：\\\192.168.10.10用户名：wangwu密码：wangwu</code></pre></li><li><p>Linux挂载共享<br>Samba提供了一个类似FTP客户程序的Samba客户程序smbclient<br>使用方法：smbclient //NetBIOS名或IP地址/共享名 -U 用户名<br><code>[root@node1 ~]# yum install samba-client -y</code><br><code>[root@node1 ~]# smbclient -L //192.168.10.10/database -U kinmfer</code>     #检查Samba资源<br><code>smbstatus</code>命令：列出Samba的资源使用情况</p></li><li><p>或者使用挂载命令</p><ul><li><p>手动挂载</p><p><code>mount -o username=xxx password=xxx //smbshare/server /mnt/xxx</code></p></li><li><p>开机自动挂载</p><p>此方法需要安装cifs-utils包</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&#x27;//172.16.1.31/share /mnt cifs credentials或cred=/etc/smb.txt 0 0&#x27;</span> &gt;&gt; /etc.fstab</span><br><span class="line"></span><br><span class="line">cat /etc/smb.txt</span><br><span class="line">username=xxx</span><br><span class="line">password=xxx</span><br><span class="line"></span><br><span class="line">chmod 600 /etc/smb.txt</span><br></pre></td></tr></table></figure></li></ul></li></ul><h1 id="NFS服务"><a href="#NFS服务" class="headerlink" title="NFS服务"></a>NFS服务</h1><ul><li><p>网络文件系统，英文Network File System(NFS)。是由SUN公司研制的UNIX表示层协议(pressentation layer protocol)，能使使用者访问网络上别处的文件就像在使用自己的计算机一样。</p></li><li><p>它允许网络中的计算机之间通过TCP/IP网络共享资源。在NFS的应用中，本地NFS的客户端应用可以透明地读写位于远端NFS服务器上的文件，就像访问本地文件一样，也就是说客户端PC可以挂载NFS服务器所提供的目录并且挂载之后这个目录看起来如同本地的磁盘分区一样，可以使用cp、cd、mv、rm及df等与磁盘相关的命令。</p></li><li><p>它基于开放网络运算远程过程调用（ONC RPC）协议：一个开放、标准的RFC协议，任何人或组织都可以依据标准实现它。</p></li><li><p>远程过程调用Remote Procedure Call，缩写为 RPC,是一个计算机通信协议。该协议允许运行于一台计算机的程序调用另一个地址空间（通常为一个开放网络的一台计算机）的子程序，而程序员就像调用本地程序一样，无需额外地为这个交互作用编程（无需关注细节）。RPC是一种服务器-客户端（Client/Server）模式，经典实现是一个通过发送请求-接受回应进行信息交互的系统。</p></li><li><p>NFS服务端、RPC协议、客户端三者可以理解为房源、中介、租客之间的关系：</p><ul><li>首先服务器端启动RPC服务，并开启111端口</li><li>服务器端启动NFS服务，并向RPC注册端口信息</li><li>客户端启动RPC（portmap服务），向服务端的RPC(portmap)服务请求服务端的NFS端口</li><li>服务端的RPC(portmap)服务反馈NFS端口信息给客户端。</li><li>客户端通过获取的NFS端口来建立和服务端的NFS连接并进行数据的传输。</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200502192135749.png" alt="image-20200502192135749"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/7355130-62a8b707e67943ba.webp" alt="7355130-62a8b707e67943ba"> </p></li></ul><h1 id="NFS服务搭建"><a href="#NFS服务搭建" class="headerlink" title="NFS服务搭建"></a>NFS服务搭建</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><ul><li><p>服务端</p><p><code>[root@nfs01 ~]# dnf install rpcbind nfs-utils -y</code></p></li><li><p>客户端</p><p><code>[root@web01 ~]# dnf install nfs-utils -y</code></p></li></ul><h2 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h2><blockquote><p>注意：先启动rpc服务，在启动nfs服务</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># systemctl start rpcbind</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl enable rpcbind   </span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl start nfs-server.service </span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># systemctl enable nfs-server.service </span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /usr/lib/systemd/system/nfs-server.service.</span><br></pre></td></tr></table></figure><p>没有注册时候：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rpcinfo -p 172.16.1.31</span></span><br><span class="line">program vers proto   port  service</span><br><span class="line">100000    4   tcp    111  portmapper</span><br><span class="line">100000    3   tcp    111  portmapper</span><br><span class="line">100000    2   tcp    111  portmapper</span><br><span class="line">100000    4   udp    111  portmapper</span><br><span class="line">100000    3   udp    111  portmapper</span><br><span class="line">100000    2   udp    111  portmapper</span><br></pre></td></tr></table></figure><p>nfs服务注册之后信息：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rpcinfo -p 172.16.1.31</span></span><br><span class="line">program vers proto   port  service</span><br><span class="line">100000    4   tcp    111  portmapper</span><br><span class="line">100000    3   tcp    111  portmapper</span><br><span class="line">100000    2   tcp    111  portmapper</span><br><span class="line">100000    4   udp    111  portmapper</span><br><span class="line">100000    3   udp    111  portmapper</span><br><span class="line">100000    2   udp    111  portmapper</span><br><span class="line">100024    1   udp  53997  status</span><br><span class="line">100024    1   tcp  49863  status</span><br><span class="line">100005    1   udp  20048  mountd</span><br><span class="line">100005    1   tcp  20048  mountd</span><br><span class="line">100005    2   udp  20048  mountd</span><br><span class="line">100005    2   tcp  20048  mountd</span><br><span class="line">100005    3   udp  20048  mountd</span><br><span class="line">100005    3   tcp  20048  mountd</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><h4 id="创建目录并授权"><a href="#创建目录并授权" class="headerlink" title="创建目录并授权"></a>创建目录并授权</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mkdir -p /data/web01</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># chown -R nobody.nobody /data</span></span><br></pre></td></tr></table></figure><p>配置文件说明：</p><blockquote><p>格式： 共享目录的路径 允许访问的NFS客户端（共享权限参数）</p><p>如上，共享目录为/public , 允许访问的客户端为192.168.245.0/24网络用户，权限为只读。</p><p>请注意，NFS客户端地址与权限之间没有空格。</p><p>NFS输出保护需要用到kerberos加密（none，sys，krb5，krb5i，krb5p），格式sec=XXX</p><p>none：以匿名身份访问，如果要允许写操作，要映射到nfsnobody用户，同时布尔值开关要打开，setsebool nfsd_anon_write 1</p><p>sys：文件的访问是基于标准的文件访问，如果没有指定，默认就是sys， 信任任何发送过来用户名</p><p>krb5：客户端必须提供标识，客户端的表示也必须是krb5，基于域环境的认证</p><p>krb5i：在krb5的基础上做了加密的操作，对用户的密码做了加密，但是传输的数据没有加密</p><p>krb5p：所有的数据都加密</p></blockquote><h4 id="配置文件的参数"><a href="#配置文件的参数" class="headerlink" title="配置文件的参数"></a>配置文件的参数</h4><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>ro</td><td>只读</td></tr><tr><td>rw</td><td>读写</td></tr><tr><td>root_squash</td><td>当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户</td></tr><tr><td>no_root_squash</td><td>当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员</td></tr><tr><td>all_squash</td><td>无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户</td></tr><tr><td>no_all_squash</td><td>不要将普通用户身份进行转换</td></tr><tr><td>sync</td><td>请求或写入数据时，数据同步写入到NFS Server的硬盘后才返回，优点：数据安全不会丢，缺点：性能比不启用该参数要差</td></tr><tr><td>async</td><td>写入数据时会先写到内存缓冲区，直到硬盘有空档才会在写入磁盘，这样可以提升写入效率。风险是若服务器宕机或不正常关机，会损失缓冲区中未写入硬盘的数据（解决办法：服务器主板电池或UPS不间断电源）</td></tr><tr><td>anonuid</td><td>参数以anon*开头即值anonymous匿名用户，这个用户的UID设置值通常为nfsnobody的UID值，当然我们也可以自行设置这个UID值。但是，UID必须存在于/etc/passwd中。在多个NFS Clients时，如多台web server共享一个NFS目录时，通过这个参数可以使得不同的NFS Clients写入的数据对所有NFS Clients保持同样的用户权限，即为配置的匿名UID对应用户权限，这个参数很有用。一般默认就好</td></tr><tr><td>anongid</td><td>指定gid的值</td></tr></tbody></table><p>企业互联网公司如何配置NFS 各种squash参数</p><ul><li>no_all_squash  需要进行配置   共享目录权限为www（可以自己定义）（<strong>确保客户端用户 服务端用户 uid数值一致</strong>，需要在/etc/exports中定义anonuid）</li><li>root_squash    需要进行配置</li></ul><blockquote><p>如何让root用户可以操作管理www用户管理的data目录<br>root  — root_squash — www  —操作— data目录<br>anonuid=65534,anongid=65534    — 可以指定映射的用户信息</p></blockquote><p>当然，保证网站存储服务器用户数据安全性，默认配置文件中已经定义了以上配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/data 172.16.1.0/24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,no_all_squash)</span><br><span class="line">/data 192.168.242.0/24(rw,sync,wdelay,hide,nocrossmnt,secure,root_squash,no_all_squash,no_subtree_check,secure_locks,acl,no_pnfs,anonuid=65534,anongid=65534,sec=sys,rw,secure,root_squash,no_all_squash)</span><br></pre></td></tr></table></figure><p>企业中如何编辑nfs配置文件</p><ol><li>通用方法 *****<br>/data   172.16.1.0/24(rw,sync)</li><li>特殊情况 （让部分人员不能操作存储目录 可以看目录中的数据）<br>/data   10.0.0.0/24(ro,sync)</li><li>修改默认的匿名用户<br>/data   10.0.0.0/24(ro,sync,anonuid=xxx,anongid=xxx)</li></ol><p>配置完成后，使用exportfs实用程序有选择地导出目录，而无需重新启动NFS服务</p><p>用<code>exportfs</code>命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># exportfs -rv</span></span><br><span class="line">exporting 172.16.1.0/24:/data</span><br><span class="line">exporting 192.168.242.0/24:/data</span><br></pre></td></tr></table></figure><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>-a</td><td>全部挂载或者全部卸载</td></tr><tr><td>-r</td><td>重新挂载</td></tr><tr><td>-u</td><td>卸载某一个目录</td></tr><tr><td>-v</td><td>显示共享目录</td></tr></tbody></table><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>启动：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 mnt]<span class="comment"># systemctl start nfs-server.service </span></span><br><span class="line">[root@web01 mnt]<span class="comment"># systemctl enable nfs-server.service </span></span><br><span class="line">Created symlink /etc/systemd/system/multi-user.target.wants/nfs-server.service → /usr/lib/systemd/system/nfs-server.service.</span><br></pre></td></tr></table></figure><p>输入命令：<code>mount -t nfs 172.16.1.31:/data /mnt</code></p><p>检查：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 mnt]<span class="comment"># df -h</span></span><br><span class="line">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs             383M     0  383M    0% /dev</span><br><span class="line">tmpfs                399M     0  399M    0% /dev/shm</span><br><span class="line">tmpfs                399M   11M  388M    3% /run</span><br><span class="line">tmpfs                399M     0  399M    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/cl-root  3.5G  1.6G  1.9G   46% /</span><br><span class="line">/dev/sda1            976M  190M  720M   21% /boot</span><br><span class="line">tmpfs                 80M     0   80M    0% /run/user/0</span><br><span class="line">172.16.1.31:/data    3.5G  1.7G  1.9G   47% /mnt</span><br></pre></td></tr></table></figure><p>如何实现自动挂载：</p><ol><li><p>利用rc.local<br><code>echo &quot;mount -t nfs 172.16.1.31:/data /mnt&quot; &gt;&gt;/etc/rc.local</code></p></li><li><p>利用fstab文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/fstab</span><br><span class="line">172.16.1.31:/data                         /mnt                    nfs     defaults        0 0</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>说明：有很多资料建议写入到/etc/fstab,os启动时一般会先加载文件系统后启动网络，在没有网络时nfs是无法加载的，总是出错， 虽然有类似所以还是建议放到/etc/rc.local中</p></blockquote><p><strong>如果在/mnt下新建目录挂载，如上所述，需要将客户端的xxx用户id修改为和服务端一致，否则会出现Permission denied</strong></p><h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p><code>umount -lf /mnt</code>    强制卸载挂载点</p><ul><li>-l       不退出挂载点目录进行卸载 </li><li>-f       强制进行卸载操作</li></ul><h4 id="检查"><a href="#检查" class="headerlink" title="检查"></a>检查</h4><p>利用<code>showmount</code>命令检查有权限挂载的服务器是否能够挂载</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 mnt]<span class="comment"># showmount -e</span></span><br><span class="line">Export list <span class="keyword">for</span> web01:</span><br><span class="line">[root@web01 mnt]<span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/data 192.168.242.0/24,172.16.1.0/24</span><br></pre></td></tr></table></figure><table><thead><tr><th>常用参数</th><th>作用</th></tr></thead><tbody><tr><td>-d</td><td>仅显示已被NFS客户端加载的目录</td></tr><tr><td>-e</td><td>显示NFS服务器上所有的共享目录</td></tr></tbody></table><h2 id="NFS排错"><a href="#NFS排错" class="headerlink" title="NFS排错"></a>NFS排错</h2><h3 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h3><ol><li><p>检查nfs进程信息是否注册</p><p><code>rpcinfo -p localhost/172.16.1.31</code><br>问题原因：</p><ul><li>服务启动顺序不对</li><li>没有启动nfs服务</li></ul></li><li><p>检查有没有可用存储目录<br><code>showmount -e 172.16.1.31</code><br>问题原因：<br>配置文件编写有问题，重启nfs服务</p></li><li><p>在服务端进行挂载测试</p><p>是否能够在存储目录中创建或删除数据</p></li></ol><h3 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h3><ol><li><p>检查nfs进程信息是否注册<br><code>rpcinfo -p localhost/172.16.1.31</code></p><p>问题原因：</p><ul><li><p>没有启动nfs服务</p></li><li><p>服务启动顺序不对</p></li></ul><ol start="2"><li><p>检查有没有可用存储目录<br><code>showmount -e 172.16.1.31</code><br>问题原因：<br>配置文件编写有问题，重启nfs服务</p></li><li><p>网络问题<br><code>ping 172.16.1.31</code></p><p><code>telnet 172.16.1.31 111</code></p></li></ol></li></ol><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>示例1：客户端挂载报错“No such file or directory”</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01t ~]<span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">Export list <span class="keyword">for</span> 172.16.1.31:</span><br><span class="line">/data    172.16.1.0/24</span><br><span class="line">[root@nfs01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt</span></span><br><span class="line">mount.nfs: mounting 172.16.1.31:/data failed, reason given by server: No such file or directory</span><br></pre></td></tr></table></figure><p>解答：原因是NFS服务器端没有共享目录/data，创建即可。命令如下：<br><code>[root@nfs-server ~]# mkdir /data</code></p></li><li><p>示例2：NFS服务器端启动失败，如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># systemctl start nfs-server</span></span><br><span class="line">Starting NFS services:[  OK  ]</span><br><span class="line">Starting NFS quotas: Cannot register service: RPC: Unable to receive; errno = Connection refused</span><br><span class="line">rpc.rquotad: unable to register (RQUOTAPROG, RQUOTAVERS, udp).</span><br><span class="line">     [FAILED]</span><br><span class="line">Starting NFS mountd:[FAILED]</span><br><span class="line">Starting NFS daemon: rpc.nfsd: writing fd to kernel failed: errno 111 (Connection refused)</span><br><span class="line">rpc.nfsd: unable to <span class="built_in">set</span> any sockets <span class="keyword">for</span> nfsd[FAILED]</span><br></pre></td></tr></table></figure><p>解答：这是因为RPC服务没有在NFS前面启动，需要先启动RPC服务再启动NFS，解决方法为，按顺序启动rpcbind及NFS，命令如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs-server ~]<span class="comment"># systemctl start rpcbind</span></span><br><span class="line">[root@nfs-server ~]<span class="comment"># systemctl start nfs-server</span></span><br></pre></td></tr></table></figure></li><li><p>示例3：注册RPC服务失败，出现failed：RPC Error：Program not registered错误。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt</span></span><br><span class="line">mount.nfs: requested NFS version or transport protocol is not supported</span><br><span class="line">[root@nfs-client ~]<span class="comment"># showmount -e 172.16.1.31</span></span><br><span class="line">clnt_create: RPC: Program not registered</span><br></pre></td></tr></table></figure><p>解答：服务器端的NFS没有启动，客户端没有收到服务器端发来的随机端口信息。<br>解决方法如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs-server ~]<span class="comment"># systemctl restart rpcbind</span></span><br><span class="line">[root@nfs-server ~]<span class="comment"># systemctl restart nfs-server</span></span><br></pre></td></tr></table></figure></li><li><p>示例4：卸载挂载设备时显示device is busy。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 mnt]<span class="comment"># umount /mnt</span></span><br><span class="line">umount.nfs: /mnt: device is busy</span><br><span class="line">umount.nfs: /mnt: device is busy</span><br></pre></td></tr></table></figure><p>解答：有可能是当前目录就是挂载的NFS目录（/mnt），也有可能是NFS Server挂了。对于第一种情况，解决办法为退出挂载目录/mnt，再执行umount /mnt卸载。对于第二种情况，NFS Server挂了，NFS Client就会出现问题（df -h窗口会死掉），这时只能强制卸载，方法为：<br><code>umount -lf /mnt</code>     其中的参数-f为强制卸载，参数-l为懒惰的卸载。</p></li><li><p>示例5：CentOS 6.6客户端NFS挂载时遇到问题。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mount -t nfs 172.16.1.9:/data /mnt</span></span><br><span class="line">mount：wrong fs <span class="built_in">type</span>，bad option，bad option，bad superblock on 10.0.0.7:/data,</span><br><span class="line">   missing codepage or helper program，or other error</span><br><span class="line">   (<span class="keyword">for</span> several filesystems (e.g. nfs, cifs) you might</span><br><span class="line">need a /sbin/mount.&lt;<span class="built_in">type</span>&gt; helper program )</span><br><span class="line">In some cases useful info is found <span class="keyword">in</span> syslog - try</span><br><span class="line">meg | tail or so</span><br></pre></td></tr></table></figure><p>排查思路：同样的机器，NFS服务器本地可以挂载，但是客户端挂载时wrong fs type，因此尝试所有客户端安装nfs-utils。CentOS6.5及以前的NFS没有遇到这个问题。<br>解决方法：执行<code>yum install nfs-utils -y</code>，客户端安装NFS软件，但不启动服务。</p></li><li><p>示例六：共享目录挂载很卡</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># cd /mnt</span></span><br><span class="line">time touch test.txt</span><br></pre></td></tr></table></figure><p>原因分析：</p><ul><li>NFS服务端重启之后。立刻进行挂载会出现此问题，因为NFS自身重启的时候，拥有无敌的时间，默认是90秒；在无敌时间内，是不能对共享目录进行更改的操作；</li><li>在系统配置中/etc/sysconfig/nfs中指定了无敌时间的配置参数<br>NFSD_V4_GRACE=90<br>NFSD_V4_LEASE=90<br>NLM_GRACE_PERI0D=90<br>find /proc -name | grep -i ” NLM_GRACE_PERIOD”<br>find /proc -iname ” NLM_GRACE_PERIOD”</li><li>重启NFS服务没有按照顺序进行重启，一旦NFS重启了，需要确认rpcbind服务有没有接收，即rpcinfo -p localhost；先启动rpcbind服务再启动nfs服务</li></ul></li><li><p>示例七：ls: cannot open directory .: Stale file handle<br>Stale file handle<br>客户端报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mount -t nfs 172.16.1.9:/data  /mnt</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># mount.nfs: Stale file handle</span></span><br></pre></td></tr></table></figure><p>服务端挂载报错</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 data]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt/</span></span><br><span class="line">mount.nfs: access denied by server <span class="keyword">while</span> mounting 172.16.1.31:/data</span><br></pre></td></tr></table></figure><p>查看配置文件发现</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 data]<span class="comment"># cat /etc/exports</span></span><br><span class="line"><span class="comment">#share /data  by lidao  at 20160913</span></span><br><span class="line">/data 173.16.1.0/24(rw,sync)</span><br></pre></td></tr></table></figure><p>原因分析：</p><p>/proc/mounts客户端挂载文件中已经存在了相应的挂载记录，没有正确卸载掉，就再次进行挂载，就会出现以上错误。</p></li></ul><h1 id="Rsync"><a href="#Rsync" class="headerlink" title="Rsync"></a>Rsync</h1><p>rsync，英文全称是 remote synchronize， 是一款实现远程同步功能的免费软件，它在同步文件的同时，可以保持原来文件的权限、时间、软硬链接等附加信息。 rsync 是用 “rsync 算法”提供了一个客户机和远程文件服务器的文件同步的快速方法，而且可以通过 ssh 方式来传输文件。 甚至还可以实现只同步一个文件里有变化的内容部分，所以可以实现快速的同步备份数据。同时， rsync 还可以实现同步本地数据、删除文件和目录的功能。一个 rsync 相当于 scp、 cp、 rm，并且还在性能上优于它们每一个命令。</p><h2 id="Rsync特性"><a href="#Rsync特性" class="headerlink" title="Rsync特性"></a>Rsync特性</h2><ul><li>能更新整个目录和树和文件系统；</li><li>有选择性的保持符号链链、硬链接、文件属于、权限、设备以及时间等；</li><li>对于安装来说，无任何特殊权限要求；</li><li>对于多个文件来说，内部流水线减少文件等待的延时；</li><li>能用 rsh、 ssh 或直接端口做为传输入端口（rsync 本身不对数据加密）；</li><li>支持匿名 rsync 同步文件，是理想的镜像工具；</li></ul><h2 id="Rsync在企业的工作场景"><a href="#Rsync在企业的工作场景" class="headerlink" title="Rsync在企业的工作场景"></a>Rsync在企业的工作场景</h2><ul><li>服务器之间的数据同步（cron+rsync）</li><li>把所有客户服务器数据同步到备份服务器（cron+rsync）</li><li>与 inotify 或 sersync 配合，做实时的数据同步（rsync+inotify/sersync）</li></ul><h2 id="Rsync命令行常用参数"><a href="#Rsync命令行常用参数" class="headerlink" title="Rsync命令行常用参数"></a>Rsync命令行常用参数</h2><ul><li><p>参数说明</p><ul><li>-v：–verbose 详细模式输出</li><li>-z：–compress 对备份的文件在传输的过程中进行压缩处理</li><li>-a：–archive 归档模式，表示以递归方式传输文件，并保持所有文件属性，等于参数：-vrztopg</li><li>-r：–recursive 对子目录以递归模式处理。</li><li>-t：–times 保持文件时间信息</li><li>-o：–owner 保持文件属主信息。</li><li>-p：–perms 保持文件权限。</li><li>-g：–group 保持文件属组信息</li><li>-D：–devices 保持设备文件信息</li><li>-l： –links 保留软链结。</li><li>-e：–rsh=command 指定使用 rsh、 ssh 方式进行数据同步</li><li>–exclude=PATTERN 指定排除不需要传输的文件模式。</li><li>–exclude-from=FILE 排除 FILE 中指定模式的文件。</li><li>–bwlimit=KBPS 限制 I/O 带宽， KBytes per second。</li><li>–delete 无差异同步参数(慎用),删除那些目标位置有的文件而备份源没有的文件</li></ul></li><li><p>工作中常用参数组合：-avz</p></li></ul><h2 id="Rsync优缺点"><a href="#Rsync优缺点" class="headerlink" title="Rsync优缺点"></a>Rsync优缺点</h2><ul><li>优点<br>（1）增量备份，支持socket（daemon），集中备份（支持推拉，都是以客户端为参照物）<br>  　　（2）远程shell通道模式还可以加密（ssh）传输，socket（daemon）需要加密传输，可以利用vpn服务或ipsec服务</li><li>缺点：<br>（1）大量小文件同步的时候，比对时间较长，有的时候，rsync进程可能会停止<br>（2）同步大文件，10G这样的大文件有时也会出现问题：中断。未完整同步前，是隐藏文件，可以通过续传等参数实现传输。一次性远程拷贝可以用scp</li></ul><h2 id="Rsync部署"><a href="#Rsync部署" class="headerlink" title="Rsync部署"></a>Rsync部署</h2><h3 id="服务端-2"><a href="#服务端-2" class="headerlink" title="服务端"></a>服务端</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>安装软件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># rpm -qa | grep rsync</span></span><br><span class="line">rsync-3.1.3-6.el8.x86_64</span><br></pre></td></tr></table></figure><p>如果rsync软件不存在： <code>dnf install -y rsync</code></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>编写rsync软件的配置文件</p><p><code>vim /etc/rsyncd.conf </code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">uid = rsync       --- 指定管理备份目录的用户  </span><br><span class="line">gid = rsync       --- 指定管理备份目录的用户组</span><br><span class="line">port = 873        --- 定义rsync备份服务的网络端口号</span><br><span class="line">fake super = yes  --- 将rsync虚拟用户伪装成为一个超级管理员用户 </span><br><span class="line">use chroot = no   --- 和安全相关的配置</span><br><span class="line">max connections = 200  --- 最大连接数  同时只能有200个客户端连接到备份服务器</span><br><span class="line">timeout = 300          --- 超时时间(单位秒)</span><br><span class="line">pid file = /var/run/rsyncd.pid   --- 记录进程号码信息 1.让程序快速停止进程 2. 判断一个服务是否正在运行</span><br><span class="line">lock file = /var/run/rsync.lock  --- 锁文件</span><br><span class="line"><span class="built_in">log</span> file = /var/<span class="built_in">log</span>/rsyncd.log   --- rsync服务的日志文件 用于排错分析问题</span><br><span class="line">ignore errors                    --- 忽略传输中的简单错误</span><br><span class="line"><span class="built_in">read</span> only = <span class="literal">false</span>                --- 指定备份目录是可读可写</span><br><span class="line">list = <span class="literal">false</span>                     --- 使客户端可以查看服务端的模块信息</span><br><span class="line">hosts allow = 172.16.1.0/24      --- 允许传输备份数据的主机(白名单)</span><br><span class="line">hosts deny = 0.0.0.0/32          --- 禁止传输备份数据的主机(黑名单)</span><br><span class="line">auth users = rsync_backup        --- 指定认证用户 </span><br><span class="line">secrets file = /etc/rsync.password   --- 指定认证用户密码文件 用户名称:密码信息</span><br><span class="line">[backup]                         --- 模块信息</span><br><span class="line">comment = <span class="string">&quot;backup dir by oldboy&quot;</span>  </span><br><span class="line">path = /backup                   --- 模块中配置参数 指定备份目录</span><br></pre></td></tr></table></figure><h4 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h4><p>创建rsync服务的虚拟用户</p><p><code>useradd rsync -M -s /sbin/nologin</code></p><h4 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h4><p>创建备份服务认证密码文件并改权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;rsync_backup:123123&quot;</span> &gt;/etc/rsync.password</span><br><span class="line">chmod 600 /etc/rsync.password</span><br></pre></td></tr></table></figure><h4 id="第五步"><a href="#第五步" class="headerlink" title="第五步"></a>第五步</h4><p>建备份目录并修改属主属组信息</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /backup</span><br><span class="line">chown -R rsync.rsync /backup/</span><br></pre></td></tr></table></figure><h4 id="第六步"><a href="#第六步" class="headerlink" title="第六步"></a>第六步</h4><p>启动rsync守护进程服务</p><p><code>rsync --daemon</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># ps -ef | grep rsync</span></span><br><span class="line">root        901      1  0 12:07 ?        00:00:00 rsync --daemon</span><br><span class="line">root       1432   1405  0 12:09 pts/0    00:00:00 grep --color=auto rsync</span><br></pre></td></tr></table></figure><h4 id="第七步"><a href="#第七步" class="headerlink" title="第七步"></a>第七步</h4><p>需要熟悉rsync守护进程名称语法:</p><p>Access via rsync daemon:</p><ul><li><p>客户端做拉的操作: 恢复数据</p><p>pull: rsync [OPTION…] [USER@]HOST::SRC… [DEST]</p><p>​        rsync [OPTION…] rsync://[USER@]HOST[:PORT]/SRC… [DEST]</p></li><li><p>客户端做推的操作: 备份数据</p><p>Push: rsync [OPTION…] SRC… [USER@]HOST::DEST</p><p>src: 要推送备份数据信息</p><p>[USER@]: 指定认证用户信息</p><p>HOST: 指定远程主机的IP地址或者主机名称<br>::DEST: 备份服务器的模块信息</p><p>rsync [OPTION…] SRC… rsync://[USER@]HOST[:PORT]/DEST</p></li></ul><h3 id="客户端-2"><a href="#客户端-2" class="headerlink" title="客户端"></a>客户端</h3><h4 id="第一步-1"><a href="#第一步-1" class="headerlink" title="第一步"></a>第一步</h4><p>创建密码文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;123123&quot;</span> &gt;/etc/rsync.password</span><br><span class="line">chmod 600 /etc/rsync.password</span><br></pre></td></tr></table></figure><h4 id="第二步-1"><a href="#第二步-1" class="headerlink" title="第二步"></a>第二步</h4><p>进行免交互传输数据测试</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rsync -avz /etc/hosts rsync_backup@172.16.1.41::backup --password-file=/etc/rsync.password</span></span><br><span class="line">sending incremental file list</span><br><span class="line">hosts</span><br><span class="line">sent 227 bytes  received 43 bytes  180.00 bytes/sec</span><br><span class="line">total size is 371  speedup is 1.37</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>检查服务端</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@backup ~]<span class="comment"># ll /backup/hosts -d</span></span><br><span class="line">-rw-r--r-- 1 rsync rsync 371 3月  27 07:23 /backup/hosts</span><br></pre></td></tr></table></figure><h2 id="守护进程服务企业应用"><a href="#守护进程服务企业应用" class="headerlink" title="守护进程服务企业应用"></a>守护进程服务企业应用</h2><h3 id="守护进程多模块功能配置"><a href="#守护进程多模块功能配置" class="headerlink" title="守护进程多模块功能配置"></a>守护进程多模块功能配置</h3><p>在配置文件中添加如下</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">backup</span>]</span><br><span class="line"><span class="string">comment</span> <span class="string">=</span> <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br><span class="line"><span class="string">path</span> <span class="string">=</span> <span class="string">/backup</span></span><br><span class="line">[<span class="string">dba</span>]</span><br><span class="line"><span class="string">comment</span> <span class="string">=</span> <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br><span class="line"><span class="string">path</span> <span class="string">=</span> <span class="string">/dba</span></span><br><span class="line">[<span class="string">dev</span>]</span><br><span class="line"><span class="string">comment</span> <span class="string">=</span> <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br><span class="line"><span class="string">path</span> <span class="string">=</span> <span class="string">/devdata</span></span><br></pre></td></tr></table></figure><h3 id="守护进程的排除功能实践"><a href="#守护进程的排除功能实践" class="headerlink" title="守护进程的排除功能实践"></a>守护进程的排除功能实践</h3><ul><li>准备环境</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># mkdir -p /kinmfer/&#123;a..c&#125;</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># touch /kinmfer/&#123;a..c&#125;/&#123;1..3&#125;.txt</span></span><br><span class="line">[root@nfs01 ~]<span class="comment"># tree /kinmfer</span></span><br><span class="line">/kinmfer</span><br><span class="line">├── a</span><br><span class="line">│   ├── 1.txt</span><br><span class="line">│   ├── 2.txt</span><br><span class="line">│   └── 3.txt</span><br><span class="line">├── b</span><br><span class="line">│   ├── 1.txt</span><br><span class="line">│   ├── 2.txt</span><br><span class="line">│   └── 3.txt</span><br><span class="line">└── c</span><br><span class="line">    ├── 1.txt</span><br><span class="line">    ├── 2.txt</span><br><span class="line">    └── 3.txt</span><br><span class="line"></span><br><span class="line">3 directories, 9 files</span><br></pre></td></tr></table></figure><ul><li><p>需求01: 将/kinmfer目录下面 a目录数据全部备份 b目录不要备份1.txt文件 c整个目录不要做备份</p><pre><code>--exclude=PATTERN</code></pre><ul><li><p>绝对路径方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rsync -avz /kinmfer --exclude=/kinmfer/b/1.txt --exclude=/kinmfer/c/ rsync_backup@172.16.1.41::backup</span></span><br><span class="line">Password: </span><br><span class="line">sending incremental file list</span><br><span class="line">kinmfer/</span><br><span class="line">kinmfer/a/</span><br><span class="line">kinmfer/a/1.txt</span><br><span class="line">kinmfer/a/2.txt</span><br><span class="line">kinmfer/a/3.txt</span><br><span class="line">kinmfer/b/</span><br><span class="line">kinmfer/b/2.txt</span><br><span class="line">kinmfer/b/3.txt</span><br><span class="line"></span><br><span class="line">sent 387 bytes  received 135 bytes  116.00 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure></li><li><p>采用相对路径方式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rsync -avz /kinmfer --exclude=b/1.txt --exclude=c/ rsync_backup@172.16.1.41::backup</span></span><br><span class="line">Password: </span><br><span class="line">sending incremental file list</span><br><span class="line">kinmfer/</span><br><span class="line">kinmfer/a/</span><br><span class="line">kinmfer/a/1.txt</span><br><span class="line">kinmfer/a/2.txt</span><br><span class="line">kinmfer/a/3.txt</span><br><span class="line">kinmfer/b/</span><br><span class="line">kinmfer/b/2.txt</span><br><span class="line">kinmfer/b/3.txt</span><br><span class="line"></span><br><span class="line">sent 387 bytes  received 135 bytes  208.80 bytes/sec</span><br><span class="line">total size is 0  speedup is 0.00</span><br></pre></td></tr></table></figure></li></ul></li><li><p>需求02: 将/oldboy目录下面 a目录数据全部备份 b目录不要备份1.txt文件 c整个目录1.txt 3.txt文件不要备份<br>–exclude-from=file  — 批量排除</p><ul><li><p>编辑好一个排除文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># cat /kinmfer/exclude.txt</span></span><br><span class="line">b/1.txt</span><br><span class="line">c/1.txt</span><br><span class="line">c/3.txt</span><br><span class="line">exclude.txt <span class="comment"># 将自身排除</span></span><br></pre></td></tr></table></figure></li><li><p>实现批量排除功能</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rsync -avz /kinmfer --exclude-from=/kinmfer/b/1.txt --exclude=/kinmfer/c/ rsync_backup@172.16.1.41::backup</span></span><br><span class="line">Password: </span><br><span class="line">sending incremental file list</span><br><span class="line">kinmfer/</span><br><span class="line">kinmfer/exclude.txt</span><br><span class="line">kinmfer/a/</span><br><span class="line">kinmfer/a/1.txt</span><br><span class="line">kinmfer/a/2.txt</span><br><span class="line">kinmfer/a/3.txt</span><br><span class="line">kinmfer/b/</span><br><span class="line">kinmfer/b/1.txt</span><br><span class="line">kinmfer/b/2.txt</span><br><span class="line">kinmfer/b/3.txt</span><br><span class="line"></span><br><span class="line">sent 536 bytes  received 177 bytes  83.88 bytes/sec</span><br><span class="line">total size is 36  speedup is 0.05</span><br></pre></td></tr></table></figure></li></ul></li></ul><h3 id="守护进程来创建备份目录-不需要手动输入密码"><a href="#守护进程来创建备份目录-不需要手动输入密码" class="headerlink" title="守护进程来创建备份目录(不需要手动输入密码)"></a>守护进程来创建备份目录(不需要手动输入密码)</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># rsync -avz /etc/hosts  rsync_backup@172.16.1.41::backup/192.168.242.31/ --password-file=/etc/rsync.password</span></span><br><span class="line">sending incremental file list</span><br><span class="line">created directory 192.168.242.31</span><br><span class="line">hosts</span><br><span class="line"></span><br><span class="line">sent 227 bytes  received 80 bytes  614.00 bytes/sec</span><br><span class="line">total size is 371  speedup is 1.21</span><br></pre></td></tr></table></figure><p><strong>PS: 客户端无法在服务端创建多级目录</strong></p><h3 id="守护进程的访问控制配置"><a href="#守护进程的访问控制配置" class="headerlink" title="守护进程的访问控制配置"></a>守护进程的访问控制配置</h3><p>守护进程白名单和黑名单功能</p><h3 id="守护进程的列表功能配置"><a href="#守护进程的列表功能配置" class="headerlink" title="守护进程的列表功能配置"></a>守护进程的列表功能配置</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 /]<span class="comment"># rsync rsync_backup@172.16.1.41::</span></span><br><span class="line">backup         <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br><span class="line">dba            <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br><span class="line">dev            <span class="string">&quot;backup dir by kinmfer&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 综合架构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据同步 </tag>
            
            <tag> NFS </tag>
            
            <tag> Rsync </tag>
            
            <tag> FTP </tag>
            
            <tag> Samba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小实验-02-实时同步</title>
      <link href="2020/05/05/%E5%B0%8F%E5%AE%9E%E9%AA%8C-02-%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/"/>
      <url>2020/05/05/%E5%B0%8F%E5%AE%9E%E9%AA%8C-02-%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="Inotify"><a href="#Inotify" class="headerlink" title="Inotify"></a>Inotify</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>与传统的cp、tar备份方式相比，rsync具有安全性高、备份迅速、支持增量备份等优点，通过rsync可以解决对实时性要求不高的数据备份需求，例如定期的备份文件服务器数据到远端服务器，对本地磁盘定期做数据镜像等。</p><p>随着应用系统规模的不断扩大，对数据的安全性和可靠性也提出的更好的要求，rsync在高端业务系统中也逐渐暴露出了很多不足，首先，rsync同步数据时，需要扫描所有文件后进行比对，进行差量传输。如果文件数量达到了百万甚至千万量级，扫描所有文件将是非常耗时的。而且正在发生变化的往往是其中很少的一部分，这是非常低效的方式。其次，rsync不能实时的去监测、同步数据，虽然它可以通过linux守护进程的方式进行触发同步，但是两次触发动作一定会有时间差，这样就导致了服务端和客户端数据可能出现不一致，无法在应用故障时完全的恢复数据。基于以上原因，rsync+inotify组合出现了！</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>Inotify 是一种强大的、细粒度的、异步的文件系统事件监控机制，linux内核从2.6.13起，加入了Inotify支持，通过Inotify可以监控文件系统中添加、删除，修改、移动等各种细微事件，利用这个内核接口，第三方软件就可以监控文件系统下文件的各种变化情况，而inotify-tools就是这样的一个第三方软件。<br>在上面章节中，我们讲到，rsync可以实现触发式的文件同步，但是通过crontab守护进程方式进行触发，同步的数据和实际数据会有差异，而inotify可以监控文件系统的各种变化，当文件有任何变动时，就触发rsync同步，这样刚好解决了同步数据的实时性问题。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点<br>监控文件系统事件变化，通过nfs共享同步工具实现数据同步<br> 缺点<br>（1）并发如果&gt;200个文件（4-100k），同步会有延迟<br>（2）脚本推送同步服务的过程中，是增量传输的，影响传输效率<br>（3）监控到事件时，rsync同步是单线程的，sersync是多线程同步的<br>（4）inotify实现同步需要编写shell脚本，来实现实时同步</p><p>因此引入sersync</p><h1 id="sersync"><a href="#sersync" class="headerlink" title="sersync"></a>sersync</h1><ol><li>支持配置文件管理</li><li>真正的守护进程是socket</li><li>可以对失败文件定时重传（定时任务功能实现）</li><li>第三方的http接口</li><li>默认多线程同步</li></ol><h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><h2 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h2><p>部署rsync守护进程，参照</p><h2 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h2><ul><li><p>部署inotify监控服务</p><p><code>dnf install -y inotify-tools</code></p></li><li><p>熟悉命令用法</p><ul><li>/usr/bin/inotifywait    — 监控目录数据信息变化</li><li>/usr/bin/inotifywatch   — 对监控的变化信息进行统计</li></ul></li><li><p>inotifywait命令使用方法：</p><p>inotifywait [参数]  监控的目录</p><ul><li>-m|–monitor   — 实现一直监控目录的数据变化</li><li>-r|–recursive — 进行递归监控</li><li>-q|–quiet     — 尽量减少信息的输出</li><li>–format &lt;fmt&gt; — 指定输出信息的格式 </li><li>–timefmt      — 指定输出的时间信息格式 </li><li>-e|–event     — 指定监控的事件信息</li></ul><p>监控的事件：</p><ul><li>access  访问，读取文件。 </li><li>modify  修改，文件内容被修改。 </li><li>attrib  属性，文件元数据被修改。 </li><li>move    移动，对文件进行移动操作。 </li><li>create  创建，生成新文件 </li><li>open    打开，对文件进行打开操作。 </li><li>close   关闭，对文件进行关闭操作。 </li><li>delete  删除，文件被删除。</li></ul><p>示例：</p><p><code>inotifywait -mrq --timefmt &#39;%d/%m/%y/%H:%M&#39; --format &#39;%T %w %f&#39; -e modify,delete,create,attrib /data</code></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503161920915.png" alt="image-20200503161920915"></p></li></ul><h2 id="第三步"><a href="#第三步" class="headerlink" title="第三步"></a>第三步</h2><ul><li><p>下载sersync</p><p><a href="https://github.com/wsgzao/sersync">https://github.com/wsgzao/sersync</a></p></li><li><p>解压安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 tools]<span class="comment"># tar -xf sersync2.5.4_64bit_binary_stable_final.tar</span></span><br><span class="line">[root@nfs01 tools]<span class="comment"># mv GNU-Linux-x86/ /usr/local/</span></span><br></pre></td></tr></table></figure></li><li><p>配置文件部分说明</p><ul><li><p>排除指定数据信息不要进行实时传输同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;filter start=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">&lt;exclude expression=<span class="string">&quot;(.*)\.svn&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">    &lt;exclude expression=<span class="string">&quot;(.*)\.gz&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">&lt;exclude expression=<span class="string">&quot;^info/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">&lt;exclude expression=<span class="string">&quot;^static/*&quot;</span>&gt;&lt;/exclude&gt;</span><br><span class="line">&lt;/filter&gt;</span><br></pre></td></tr></table></figure></li><li><p>定义inotify程序需要监控的事件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;inotify&gt;</span><br><span class="line">&lt;delete start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;createFolder start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;createFile start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">&lt;closeWrite start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;moveFrom start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;moveTo start=<span class="string">&quot;true&quot;</span>/&gt;</span><br><span class="line">&lt;attrib start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">&lt;modify start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">&lt;/inotify&gt;</span><br></pre></td></tr></table></figure></li><li><p>一般需要修改的地方</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;sersync&gt;</span><br><span class="line">&lt;localpath watch=<span class="string">&quot;/data&quot;</span>&gt;</span><br><span class="line">&lt;remote ip=<span class="string">&quot;172.16.1.41&quot;</span> name=<span class="string">&quot;backup&quot;</span>/&gt;</span><br><span class="line">&lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.39&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;!--&lt;remote ip=<span class="string">&quot;192.168.8.40&quot;</span> name=<span class="string">&quot;tongbu&quot;</span>/&gt;--&gt;</span><br><span class="line">&lt;/localpath&gt;</span><br><span class="line">&lt;rsync&gt;</span><br><span class="line">&lt;commonParams params=<span class="string">&quot;-artuz&quot;</span>/&gt;</span><br><span class="line">&lt;auth start=<span class="string">&quot;true&quot;</span> users=<span class="string">&quot;rsync_backup&quot;</span> passwordfile=<span class="string">&quot;/etc/rsync.password&quot;</span>/&gt;</span><br><span class="line">&lt;userDefinedPort start=<span class="string">&quot;false&quot;</span> port=<span class="string">&quot;874&quot;</span>/&gt;&lt;!-- port=874 --&gt;</span><br><span class="line">&lt;timeout start=<span class="string">&quot;false&quot;</span> time=<span class="string">&quot;100&quot;</span>/&gt;&lt;!-- timeout=100 --&gt;</span><br><span class="line">&lt;ssh start=<span class="string">&quot;false&quot;</span>/&gt;</span><br><span class="line">&lt;/rsync&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>localpath watch=”/data”—–本机要进行监控的目录</li><li>remote ip=“172.16.1.41” name=“backup” ——进行实时同步的另一台服务器ip和模块</li><li>commonParams params=”-artuz” ———-进行rsync传输时的参数<br>auth start=“true” users=“rsync_backup”  passwordfile=”/etc/rsync.password”<br>表示开启认证服务，认证用户resync_backup ,用户密码保存文件/etc/rsync.password</li><li>useDefinePort start=“true” port=“873” ———开启端口认证,端口号873</li><li>timeout start=“true” time=“100” ————— 超时100s，则断开连接</li></ul></li></ul></li></ul><h2 id="第四步"><a href="#第四步" class="headerlink" title="第四步"></a>第四步</h2><ul><li><p>将sersync2加入环境变量</p><p><code>[root@nfs01 local]# mv GNU-Linux-x86/sersync2 ./bin/</code></p></li><li><p>参数说明</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 <span class="built_in">local</span>]<span class="comment"># sersync2 -h</span></span><br><span class="line"><span class="built_in">set</span> the system param</span><br><span class="line">execute：<span class="built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：<span class="built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the <span class="built_in">command</span> param</span><br><span class="line">_______________________________________________________</span><br><span class="line">参数-d:启用守护进程模式</span><br><span class="line">参数-r:在监控前，将监控目录与远程主机用rsync命令推送一遍</span><br><span class="line">c参数-n: 指定开启守护线程的数量，默认为10个</span><br><span class="line">参数-o:指定配置文件，默认使用confxml.xml文件</span><br><span class="line">参数-m:单独启用其他模块，使用 -m refreshCDN 开启刷新CDN模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m socket 开启socket模块</span><br><span class="line">参数-m:单独启用其他模块，使用 -m http 开启http模块</span><br><span class="line">不加-m参数，则默认执行同步程序</span><br><span class="line">________________________________________________________________</span><br></pre></td></tr></table></figure></li><li><p>开启服务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 <span class="built_in">local</span>]<span class="comment"># sersync2 -dro  /usr/local/GNU-Linux-x86/confxml.xml </span></span><br><span class="line"><span class="built_in">set</span> the system param</span><br><span class="line">execute：<span class="built_in">echo</span> 50000000 &gt; /proc/sys/fs/inotify/max_user_watches</span><br><span class="line">execute：<span class="built_in">echo</span> 327679 &gt; /proc/sys/fs/inotify/max_queued_events</span><br><span class="line">parse the <span class="built_in">command</span> param</span><br><span class="line">option: -d run as a daemon</span><br><span class="line">option: -r rsync all the <span class="built_in">local</span> files to the remote servers before the sersync work</span><br><span class="line">option: -o config xml name：  /usr/<span class="built_in">local</span>/GNU-Linux-x86/confxml.xml</span><br><span class="line">daemon thread num: 10</span><br><span class="line">parse xml config file</span><br><span class="line">host ip : localhosthost port: 8008</span><br><span class="line">daemon start，sersync run behind the console </span><br><span class="line">use rsync password-file :</span><br><span class="line">user isroot</span><br><span class="line">passwordfile is /etc/rsync.password</span><br><span class="line">config xml parse success</span><br><span class="line">please <span class="built_in">set</span> /etc/rsyncd.conf max connections=0 Manually</span><br><span class="line">sersync working thread 12  = 1(primary thread) + 1(fail retry thread) + 10(daemon sub threads) </span><br><span class="line">Max threads numbers is: 22 = 12(Thread pool nums) + 10(Sub threads)</span><br><span class="line">please according your cpu ，use -n param to adjust the cpu rate</span><br><span class="line">------------------------------------------</span><br><span class="line">rsync the directory recursivly to the remote servers once</span><br><span class="line">working please <span class="built_in">wait</span>...</span><br><span class="line">execute <span class="built_in">command</span>: <span class="built_in">cd</span> /data &amp;&amp; rsync -artuz -R --delete ./ root@172.16.1.41::backup --password-file=/etc/rsync.password &gt;/dev/null 2&gt;&amp;1 </span><br><span class="line">run the sersync: </span><br><span class="line">watch path is: /data</span><br></pre></td></tr></table></figure></li><li><p>关闭服务</p><p>因为sersync不是使用yum方式下载的，所以不能使用systemctl stop rersync的方式停止，可以采用杀死进程的方式停止服务，killall命令需要下载psmisc软件包，<code>dnf install -y psmisc</code></p><p><code>[root@nfs01 local]# killall sersync2</code></p></li><li><p>加入开机自启</p><p><code>[root@nfs01 local]# echo &quot;sersync2 -dro  /usr/local/GNU-Linux-x86/confxml.xml&quot; &gt;&gt;/etc/rc.local </code></p></li></ul><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><ol><li><p>主机backup已开启；主机web01通过NFS服务已经挂载到主机nfs01的/data目录</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@web01 ~]<span class="comment"># mount -t nfs 172.16.1.31:/data /mnt</span></span><br><span class="line">[root@web01 ~]<span class="comment"># df -h</span></span><br><span class="line">文件系统             容量  已用  可用 已用% 挂载点</span><br><span class="line">devtmpfs             383M     0  383M    0% /dev</span><br><span class="line">tmpfs                399M     0  399M    0% /dev/shm</span><br><span class="line">tmpfs                399M   11M  388M    3% /run</span><br><span class="line">tmpfs                399M     0  399M    0% /sys/fs/cgroup</span><br><span class="line">/dev/mapper/cl-root  3.5G  1.6G  1.9G   46% /</span><br><span class="line">/dev/sda1            976M  190M  720M   21% /boot</span><br><span class="line">172.16.1.31:/data    3.5G  1.8G  1.8G   50% /mnt</span><br></pre></td></tr></table></figure></li><li><p>在主机web01下创建文件</p><p><code>[root@web01 mnt]# touch 1.txt</code></p><p>在主机backup中会实时同步</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@backup backup]<span class="comment"># ls</span></span><br><span class="line">1.txt</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 小实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Inotify </tag>
            
            <tag> Sersync </tag>
            
            <tag> 数据同步 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小实验-01-全网备份</title>
      <link href="2020/05/05/%E5%B0%8F%E5%AE%9E%E9%AA%8C-01-%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD/"/>
      <url>2020/05/05/%E5%B0%8F%E5%AE%9E%E9%AA%8C-01-%E5%85%A8%E7%BD%91%E5%A4%87%E4%BB%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><ol><li>客户端提前准备存放的备份的目录，目录规则如下:/backup/nfs_172.16.1.31_2020-05-02</li><li>客户端在本地打包备份(系统配置文件、应用配置等)拷贝至/backup/nfs_172.16.1.31_2020-05-02</li><li>客户端最后将备份的数据进行推送至备份服务器</li><li>客户端每天凌晨1点定时执行该脚本</li><li>客户端本地保留最近7天的数据, 避免浪费磁盘空间</li></ol><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><ol><li>服务端部署rsync，用于接收客户端推送过来的备份数据</li><li>服务端需要每天校验客户端推送过来的数据是否完整</li><li>服务端需要每天校验的结果通知给管理员</li><li>服务端仅保留6个月的备份数据,其余的全部删除</li></ol><h1 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h1><p>关于客户端和服务端的环境准备参看此篇博客</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><h2 id="客户端-1"><a href="#客户端-1" class="headerlink" title="客户端"></a>客户端</h2><ul><li><p>编写脚本</p><p><code>[root@nfs01 ~]# vim push_client_data.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1.定义变量</span></span><br><span class="line">SRC=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">ADDR=$(ifconfig eth1|awk <span class="string">&#x27;NR==2 &#123;print $2&#125;&#x27;</span>)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span>_<span class="variable">$&#123;ADDR&#125;</span>_<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"><span class="comment">#2.创建目录</span></span><br><span class="line">[ -d <span class="variable">$SRC</span>/<span class="variable">$DEST</span> ] || mkdir -p <span class="variable">$SRC</span>/<span class="variable">$DEST</span></span><br><span class="line"><span class="comment">#3.备份文件</span></span><br><span class="line"><span class="comment">#/usr/bin/cp -ar /etc/fstab /var/spool/cron/ /server/scripts $SRC/$DEST</span></span><br><span class="line"><span class="built_in">cd</span> / &amp;&amp; \</span><br><span class="line">[ -f <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/sys.tar.gz ] || tar czf <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/sys.tar.gz etc/fstab etc/passwd &amp;&amp; \</span><br><span class="line">[ -f <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/other.tar.gz ] || tar czf <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/other.tar.gz var/spool/cron/ server/scripts &amp;&amp; \</span><br><span class="line"><span class="comment">#4.使用md5打标记</span></span><br><span class="line">md5sum <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/*.tar.gz &gt; <span class="variable">$SRC</span>/<span class="variable">$DEST</span>/flag_<span class="variable">$DATE</span></span><br><span class="line"><span class="comment">#4.本地推送到备份服务器</span></span><br><span class="line"><span class="built_in">export</span> RSYNC_PASSWORD=123456</span><br><span class="line">rsync -avz <span class="variable">$SRC</span>/<span class="variable">$DEST</span> rsync_backup@172.16.0.41::backup</span><br><span class="line"><span class="comment">#5.保留本地最近7天的数据</span></span><br><span class="line">find <span class="variable">$SRC</span>/ -<span class="built_in">type</span> d -mtime +7|xargs rm -rf</span><br></pre></td></tr></table></figure></li><li><p>定时任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># crontab -e </span></span><br><span class="line"><span class="comment"># backup data</span></span><br><span class="line">0 0 * * *  /bin/sh /server/scripts/push_client_data.sh &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure></li></ul><h2 id="服务端-1"><a href="#服务端-1" class="headerlink" title="服务端"></a>服务端</h2><ul><li><p>编写脚本</p><p><code>[root@backup ~]# vim check_client_data.sh</code></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment">#1.定义变量</span></span><br><span class="line">SRC=/backup</span><br><span class="line">HOST=$(hostname)</span><br><span class="line">ADDR=$(ifconfig eth1|awk <span class="string">&#x27;NR==2 &#123;print $2&#125;&#x27;</span>)</span><br><span class="line">DATE=$(date +%F)</span><br><span class="line">DEST=<span class="variable">$&#123;HOST&#125;</span>_<span class="variable">$&#123;ADDR&#125;</span>_<span class="variable">$&#123;DATE&#125;</span></span><br><span class="line"><span class="comment">#1.使用md5进行校验，并保存校验的结果</span></span><br><span class="line">md5sum -c <span class="variable">$SRC</span>/*_<span class="variable">$DATE</span>/flag_<span class="variable">$DATE</span> &gt; <span class="variable">$SRC</span>/result_<span class="variable">$DATE</span></span><br><span class="line"><span class="comment">#2.将保存的结果文件发送给管理员</span></span><br><span class="line">mail -s <span class="string">&quot;Rsync Backup <span class="variable">$DATE</span>&quot;</span> xxx*@xxx.com &lt;<span class="variable">$SRC</span>/result_<span class="variable">$DATE</span></span><br><span class="line"><span class="comment">#3.保留最近180天的数据</span></span><br><span class="line">find <span class="variable">$SRC</span>/ -<span class="built_in">type</span> d -mtime +180|xargs rm -rf</span><br></pre></td></tr></table></figure></li><li><p>定时任务</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@nfs01 ~]<span class="comment"># crontab -e </span></span><br><span class="line">0 5 * * *  /bin/sh /server/scripts/check_client_data.sh &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 小实验 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 备份 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-13-CentOS7系统启动流程和Systemd</title>
      <link href="2020/05/04/Linux%E5%9F%BA%E7%A1%80-13-CentOS7%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8CSystemd/"/>
      <url>2020/05/04/Linux%E5%9F%BA%E7%A1%80-13-CentOS7%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%92%8CSystemd/</url>
      
        <content type="html"><![CDATA[<h1 id="内核"><a href="#内核" class="headerlink" title="内核"></a>内核</h1><h2 id="内核设计流派"><a href="#内核设计流派" class="headerlink" title="内核设计流派"></a>内核设计流派</h2><ul><li>单内核设计：把所有的功能集成与同一个程序；比如Linux</li><li>微内核设计：每种功能使用一个单独的子系统实现；比如Windows，Solaris</li></ul><h2 id="Linux内核特点"><a href="#Linux内核特点" class="headerlink" title="Linux内核特点"></a>Linux内核特点</h2><ul><li>支持模块化：.ko(ketnel object)</li><li>支持模块化运行时动态装载或卸载；</li><li>组成部分：<ul><li>核心文件：/boot/vmlinuz-VERSION-release</li><li>ramdisk：启动时划出内存中的某一空间当磁盘用，不是必须的<ul><li>CentOS 5：/boot/vmlinuz-VERSION-release.img</li><li>CentOS 6，7，8：/boot/initramfs-VERSION-release.img</li></ul></li><li>模块文件：/lib/modules/VERSION-release</li></ul></li></ul><h1 id="CentOS7启动流程"><a href="#CentOS7启动流程" class="headerlink" title="CentOS7启动流程"></a>CentOS7启动流程</h1><h2 id="1-POST加电自检"><a href="#1-POST加电自检" class="headerlink" title="1.POST加电自检"></a>1.POST加电自检</h2><ul><li>检测硬件设备是否正常能够运行(主板上ROM芯片上的BIOS程序实现)</li><li>BIOS程序能够检测CPU/Memory/硬盘/IO设备是否能够正常运行</li><li>如果是个人PC机，还会检测显示器</li><li>只要通电，CPU就会自动去加载ROM芯片上的BIOS程序，实现硬件设备初始化</li></ul><h2 id="2-Boot-Sequence-选择启动设备以加载MBR"><a href="#2-Boot-Sequence-选择启动设备以加载MBR" class="headerlink" title="2.Boot Sequence(选择启动设备以加载MBR)"></a>2.Boot Sequence(选择启动设备以加载MBR)</h2><ul><li>选择要启动的硬件设备，选择之后就开始读取这个设备位于MBR头里的BootLoader </li><li>根据BIOS中对启动顺序的设定，依次扫描引导设备</li><li>然后第一个被扫描到的具有引导程序(BootLoader)的设备会成为要启动的引导设备</li></ul><h2 id="3-加载BootLoader"><a href="#3-加载BootLoader" class="headerlink" title="3.加载BootLoader"></a>3.加载BootLoader</h2><ul><li><p>功能： </p><ul><li>BIOS通过读取并执行启动设备中的BootLoader</li><li>BootLoader会提供一个菜单给用户，让用户去选择要启动的系统或者不同的内核版本</li><li>用户将内核版本加载至MBR中的特定程序，接着将在RAM中解压展开，将系统控制权<br>交由给内核</li></ul></li><li><p>GRUB阶段: 是BootLoader中的一种，主要功能是实现加载内核</p><ul><li>stage1: 用于加载stage1.5阶段，目的是为了识别驱动stage2 (/boot/)所在分区的文件系统</li><li>stage1.5 ：加载stage2阶段所在分区的文件系统驱动，让stage1中BootLoader能识别stage2所在分区的文件系统</li><li>stage2： 存放在磁盘分区上，具体存放在/boot/grub目录中，主要用于加载内核文件以及ramdisk这个临时根文件系统</li></ul></li></ul><h2 id="4-Kernel初始化"><a href="#4-Kernel初始化" class="headerlink" title="4.Kernel初始化"></a>4.Kernel初始化</h2><ul><li>探测可识别的所有硬件设备；</li><li>加载硬件的驱动程序</li><li>以只读方式挂载根文件系统</li><li>运行用户空间中的第一个应用程序: /sbin/init(/sbin/systemd)(进程号为0)</li></ul><h2 id="5-管理用户空间服务进程"><a href="#5-管理用户空间服务进程" class="headerlink" title="5.管理用户空间服务进程"></a>5.管理用户空间服务进程</h2><ul><li>init初始化程序会根据系统上的配置文件执行一系列操作<br>(Centos5/6/7上关于Init的配置文件不一样，但是总体的启动流程是不变的)</li><li>根据Init配置文件设置默认运行级别<br>CentOS7： 初始化Init程序是systemd；配置文件为：<pre><code>a) /usr/lib/system/systemd/* b) /etc/systemd/system/* </code></pre></li><li>Note： Centos6 –&gt; Centos7  Init管理程序的变化-&gt; systemd (并行)</li></ul><hr><p><strong>总结</strong>:</p><ol><li><p>加电自检<br>  检查服务器硬件是否正常</p></li><li><p>MBR引导</p><p>  读取磁盘的MBR存储记录信息,引导系统启动</p></li><li><p>grup菜单<br>选择启动的内核/进行单用户模式重置密码</p></li><li><p>加载系统内核信息<br>可以更好的使用内核控制硬件    </p></li><li><p>系统的第一个进程运行起来 systemd (并行)<br>服务启动的时候,同时一起启动</p></li><li><p>读取系统启动文件<br>/etc/systemd/system/default.target</p></li><li><p>读取系统初始化文件<br>/usr/lib/systemd/system/sysinit.target</p></li><li><p>使服务可以开机自启动<br>/etc/systemd/system 加载此目录中的信息,实现服务开机自动启动</p></li><li><p>运行mingetty进程<br>显示开机登录信息界面</p></li></ol><h1 id="CentOS7之Systemd特性"><a href="#CentOS7之Systemd特性" class="headerlink" title="CentOS7之Systemd特性"></a>CentOS7之Systemd特性</h1><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><ul><li>系统引导实现服务运行并启动</li><li>按需激活进程</li><li>系统服务状态快照</li><li>基于依赖关系定义服务控制逻辑</li></ul><h2 id="核心概念：Unit"><a href="#核心概念：Unit" class="headerlink" title="核心概念：Unit"></a>核心概念：Unit</h2><p>unit由其相关配置文件进行标识和配置，文件中主要包含系统服务、监听socket、保存的系统快照以及其他与init相关的配置信息都会保存至：</p><ul><li>/usr/lib/systemd/system/ 每个服务最主要的启动脚本设置，类似于之前的/etc/init.d/</li><li>/run/systemd/system/ 系统执行过程中所产生的服务脚本，比上面目录优先运行</li><li>/etc/systemd/system/ 管理员建立的执行脚本，类似于/etc/rcN.d/Sxx的功能，比上面目录优先运行</li></ul><h2 id="Unit类型"><a href="#Unit类型" class="headerlink" title="Unit类型"></a>Unit类型</h2><p><code>systemctl -t help</code> 查看unit类型</p><ol><li>service unit: 文件扩展名为.service；用于定义系统服务<br><code>[root@test ~]# cat /usr/lib/systemd/system/chronyd.service</code> </li><li>Target unit: 文件扩展名为.target；用于模拟实现”运行级别”<br><code>[root@test ~]# cat /usr/lib/systemd/system/sockets.target</code></li><li>Device unit: 文件扩展名为.device；用于定义内核标识的设备</li><li>Mount unit: 文件扩展名为.mount; 用于定义文件系统挂载点</li><li>socket unit：文件扩展名为.socket；用于标识进程间通信的socket文件</li><li>Snapshot unit： 文件扩展名为.snapshot；用于管理系统快照</li><li>Swap unit： 文件扩展名为.swap；用于标识swap设备</li><li>Automount unit: 文件扩展名为..automount；管理自动挂载的文件系统</li><li>Path unit: 文件扩展名为.path; 用于定义文件系统中的一个文件或目录 </li></ol><h2 id="关键特性"><a href="#关键特性" class="headerlink" title="关键特性"></a>关键特性</h2><ul><li>基于socket的激活机制: socket与服务程序分离</li><li>基于device的激活机制： ….</li><li>基于path的激活机制</li><li>基于bus的激活机制</li><li>系统快照，保存各init的当前状态信息于持久化存储设备中</li><li>向后兼容 sysv/init 脚本</li></ul><h2 id="不兼容"><a href="#不兼容" class="headerlink" title="不兼容"></a>不兼容</h2><ul><li>systemctl的命令是固定不变的</li><li>非由systemd启动的服务，systemctl无法与之通信</li></ul><h2 id="运行级别：0-6"><a href="#运行级别：0-6" class="headerlink" title="运行级别：0-6"></a>运行级别：0-6</h2><ul><li>0: 关机</li><li>6：重启</li><li>1：单机用户</li><li>2：多用户，无网络连接</li><li>3：无图形化，多用户，网络连接</li><li>5：图形化，多用户，网络连接</li></ul><p><img src="https://s2.ax1x.com/2020/02/15/1zhBPP.png" alt="1zhBPP.png"></p><ul><li><p>target units：</p><ul><li>unit配置文件：.target</li><li><code>ls /usr/lib/systemd/system/*.targe</code></li><li><code>systemctl list-unit-files --type target --all</code></li></ul></li><li><p>运行级别：</p><ul><li>0 ==&gt; runlevel0.target, poweroff.target     关机</li><li>1 ==&gt; runlevel1.target, rescue.target         单用户模式</li><li>2 ==&gt; runlevel2.target, multi-user.target  多用户，无网络连接</li><li>3 ==&gt; runlevel3.target, multi-user.target  多用户，有网络连接</li><li>4 ==&gt; runlevel4.target, multi-user.target  保留</li><li>5 ==&gt; runlevel5.target, graphical.target    图形化，多用户，有网络连接</li><li>6 ==&gt; runlevel6.target, reboot.target        重启</li></ul></li><li><p>查看依赖性：<br><code>systemctl list-dependencies graphical.target</code></p></li><li><p>级别切换：init N ==&gt; systemctl isolate name.target</p><ul><li><code>systemctl isolate multi-user.target</code><br>注：只有/lib/systemd/system/*.target文件中AllowIsolate=yes 才能切换(修改文件需执行systemctl daemon-reload才能生效)</li></ul></li><li><p>查看target：</p><ul><li><code>runlevel</code> </li><li><code>who -r</code></li><li><code>systemctl list-units --type target</code></li></ul></li><li><p>获取默认运行级别：</p><ul><li><code>/etc/inittab ==&gt; systemctl get-default</code></li></ul></li><li><p>修改默认级别：</p><ul><li><p><code>/etc/inittab</code> ==&gt; <code>systemctl set-default name.target</code></p></li><li><p><code>systemctl set-default multi-user.target</code></p></li><li><p><code>ls –l /etc/systemd/system/default.target</code></p></li></ul></li></ul><h2 id="systemctl命令"><a href="#systemctl命令" class="headerlink" title="systemctl命令"></a>systemctl命令</h2><p><strong>用于管理系统服务</strong></p><p><code>[root@test ~]# systemctl --help</code><br>systemctl [OPTIONS…] {COMMAND} …</p><ul><li>启动服务： <code>systemctl start name.service </code></li><li>重启服务： <code>systemctl restart name.service</code></li><li>停止服务： <code>systemctl stop name.service</code> </li><li>开机自启： <code>systemctl enable name.service</code> </li><li>开机不自启： <code>systemctl disable name.service</code> </li><li>禁止某服务设定开机自启：<code>systemctl mask name.service</code></li><li>取消此禁止：<code>systemctl unmask name.service</code></li><li>重载或者重启服务： <code>systemctl reload-or-restart name.service</code></li><li>条件式重启：<code>systemctl try-restart name.service</code></li><li>重载或者条件式重启服务： <code>systemctl try-reload-or-restart name.service</code></li><li>查看服务状态： <code>systemctl status name.service</code><ul><li>loaded Unit配置文件已处理</li><li>active(running) 一次或多次持续处理的运行</li><li>active(exited) 成功完成一次性的配置</li><li>active(waiting) 运行中，等待一个事件</li><li>inactive 不运行</li><li>enabled 开机启动</li><li>disabled 开机不启动</li><li>static 开机不启动，但可被另一个启用的服务激活</li></ul></li><li>查看某个服务当前激活与否状态： <code>systemctl is-active chronyd.service</code></li><li>查看某个服务是否开机启动： <code>systemctl is-enabled chronyd.service</code></li><li>查看所有已经激活的服务： <code>systemctl list-units --type service</code></li><li>查看所有服务：<code>systemctl list-units --type service --all</code></li><li>列出失败的服务：<code>systemctl --failed --type=service</code></li><li>列出依赖的单元：<code>systemctl list-dependencies name.service</code></li></ul><p><strong>运行级别相关操作：</strong></p><ul><li>查看运行级别： <code>runlevel</code> == <code>systemctl list-units --type target</code></li><li>切换运行级别： <code>init N</code> == <code>sytemctl isolate name.target</code> </li><li>获取默认运行级别： <code>systemctl get-default</code></li><li>设置默认运行级别： <code>systemctl set-default TARGET.target</code></li><li>切换紧急救援模式： <code>systemctl rescue</code>  </li><li>切换救援模式： <code>systemctl emergency</code>   真正的最简洁的系统启动模式</li></ul><p><strong>其他常用命令：</strong></p><ul><li><p>关机： <code>systemctl halt</code> | <code>systemctl poweroff</code> </p></li><li><p>重启： <code>sytemctl reboot</code></p></li><li><p>挂起： <code>systemctl suspend</code> </p></li><li><p>快照： <code>systemctl hibernate</code> </p></li><li><p>快照并挂起： <code>systemctl hybride-sleep</code></p><p>**Note:**<a href="https://www.cnblogs.com/tangxuliang/p/9242385.html">https://www.cnblogs.com/tangxuliang/p/9242385.html</a></p></li></ul><p><strong>service unit file：</strong></p><p>文件通常由三部分组成：</p><ul><li>[Unit]：定义与Unit类型无关的通用选项；用于提供unit的描述信息、unit行为及依赖关系等</li><li>[Service]：与特定类型相关的专用选项；此处为Service类型</li><li>[Install]：定义由”systemctl enable”以及”systemctl disable”命令在实现服务启用或禁用时用到的一些选项</li></ul><p>Unit段的常用选项:</p><ul><li>Descrlption :描述信息;意义性描述;</li><li>After :定义unit的启动次序;表示当前unit应该晚于哪些unit启动;其功能与Before相反;</li><li>Requles :依赖到的其它units ;强依赖,被依赖的units无法激活时,当前unit即无法激活;</li><li>Wants :依赖到的其它units ;弱依赖;</li><li>Conflicts :定义units间的冲突关系; </li></ul><p>其余的自行百度，了解即可</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul><li><p>显示所有单元状态<br><code>systemctl 或 systemctl list-units</code></p></li><li><p>只显示服务单元的状态<br><code>systemctl --type=service</code></p></li><li><p>显示sshd服务单元<br><code>systemctl  status sshd.service</code></p></li><li><p>验证sshd服务当前是否活动<br><code>systemctl is-active sshd</code></p></li><li><p>启动，停止和重启sshd服务<br><code>systemctl start sshd.service</code><br><code>systemctl stop sshd.service</code><br><code>systemctl restart sshd.service</code></p></li><li><p>重新加载配置<br><code>systemctl reload sshd.service</code></p></li><li><p>列出活动状态的所有服务单元<br><code>systemctl list-units --type=service</code></p></li><li><p>列出所有服务单元<br><code>systemctl list-units --type=service --all</code></p></li><li><p>查看服务单元的启用和禁用状态<br><code>systemctl list-unit-files --type=service</code></p></li><li><p>列出失败的服务<br><code>systemctl --failed --type=service</code></p></li><li><p>列出依赖的单元<br><code>systemctl list-dependencies sshd</code></p></li><li><p>验证sshd服务是否开机启动<br><code>systemctl is-enabled sshd</code></p></li><li><p>禁用network，使之不能自动启动,但手动可以<br><code>systemctl disable network</code></p></li><li><p>启用network<br><code>systemctl enable network</code></p></li><li><p>禁用network，使之不能手动或自动启动<br><code>systemctl mask network</code></p></li><li><p>启用network<br><code>systemctl unmask network</code></p></li></ul><h1 id="启动排错"><a href="#启动排错" class="headerlink" title="启动排错"></a>启动排错</h1><ul><li>文件系统损坏<br>先尝试自动修复，失败则进入emergency shell，提示用户修复</li><li>在/etc/fstab不存在对应的设备和UUID<br>等一段时间，如不可用，进入emergency shell</li><li>在/etc/fstab不存在对应挂载点<br>systemd 尝试创建挂载点，否则提示进入emergency shell.</li><li>在/etc/fstab不正确的挂载选项<br>提示进入emergency shell</li></ul><h1 id="破解CentOS7的root口令"><a href="#破解CentOS7的root口令" class="headerlink" title="破解CentOS7的root口令"></a>破解CentOS7的root口令</h1><h2 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h2><ol><li>启动时任意键暂停启动</li><li>按e键进入编辑模式</li><li>将光标移动linux16开始的行，添加内核参数rd.break</li><li>按ctrl-x启动</li><li><code>mount –o remount,rw /sysroot</code></li><li><code>chroot /sysroot</code></li><li><code>passwd root</code></li><li><code>touch /.autorelabel</code></li><li><code>exit</code></li><li><code>reboot</code></li></ol><h2 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h2><ol><li>启动时任意键暂停启动</li><li>按e键进入编辑模式</li><li>将光标移动linux16开始的行，改为rw init=/sysroot/bin/sh</li><li>按ctrl-x启动</li><li><code>chroot /sysroot</code></li><li><code>passwd root</code></li><li><code>touch /.autorelabel</code></li><li><code>exit</code></li><li><code>reboot</code></li></ol><h1 id="修复GRUB2"><a href="#修复GRUB2" class="headerlink" title="修复GRUB2"></a>修复GRUB2</h1><ul><li>GRUB“the Grand Unified Bootloader”<br>引导提示时可以使用命令行界面<br>可从文件系统引导</li><li>主要配置文件 /boot/grub2/grub.cfg</li><li>修复配置文件<br>grub2-mkconfig &gt; /boot/grub2/grub.cfg</li><li>修复grub<br>grub2-install /dev/sda  BIOS环境<br>grub2-install UEFI环境</li><li>调整默认启动内核<br>vim /etc/default/grub<br>GRUB_DEFAULT=0</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-12-网络协议和管理</title>
      <link href="2020/05/04/Linux%E5%9F%BA%E7%A1%80-12-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%A1%E7%90%86/"/>
      <url>2020/05/04/Linux%E5%9F%BA%E7%A1%80-12-%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE%E5%92%8C%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430204659095.png" alt="image-20200430204659095"></p><h2 id="资源共享的功能和优点"><a href="#资源共享的功能和优点" class="headerlink" title="资源共享的功能和优点"></a>资源共享的功能和优点</h2><ul><li><p>数据和应用程序</p></li><li><p>资源</p></li><li><p>网络存储</p></li><li><p>备份设备</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430204830733.png"></p></li></ul><h2 id="常见的网络物理组件"><a href="#常见的网络物理组件" class="headerlink" title="常见的网络物理组件"></a>常见的网络物理组件</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430204925888.png" alt="image-20200430204925888"></p><h2 id="网络应用程序"><a href="#网络应用程序" class="headerlink" title="网络应用程序"></a>网络应用程序</h2><ul><li>Web 浏览器（Chrome、IE、Firefox等）</li><li>即时消息（QQ、微信、钉钉等）</li><li>电子邮件（Outlook、foxmail 等）</li><li>协作（视频会议、VNC、Netmeeting、WebEx 等）</li><li>web网络服务（apache，nginx，IIS）</li><li>文件网络服务（ftp ，nfs，samba）</li><li>数据库服务（ MySQL，MariaDB，MongoDB)</li><li>中间件服务（Tomcat，JBoss）</li><li>安全服务（Netfilter）</li></ul><h2 id="用户应用程序对网络的影响"><a href="#用户应用程序对网络的影响" class="headerlink" title="用户应用程序对网络的影响"></a>用户应用程序对网络的影响</h2><ul><li><p>批处理应用程序</p><ul><li>FTP、TFTP、库存更新</li><li>无需直接人工交互</li><li>带宽很重要，但并非关键性因素</li></ul></li><li><p>交互式应用程序</p><ul><li>库存查询、数据库更新</li><li>人机交互</li><li>因为用户需等待响应，所以响应时间很重要， 但并非关键性因素，除非要等待很长时间</li></ul></li><li><p>实时应用程序</p><ul><li>VoIP、视频</li><li>人与人的交互</li><li>端到端的延时至关重要</li></ul></li></ul><h2 id="网络特征"><a href="#网络特征" class="headerlink" title="网络特征"></a>网络特征</h2><ul><li>速度</li><li>成本</li><li>安全性</li><li>可用性</li><li>可扩展性</li><li>可靠性</li><li>拓扑</li></ul><h2 id="带宽"><a href="#带宽" class="headerlink" title="带宽"></a>带宽</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205204273.png" alt="image-20200430205204273"></p><h2 id="物理拓扑"><a href="#物理拓扑" class="headerlink" title="物理拓扑"></a>物理拓扑</h2><h3 id="总线拓扑"><a href="#总线拓扑" class="headerlink" title="总线拓扑"></a>总线拓扑</h3><ul><li><p>所有设备均可接收信号</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205415000.png" alt="image-20200430205415000"></p></li></ul><h3 id="星型拓扑"><a href="#星型拓扑" class="headerlink" title="星型拓扑"></a>星型拓扑</h3><ul><li><p>通过中心点传输</p></li><li><p>单一故障点</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205500887.png" alt="image-20200430205500887"></p></li></ul><h3 id="扩展星型拓扑"><a href="#扩展星型拓扑" class="headerlink" title="扩展星型拓扑"></a>扩展星型拓扑</h3><ul><li><p>比星型拓扑的复原能力更强</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205546401.png" alt="image-20200430205546401"></p></li></ul><h3 id="环拓扑"><a href="#环拓扑" class="headerlink" title="环拓扑"></a>环拓扑</h3><ul><li><p>信号绕环传输</p></li><li><p>单一故障点</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205616964.png" alt="image-20200430205616964"></p></li></ul><h3 id="双环拓扑"><a href="#双环拓扑" class="headerlink" title="双环拓扑"></a>双环拓扑</h3><ul><li><p>信号沿相反方向传输</p></li><li><p>比单环的复原能力更强</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205646574.png" alt="image-20200430205646574"></p></li></ul><h3 id="全网状拓扑"><a href="#全网状拓扑" class="headerlink" title="全网状拓扑"></a>全网状拓扑</h3><ul><li><p>容错能力强</p></li><li><p>实施成本高</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205712988.png" alt="image-20200430205712988"></p></li></ul><h3 id="部分网状拓扑"><a href="#部分网状拓扑" class="headerlink" title="部分网状拓扑"></a>部分网状拓扑</h3><ul><li><p>在容错能力与成本之间寻求平衡</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205746284.png" alt="image-20200430205746284"></p></li></ul><h2 id="逻辑拓扑"><a href="#逻辑拓扑" class="headerlink" title="逻辑拓扑"></a>逻辑拓扑</h2><ul><li><p>逻辑拓扑描述了信息在网络中流动的方式</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205817202.png" alt="image-20200430205817202"></p></li></ul><h1 id="OSI七层模型"><a href="#OSI七层模型" class="headerlink" title="OSI七层模型"></a>OSI七层模型</h1><ul><li><p>降低复杂性</p></li><li><p>标准化接口</p></li><li><p>简化模块化设计</p></li><li><p>确保技术的互操作性</p></li><li><p>加快发展速度</p></li><li><p>简化教学</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205927939.png" alt="image-20200430205927939"></p></li></ul><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430205950924.png" alt="image-20200430205950924"></p><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210011759.png" alt="image-20200430210011759"></p><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210025297.png" alt="image-20200430210025297"></p><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210038141.png" alt="image-20200430210038141"></p><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210051138.png" alt="image-20200430210051138"></p><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210102206.png" alt="image-20200430210102206"></p><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210122192.png" alt="image-20200430210122192"></p><h2 id="数据封装"><a href="#数据封装" class="headerlink" title="数据封装"></a>数据封装</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210151637.png" alt="image-20200430210151637"></p><h2 id="数据解封"><a href="#数据解封" class="headerlink" title="数据解封"></a>数据解封</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210210597.png" alt="image-20200430210210597"></p><h2 id="对等通信"><a href="#对等通信" class="headerlink" title="对等通信"></a>对等通信</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210230017.png" alt="image-20200430210230017"></p><h2 id="PDU"><a href="#PDU" class="headerlink" title="PDU"></a>PDU</h2><ul><li>PDU: Protocol Data Unit,协议数据单元是指对等层次之间传递的数据单位</li><li>物理层的 PDU是数据位 bit</li><li>数据链路层的 PDU是数据帧 frame</li><li>网络层的PDU是数据包 packet</li><li>传输层的 PDU是数据段 segment</li><li>其他更高层次的PDU是消息 message</li></ul><h2 id="三种通信模式"><a href="#三种通信模式" class="headerlink" title="三种通信模式"></a>三种通信模式</h2><h3 id="单播"><a href="#单播" class="headerlink" title="单播"></a>单播</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210425541.png" alt="image-20200430210425541"></p><h3 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210442919.png" alt="image-20200430210442919"></p><h3 id="组播"><a href="#组播" class="headerlink" title="组播"></a>组播</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210504327.png" alt="image-20200430210504327"></p><h1 id="TCP-IP协议栈"><a href="#TCP-IP协议栈" class="headerlink" title="TCP/IP协议栈"></a>TCP/IP协议栈</h1><ul><li><p>Transmission Control Protocol/Internet Protocol 传输控制协议/因特网互联协议</p></li><li><p>TCP/IP是一个Protocol Stack，包括TCP、IP、UDP、ICMP、RIP、TELNET、FTP、SMTP、ARP等许多协议</p></li><li><p>最早发源于美国国防部（缩写为DoD）的因特网的前身 ARPA网项目，1983年1月1日，TCP/IP取代了旧的网络 控制协议NCP，成为今天的互联网和局域网的基石和标 准,由互联网工程任务组负责维护</p></li><li><p>共定义了四层</p></li><li><p>和OSI参考模型的分层有对应关系</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210716515.png" alt="image-20200430210716515"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210733256.png" alt="image-20200430210733256"></p></li></ul><h2 id="应用层-1"><a href="#应用层-1" class="headerlink" title="应用层"></a>应用层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210809182.png" alt="image-20200430210809182"></p><h2 id="传输层-1"><a href="#传输层-1" class="headerlink" title="传输层"></a>传输层</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430210831330.png" alt="image-20200430210831330"></p><h2 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h2><h3 id="TCP特性"><a href="#TCP特性" class="headerlink" title="TCP特性"></a>TCP特性</h3><ul><li>工作在传输层</li><li>面向连接协议</li><li>全双工协议</li><li>半关闭</li><li>错误检查</li><li>将数据打包成段，排序</li><li>确认机制</li><li>数据恢复，重传</li><li>流量控制，滑动窗口</li><li>拥塞控制，慢启动和拥塞避免算法</li><li>更多关于tcp的内核参数，可参看man 7 tcp</li></ul><h3 id="TCP包头"><a href="#TCP包头" class="headerlink" title="TCP包头"></a>TCP包头</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430211125437.png" alt="image-20200430211125437"></p><ul><li><p>源端口、目标端口：计算机上的进程要和其他进程通信是要通过计算机端口的， 而一个计算机端口某个时刻只能被一个进程占用，所以通过指定源端口和目标 端口，就可以知道是哪两个进程需要通信。源端口、目标端口是用16位表示的， 可推算计算机的端口个数为2^16个</p></li><li><p>序列号：表示本报文段所发送数据的第一个字节的编号。在TCP连接中所传送的 字节流的每一个字节都会按顺序编号。由于序列号由32位表示，所以每2^32个 字节，就会出现序列号回绕，再次从 0 开始</p></li><li><p>确认号：表示接收方期望收到发送方下一个报文段的第一个字节数据的编号。 也就是告诉发送方：我希望你（指发送方）下次发送的数据的第一个字节数据 的编号为此确认号</p></li><li><p>数据偏移：表示TCP报文段的首部长度，共4位，由于TCP首部包含一个长度可 变的选项部分，需要指定这个TCP报文段到底有多长。它指出 TCP 报文段的数 据起始处距离 TCP 报文段的起始处有多远。该字段的单位是32位(即4个字节为 计算单位），4位二进制最大表示15，所以数据偏移也就是TCP首部最大60字节</p></li><li><p>URG：表示本报文段中发送的数据是否包含紧急数据。后面的紧急指针字段（urgent pointer）只有当URG=1时才有效</p></li><li><p>ACK：表示是否前面确认号字段是否有效。只有当ACK=1时，前面的确认号字段才有效。TCP规定，连接建立后，ACK必须为1,带ACK标志的TCP报文段称为确认报文段</p></li><li><p>PSH：提示接收端应用程序应该立即从TCP接收缓冲区中读走数据，为接收后续数据腾出空 间。如果为1，则表示对方应当立即把数据提交给上层应用，而不是缓存起来，如果应用程序 不将接收到的数据读走，就会一直停留在TCP接收缓冲区中</p></li><li><p>RST：如果收到一个RST=1的报文，说明与主机的连接出现了严重错误（如主机崩溃），必 须释放连接，然后再重新建立连接。或者说明上次发送给主机的数据有问题，主机拒绝响应， 带RST标志的TCP报文段称为复位报文段</p></li><li><p>SYN：在建立连接时使用，用来同步序号。当SYN=1，ACK=0时，表示这是一个请求建立连 接的报文段；当SYN=1，ACK=1时，表示对方同意建立连接。SYN=1，说明这是一个请求 建立连接或同意建立连接的报文。只有在前两次握手中SYN才置为1，带SYN标志的TCP报文 段称为同步报文段</p></li><li><p>FIN：表示通知对方本端要关闭连接了，标记数据是否发送完毕。如果FIN=1，即告诉对方： “我的数据已经发送完毕，你可以释放连接了”，带FIN标志的TCP报文段称为结束报文段</p></li><li><p>窗口大小：表示现在允许对方发送的数据量，也就是告诉对方，从本报文段 的确认号开始允许对方发送的数据量，达到此值，需要ACK确认后才能再继 续传送后面数据，由Window size value * Window size scaling factor（此值在三次握手阶段TCP选项Window scale协商得到）得出此值</p></li><li><p>校验和：提供额外的可靠性</p></li><li><p>紧急指针：标记紧急数据在数据字段中的位置</p></li><li><p>选项部分：其最大长度可根据TCP首部长度进行推算。TCP首部长度用4位表 示，选项部分最长为：(2^4-1)*4-20=40字节</p><p>常见选项：</p><ul><li>最大报文段长度：Maxium Segment Size，MSS，通常1460字节</li><li>窗口扩大：Window Scale</li><li>时间戳： Timestamps</li></ul></li></ul><h4 id="TCP包头选项"><a href="#TCP包头选项" class="headerlink" title="TCP包头选项"></a>TCP包头选项</h4><ol><li><p>最大报文段长度MSS（Maximum Segment Size）</p><p>指明自己期望对方发送TCP报文段时那个数据字段的长度。比如：1460字节。数 据字段的长度加上TCP首部的长度才等于整个TCP报文段的长度。MSS不宜设的太 大也不宜设的太小。若选择太小，极端情况下，TCP报文段只含有1字节数据，在 IP层传输的数据报的开销至少有40字节（包括TCP报文段的首部和IP数据报的首 部）。这样，网络的利用率就不会超过1/41。若TCP报文段非常长，那么在IP层传 输时就有可能要分解成多个短数据报片。在终点要把收到的各个短数据报片装配成 原来的TCP报文段。当传输出错时还要进行重传，这些也都会使开销增大。因此 MSS应尽可能大，只要在IP层传输时不需要再分片就行。在连接建立过程中，双 方都把自己能够支持的MSS写入这一字段。 MSS只出现在SYN报文中。即：MSS 出现在SYN=1的报文段中</p><p>MTU和MSS值的关系：MTU=MSS+IP Header+TCP Header 通信双方最终的MSS值=较小MTU-IP Header-TCP Header</p></li><li><p>窗口扩大</p><p>为了扩大窗口，由于TCP首部的窗口大小字段长度是16位，所以其表示的最大数是 65535。但是随着时延和带宽比较大的通信产生（如卫星通信），需要更大的窗口 来满足性能和吞吐率，所以产生了这个窗口扩大选项</p></li><li><p>时间戳</p><p>可以用来计算RTT(往返时间)，发送方发送TCP报文时，把当前的时间值放入时间戳字段，接收方收到后发送确认报文时，把这个时间戳字段的值复制到确认报文中， 当发送方收到确认报文后即可计算出RTT。也可以用来防止回绕序号PAWS，也可以说可以用来区分相同序列号的不同报文。因为序列号用32为表示，每2^32个序 列号就会产生回绕，那么使用时间戳字段就很容易区分相同序列号的不同报文</p></li></ol><h3 id="TCP协议PORT"><a href="#TCP协议PORT" class="headerlink" title="TCP协议PORT"></a>TCP协议PORT</h3><ul><li><p>传输层通过port号，确定应用层协议</p></li><li><p>Port number:</p></li><li><p>tcp：传输控制协议，面向连接的协议；通信前需要建立虚拟链路；结束后拆除链路</p><ul><li>0-65535</li></ul></li><li><p>udp：User Datagram Protocol，无连接的协议</p><ul><li>0-65535</li></ul></li><li><p>IANA:互联网数字分配机构（负责域名，数字资源，协议分配）</p><ul><li><p>0-1023：系统端口或特权端口(仅管理员可用) ，众所周知，永久的分配给固定的 系统应用使用，22/tcp(ssh), 80/tcp(http), 443/tcp(https)</p></li><li><p>1024-49151：用户端口或注册端口，但要求并不严格，分配给程序注册为某应 用使用，1433/tcp(SqlServer), 1521/tcp(oracle),3306/tcp(mysql),11211/tcp/udp (memcached)</p></li><li><p>49152-65535：动态端口或私有端口，客户端程序随机使用的端口</p></li><li><p>其范围的定义：/proc/sys/net/ipv4/ip_local_port_range</p></li></ul></li></ul><h3 id="TCP序列号和确认号"><a href="#TCP序列号和确认号" class="headerlink" title="TCP序列号和确认号"></a>TCP序列号和确认号</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430211955366.png" alt="image-20200430211955366"></p><h3 id="TCP确认"><a href="#TCP确认" class="headerlink" title="TCP确认"></a>TCP确认</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212053372.png" alt="image-20200430212053372"></p><h4 id="固定窗口"><a href="#固定窗口" class="headerlink" title="固定窗口"></a>固定窗口</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212111105.png" alt="image-20200430212111105"></p><h4 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212129297.png" alt="image-20200430212129297"></p><h3 id="TCP连接"><a href="#TCP连接" class="headerlink" title="TCP连接"></a>TCP连接</h3><h4 id="TCP三次握手"><a href="#TCP三次握手" class="headerlink" title="TCP三次握手"></a>TCP三次握手</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212223778.png" alt="image-20200430212223778"></p><h4 id="TCP四次挥手"><a href="#TCP四次挥手" class="headerlink" title="TCP四次挥手"></a>TCP四次挥手</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212241355.png" alt="image-20200430212241355"></p><h3 id="TCP状态"><a href="#TCP状态" class="headerlink" title="TCP状态"></a>TCP状态</h3><ul><li><p>CLOSED 没有任何连接状态</p></li><li><p>LISTEN 侦听状态，等待来自远方TCP端口的连接请求</p></li><li><p>SYN-SENT 在发送连接请求后，等待对方确认</p></li><li><p>SYN-RECEIVED 在收到和发送一个连接请求后，等待对方确认</p></li><li><p>ESTABLISHED 代表传输连接建立，双方进入数据传送状态</p></li><li><p>FIN-WAIT-1 主动关闭,主机已发送关闭连接请求，等待对方确认</p></li><li><p>FIN-WAIT-2 主动关闭,主机已收到对方关闭传输连接确认，等待对方发送关闭 传输连接请求</p></li><li><p>TIME-WAIT 完成双向传输连接关闭，等待所有分组消失</p></li><li><p>CLOSE-WAIT 被动关闭,收到对方发来的关闭连接请求，并已确认</p></li><li><p>LAST-ACK 被动关闭,等待最后一个关闭传输连接确认，并等待所有分组消失</p></li><li><p>CLOSING 双方同时尝试关闭传输连接，等待对方确认</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1581774600666-103c0662-659c-4f27-9fda-ab215f3f7ace.jpeg" alt="1581774600666-103c0662-659c-4f27-9fda-ab215f3f7ace"></p></li></ul><h4 id="客户机端的三次握手和四次挥手"><a href="#客户机端的三次握手和四次挥手" class="headerlink" title="客户机端的三次握手和四次挥手"></a>客户机端的三次握手和四次挥手</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212614641.png" alt="image-20200430212614641"></p><h4 id="服务器端的三次握手和四次挥手"><a href="#服务器端的三次握手和四次挥手" class="headerlink" title="服务器端的三次握手和四次挥手"></a>服务器端的三次握手和四次挥手</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212632965.png" alt="image-20200430212632965"></p><h4 id="sync半连接和accept全连接队列"><a href="#sync半连接和accept全连接队列" class="headerlink" title="sync半连接和accept全连接队列"></a>sync半连接和accept全连接队列</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430212712062.png" alt="image-20200430212712062"></p><ul><li>ss –lnt</li><li>/proc/sys/net/ipv4/tcp_max_syn_backlog 未完成连接队列大小，建议调整大小为1024以上</li><li>/proc/sys/net/core/somaxconn 完成连接队列大小，建议调整大小为1024以上</li></ul><h3 id="TCP超时重传"><a href="#TCP超时重传" class="headerlink" title="TCP超时重传"></a>TCP超时重传</h3><ul><li>异常网络状况下（开始出现超时或丢包），TCP控制数据传输以保证其承诺的可靠服务</li><li>TCP服务必须能够重传超时时间内未收到确认的TCP报文段。为此，TCP模块为 每个TCP报文段都维护一个重传定时器，该定时器在TCP报文段第一次被发送时 启动。如果超时时间内未收到接收方的应答，TCP模块将重传TCP报文段并重置 定时器。至于下次重传的超时时间如何选择，以及最多执行多少次重传，就是 TCP的重传策略</li><li>与TCP超时重传相关的两个内核参数：</li><li>/proc/sys/net/ipv4/tcp_retries1，指定在底层IP接管之前TCP最少执行的重传次数，默认值是3</li><li>/proc/sys/net/ipv4/tcp_retries2，指定连接放弃前TCP最多可以执行的重传次 数，默认值15（一般对应13～30min）</li></ul><h3 id="拥塞控制"><a href="#拥塞控制" class="headerlink" title="拥塞控制"></a>拥塞控制</h3><ul><li>网络中的带宽、交换结点中的缓存和处理机等，都是网络的资源。在某段时间， 若对网络中某一资源的需求超过了该资源所能提供的可承受的能力，网络的性 能就会变坏。此情况称为拥塞</li><li>TCP为提高网络利用率，降低丢包率，并保证网络资源对每条数据流的公平性。 即所谓的拥塞控制</li><li>TCP拥塞控制的标准文档是RFC 5681，其中详细介绍了拥塞控制的四个部分： 慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）。拥塞控制算法在Linux下有多种实 现，比如reno算法、vegas算法和cubic算法等。它们或者部分或者全部实现了 上述四个部分</li><li>当前所使用的拥塞控制算法法<ul><li>/proc/sys/net/ipv4/tcp_congestion_control</li></ul></li></ul><h2 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h2><ul><li>工作在传输层</li><li>提供不可靠的网络访问</li><li>非面向连接协议</li><li>有限的错误检查</li><li>传输性能高</li><li>无数据恢复特性</li><li>更多关于udp的内核参数，可参看man 7 udp</li></ul><h3 id="UDP包头"><a href="#UDP包头" class="headerlink" title="UDP包头"></a>UDP包头</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430213121785.png" alt="image-20200430213121785"></p><h3 id="Internet层"><a href="#Internet层" class="headerlink" title="Internet层"></a>Internet层</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430213223429.png" alt="image-20200430213223429"></p><h2 id="Internet协议特征"><a href="#Internet协议特征" class="headerlink" title="Internet协议特征"></a>Internet协议特征</h2><ul><li>运行于 OSI 网络层</li><li>面向无连接的协议</li><li>独立处理数据包</li><li>分层编址</li><li>尽力而为传输</li><li>无数据恢复功能</li></ul><h3 id="IP-PDU报头"><a href="#IP-PDU报头" class="headerlink" title="IP PDU报头"></a>IP PDU报头</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430213720520.png" alt="image-20200430213720520"></p><ul><li>版本:占4位,指 IP 协议的版本目前的IP协议版本号为4</li><li>首部长度:占4位,可表示的最大数值是15个单位，一个单位为4字节，因此IP 的 首部长度的最大值是60字节</li><li>区分服务:占8位,用来获得更好的服务,在旧标准中叫做服务类型,但实际上一直未 被使用过.后改名为区分服务.只有在使用区分服务(DiffServ)时,这个字段才起作 用.一般的情况下不使用</li><li>总长度:占16位,指首部和数据之和的长度,单位为字节,因此数据报的最大长度为 65535 字节.总长度必须不超过最大传送单元 MTU</li><li>标识:占16位,它是一个计数器,通常，每发送一个报文，该值会加1， 也用于数 据包分片，在同一个包的若干分片中，该值是相同的</li><li>标志(flag):占3位,目前只有后两位有意义</li><li>DF： Don’t Fragment 中间的一位，只有当 DF=0 时才允许分片</li><li>MF： More Fragment 最后一位，MF=1表示后面还有分片,MF=0 表示最后 一个分片</li><li>片偏移:占13位,指较长的分组在分片后，该分片在原分组中的相对位置.片偏移 以8个字节为偏移单位</li><li>生存时间:占8位,记为TTL (Time To Live) 数据报在网络中可通过的路由器数的 最大值,TTL 字段是由发送端初始设置一个 8 bit字段.推荐的初始值由分配数字 RFC 指定,当前值为 64.发送 ICMP 回显应答时经常把 TTL 设为最大值 255</li><li>协议:占8位,指出此数据报携带的数据使用何种协议以便目的主机的IP层将数据 部分上交给哪个处理过程, 1表示为 ICMP 协议, 2表示为 IGMP 协议, 6表示为 TCP 协议, 17表示为 UDP 协议</li><li>首部检验和:占16位,只检验数据报的首部不检验数据部分.这里不采用 CRC 检验码而采用简单的计算方法</li><li>源地址和目的地址:都各占4字节,分别记录源地址和目的地址</li></ul><h3 id="主机到主机的包传递"><a href="#主机到主机的包传递" class="headerlink" title="主机到主机的包传递"></a>主机到主机的包传递</h3><ol><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430213935873.png" alt="image-20200430213935873"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430213953204.png" alt="image-20200430213953204"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214005334.png" alt="image-20200430214005334"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214017979.png" alt="image-20200430214017979"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214028510.png" alt="image-20200430214028510"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214041506.png" alt="image-20200430214041506"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214052504.png" alt="image-20200430214052504"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214106027.png" alt="image-20200430214106027"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214117350.png" alt="image-20200430214117350"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214129296.png" alt="image-20200430214129296"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214140533.png" alt="image-20200430214140533"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214152267.png" alt="image-20200430214152267"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214204387.png" alt="image-20200430214204387"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214213919.png" alt="image-20200430214213919"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214224125.png" alt="image-20200430214224125"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214232837.png" alt="image-20200430214232837"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214246439.png" alt="image-20200430214246439"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214258471.png" alt="image-20200430214258471"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214309147.png" alt="image-20200430214309147"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214320025.png" alt="image-20200430214320025"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214329050.png" alt="image-20200430214329050"></p></li><li><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214338957.png" alt="image-20200430214338957"></p></li></ol><h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><ul><li>可唯一标识 IP 网络中的每台设备</li><li>每台主机（计算机、网络设备、外围设备）必须具有唯一的地址</li><li>IP地址由两部分组成<ul><li>网络ID：<ul><li>标识网络</li><li>每个网段分配一个网络ID</li></ul></li><li>主机 ID：<ul><li>标识单个主机</li><li>由组织分配给各设备</li></ul></li></ul></li></ul><p>IPv4地址格式：点分十进制</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214516699.png" alt="image-20200430214516699"></p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><ul><li><p>A类：</p><ul><li>0 000 0000 - 0 111 1111: 1-127</li><li>网络数：126, 127</li><li>每个网络中的主机数：2^24-2 </li><li>默认子网掩码：255.0.0.0</li><li>私网地址：10.0.0.0</li></ul></li><li><p>B类：</p><ul><li>10 00 0000 - 10 11 1111：128-191</li><li>网络数：2^14</li><li>每个网络中的主机数：2^16-2 </li><li>默认子网掩码：255.255.0.0</li><li>私网地址：172.16.0.0-172.31.0.0</li></ul></li><li><p>C类：</p><ul><li>110 0 0000 - 110 1 1111: 192-223</li><li>网络数：2^21</li><li>每个网络中的主机数：2^8-2 </li><li>默认子网掩码：255.255.255.0</li><li>私网地址：192.168.0.0-192.168.255.0</li></ul></li><li><p>D类：组播</p><ul><li>1110 0000 - 1110 1111: 224-239</li></ul></li><li><p>E类：保留未使用</p><ul><li>240-255</li></ul></li></ul><h4 id="公有IP地址"><a href="#公有IP地址" class="headerlink" title="公有IP地址"></a>公有IP地址</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214722318.png" alt="image-20200430214722318"></p><h4 id="私有IP地址"><a href="#私有IP地址" class="headerlink" title="私有IP地址"></a>私有IP地址</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214810069.png" alt="image-20200430214810069"></p><h4 id="特殊地址"><a href="#特殊地址" class="headerlink" title="特殊地址"></a>特殊地址</h4><ul><li><p>0.0.0.0</p><p>0.0.0.0不是一个真正意义上的IP地址。它表示所有不清楚的主机和目的网络</p></li><li><p>255.255.255.255</p><p>限制广播地址。对本机来说，这个地址指本网段内(同一广播域)的所有主机</p></li><li><p>127.0.0.1～127.255.255.254</p><p>本机回环地址，主要用于测试。在传输介质上永远不应该出现目的地址为 “127.0.0.1”的 数据包</p></li><li><p>224.0.0.0到239.255.255.255</p><p>组播地址，224.0.0.1特指所有主机，224.0.0.2特指所有路由器。224.0.0.5指OSPF 路由器，地址多用于一些特定的程序以及多媒体程序</p></li><li><p>169.254.x.x</p><p>如果Windows主机使用了DHCP自动分配IP地址，而又无法从DHCP服务器获取地 址，系统会为主机分配这样地址</p></li></ul><h4 id="保留地址"><a href="#保留地址" class="headerlink" title="保留地址"></a>保留地址</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430214946034.png" alt="image-20200430214946034"></p><h4 id="子网掩码"><a href="#子网掩码" class="headerlink" title="子网掩码"></a>子网掩码</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215135018.png" alt="image-20200430215135018"></p><h4 id="有子网的子网掩码"><a href="#有子网的子网掩码" class="headerlink" title="有子网的子网掩码"></a>有子网的子网掩码</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215324264.png" alt="image-20200430215324264"></p><h4 id="子网掩码的八位"><a href="#子网掩码的八位" class="headerlink" title="子网掩码的八位"></a>子网掩码的八位</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215339392.png" alt="image-20200430215339392"></p><h4 id="可变长子网掩码"><a href="#可变长子网掩码" class="headerlink" title="可变长子网掩码"></a>可变长子网掩码</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215400582.png" alt="image-20200430215400582"></p><h4 id="Subnet地址"><a href="#Subnet地址" class="headerlink" title="Subnet地址"></a>Subnet地址</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215426741.png" alt="image-20200430215426741"></p><h1 id="网络配置"><a href="#网络配置" class="headerlink" title="网络配置"></a>网络配置</h1><h2 id="动态主机配置协议DHCP"><a href="#动态主机配置协议DHCP" class="headerlink" title="动态主机配置协议DHCP"></a>动态主机配置协议DHCP</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430215555973.png" alt="image-20200430215555973"></p><h2 id="基本网络配置"><a href="#基本网络配置" class="headerlink" title="基本网络配置"></a>基本网络配置</h2><ul><li>将Linux主机接入到网络，需要配置网络相关设置</li><li>一般包括如下内容： <ul><li>主机名 IP/netmask</li><li>路由：默认网关</li><li>DNS服务器<ul><li>主DNS服务器 </li><li>次DNS服务器 </li><li>第三DNS服务器</li></ul></li></ul></li></ul><h2 id="网络配置方式"><a href="#网络配置方式" class="headerlink" title="网络配置方式"></a>网络配置方式</h2><ul><li><p>静态指定:</p><ul><li><p>ifconfig, route, netstat</p></li><li><p>ip: object {link, addr, route}, ss, tc system-config-network-tui，setup 配置文件</p></li></ul></li><li><p>动态分配：</p><ul><li>DHCP: Dynamic Host Configuration Protocol</li></ul></li></ul><h2 id="配置网络接口"><a href="#配置网络接口" class="headerlink" title="配置网络接口"></a>配置网络接口</h2><h3 id="ifconfig命令"><a href="#ifconfig命令" class="headerlink" title="ifconfig命令"></a>ifconfig命令</h3><ul><li>ifconfig [interface]  实现接口及地址查看和管理<ul><li>ifconfig -a  查看所有网络接口配置信息，包括inactive状态的接口</li><li>ifconfig IFACE [up|down]</li></ul></li><li>ifconfig interface [aftype] options | address …</li><li>ifconfig IFACE IP/netmask [up] [down]</li><li>ifconfig IFACE IP netmask NETMASK 注意：立即送往内核中的TCP/IP协议栈并生效</li><li>启用混杂模式：[-]promisc</li><li>管理IPv6地址：<ul><li>add addr/prefixlen</li><li>del addr/prefixlen</li></ul></li></ul><h3 id="route命令"><a href="#route命令" class="headerlink" title="route命令"></a>route命令</h3><ul><li><p>路由管理命令</p></li><li><p>查看：route -n  以数字格式显示路由信息</p></li><li><p>添加：route add</p><ul><li>route add [-net|-host] target [netmask Nm] [gw Gw] [dev] If]</li></ul></li><li><p>目标：192.168.1.3 网关：172.16.0.1</p><ul><li>route add -host 192.168.1.3 gw 172.16.0.1 dev eth0</li></ul></li><li><p>目标：192.168.0.0 网关：172.16.0.1</p><ul><li>route add -net 192.168.0.0 netmask 255.255.255.0 gw 172.16.0.1 dev eth0</li><li>route add -net 192.168.0.0/24 gw 172.16.0.1 dev eth0</li></ul></li><li><p>默认路由，网关：172.16.0.1</p><ul><li>route add -net 0.0.0.0 netmask 0.0.0.0 gw 172.16.0.1</li><li>route add default gw 172.16.0.1</li></ul></li><li><p>删除：route del</p><ul><li>route del [-net|-host] target [gw Gw] [netmask Nm] [[dev] If]</li><li>route del default</li></ul></li><li><p>目标：192.168.1.3 网关：172.16.0.1</p><ul><li>route del -host 192.168.1.3</li></ul></li><li><p>目标：192.168.0.0 网关：172.16.0.1</p><ul><li>route del -net 192.168.0.0 netmask 255.255.255.0</li></ul></li></ul><h3 id="netstat命令"><a href="#netstat命令" class="headerlink" title="netstat命令"></a>netstat命令</h3><ul><li><p>显示网络连接：</p><p>netstat [–tcp|-t] [–udp|-u] [–raw|-w] [–listening|-l] [–all|-a] [–numeric|-n] [–extend|-e[–extend|-e]] [–program|-p]</p><ul><li>-t: tcp协议相关</li><li>-u: udp协议相关</li><li>-w: raw socket相关</li><li>-l: 处于监听状态</li><li>-a: 所有状态</li><li>-n: 以数字显示IP和端口</li><li>-e：扩展格式  多了user 和 inode  ，其中inode 表示当前连接套接字文件的inode号</li><li>-p: 显示相关进程及PID</li></ul></li><li><p>常用组合：</p><ul><li>-tan, -uan, -tnl, -unl,lntup</li></ul></li><li><p>显示路由表：</p><ul><li>netstat {–route|-r} [–numeric|-n]<ul><li>-r: 显示内核路由表</li><li>-n: 数字格式</li></ul></li></ul></li><li><p>显示接口统计数据：</p><p>netstat {–interfaces|-I|-i} [iface] [–all|-a] [–extend|-e] [–program|-p][–numeric|-n]</p><ul><li>netstat -i  显示所有接口</li><li>netstat –I=IFACE   显示指定接口</li><li>ifconfig -s eth0</li></ul></li></ul><h3 id="ip命令"><a href="#ip命令" class="headerlink" title="ip命令"></a>ip命令</h3><ul><li><p>配置Linux网络属性：ip 命令</p></li><li><p>ip - show / manipulate routing, devices, policy routing and tunnels</p><ul><li>ip [ OPTIONS ] OBJECT { COMMAND | help }</li><li>OBJECT := { link | addr | route }</li></ul></li><li><p>ip link - network device configuration</p><ul><li>set [dev IFACE]：指定接口<ul><li>可设置属性：</li><li>up and down：激活或禁用指定接口<ul><li>ifup/ifdown  通过读取网卡的配置文件</li></ul></li><li>name NAME：重命名接口</li><li>mtu  NUMBER：更改mtu的值</li></ul></li><li>show [dev IFACE]：指定接口（二层）<ul><li>[up]：仅显示处于激活状态的接口</li></ul></li></ul></li><li><p>ip netns：ip-manage network namespaces</p><ul><li>ip netns list </li><li>ip netns add NAME</li><li>ip netns del NAME</li><li>ip netns exec NAME COMMAND：在指定的netns中运行命令</li></ul></li><li><p>ip addr { add | del } IFADDR dev STRING [label LABEL]：添加地址时指明网卡别名 [scope {global|link|host}]：指明作用域</p><ul><li>global: 全局可用 </li><li>link: 仅链接可用</li><li>host: 本机内部可用</li><li>[broadcast ADDRESS]：指明广播地址<ul><li>ip addr add 172.16.100.100/16 dev eth0 label eth0:0 </li><li>ip addr del 172.16.100.100/16 dev eth0 label eth0:0</li></ul></li><li>ip address show - look at protocol addresses<ul><li>[dev DEVICE]</li><li>[label PATTERN] [primary and secondary]</li></ul></li><li>ip addr flush 清空接口的所有地址，使用格式同show<ul><li>ip addr flush dev eth0</li></ul></li></ul></li><li><p>ip route - routing table management</p><ul><li><p>添加路由：ip route add</p></li><li><p>ip route add TARGET via GW [dev IFACE] [src SOURCE_IP]</p><ul><li><p>TARGET:</p><ul><li>主机路由：IP</li><li>网络路由：NETWORK/MASK</li></ul></li><li><p>ip route add 192.168.0.0/24 via 172.16.0.1 </p></li><li><p>ip route add 192.168.1.100 via 172.16.0.1</p></li><li><p>添加网关：</p><ul><li>ip route add default via GW dev IFACE </li><li>ip route add default via 172.16.0.1</li></ul></li></ul></li><li><p>删除路由：ip route del TARGET</p></li><li><p>显示路由：ip route show|list [src | dev] xxx</p></li><li><p>获取某单个路由条目：ip route get </p><ul><li>ip route get 192.16.1.9</li></ul></li><li><p>清空路由表：ip route flush [dev IFACE] [via PREFIX]</p><ul><li>ip route flush dev eth0</li></ul></li></ul></li></ul><h3 id="ss命令"><a href="#ss命令" class="headerlink" title="ss命令"></a>ss命令</h3><ul><li><p>格式：ss [OPTION]… [FILTER]</p></li><li><p>netstat通过遍历proc来获取socket信息，ss使用netlink与内核tcp_diag模块通信获取socket信息</p></li><li><p>选项：</p><ul><li>-t: tcp协议相</li><li>-u: udp协议相关</li><li>-w: raw socket，裸套接字相关</li><li>-x：unix sock相关</li><li>-l: listen状态的连接</li><li>-a: 所有</li><li>-n: 数字格式</li><li>-p: 相关的程序及PID</li><li>-e: 扩展的信息</li><li>-m：内存用量</li><li>-o：计时器信息</li></ul></li><li><p>FILTER : [ state TCP-STATE ] [ EXPRESSION ]</p><p>TCP的常见状态：</p><ul><li>tcp finite state machine:<ul><li>LISTEN: 监听</li><li>ESTABLISHED：已建立的连接</li><li>FIN_WAIT_1 </li><li>FIN_WAIT_2 </li><li>SYN_SENT </li><li>SYN_RECV </li><li>CLOSED</li></ul></li></ul><p>EXPRESSION:</p><ul><li>dport = xxx  源端口</li><li>sport = xxx  目标端口</li><li>示例：’( dport = :ssh or sport = :ssh )’</li></ul></li><li><p>常用组合：</p><ul><li>-tan, -tanl, -tanlp, -uan，lntup</li><li>ss -l 显示本地打开的所有端口</li><li>ss -pl 显示每个进程具体打开的socket</li><li>ss -t -a 显示所有tcp socket</li><li>ss -u -a 显示所有的UDP Socekt</li><li>ss -o state established ‘( dport = :ssh or sport = :ssh )’ 显示所有已建立的ssh连接</li><li>ss -o state established ‘( dport = :http or sport = :http )’ 显示所有已建立 的HTTP连接</li><li>ss -s 列出当前socket详细信息</li></ul></li></ul><h2 id="网络配置文件"><a href="#网络配置文件" class="headerlink" title="网络配置文件"></a>网络配置文件</h2><ul><li><p>ONBOOT：在系统引导时是否激活此设备</p></li><li><p>TYPE：接口类型；常见有的Ethernet, Bridge</p></li><li><p>UUID：设备的惟一标识</p></li><li><p>IPV6INIT：是否初始化IPV6</p></li><li><p>BOOTPROTO：激活此接口时使用什么协议来配置接口属性，常用的有dhcp，bootp，static，none；</p></li><li><p>IPADDR：指明IP地址</p></li><li><p>PREFIX：子网掩码</p></li><li><p>GATEWAY: 默认网关</p></li><li><p>NAME: 网卡物理设备名称</p></li><li><p>DEVICE: 网卡设备名称</p><ol><li>如果Firmware或BIOS为主板上集成的设备提供的索引信息可用,则根据此索引进行命名,如eno1, eno2, …</li><li>如果Firmware或BIOS为PCI-E扩展槽所提供的索引信息可用,且可预测,则根据此索引进行命名,如ens1, ens2, ..</li><li>如果硬件接口的物理位置信息可用,则根据此信息命名,如enp2s0, ..</li><li>如果用户显式定义,也可根据MAC地址命名,例如enx122161ab2e10, … </li><li>上述均不可用时，则仍使用传统方式命名。</li></ol><p>命名格式的组成：</p><ul><li><p>en：ethernet</p></li><li><p>wl：wlan</p></li><li><p>ww：wwan</p></li><li><p>名称类型：</p><ul><li>o&lt;index&gt;：集成设备的设备索引号</li><li>s&lt;slot&gt;：拓展槽的索引号</li><li>x&lt;MAC&gt;：基于MAC地址的命名</li><li>p&lt;bus&gt;s&lt;slot&gt;：基于总线及槽的拓扑结构进行命名</li></ul></li></ul></li><li><p>DNS1：第一个DNS服务器指向</p></li><li><p>DNS2：第二个DNS服务器指向</p></li><li><p>DNS3：第二个DNS服务器指向</p></li><li><p>DOMAIN：DNS搜索域</p></li><li><p>USERCTL：普通用户是否可控制此设备</p></li><li><p>PEERDNS：如果BOOTPROTO的值为“dhcp”，YES将允许dhcp server分配的dns服务器信息直接覆盖至/etc/resolv.conf文件，NO不允许修改resolv.conf</p></li><li><p>设备配置被保存在文本文件中</p><ul><li>/etc/sysconfig/network-scripts/ifcfg-&lt;name&gt;</li><li>帮助文档列出完整选项列表：/usr/share/doc/initcripts*/sysconfig.txt</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430221629097.png" alt="image-20200430221629097"></p></li></ul><h3 id="网卡别名"><a href="#网卡别名" class="headerlink" title="网卡别名"></a>网卡别名</h3><p>网卡别名不支持动态获取地址</p><ul><li><p>对虚拟主机有用</p></li><li><p>将多个IP地址绑定到一个NIC上</p><ul><li>eth0:1 、eth0:2、eth0:3</li></ul></li><li><p>ifconfig命令:</p><ul><li><p>ifconfig eth0:0 192.168.1.100/24 up</p></li><li><p>ifconfig eth0:0 down</p></li></ul></li><li><p>ip命令：</p><ul><li>ip addr add 172.16.1.1/16 dev eth0</li><li>ip addr add 172.16.1.2/16 dev eth0 label eth0:0 </li><li>ip addr del 172.16.1.2/16 dev eth0 label eth0:0 </li><li>ip addr flush dev eth0 label eth0:0</li></ul></li></ul><h3 id="设备别名"><a href="#设备别名" class="headerlink" title="设备别名"></a>设备别名</h3><ul><li><p>为每个设备别名生成独立的接口配置文件</p><ul><li>关闭NetworkManager服务</li><li>ifcfg-ethX:xxx</li><li>必须使用静态联网<ul><li>DEVICE=eth0:0 </li><li>IPADDR=10.10.10.10 </li><li>NETMASK=255.0.0.0 </li><li>ONPARENT=yes</li></ul></li></ul></li><li><p>参考：/usr/share/doc/initscripts-*/sysconfig.txt</p></li></ul><h2 id="DNS解析"><a href="#DNS解析" class="headerlink" title="DNS解析"></a>DNS解析</h2><ul><li><p>/etc/resolv.conf</p><ul><li><p>nameserver DNS_SERVER_IP1 </p></li><li><p>nameserver DNS_SERVER_IP2</p></li><li><p>nameserver DNS_SERVER_IP3</p></li><li><p>search magedu.com</p></li></ul></li><li><p>/etc/nsswitch.conf </p><ul><li>与/etc/hosts相比优先于DNS</li></ul></li><li><p>正向解析：FQDN–&gt;IP </p><ul><li><p>dig -t A FQDN</p></li><li><p>host -t A FQDN</p></li></ul></li><li><p>反向解析：IP–&gt;FQDN </p><ul><li>dig -x IP</li><li>host -t PTR IP </li></ul></li></ul><h2 id="网络接口配置-bonding"><a href="#网络接口配置-bonding" class="headerlink" title="网络接口配置-bonding"></a>网络接口配置-bonding</h2><ul><li><p>Bonding</p><p>将多块网卡绑定同一IP地址对外提供服务，可以实现高可用或者负载均衡。直 接给两块网卡设置同一IP地址是不可以的。通过bonding，虚拟一块网卡对外提供 连接，物理网卡的被修改为相同的MAC地址</p></li><li><p>共7种模式：0-6 Mode</p></li><li><p>Mode 0 (balance-rr)： 轮询（Round-robin）策略，从头到尾顺序的在每 一个slave接口上面发送数据包。本模式提供负载均衡和容错的能力</p></li><li><p>Mode 1 (active-backup)： 活动-备份（主备）策略，只有一个slave被激活， 当且仅当活动的slave接口失败时才会激活其他slave.为了避免交换机发生混乱此时绑定的MAC地址只有一个外部端口上可见</p></li><li><p>Mode 3 (broadcast)：广播策略，在所有的slave接口上传送所有的报文,提 供容错能力</p></li><li><p>active-backup、balance-tlb 和 balance-alb 模式不需要交换机的任何特 殊配置。其他绑定模式需要配置交换机以便整合链接。如：Cisco 交换机需 要在模式 0、2 和 3 中使用 EtherChannel，但在模式4中需要 LACP和 EtherChannel</p></li><li><p>创建bonding设备的配置文件</p></li><li><p>/etc/sysconfig/network-scripts/ifcfg-bond0 </p><p>DEVICE=bond0</p><p>BOOTPROTO=none</p><p>BONDING_OPTS= “miimon=100 mode=0”</p></li><li><p>/etc/sysconfig/network-scripts/ifcfg-eth0 DEVICE=eth0</p><p>BOOTPROTO=none</p><p>MASTER=bond0 </p><p>SLAVE=yes </p><p>USERCTL=no</p></li><li><p>查看bond0状态：/proc/net/bonding/bond0</p></li><li><p>miimon 是用来进行链路监测的。如果miimon=100，那么系统每100ms 监测 一次链路连接状态，如果有一条线路不通就转入另一条线路</p></li><li><p>删除bond0</p><ul><li>ifconfig bond0 down </li><li>rmmod bonding</li></ul></li><li><p>详细帮助：</p><p>/usr/share/doc/kernel-doc-version/Documentation/networking/bonding.txt </p></li></ul><h2 id="网络配置工具"><a href="#网络配置工具" class="headerlink" title="网络配置工具"></a>网络配置工具</h2><ul><li>图形工具：nm-connection-editor</li><li>字符配置tui工具：nmtui</li><li>命令行工具：nmcli</li></ul><h2 id="nmcli命令"><a href="#nmcli命令" class="headerlink" title="nmcli命令"></a>nmcli命令</h2><ul><li><p>地址配置工具：nmcli</p></li><li><p>nmcli [ OPTIONS ] OBJECT { COMMAND | help } </p><p>device - show and manage network interfaces </p><p>nmcli device help</p><ul><li>connection - start, stop, and manage network connections </li><li>nmcli connection help</li></ul></li><li><p>修改IP地址等属性：</p><ul><li>nmcli connection modify IFACE [+|-]setting.property value<ul><li>setting.property:</li><li>ipv4.addresses ipv4.gateway</li><li>ipv4.dns1 ipv4.method manual | auto</li></ul></li></ul></li><li><p>修改配置文件执行生效：systemctl restart network（CentOS8 已移除）</p><ul><li><p>nmcli con reload</p></li><li><p>nmcli命令生效： nmcli con down eth0 ;nmcli con up eth0</p></li></ul></li></ul><h3 id="使用nmcli配置网络"><a href="#使用nmcli配置网络" class="headerlink" title="使用nmcli配置网络"></a>使用nmcli配置网络</h3><ul><li><p>NeworkManager是管理和监控网络设置的守护进程</p></li><li><p>设备即网络接口，连接是对网络接口的配置，一个网络接口可有多个连接配置，但同时只有一个连接配置生效</p></li><li><p>显示所有包括不活动连接 nmcli con show</p></li><li><p>显示所有活动连接</p><p>nmcli con show –active</p></li><li><p>显示网络连接配置</p><p>nmcli con show “System eth0“</p></li><li><p>显示设备状态</p><p>nmcli dev status</p></li><li><p>显示网络接口属性</p><p>nmcli dev show eth0</p></li><li><p>创建新连接default，IP自动通过dhcp获取</p><p>nmcli con add con-name default type Ethernet ifname eth0</p></li><li><p>删除连接</p><p>nmcli con del default</p></li><li><p>创建新连接static ，指定静态IP，不自动连接</p><p>nmcti con add con-name static ifname eth0 autoconnect no type</p><p>Ethernet ipv4.addresses 172.25.X.10/24 ipv4.gateway 172.25.X.254</p></li><li><p>启用static连接配置</p><p>nmcli con up static</p></li><li><p>启用default连接配置 </p><p>nmcli con up default</p></li></ul><ul><li><p>查看帮助</p><p>nmcli con add help</p></li></ul><ul><li><p>修改连接设置</p><ul><li>nmcli con mod “static” connection.autoconnect no </li><li>nmcli con mod “static” ipv4.dns 172.25.X.254 </li><li>nmcli con mod “static” +ipv4.dns 8.8.8.8</li><li>nmcli con mod “static” -ipv4.dns 8.8.8.8</li><li>nmcli con mod “static” ipv4.addresses “172.16.X.10/24 172.16.X.254” </li><li>nmcli con mod “static” +ipv4.addresses 10.10.10.10/16</li></ul></li><li><p>DNS设置，存放在/etc/resolv.conf文件中</p><p>PEERDNS=no 表示当IP通过dhcp自动获取时，dns仍是手动设置，不自动获取 等价于下面命令：</p><p>nmcli con mod “system eth0” ipv4.ignore-auto-dns yes</p></li><li><p>修改连接配置后，需要重新加载配置 nmcli con reload</p><ul><li>nmcli con down “system eth0” 可被自动激活 </li><li>nmcli con up “system eth0”</li><li>nmcli dev dis eth0 禁用网卡，访止被自动激活</li></ul></li><li><p>添加bonding接口</p><p>nmcli con add type bond con-name mybond0 ifname bond0 mode</p><p>active-backup</p></li><li><p>添加从属接口</p><ul><li>nmcli con add type bond-slave ifname ens7 master bond0 </li><li>nmcli con add type bond-slave ifname ens3 master bond0 </li><li>注：如无为从属接口提供连接名，则该名称是接口名称加类型构成</li></ul></li><li><p>要启动绑定，则必须首先启动从属接口 </p><ul><li>nmcli con up bond-slave-eth0 </li><li>nmcli con up bond-slave-eth1</li></ul></li><li><p>启动绑定</p><p>nmcli con up mybond0</p><hr><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200501205050988.png" alt="image-20200501205050988"></p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200501205110789.png" alt="image-20200501205110789"></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-11-磁盘存储和文件系统</title>
      <link href="2020/05/04/Linux%E5%9F%BA%E7%A1%80-11-%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/05/04/Linux%E5%9F%BA%E7%A1%80-11-%E7%A3%81%E7%9B%98%E5%AD%98%E5%82%A8%E5%92%8C%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="磁盘结构"><a href="#磁盘结构" class="headerlink" title="磁盘结构"></a>磁盘结构</h1><ul><li><p>并行：</p><ul><li>IDE：133MB/s</li><li>SCSI：640MB/s</li></ul></li><li><p>串口：</p><ul><li>SATA：6Gbps </li><li>SAS：6Gbps </li><li>USB：480MB/s</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/clip_image004.gif" alt="img"></p></li></ul><h2 id="机械硬盘和固态硬盘"><a href="#机械硬盘和固态硬盘" class="headerlink" title="机械硬盘和固态硬盘"></a>机械硬盘和固态硬盘</h2><ul><li>机械硬盘（HDD）：Hard Disk Drive，即是传统普通硬盘，主要由：盘片，磁头，盘片转轴及控制电机，磁头控制器，数据转换器，接口，缓存等几个部分组成。机械硬盘  中所有的盘片都装在一个旋转轴上，每张盘片之间是平行的，在每个盘片的存储面上有  一个磁头，磁头与盘片之间的距离比头发丝的直径还小，所有的磁头联在一个磁头控制  器上，由磁头控制器负责各个磁头的运动。磁头可沿盘片的半径方向运动，加上盘片每  分钟几千转的高速旋转，磁头就可以定位在盘片的指定位置上进行数据的读写操作。数  据通过磁头由电磁流来改变极性方式被电磁流写到磁盘上，也可以通过相反方式读取。  硬盘为精密设备，进入硬盘的空气必须过滤</li><li>固态硬盘（SSD）：Solid State Drive，用固态电子存储芯片阵列而制成的硬盘，由控制单元和存储单元（FLASH芯片、DRAM芯片）组成。固态硬盘在接口的规范和定义、  功能及使用方法上与普通硬盘的完全相同，在产品外形和尺寸上也与普通硬盘一致</li><li>相较于HDD，SSD在防震抗摔、传输速率、功耗、重量、噪音上有明显优势，SSD传  输速率性能是HDD的2倍</li><li>相较于SSD，HDD在价格、容量占有绝对优势</li><li>硬盘有价，数据无价，目前SSD不能完全取代HHD</li></ul><h2 id="设备文件"><a href="#设备文件" class="headerlink" title="设备文件"></a>设备文件</h2><ul><li><p>一切皆文件：open(), read(), write(), close()</p></li><li><p>设备类型：</p><ul><li>块设备：block，存取单位“块”，磁盘</li><li>字符设备：char，存取单位“字符”，键盘</li></ul></li><li><p>设备文件：关联至一个设备驱动程序，进而能够跟与之对应硬件设备进行通信</p></li><li><p>设备号码：</p><ul><li>主设备号：major number, 标识设备类型</li><li>次设备号：minor number, 标识同一类型下的不同设备</li></ul></li><li><p>磁盘设备的设备文件命名：/dev/DEV_FILE</p></li><li><p>SCSI, SATA, SAS, IDE,USB: /dev/sd</p></li><li><p>虚拟磁盘：/dev/vd 、/dev/xvd</p></li><li><p>不同磁盘标识：a-z,aa,ab…</p><ul><li>/dev/sda, /dev/sdb, …</li></ul></li><li><p>同一设备上的不同分区：1,2, …</p><ul><li>/dev/sda1, /dev/sda5</li></ul></li><li><p>硬盘存储术语</p><ul><li>head：磁头</li><li>track：磁道</li><li>sector：扇区，512bytes</li><li>cylinder：柱面</li></ul></li></ul><h2 id="机械硬盘结构"><a href="#机械硬盘结构" class="headerlink" title="机械硬盘结构"></a>机械硬盘结构</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140036783.png" alt="image-20200430140036783"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140051898.png" alt="image-20200430140051898"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140119815.png" alt="image-20200430140119815"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140142622.png" alt="image-20200430140142622"></p><h1 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li>优化I/O性能</li><li>实现磁盘空间配额限制</li><li>提高修复速度</li><li>隔离系统和程序</li><li>安装多个OS</li><li>采用不同文件系统</li></ul><h2 id="分区方式"><a href="#分区方式" class="headerlink" title="分区方式"></a>分区方式</h2><ul><li>两种分区方式：MBR，GPT</li><li>MBR：Master Boot Record，1982年，使用32位表示扇区数，分区不超过2T</li><li>如何分区：按柱面</li><li>0磁道0扇区：512bytes<ul><li>446bytes:      boot      loader </li><li>64bytes：分区表，其中每16bytes标识一个分区</li><li>2bytes: 55AA 结束标志</li></ul></li><li>MBR分区中一块硬盘最多有4个主分区，也可以3主分区+1扩展(N个逻辑分区)</li></ul><h2 id="MBR分区"><a href="#MBR分区" class="headerlink" title="MBR分区"></a>MBR分区</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140541394.png" alt="image-20200430140541394"></p><ul><li>硬盘主引导记录MBR由4个部分组成</li><li>主引导程序（偏移地址0000H–0088H），它负责从活动分区中装载，并运行系统引导程序</li><li>出错信息数据区，偏移地址0089H–00E1H为出错信息，00E2H–01BDH全为0字节</li><li>分区表（DPT,Disk Partition Table）含4个分区项，偏移地址01BEH–01FDH, 每个分区表项长16个字节，共64字节为分区项1、分区项2、分区项3、分区项4</li><li>结束标志字，偏移地址01FE–01FF的2个字节值为结束标志55AA</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140754310.png" alt="image-20200430140754310"></p><h3 id="DPT结构"><a href="#DPT结构" class="headerlink" title="DPT结构"></a>DPT结构</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430140825740.png" alt="image-20200430140825740"></p><h2 id="GPT分区"><a href="#GPT分区" class="headerlink" title="GPT分区"></a>GPT分区</h2><ul><li>GPT：GUID（Globals Unique Identifiers） partition table 支持128个分区， 使用64位，支持8Z（ 512Byte/block ）64Z （ 4096Byte/block）</li><li>使用128位UUID(Universally Unique Identifier) 表示磁盘和分区 GPT分区表 自动备份在头和尾两份，并有CRC校验位</li><li>UEFI (Unified Extensible Firmware Interface 统一可扩展固件接口)硬件支持 GPT，使操作系统启动</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430141009726.png" alt="image-20200430141009726"></p><blockquote><p>EFI部分又可以分为4个区域：EFI信息区(GPT头)、分区表、GPT分区、备份区域</p></blockquote><h2 id="BIOS和UEFI"><a href="#BIOS和UEFI" class="headerlink" title="BIOS和UEFI"></a>BIOS和UEFI</h2><ul><li>BIOS是固化在电脑主板上一个程序，主要用于开机系统自检和引导操作系统。 目前新式的电脑基本上都是UEFI启动</li><li>BIOS（Basic Input Output System 基本输入输出系统）对于普通用户来说， 主要完成系统硬件自检和引导操作系统，操作系统开始启动之后，BIOS的任务 就完成了。系统硬件自检：如果系统硬件有故障，主板上的扬声器就会发出长 短不同的“滴滴”音，可以简单的判断硬件故障，比如“1长1短”通常表示内 存故障，“1长3短”通常表示显卡故障</li><li>BIOS在1975年就诞生了，使用汇编语言编写，当初只有16位，因此只能访问 1M的内存，其中前640K称为基本内存，后384K内存留给开机和各类BIOS本身使用。BIOS只能识别到主引导记录（MBR）初始化的硬盘，最大支持2T的硬盘， 4个主分区（逻辑分区中的扩展分区除外），而目前普遍实现了64位系统，传统 的BIOS已经无法满足需求了，这时英特尔主导的EFI就诞生了。</li><li>EFI（Extensible Firmware Interface）可扩展固件接口，是 Intel 为 PC 固件的体系结构、接口和服务提出的建议标准。其主要目的是为了提供一组在 OS 加载之前（启动前） 在所有平台上一致的、正确指定的启动服务，被看做是BIOS 的继任者。</li><li>UEFI是由EFI1.10为基础发展起来的，它的所有者已不再是Intel，而是一个称作 Unified EFI Form的国际组织</li><li>UEFI(Unified Extensible Firmware Interface)统一的可扩展固件接口， 是一种详细描述类型接口的标准。UEIF相当于一个轻量化的操作系统，提供了硬件和操作系统之间 的一个接口，提供了图形化的操作界面。最关键的是引入了GPT分区表，支持2T以上 的硬盘，硬盘分区不受限制</li><li>BIOS和UEFI区别<ul><li>BIOS采用了16位汇编语言编写，只能运行在16位实模式下，可访问的内存空间为 1MB，只支持字符操作界面。</li><li>UEFI采用32位或者64位的C语言编写，突破了实模式的限制，可以达到最大的寻址空间，支持图形操作界面</li></ul></li></ul><h3 id="BIOS-MBR与UEFI-GPT"><a href="#BIOS-MBR与UEFI-GPT" class="headerlink" title="BIOS+MBR与UEFI+GPT"></a>BIOS+MBR与UEFI+GPT</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430141233889.png" alt="image-20200430141233889"></p><h2 id="管理分区"><a href="#管理分区" class="headerlink" title="管理分区"></a>管理分区</h2><ul><li>列出块设备<ul><li>lsblk</li></ul></li><li>创建分区使用：<ul><li>fdisk 创建MBR分区</li><li>gdisk 创建GPT分区</li><li>parted 高级分区操作</li></ul></li><li>重新设置内存中的内核分区表版本<ul><li>partprobe</li></ul></li></ul><h3 id="parted命令"><a href="#parted命令" class="headerlink" title="parted命令"></a>parted命令</h3><ul><li>parted的操作都是实时生效的，小心使用</li><li>用法：parted [选项]… [设备 [命令 [参数]…]…] <ul><li>parted /dev/sdb mklabel gpt|msdos</li><li>parted /dev/sdb print</li><li>parted /dev/sdb mkpart primary 1 200 （默认M） </li><li>parted /dev/sdb rm 1</li><li>parted –l 列出分区信息</li></ul></li></ul><h3 id="分区工具fdisk和gdisk"><a href="#分区工具fdisk和gdisk" class="headerlink" title="分区工具fdisk和gdisk"></a>分区工具fdisk和gdisk</h3><ul><li>gdisk /dev/sdb 类fdisk 的GPT分区工具</li><li>fdisk -l [-u] [device…] 查看分区</li><li>fdisk /dev/sdb 管理分区</li><li>子命令：<ul><li>p    显示现有分区列表</li><li>t     更分区类型</li><li>n    创建新分区</li><li>d    删除分区</li><li>v    校验分区</li><li>u    转换单位</li><li>l     查看所有已知ID</li><li>w    保存并退出</li><li>q    不保存并退出</li></ul></li></ul><h3 id="同步分区表"><a href="#同步分区表" class="headerlink" title="同步分区表"></a>同步分区表</h3><ul><li><p>查看内核是否已经识别新的分区 <code>cat /proc/partations</code></p></li><li><p>centos6通知内核重新读取硬盘分区表 </p><ul><li><p>新增分区用</p></li><li><p>partx -a /dev/DEVICE</p></li><li><p>kpartx -a /dev/DEVICE -f: force </p></li><li><p>删除分区用</p></li><li><p>partx -d –nr M-N /dev/DEVICE</p></li></ul></li><li><p>CentOS 5，7，8: 使用partprobe </p><ul><li>partprobe [/dev/DEVICE]</li></ul></li></ul><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><ul><li><p>文件系统是操作系统用于明确存储设备或分区上的文件的方法和数据结构；即 在存储设备上组织文件的方法。操作系统中负责管理和存储文件信息的软件结 构称为文件管理系统，简称文件系统</p></li><li><p>从系统角度来看，文件系统是对文件存储设备的空间进行组织和分配，负责文 件存储并对存入的文件进行保护和检索的系统。具体地说，它负责为用户建立 文件，存入、读出、修改、转储文件，控制文件的存取，安全控制，日志，压 缩，加密等</p></li><li><p>支持的文件系统：/lib/modules/kernel/fs</p></li><li><p>各种文件系统：</p><p><a href="https://en.wikipedia.org/wiki/Comparison_of_file_systems">https://en.wikipedia.org/wiki/Comparison_of_file_systems</a></p></li></ul><h2 id="文件系统类型"><a href="#文件系统类型" class="headerlink" title="文件系统类型"></a>文件系统类型</h2><ul><li><p>Linux文件系统：</p><ul><li>ext2(Extended file system)：适用于那些分区容量不是太大，更新也不频繁的情况，例如 /boot 分区</li><li>ext3：是 ext2 的改进版本，其支持日志功能，能够帮助系统从非正常关机导致的异常 中恢复。它通常被用作通用的文件系统</li><li>ext4：是 ext 文件系统的最新版。提供了很多新的特性，包括纳秒级时间戳、创建和使用巨型文件(16TB)、最大1EB的文件系统，以及速度的提升</li><li>xfs：SGI，支持最大8EB的文件系统 </li><li>btrfs（Oracle）, reiserfs, jfs（AIX）, swap</li></ul></li><li><p>光盘：iso9660</p></li><li><p>Windows：FAT32, NTFS，exFAT</p></li><li><p>Unix：FFS（fast）, UFS（unix）, JFS2</p></li><li><p>网络文件系统：NFS, CIFS</p></li><li><p>集群文件系统：GFS2, OCFS2（oracle）</p></li><li><p>分布式文件系统：fastdfs,ceph, moosefs, mogilefs, glusterfs, Lustre</p></li><li><p>RAW：未经处理或者未经格式化产生的文件系统</p></li></ul><h2 id="文件系统分类"><a href="#文件系统分类" class="headerlink" title="文件系统分类"></a>文件系统分类</h2><ul><li><p>根据其是否支持”journal”功能：</p><ul><li>日志型文件系统: ext3, ext4, xfs, … </li><li>非日志型文件系统: ext2, vfat</li></ul></li><li><p>文件系统的组成部分：</p><ul><li><p>内核中的模块：ext4, xfs, vfat</p></li><li><p>用户空间的管理工具：mkfs.ext4, mkfs.xfs,mkfs.vfat</p></li></ul></li><li><p>Linux的虚拟文件系统：VFS</p></li><li><p>查前支持的文件系统：<code>cat /proc/filesystems</code></p></li></ul><h2 id="VFS"><a href="#VFS" class="headerlink" title="VFS"></a>VFS</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430142230953.png" alt="image-20200430142230953"></p><h2 id="文件系统选择"><a href="#文件系统选择" class="headerlink" title="文件系统选择"></a>文件系统选择</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430142300329.png" alt="image-20200430142300329"></p><p>Windows无法识别Linux的文件系统，因此，存储设备需要两种系统之间交叉使用时，应该使用windows和Linux同时支持的文件系统:fat32(vfat)</p><h2 id="创建文件系统"><a href="#创建文件系统" class="headerlink" title="创建文件系统"></a>创建文件系统</h2><ul><li><p>mkfs命令：</p><ol><li><p>mkfs.FS_TYPE /dev/DEVICE</p><ul><li>ext4 </li><li>xfs </li><li>btrfs </li><li>vfat</li></ul></li><li><p>mkfs -t FS_TYPE /dev/DEVICE</p><ul><li>-L ‘LABEL’ 设定卷标</li></ul></li></ol></li><li><p>mke2fs：ext系列文件系统专用管理工具</p><ul><li>-t {ext2|ext3|ext4} 指定文件系统类型</li><li>-b {1024|2048|4096} 指定块大小</li><li>-L ‘LABEL’ 设置卷标</li><li>-j 相当于 -t ext3<ul><li>mkfs.ext3 = mkfs -t ext3 = mke2fs -j = mke2fs -t ext3</li></ul></li><li>-i  为数据空间中每多少个字节创建一个inode；不应该小于block大小</li><li>-N 指定分区中创建多少个inode</li><li>-I 一个inode记录占用的磁盘空间大小，128—4096</li><li>-m # 默认5%,为管理人员预留空间占总空间的百分比</li><li>-O FEATURE[,…] 启用指定特性</li><li>-O ^FEATURE 关闭指定特性</li></ul></li></ul><h2 id="文件系统标签"><a href="#文件系统标签" class="headerlink" title="文件系统标签"></a>文件系统标签</h2><ul><li>指向设备的另一种方法</li><li>与设备无关</li><li>blkid：块设备属性信息查看 <ul><li>blkid [OPTION]… [DEVICE]</li><li>-U UUID 根据指定的UUID来查找对应的设备</li><li>-L LABEL 根据指定的LABEL来查找对应的设备</li></ul></li><li>e2label：设定和管理ext系列文件系统的LABEL <ul><li>e2label DEVICE [LABEL]</li></ul></li><li>findfs ：查找分区<ul><li>findfs [options] LABEL=&lt;label&gt; </li><li>findfs [options] UUID=&lt;uuid&gt;</li></ul></li></ul><h2 id="查看调整文件系统"><a href="#查看调整文件系统" class="headerlink" title="查看调整文件系统"></a>查看调整文件系统</h2><ul><li><p>tune2fs：重新设定ext系列文件系统可调整参数的值，注意：块大小创建后不可修改</p><ul><li>-l 查看指定文件系统超级块信息；super block</li><li>-L ‘LABEL’ 修改卷标</li><li>-m  修预留给管理员的空间百分比</li><li>-j 将ext2升级为ext3</li><li>-O 文件系统属性启用或禁用, –O ^has_journal</li><li>-o 调整文件系统的默认挂载选项，–o ^acl</li><li>-U UUID 修改UUID号</li></ul></li><li><p>dumpe2fs：显示ext文件系统信息，将磁盘块分组管理</p><ul><li>-h：查看超级块信息，不显示分组信息</li></ul></li><li><p>xfs_info：显示已挂载的 xfs 文件系统信息</p><ul><li>xfs_info mountpoint</li></ul></li></ul><h2 id="超级块和INODETABLE"><a href="#超级块和INODETABLE" class="headerlink" title="超级块和INODETABLE"></a>超级块和INODETABLE</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430142914794.png" alt="image-20200430142914794"></p><h2 id="文件系统检测和修复"><a href="#文件系统检测和修复" class="headerlink" title="文件系统检测和修复"></a>文件系统检测和修复</h2><ul><li>文件系统夹故障常发生于死机或者非正常关机之后，挂载为文件系统标记为“no clean”</li><li>注意：一定不要在挂载状态下执行下面命令修复</li><li>fsck: File System Check<ul><li>fsck.FS_TYPE</li><li>fsck -t FS_TYPE </li><li>注意：FS_TYPE 一定要与分区上已经文件类型相同</li><li>-a 自动修复</li><li>-r 交互式修复错误</li></ul></li><li>e2fsck：ext系列文件专用的检测修复工具<ul><li>-y 自动回答为yes</li><li>-f 强制修复，即使文件系统处于clean状态</li><li>-p 自动进行安全的修复文件系统问题</li></ul></li><li>xfs_repair：xfs文件系统专用检测修复工具<ul><li>-f 修复文件，而设备</li><li>-n 只检查</li><li>-d 允许修复只读的挂载设备，在单用户下修复 / 时使用，然后立即reboot</li></ul></li></ul><h1 id="挂载-amp-虚拟内存"><a href="#挂载-amp-虚拟内存" class="headerlink" title="挂载&amp;虚拟内存"></a>挂载&amp;虚拟内存</h1><ul><li>根文件系统这外的其它文件系统要想能够被访问，都必须通过“关联”至根文件系统上的某个目录来实现，此关联操作即为“挂载”﹔此目录即为“挂载点”</li><li>卸载:为解除此关联关系的过程</li><li>把设备关联挂载点：mount Point <ul><li>mount</li></ul></li><li>卸载时：可使用设备，也可以使用挂载点<ul><li>umount 设备名|挂载点</li></ul></li><li>挂载点下原有文件在挂载完成后会被临时隐藏</li><li>挂载点目录一般为空</li></ul><h2 id="用mount命令挂载文件系统"><a href="#用mount命令挂载文件系统" class="headerlink" title="用mount命令挂载文件系统"></a>用mount命令挂载文件系统</h2><ul><li><p>挂载方法：mount DEVICE MOUNT_POINT</p></li><li><p>mount：通过查看/etc/mtab文件显示当前已挂载的所有设备</p></li><li><p>mount [-fnrsvw] [-t vfstype] [-o options] device dir</p><ul><li>device：指明要挂载的设备；</li></ul><ol><li><p>设备文件：例如/dev/sda5</p></li><li><p>卷标：-L ‘LABEL’, 例如 -L ‘MYDATA’</p></li><li><p>UUID, -U ‘UUID’：例如 -U ‘0c50523c-43f1-45e7- 85c0-a126711d406e’</p></li><li><p>伪文件系统名称：proc, sysfs, devtmpfs, configfs</p><p>dir：挂载点</p><ul><li>事先存在，建议使用空目录</li><li>进程正在使用中的设备无法被卸载</li></ul></li></ol></li><li><p>查看当前系统所有已挂载的设备</p><ul><li>mount</li><li>cat /etc/matb</li><li>cat /etc/mounts</li></ul></li></ul><h2 id="mount常用命令选项"><a href="#mount常用命令选项" class="headerlink" title="mount常用命令选项"></a>mount常用命令选项</h2><ul><li><p>-t vsftype 指定要挂载的设备上的文件系统类型，多数情况下可省略，会通过blkid来判断要挂载的设备的文件系统类型</p></li><li><p>-r readonly，只读挂载</p></li><li><p>-w read and write, 读写挂载</p></li><li><p>-n 不更新/etc/mtab，mount不可见</p></li><li><p>-a 自动挂载所有支持自动挂载的设备(定义在了/etc/fstab文件中，且挂载选项中有auto功能)</p></li><li><p>-L ‘LABEL’ 以卷标指定挂载设备</p></li><li><p>-U ‘UUID’ 以UUID指定要挂载的设备</p></li><li><p>-B, –bind 绑定目录到另一个目录上</p></li><li><p>查看内核追踪到的已挂载的所有设备</p><ul><li>cat /proc/mounts</li></ul></li><li><p>-o options：(挂载文件系统的选项)，多个选项使用逗号分隔</p><ul><li>async 异步模式  sync 同步模式,内存更改时，同时写磁盘</li><li>atime/noatime 是否更新文件或目录的访问时间戳</li><li>diratime/nodiratime 是否更新目录的访问时间戳</li><li>auto/noauto 是否支持自动挂载,是否支持-a选项</li><li>exec/noexec 是否支持在此文件系统上运行应用程序</li><li>dev/nodev 是否支持在此文件系统上使用设备文件</li><li>suid/nosuid 是否支持suid和sgid权限</li><li>remount 重新挂载</li><li>ro 只读 </li><li>rw 读写</li><li>user/nouser 是否允许普通用户挂载此设备，/etc/fstab使用</li><li>acl 启用此文件系统上的acl功能</li><li>loop 使用loop设备</li></ul></li><li><p>defaults：相当于rw, suid, dev, exec, auto, nouser, async</p></li></ul><h2 id="卸载命令"><a href="#卸载命令" class="headerlink" title="卸载命令"></a>卸载命令</h2><ul><li>查看挂载情况<ul><li>findmnt  MOUNT_POINT|device</li></ul></li><li>查看正在访问指定文件系统的进程<ul><li>lsof MOUNT_POINT</li><li>fuser -v MOUNT_POINT</li></ul></li><li>终止所有在正访问指定的文件系统的进程<ul><li>fuser -km MOUNT_POINT</li></ul></li><li>卸载<ul><li>umount DEVICE | umount MOUNT_POINT<ul><li>-a   卸除/etc/mtab中记录的所有文件系统。</li><li>-f    强制卸载（对于无法访问的NFS系统</li><li>-v    执行时显示详细的信息</li></ul></li></ul></li></ul><h2 id="挂载点和-etc-fstab"><a href="#挂载点和-etc-fstab" class="headerlink" title="挂载点和/etc/fstab"></a>挂载点和/etc/fstab</h2><ul><li>配置文件系统体系</li><li>被mount、fsck和其它程序使用</li><li>系统重启时保留文件系统体系</li><li>可以在设备栏使用文件系统卷标</li><li>使用mount -a 命令挂载/etc/fstab中的所有文件系统</li></ul><h2 id="文件挂载配置文件"><a href="#文件挂载配置文件" class="headerlink" title="文件挂载配置文件"></a>文件挂载配置文件</h2><ul><li>/etc/fstab每行定义一个要挂载的文件系统</li><li>1、要挂载的设备或伪文件系统<ul><li>设备文件</li><li>LABEL：LABEL=””</li><li>UUID：UUID=””</li><li>伪文件系统名称：proc, sysfs</li></ul></li><li>2、挂载点  (swap类型的设备挂载点为swap)</li><li>3、文件系统类型：ext4，xfs，iso9660，nfs，none</li><li>4、挂载选项：defaults ，acl，bind，notime，noexec</li><li>5、转储频率：0：不做备份 1：每天转储 2：每隔一天转储</li><li>6、fsck检查的文件系统的顺序：允许的数字是0 1 2<ul><li>0：不自检</li><li>1：首先自检；一般只有rootfs才用</li><li>2：非rootfs使用</li></ul></li></ul><h2 id="处理交换文件和分区"><a href="#处理交换文件和分区" class="headerlink" title="处理交换文件和分区"></a>处理交换文件和分区</h2><ul><li>swap交换分区是系统RAM的补充，Swap 分区支持虚拟内存。当没有足够的RAM 保存系统处理的数据时会将数据写入 swap 分区</li><li>当系统缺乏 swap 空间时，内核会因 RAM 内存耗尽而终止进程。配置过多swap 空间会造成存储设备处于分配状态但闲置，造成浪费，过多 swap 空间还会掩盖内存泄露</li><li>推荐系统 swap 空间</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430143938456.png" alt="image-20200430143938456"></p><h2 id="挂载交换分区"><a href="#挂载交换分区" class="headerlink" title="挂载交换分区"></a>挂载交换分区</h2><ul><li>基本设置包括：<ul><li>创建交换分区或者文件</li><li>使用mkswap写入特殊签名<ul><li>-L LABEL:指明卷标</li><li>-f：强制</li></ul></li><li>在/etc/fstab文件中添加适当的条目</li></ul></li><li>启用：swapon<ul><li>swapon [OPTION]… [DEVICE]<ul><li>-a：激活所有的交换分区,定义在/etc/fstab文件中的所有swap设备</li><li>-p PRIORITY：指定优先级</li></ul></li><li>/etc/fstab 在第4列中：pri=value</li></ul></li><li>禁用：swapoff [OPTION]… [DEVICE]</li></ul><h2 id="swap的优先级"><a href="#swap的优先级" class="headerlink" title="swap的优先级"></a>swap的优先级</h2><ul><li>可以指定swap分区0到32767的优先级，值越大优先级越高</li><li>如果用户没有指定，那么核心会自动给swap指定一个优先级，这个优先级从-1开始，每加入一个新的没有用户指定优先级的swap，会给这个优先级减一</li><li>先添加的swap的缺省优先级比较高，除非用户自己指定一个优先级，而用户指定的优先级(是正数)永远高于核心缺省指定的优先级(是负数)</li><li>优化性能：分布存放，高性能磁盘存放</li></ul><h1 id="移动介质"><a href="#移动介质" class="headerlink" title="移动介质"></a>移动介质</h1><ul><li>挂载意味着使外来的文件系统看起来如同是主目录树的一部分</li><li>访问前，介质必须被挂载</li><li>摘除时，介质必须被卸载</li><li>按照默认设置，非根用户只能挂载某些设备（光盘、DVD、软<br>盘、USB等等）</li><li>挂载点通常在/media 或/mnt下 </li></ul><h2 id="使用光盘"><a href="#使用光盘" class="headerlink" title="使用光盘"></a>使用光盘</h2><ul><li>在图形环境下自动启动挂载/run/media/&lt;user&gt;/&lt;label&gt;</li><li>否则就必须被手工挂载<ul><li>mount  -r /dev/cdrom  /mnt/</li></ul></li><li>操作光盘：<ul><li>eject 弹出光盘</li><li>eject -t 弹入光盘</li></ul></li><li>创建ISO文件<ul><li>cp /dev/cdrom  /root/centos.iso</li><li>mkisofs -r -o /root/etc.iso /etc</li></ul></li><li>刻录光盘<ul><li>wodim –v –eject centos.iso</li></ul></li></ul><h2 id="挂载USB介质"><a href="#挂载USB介质" class="headerlink" title="挂载USB介质"></a>挂载USB介质</h2><ul><li>查看USB设备是否识别<ul><li>lsusb</li></ul></li><li>被内核探测为SCSI设备<ul><li>/dev/sdaX、/dev/sdbX或类似的设备文件</li></ul></li><li>在图形环境中自动挂载<ul><li>图标在[计算机]窗口中创建</li><li>挂载在/run/media/&lt;user&gt;/&lt;label&gt;</li></ul></li><li>手动挂载<ul><li>mount /dev/sdb1 /mnt</li></ul></li></ul><h1 id="常见工具"><a href="#常见工具" class="headerlink" title="常见工具"></a>常见工具</h1><ul><li><p>文件系统空间占用等信息的查看工具</p><ul><li>df [OPTION]… [FILE]…<ul><li>-l  只显示本地文件系统的相关内容</li><li>-H 以10为单位</li><li>-T 文件系统类型</li><li>-h human-readable</li><li>-i  inodes instead of blocks</li><li>-P 以Posix兼容的格式输出</li></ul></li></ul></li><li><p>查看某目录总体空间占用状态</p><ul><li>du [OPTION]… DIR<ul><li>-h human-readable</li><li>-s summary </li><li>–max-depth=# 指定最大目录层级</li></ul></li></ul></li><li><p>dd 命令：convert and copy a file<br>用法：dd if=/PATH/FROM/SRC of=/PATH/TO/DEST bs=# count=#</p><ul><li>if=file 从所命名文件读取而不是从标准输入</li><li>of=file 写到所命名的文件而不是到标准输出</li><li>ibs=size  一次读size个byte</li><li>obs=size 一次写size个byte</li><li>bs=size block size, 指定块大小（既是是ibs也是obs)</li><li>cbs=size 一次转化size个byte</li><li>skip=blocks  从开头忽略blocks个ibs大小的块</li><li>seek=blocks 从开头忽略blocks个obs大小的块</li><li>count=n  复制n个bs</li><li>conv=conversion[,conversion…] 用指定的参数转换文件</li></ul><p>转换参数: </p><ul><li>ascii 转换 EBCDIC 为 ASCII</li><li>ebcdic 转换 ASCII 为 EBCDIC</li><li>lcase 把大写字符转换为小写字符</li><li>ucase 把小写字符转换为大写字符</li><li>nocreat 不创建输出文件</li><li>noerror 出错时不停止</li><li>notrunc 不截短输出文件</li><li>sync 把每个输入块填充到ibs个字节，不足部分用空(NUL)字符补齐</li><li>fdatasync  写完成前，物理写入输出文件</li></ul><p>备份MBR：</p><ul><li>dd if=/dev/sda of=/tmp/mbr.bak bs=512 count=1</li></ul><p>破坏MBR中的bootloader</p><ul><li>dd if=/dev/zero of=/dev/sda bs=64 count=1 seek=446</li></ul><p>有一个大与2K的二进制文件fileA。现在想从第64个字节位置开始读取，需要读取的大小是128Byts。又有fileB, 想把上面读取到的128Bytes写到第32个字节开始的位置，替换128Bytes，实现如下</p><ul><li>dd if=fileA of=fileB bs=1 count=128 skip=63 seek=31 conv=notrunc</li></ul><p>备份：</p><ul><li>dd if=/dev/sdx of=/dev/sdy<br>将本地的/dev/sdx整盘备份到/dev/sdy</li><li>dd if=/dev/sdx of=/path/to/image<br>将/dev/sdx全盘数据备份到指定路径的image文件</li><li>dd if=/dev/sdx | gzip &gt;/path/to/image.gz<br>备份/dev/sdx全盘数据，并利用gzip压缩，保存到指定路径</li></ul><p>恢复：</p><ul><li>dd if=/path/to/image of=/dev/sdx<br>将备份文件恢复到指定盘</li><li>gzip -dc /path/to/image.gz | dd of=/dev/sdx<br>将压缩的备份文件恢复到指定盘</li></ul><p>拷贝内存资料到硬盘</p><ul><li>dd if=/dev/mem of=/root/mem.bin bs=1024<br>将内存里的数据拷贝到root目录下的mem.bin文件</li></ul><p>从光盘拷贝iso镜像</p><ul><li>dd if=/dev/cdrom of=/root/cd.iso<br>拷贝光盘数据到root文件夹下，并保存为cd.iso文件</li></ul><p>销毁磁盘数据</p><ul><li>dd if=/dev/urandom of=/dev/sda1<br>利用随机的数据填充硬盘，在某些必要的场合可以用来销毁数据，执行此操作以后，/dev/sda1将无法挂载，创建和拷贝操作无法执行</li></ul></li></ul><h1 id="RAID"><a href="#RAID" class="headerlink" title="RAID"></a>RAID</h1><h2 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h2><ul><li>RAID：Redundant Arrays of Inexpensive（Independent） Disks</li><li>1988年由加利福尼亚大学伯克利分校（University of California-Berkeley） “A Case for Redundant Arrays of Inexpensive Disks”</li><li>多个磁盘合成一个“阵列”来提供更好的性能、冗余，或者两者都提供</li><li>提高IO能力<ul><li>磁盘并行读写</li></ul></li><li>提高耐用性<ul><li>磁盘冗余来实现</li></ul></li><li>级别：多块磁盘组织在一起的工作方式有所不同</li><li>RAID实现的方式<ul><li>外接式磁盘阵列：通过扩展卡提供适配能力</li><li>内接式RAID：主板集成RAID控制器，安装OS前在BIOS里配置</li><li>软件RAID：通过OS实现</li></ul></li></ul><h2 id="RAID级别"><a href="#RAID级别" class="headerlink" title="RAID级别"></a>RAID级别</h2><ul><li>RAID-0：条带卷，strip</li><li>RAID-1：镜像卷，mirror</li><li>RAID-2</li><li>..</li><li>RAID-5</li><li>RAID-6</li><li>RAID-10</li><li>RAID-01</li></ul><h3 id="RAID-0"><a href="#RAID-0" class="headerlink" title="RAID-0"></a>RAID-0</h3><ul><li><p>读、写性能提升</p></li><li><p>可用空间：N*min(S1,S2,…)</p></li><li><p>无容错能力</p></li><li><p>最少磁盘数：2, 2+</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430145759247.png" alt="image-20200430145759247"></p></li></ul><h3 id="RAID-1"><a href="#RAID-1" class="headerlink" title="RAID-1"></a>RAID-1</h3><ul><li><p>读性能提升、写性能略有下降</p></li><li><p>可用空间：1*min(S1,S2,…)</p></li><li><p>有冗余能力</p></li><li><p>最少磁盘数：2, 2N</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430145925851.png" alt="image-20200430145925851"></p></li></ul><h3 id="RAID-4"><a href="#RAID-4" class="headerlink" title="RAID-4"></a>RAID-4</h3><ul><li>多块数据盘异或运算值存于专用校验盘</li></ul><h3 id="RAID-5"><a href="#RAID-5" class="headerlink" title="RAID-5"></a>RAID-5</h3><ul><li><p>读、写性能提升</p></li><li><p>可用空间：(N-1)*min(S1,S2,…)</p></li><li><p>有容错能力：允许最多1块磁盘损坏</p></li><li><p>最少磁盘数：3, 3+</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150002726.png" alt="image-20200430150002726"></p></li></ul><h3 id="RAID-6"><a href="#RAID-6" class="headerlink" title="RAID-6"></a>RAID-6</h3><ul><li><p>读、写性能提升</p></li><li><p>可用空间：(N-2)*min(S1,S2,…)</p></li><li><p>有容错能力：允许最多2块磁盘损坏</p></li><li><p>最少磁盘数：4, 4+</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150040299.png" alt="image-20200430150040299"></p></li></ul><h3 id="RAID-10"><a href="#RAID-10" class="headerlink" title="RAID-10"></a>RAID-10</h3><ul><li><p>读、写性能提升</p></li><li><p>可用空间：N*min(S1,S2,…)/2</p></li><li><p>有容错能力：每组镜像最多只能坏一块</p></li><li><p>最少磁盘数：4, 4+</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150126760.png" alt="image-20200430150126760"></p></li></ul><h3 id="RAID-01"><a href="#RAID-01" class="headerlink" title="RAID-01"></a>RAID-01</h3><ul><li><p>多块磁盘先实现RAID0,再组合成RAID1</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150202490.png" alt="image-20200430150202490"></p></li></ul><h3 id="RAID-50"><a href="#RAID-50" class="headerlink" title="RAID-50"></a>RAID-50</h3><ul><li><p>多块磁盘先实现RAID5,再组合成RAID0</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150245121.png" alt="image-20200430150245121"></p></li></ul><h3 id="JBOD"><a href="#JBOD" class="headerlink" title="JBOD"></a>JBOD</h3><ul><li><p>JBOD：Just a Bunch Of Disks</p></li><li><p>功能：将多块磁盘的空间合并一个大的连续空间使用<br>可用空间：sum(S1,S2,…)</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430150334583.png" alt="image-20200430150334583"></p></li></ul><h3 id="RAID-7"><a href="#RAID-7" class="headerlink" title="RAID-7"></a>RAID-7</h3><ul><li>可以理解为一个独立存储计算机，自身带有操作系统和管理工具，可以独立运行，理论上性能最高的RAID模式</li></ul><h3 id="常用级别"><a href="#常用级别" class="headerlink" title="常用级别"></a>常用级别</h3><p>RAID-0, RAID-1, RAID-5, RAID-10, RAID-50, JBOD</p><h2 id="软RAID"><a href="#软RAID" class="headerlink" title="软RAID"></a>软RAID</h2><ul><li>mdadm：为软RAID提供管理界面</li><li>为空余磁盘添加冗余</li><li>结合内核中的md(multi devices)</li><li>RAID设备可命名为/dev/md0、/dev/md1、/dev/md2、/dev/md3等</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><ul><li>命令的语法格式：mdadm [mode] &lt;raiddevice&gt; [options] &lt;component-devices&gt;</li><li>支持的RAID级别：LINEAR, RAID0, RAID1, RAID4, RAID5, RAID6,RAID10 </li><li>模式：<ul><li>创建：-C</li><li>装配：-A</li><li>监控：-F</li><li>管理：-f, -r, -a</li></ul></li><li>&lt;raiddevice&gt;: /dev/md#</li><li>&lt;component-devices&gt;: 任意块设备</li><li>-C: 创建模式<ul><li>-n #: 使用#个块设备来创建此RAID</li><li>-l #：指明要创建的RAID的级别</li><li>-a {yes|no}：是否自动创建目标RAID设备的设备文件</li><li>-c CHUNK_SIZE: 指明块大小,单位k</li><li>-x #: 指明空闲盘的个数</li></ul></li><li>-D：显示raid的详细信息<br>mdadm -D /dev/md#</li><li>管理模式：<ul><li>-f: 标记指定磁盘为损坏</li><li>-a: 添加磁盘</li><li>-r: 移除磁盘</li></ul></li><li>观察md的状态：<ul><li>cat /proc/mdstat</li><li>ll /dev | grep ‘md’</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li>使用mdadm创建并定义RAID设备<br>mdadm -C /dev/md0 -a yes -l 5 -n 3 -x 1 /dev/sd{b,c,d,e}1</li><li>用文件系统对每个RAID设备进行格式化<br>mkfs.xfs /dev/md0</li><li>测试RAID设备</li><li>使用mdadm检查RAID设备的状况<br>mdadm –detail|D /dev/md0</li><li>增加新的成员<br>mdadm –G /dev/md0 –n4 -a /dev/sdf1</li></ul><h3 id="测试和修复"><a href="#测试和修复" class="headerlink" title="测试和修复"></a>测试和修复</h3><ul><li>模拟磁盘故障<br>mdadm  /dev/md0 -f /dev/sda1</li><li>移除磁盘<br>mdadm  /dev/md0 –r /dev/sda1</li><li>从软件RAID磁盘修复磁盘故障<ul><li>替换出故障的磁盘然后开机</li><li>在备用驱动器上重建分区</li><li>mdadm  /dev/md0 -a /dev/sda1</li></ul></li><li>mdadm、/proc/mdstat及系统日志信息</li></ul><h3 id="管理"><a href="#管理" class="headerlink" title="管理"></a>管理</h3><ul><li>生成配置文件：mdadm –D –s &gt;&gt; /etc/mdadm.conf</li><li>停止设备：mdadm –S /dev/md0</li><li>激活设备：mdadm –A –s /dev/md0 激活</li><li>强制启动：mdadm –R /dev/md0</li><li>删除raid信息：mdadm –zero-superblock /dev/sdb1</li></ul><h1 id="逻辑卷管理器（LVM）"><a href="#逻辑卷管理器（LVM）" class="headerlink" title="逻辑卷管理器（LVM）"></a>逻辑卷管理器（LVM）</h1><ul><li><p>允许对卷进行方便操作的抽象层，包括重新设定文件系统的大小</p></li><li><p>允许在多个物理设备间重新组织文件系统</p><ul><li><p>将设备指定为物理卷</p></li><li><p>用一个或者多个物理卷来创建一个卷组</p></li><li><p>物理卷是用固定大小的物理区域（Physical Extent，PE）来定义的</p></li><li><p>在物理卷上创建的逻辑卷</p><p>是由物理区域（PE）组成</p></li><li><p>可以在逻辑卷上创建文件系统</p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430151240357.png" alt="image-20200430151240357"></p></li></ul><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>LVM: Logical Volume Manager， Version 2</p></li><li><p>dm: device mapper，将一个或多个底层块设备组织成一个逻辑设备的模块</p></li><li><p>设备名：/dev/dm-#</p></li><li><p>软链接：</p><ul><li><p>/dev/mapper/VG_NAME-LV_NAME</p><p>/dev/mapper/vol0-root</p></li><li><p>/dev/VG_NAME/LV_NAME</p><p>/dev/vol0/root</p></li></ul></li></ul><h2 id="基本术语"><a href="#基本术语" class="headerlink" title="基本术语"></a>基本术语</h2><ul><li>物理存储介质： 系统上的/dev/sda </li><li>物理卷： PV  /dev/sda1 /dev/sdb1…</li><li>卷组： VG  由多个PV组成的存储资源池</li><li>逻辑卷： LV  从VG中拿存储资源直接使用</li><li>PE： 物理卷被划分成PE的基本单元（每个PE默认为4MB）</li><li>LE： 逻辑卷被划分成LE的基本单位（同一个卷组中 LE和PE相同的）</li><li>具体请看<a href="https://cloud.tencent.com/developer/article/1108097">https://cloud.tencent.com/developer/article/1108097</a></li></ul><h2 id="更改文件系统的容量"><a href="#更改文件系统的容量" class="headerlink" title="更改文件系统的容量"></a>更改文件系统的容量</h2><ul><li><p>LVM可以弹性的更改LVM的容量通过交换PE来进行资料的转换，将原来LV内的PE转移到其他的<br>设备中以降低LV的容量，或将其他设备中的PE加到LV中以加大容量</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430151420177.png" alt="image-20200430151420177"></p></li></ul><h2 id="pv管理工具"><a href="#pv管理工具" class="headerlink" title="pv管理工具"></a>pv管理工具</h2><ul><li>显示pv信息<ul><li>pvs：简要pv信息显示</li><li>pvdisplay xxx</li></ul></li><li>创建pv<ul><li>pvcreate /dev/DEVICE<ul><li>-v 显示过程</li><li>-f 强制</li><li>-u 指定uuid</li></ul></li></ul></li><li>删除pv<ul><li>pvremove /dev/DEVICE</li></ul></li></ul><h2 id="vg管理工具"><a href="#vg管理工具" class="headerlink" title="vg管理工具"></a>vg管理工具</h2><ul><li>显示卷组<ul><li>vgs</li><li>vgdisplay xxx</li></ul></li><li>创建卷组<ul><li>vgcreate [-s #[kKmMgGtTpPeE]] VolumeGroupName PhysicalDevicePath [PhysicalDevicePath…]  </li></ul></li><li>管理卷组<ul><li>vgextend VolumeGroupName PhysicalDevicePath [PhysicalDevicePath…] 拓展vg大小</li><li>vgreduce VolumeGroupName PhysicalDevicePath [PhysicalDevicePath…] 减小vg大小</li><li>删除卷组<ul><li><strong>先做pvmove</strong>，再做vgremove</li></ul></li></ul></li></ul><h2 id="lv管理工具"><a href="#lv管理工具" class="headerlink" title="lv管理工具"></a>lv管理工具</h2><ul><li>显示逻辑卷<ul><li>lvs</li><li>lvdisplay</li></ul></li><li>创建逻辑卷<ul><li>lvcreate -L #[mMgGtT] -n NAME VolumeGroup</li><li>lvcreate -l 60%VG -n mylv testvg</li><li>lvcreate -l 100%FREE -n yourlv testvg</li></ul></li><li>删除逻辑卷<ul><li>lvremove /dev/VG_NAME/LV_NAME</li></ul></li><li>重设文件系统大小<ul><li>fsadm [options] resize device [new_size[BKMGTEP]]</li><li>resize2fs [-f] [-F] [-M] [-P] [-p] device [new_size]</li><li>xfs_growfs  /mountpoint</li></ul></li></ul><h2 id="扩展和缩减逻辑卷"><a href="#扩展和缩减逻辑卷" class="headerlink" title="扩展和缩减逻辑卷"></a>扩展和缩减逻辑卷</h2><ul><li>扩展逻辑卷：<ul><li>lvextend -L [+]#[mMgGtT] /dev/VG_NAME/LV_NAME</li><li>resize2fs /dev/VG_NAME/LV_NAME</li><li>lvresize -r -l +100%FREE /dev/VG_NAME/LV_NAME</li></ul></li><li>缩减逻辑卷：<ul><li>umount /dev/VG_NAME/LV_NAME</li><li>e2fsck -f /dev/VG_NAME/LV_NAME</li><li>resize2fs /dev/VG_NAME/LV_NAME #[mMgGtT]</li><li>lvreduce -L [-]#[mMgGtT] /dev/VG_NAME/LV_NAME</li><li>mount </li></ul></li></ul><h2 id="创建逻辑卷实例"><a href="#创建逻辑卷实例" class="headerlink" title="创建逻辑卷实例"></a>创建逻辑卷实例</h2><ul><li>创建物理卷<ul><li>pvcreate /dev/sda3</li></ul></li><li>为卷组分配物理卷<ul><li>vgcreate vg0 /dev/sda3</li></ul></li><li>从卷组创建逻辑卷<ul><li>lvcreate -L 256M -n data vg0</li><li>mkfs.xfs /dev/vg0/data</li></ul></li><li>挂载<ul><li>mount /dev/vg0/data /mnt/data</li></ul></li></ul><h2 id="跨主机迁移卷组"><a href="#跨主机迁移卷组" class="headerlink" title="跨主机迁移卷组"></a>跨主机迁移卷组</h2><ul><li>源计算机上<ul><li>1 在旧系统中，umount所有卷组上的逻辑卷</li><li>2 禁用卷组<ul><li>vgchange –a n vg0 </li><li>lvdisplay</li></ul></li><li>3 导出卷组<ul><li>vgexport vg0 </li><li>pvscan</li><li>vgdisplay</li><li>拆下旧硬盘</li></ul></li></ul></li><li>在目标计算机上<ul><li>4 在新系统中安装旧硬盘，并导入卷组：vgimport vg0 </li><li>5 vgchange –ay vg0 启用</li><li>6 mount所有卷组上的逻辑卷</li></ul></li></ul><h2 id="逻辑卷管理器快照"><a href="#逻辑卷管理器快照" class="headerlink" title="逻辑卷管理器快照"></a>逻辑卷管理器快照</h2><ul><li><p>快照是特殊的逻辑卷，它是在生成快照时存在的逻辑卷的准确拷贝</p></li><li><p>对于需要备份或者复制的现有数据临时拷贝以及其它操作来说，快照是最合适的选择</p></li><li><p>快照只有在它们和原来的逻辑卷不同时才会消耗空间</p><ul><li>在生成快照时会分配给它一定的空间，但只有在原来的逻辑卷或者快照有所改变才会使用这些空间</li><li>当原来的逻辑卷中有所改变时，会将旧的数据复制到快照中</li><li>快照中只含有原来的逻辑卷中更改的数据或者自生成快照后的快照中更改的数据</li><li>建立快照的卷大小小于等于原始逻辑卷,也可以使用lvextend扩展快照</li></ul></li><li><p>快照就是将当时的系统信息记录下来，就好像照相一般，若将来有任何数据改动了，则原始数据会被移动到快照区，没有改动的区域则由快照区和文件系统共享</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200430152358959.png" alt="image-20200430152358959"></p></li><li><p>由于快照区与原本的LV共用很多PE的区块，因此快照与被快照的LV必须在同一个VG中.系统恢复的时候的文件数量不能高于快照区的实际容量</p></li></ul><h2 id="使用LVM快照"><a href="#使用LVM快照" class="headerlink" title="使用LVM快照"></a>使用LVM快照</h2><ul><li><p>为现有逻辑卷创建快照</p><ul><li><p>lvcreate-L #[mMgGtT]-pr -s -n snapshot_lv_name original_lv_name</p><p>lvcreate -L 64 -s -n data-snapshot -p r /dev/vg0/data</p></li></ul></li><li><p>挂载快照</p><ul><li>mkdir -p /mnt/snap</li><li>mount -o ro /dev/vg0/data-snapshot /mnt/snap</li></ul></li><li><p>恢复快照</p><ul><li>umount /dev/vg0/data-snapshot</li><li>umount /dev/vg0/data</li><li>lvconvert –merge /dev/vg0/data-snapshot </li></ul></li><li><p>删除快照</p><ul><li>umount /mnt/databackup</li><li>lvremove /dev/vg0/databackup</li></ul></li></ul><h1 id="Brtfs文件系统"><a href="#Brtfs文件系统" class="headerlink" title="Brtfs文件系统"></a>Brtfs文件系统</h1><p>支持写时复制，用来取代ext3/ext4</p><h2 id="核心特性"><a href="#核心特性" class="headerlink" title="核心特性"></a>核心特性</h2><ul><li>多物理卷支持：btrfs可由多个底层物理卷组成，支持RAID，以联机“添加”、“移除”、“修改”</li><li>写时复制更新机制(CoW)：复制、更新及替换指针，而非“就地”更新</li><li>数据及元数据校验码：chesksum</li><li>子卷：sub_volume</li><li>快照：支持快照的快照</li><li>透明压缩</li></ul><h2 id="文件系统创建"><a href="#文件系统创建" class="headerlink" title="文件系统创建"></a>文件系统创建</h2><p>mkfs.btrfs</p><ul><li>-L ‘LABEL’</li><li>-d &lt;type&gt;:raid0,raid1,raid5,raid6,raid10,single</li><li>-m &lt;profile&gt;:raid0,raid1,raid5,raid6,raid10,single,dup</li><li>-O&lt;feature&gt;:<ul><li>-O list-all:列出支持的所有feature</li></ul></li></ul><p>属性查看</p><ul><li>btrfs filesystem show</li></ul><p>挂载文件系统</p><ul><li>mount -t btrfs /dev/sdb MOUNT_POINT</li></ul><p>透明压缩机制</p><ul><li>mount -o compress={lzo|zlib} DEVICE MOUNT_POINT</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-10-包管理工具</title>
      <link href="2020/05/04/Linux%E5%9F%BA%E7%A1%80-10-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
      <url>2020/05/04/Linux%E5%9F%BA%E7%A1%80-10-%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/</url>
      
        <content type="html"><![CDATA[<h1 id="包和包管理器"><a href="#包和包管理器" class="headerlink" title="包和包管理器"></a>包和包管理器</h1><ul><li>最初只提供了.tar.gz的打包的源码文件，用户必须自已编译每个想在GNU/Linux上运行的软件。用户急需系统能提供一种更加便利的方法来管理这些软件，当Debian诞生时，这样一个管理工具也就应运而生，它被命名为dpkg。从而著名的“package”概念第一次出现在GNU/Linux系统中，稍后Red Hat才开发自己的“rpm”包管理系统</li><li>包的组成：<ul><li>二进制文件、库文件、配置文件、帮助文件</li></ul></li><li>程序包管理器：<ul><li>debian： deb文件, dpkg包管理器</li><li>redhat： rpm文件, rpm包管理器</li></ul></li></ul><h2 id="包命名和工具"><a href="#包命名和工具" class="headerlink" title="包命名和工具"></a>包命名和工具</h2><ul><li><p>源代码：name-VERSION.tar.gz|bz2|xz</p><p>VERSION: major.minor.release</p></li><li><p>rpm包命名方式：<br>name-VERSION-release.arch.rpm<br>例：bash-4.2.46-19.el7.x86_64.rpm<br>VERSION: major.minor.release<br>release：release.OS<br>常见的arch：<br>x86: i386, i486, i586, i686<br>x86_64: x64, x86_64, amd64<br>powerpc: ppc<br>跟平台无关：noarch</p></li><li><p>包：分类和拆包</p><ul><li>Application-VERSION-ARCH.rpm: 主包</li><li>Application-devel-VERSION-ARCH.rpm 开发子包</li><li>Application-utils-VERSION-ARHC.rpm 其它子包</li><li>Application-libs-VERSION-ARHC.rpm 其它子包</li></ul></li><li><p>包之间：可能存在依赖关系，甚至循环依赖</p></li><li><p>解决依赖包管理工具：</p><ul><li>yum：rpm包管理器的前端工具</li><li>apt：deb包管理器前端工具</li><li>zypper：suse上的rpm前端管理工具</li><li>dnf：Fedora 18+ rpm包管理器前端管理工具</li></ul></li></ul><h2 id="库文件"><a href="#库文件" class="headerlink" title="库文件"></a>库文件</h2><ul><li>查看二进制程序所依赖的库文件<br><code>ldd /PATH/TO/BINARY_FILE</code></li><li>管理及查看本机装载的库文件<ul><li>ldconfig 加载配置文件中指定的库文件</li><li>/sbin/ldconfig –p 显示本机已经缓存的所有可用库文件名及文件路径映射关系</li><li>配置文件：/etc/ld.so.conf, /etc/ld.so.conf.d/*.conf</li><li>缓存文件：/etc/ld.so.cache</li></ul></li></ul><h2 id="包管理器"><a href="#包管理器" class="headerlink" title="包管理器"></a>包管理器</h2><ul><li>程序包管理器：<br>功能：将编译好的应用程序的各组成文件打包一个或几个程序包文件，从而<br>方便快捷地实现程序包的安装、卸载、查询、升级和校验等管理操作</li><li>包文件组成 (每个包独有)<ul><li>RPM包内的文件</li><li>RPM的元数据，如名称，版本，依赖性，描述等</li><li>安装或卸载时运行的脚本</li></ul></li><li>数据库(公共)：/var/lib/rpm<ul><li>程序包名称及版本</li><li>依赖关系</li><li>功能说明</li><li>包安装后生成的各文件路径及校验码信息</li></ul></li></ul><h2 id="程序包的来源"><a href="#程序包的来源" class="headerlink" title="程序包的来源"></a>程序包的来源</h2><ul><li>管理程序包的方式：<ul><li>使用包管理器：rpm</li><li>使用前端工具：yum, dnf</li></ul></li><li>获取程序包的途径：<ol><li>系统发版的光盘或官方的服务器<br>CentOS镜像：<br><a href="https://www.centos.org/download/">https://www.centos.org/download/</a><br><a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com</a><br><a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a><br><a href="http://mirrors.163.com/">http://mirrors.163.com</a></li><li>项目官方站点</li><li>第三方组织：<ul><li>Fedora-EPEL：<br>Extra Packages for Enterprise Linux</li><li>Rpmforge:RHEL推荐，包很全</li><li>搜索引擎：<br><a href="http://pkgs.org/">http://pkgs.org</a><br><a href="http://rpmfind.net/">http://rpmfind.net</a><br><a href="http://rpm.pbone.net/">http://rpm.pbone.net</a><br><a href="https://sourceforge.net/">https://sourceforge.net/</a></li></ul></li><li>自己制作<br>注意：第三方包建议要检查其来源合法性,程序包的完整性</li></ol></li></ul><h1 id="rpm"><a href="#rpm" class="headerlink" title="rpm"></a>rpm</h1><ul><li><p>CentOS系统上使用rpm命令管理程序包：</p><p>安装、卸载、升级、查询、校验、数据库维护<br>安装：<br>rpm {-i|–install} [install-options] PACKAGE_FILE… </p><ul><li>-v: 显示附加信息</li><li>-vv: 显示调试信息</li><li>-h: 以#显示程序包管理执行进度，每个#表示2%的进度</li></ul><p><code>rpm -ivh PACKAGE_FILE ...</code></p></li></ul><h2 id="rpm包安装"><a href="#rpm包安装" class="headerlink" title="rpm包安装"></a>rpm包安装</h2><ul><li>[install-options]<ul><li>–test: 测试安装，但不真正执行安装，即dry run模式</li><li>–nodeps：忽略依赖关系，不建议</li><li>–replacepkgs | replacefiles  </li><li>–nosignature: 不检查来源合法性</li><li>–nodigest：不检查包完整性</li><li>–noscripts：不执行程序包脚本<ul><li>%pre: 安装前脚本 –nopre</li><li>%post: 安装后脚本 –nopost</li><li>%preun: 卸载前脚本 –nopreun</li><li>%postun: 卸载后脚本 –nopostun</li></ul></li></ul></li></ul><h2 id="rpm包升级"><a href="#rpm包升级" class="headerlink" title="rpm包升级"></a>rpm包升级</h2><ul><li>rpm {-U|–upgrade} [install-options] PACKAGE_FILE…</li><li>rpm {-F|–freshen} [install-options] PACKAGE_FILE…<ul><li>upgrade：安装有旧版程序包，则“升级”；如果不存在旧版程序包，则“安装”</li><li>freshen：安装有旧版程序包，则“升级”；如果不存在旧版程序包，则不执行升级操作</li><li>rpm -Uvh PACKAGE_FILE …</li><li>rpm -Fvh PACKAGE_FILE …<ul><li>–oldpackage：降级</li><li>–force: 强制安装</li></ul></li></ul></li></ul><p><strong>注意：</strong><br>(1) 不要对内核做升级操作；Linux支持多内核版本并存，因此直接安装新版本内核<br>(2) 如果原程序包的配置文件安装后曾被修改，升级时，新版本提供的同一个配置文件不会直接覆盖老版本的配置文件，而把新版本文件重命名(FILENAME.rpmnew)后保留</p><h2 id="包查询"><a href="#包查询" class="headerlink" title="包查询"></a>包查询</h2><ul><li><p>rpm {-q|–query} [select-options] [query-options]</p></li><li><p>[select-options]</p><ul><li>-a：所有包</li><li>-f：查看指定的文件由哪个程序包安装生成</li><li>-p rpmfile：针对尚未安装的程序包文件做查询操作</li><li>–whatprovides CAPABILITY：查询指定的CAPABILITY由哪个包所提供</li><li>–whatrequires CAPABILITY：查询指定的CAPABILITY被哪个包所依赖</li></ul></li><li><p>rpm2cpio 包文件|cpio –itv   预览包内文件</p></li><li><p>rpm2cpio 包文件|cpio –id “*.conf” 释放包内文件</p></li><li><p>[query-options]</p><ul><li>–changelog：查询rpm包的changelog</li><li>-c：查询程序的配置文件</li><li>-d：查询程序的文档</li><li>-i：information</li><li>-l：查看指定的程序包安装后生成的所有文件</li><li>–scripts：程序包自带的脚本</li><li>–provides：列出指定程序包所提供的CAPABILITY</li><li>-R,–requires：查询指定的程序包所依赖的CAPABILITY</li></ul></li><li><p>常用查询用法：<br>-qi PACKAGE, -qf FILE, -qc PACKAGE, -ql PACKAGE, -qd PACKAGE<br>-qpi PACKAGE_FILE, -qpl PACKAGE_FILE, …<br>-qa</p></li></ul><h2 id="包卸载"><a href="#包卸载" class="headerlink" title="包卸载"></a>包卸载</h2><ul><li>rpm {-e|–erase} [–allmatches] [–nodeps] [–noscripts] [–notriggers]<br>[–test] PACKAGE_NAME …<ul><li>–nodeps：忽略依赖关系</li><li>–test：测试卸载</li><li>–allmatches：卸载所有匹配指定名成的程序包的各版本</li></ul></li><li>当包卸载时，对应的配置文件不会删除， 以FILENAME.rpmsave形式保留</li></ul><h2 id="包校验"><a href="#包校验" class="headerlink" title="包校验"></a>包校验</h2><ul><li><p>rpm {-V|–verify} [select-options] [verify-options]</p><ul><li>S file Size differs</li><li>M Mode differs (includes permissions and file type)</li><li>5 digest (formerly MD5 sum) differs</li><li>D Device major/minor number mismatch</li><li>L readLink(2) path mismatch</li><li>U User ownership differs</li><li>G Group ownership differs</li><li>T mTime differs</li><li>P capabilities differ</li></ul></li><li><p>包来源的合法性验证及完整性验证</p><ul><li>完整性验证：SHA256</li><li>来源合法性验证：RSA</li></ul></li><li><p>导入所需要公钥</p><ul><li>rpm -K|checksig  rpmfile  检查包的完整性和签名</li><li>rpm –import /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-7</li><li>CentOS 7发行版光盘提供：RPM-GPG-KEY-CentOS-7<br>rpm -qa “gpg-pubkey*”</li></ul></li></ul><h2 id="rpm数据库"><a href="#rpm数据库" class="headerlink" title="rpm数据库"></a>rpm数据库</h2><ul><li>数据库重建：<br>/var/lib/rpm</li><li>rpm {–initdb|–rebuilddb}<ul><li>initdb: 初始化<ul><li>如果事先不存在数据库，则新建之；否则，不执行任何操作</li></ul></li><li>rebuilddb：重建已安装的包头的数据库索引目录</li></ul></li></ul><h1 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h1><ul><li>CentOS: yum, dnf</li><li>YUM: Yellowdog Update Modifier，rpm的前端程序，可解决软件包相关依<br>赖性，可在多个库之间定位软件包，up2date的替代工具<ul><li>yum repository: yum repo，存储了众多rpm包，以及包的相关的元数据<br>文件（放置于特定目录repodata下）</li><li>文件服务器：<ul><li>http://</li><li>https://</li><li>ftp://</li><li>file://</li></ul></li></ul></li></ul><h2 id="yum配置文件"><a href="#yum配置文件" class="headerlink" title="yum配置文件"></a>yum配置文件</h2><ul><li><p>yum客户端配置文件：</p><ul><li><p>/etc/yum.conf：为所有仓库提供公共配置</p></li><li><p>/etc/yum.repos.d/*.repo：为仓库的指向提供配置</p></li><li><p>仓库指向的定义：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[repositoryID]</span><br><span class="line">name=Some name <span class="keyword">for</span> this repository</span><br><span class="line">baseurl=url://path/to/repository/</span><br><span class="line">enabled=&#123;1|0&#125;</span><br><span class="line">gpgcheck=&#123;1|0&#125;</span><br><span class="line">gpgkey=URL</span><br><span class="line">enablegroups=&#123;1|0&#125;</span><br><span class="line">failovermethod=&#123;roundrobin|priority&#125;</span><br><span class="line">roundrobin：意为随机挑选，默认值</span><br><span class="line">priority:按顺序访问</span><br><span class="line">cost= 默认为1000</span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="yum仓库"><a href="#yum仓库" class="headerlink" title="yum仓库"></a>yum仓库</h2><ul><li>yum的repo配置文件中可用的变量：</li><li><ul><li>$releasever: 当前OS的发行版的主版本号</li><li>$arch: 平台，i386,i486,i586,x86_64等</li><li>$basearch：基础平台；i386, x86_64</li><li>$YUM0-$YUM9:自定义变量</li></ul></li><li>示例：<br><code>http://server/centos/$releasever/$basearch/</code><br><code>http://server/centos/7/x86_64</code><br><code>http://server/centos/6/i386</code></li></ul><h3 id="系统安装光盘作为本地yum仓库"><a href="#系统安装光盘作为本地yum仓库" class="headerlink" title="系统安装光盘作为本地yum仓库"></a>系统安装光盘作为本地yum仓库</h3><ol><li><p>挂载光盘至某目录，例如/mnt/cdrom<br>mount /dev/cdrom /mnt/cdrom</p></li><li><p>创建配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[CentOS7]</span><br><span class="line">name=</span><br><span class="line">baseurl=</span><br><span class="line">gpgcheck=</span><br><span class="line">enabled=</span><br></pre></td></tr></table></figure></li></ol><ul><li>创建yum仓库：<br>createrepo [options] &lt;directory&gt;</li></ul><h3 id="关于本地仓库的自建（同步远程仓库的软件包到本地来）"><a href="#关于本地仓库的自建（同步远程仓库的软件包到本地来）" class="headerlink" title="关于本地仓库的自建（同步远程仓库的软件包到本地来）"></a>关于本地仓库的自建（同步远程仓库的软件包到本地来）</h3><ol><li>备份源文件</li></ol><p><code>[root@node1 ~]# mv /etc/yum.repos.d/CentOS-Base.repo&#123;,.bak&#125;</code></p><ol start="2"><li>编辑新文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@node1 ~]<span class="comment"># cat /etc/yum.repos.d/CentOS-Base.repo</span></span><br><span class="line">[centos7]</span><br><span class="line">name=Centos-7</span><br><span class="line">baseurl=https://mirrors.aliyun.com/centos/7/os/x86_64/</span><br><span class="line"><span class="built_in">enable</span>=1</span><br><span class="line">gpgcheck=0</span><br></pre></td></tr></table></figure><ol start="3"><li>同步源 ： reposync 命令可以去同步远程仓库中的软件包</li></ol><p><code>[root@node1 ~]# reposync --repoid=centos7</code></p><ol start="4"><li>生成repodata</li></ol><p><code>[root@node1 ~]# createrepo centos7</code></p><ol start="5"><li>验证并生成缓存</li></ol><p><code>[root@node1 ~]# yum repolist</code><br><code>[root@node1 ~]# yum makecache</code></p><ol start="6"><li>如果添加或者删除了个人的rpm包，不需要再次重新create，浪费时间，只需要–update就可以了</li></ol><p><code>[root@node1 ~]# createrepo --update  ./</code></p><p>以上步骤： 将远程仓库的软件包下载到本地，然后生成仓库配置文件；这样的话，我们可以拿着这些软件包再次构建本地仓库，这样可以提升安装速度，另一个获取更多的软件包 </p><p>日常使用的话：<br>建议： 使用远程仓库（centos和epel）就够用了</p><p>步骤：</p><p><code>curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code><br><code>curl -o /etc/yum.repos.d/epel.repo http://mirrors.aliyun.com/repo/epel-7.repo</code><br><code>yum clean all</code><br><code>yum makecache</code><br><code>yum repolist</code></p><h2 id="yum源"><a href="#yum源" class="headerlink" title="yum源"></a>yum源</h2><ul><li><p>阿里云repo文件<br><a href="http://mirrors.aliyun.com/repo/">http://mirrors.aliyun.com/repo/</a></p></li><li><p>CentOS系统的yum源</p><ul><li><p>阿里云：<code>https://mirrors.aliyun.com/centos/$releasever/os/x86_64/</code></p></li><li><p>清华大学：<code>https://mirrors.tuna.tsinghua.edu.cn/centos/$releasever/os/x86_64/</code></p></li><li><p>EPEL的yum源</p><p>阿里云：<code>https://mirrors.aliyun.com/epel/$releasever/x86_64</code></p></li><li><p>阿里巴巴开源软件<br><code>https://opsx.alibaba.com/</code></p></li></ul></li></ul><h2 id="yum-config-manager"><a href="#yum-config-manager" class="headerlink" title="yum-config-manager"></a>yum-config-manager</h2><ul><li><p>生成172.16.0.1_cobbler_ks_mirror_CentOS-X-x86_64_.repo</p><p>yum-config-manager –add-repo= <a href="http://172.16.0.1/cobbler/ks_mirror/7/">http://172.16.0.1/cobbler/ks_mirror/7/</a> </p></li><li><p>yum-config-manager –disable “仓库名”  禁用仓库</p></li><li><p>yum-config-manager –enable “仓库名”  启用仓库</p></li></ul><h2 id="yum命令"><a href="#yum命令" class="headerlink" title="yum命令"></a>yum命令</h2><ul><li><p>yum命令的用法：</p><ul><li>yum [options] [command] [package …]</li></ul></li><li><p>显示仓库列表：</p><ul><li>yum repolist [all|enabled|disabled]</li></ul></li><li><p>显示程序包：</p><ul><li>yum list</li><li>yum list [all | glob_exp1] [glob_exp2] […]</li><li>yum list {available|installed|updates} [glob_exp1] […]</li></ul></li><li><p>安装程序包：</p><ul><li>yum install package1 [package2] […]</li><li>yum reinstall package1 [package2] […] (重新安装)</li></ul></li><li><p>升级程序包：</p><ul><li>yum update [package1] [package2] […]</li><li>yum downgrade package1 [package2] […] (降级)</li></ul></li><li><p>检查可用升级：</p><ul><li>yum check-update</li></ul></li><li><p>卸载程序包：</p><ul><li>yum remove | erase package1 [package2] […]</li></ul></li><li><p>查看程序包information：</p><ul><li>yum info […]</li></ul></li><li><p>查看指定的特性(可以是某文件)是由哪个程序包所提供：</p><ul><li>yum provides | whatprovides feature1 [feature2] […]</li></ul></li><li><p>清理本地缓存：</p><ul><li>清除/var/cache/yum/$basearch/$releasever缓存</li><li>yum clean [ packages | metadata | expire-cache | rpmdb | plugins |all ]</li></ul></li><li><p>构建缓存：</p><ul><li>yum makecache</li></ul></li><li><p>搜索：</p><ul><li>yum search string1 [string2] […]</li><li>以指定的关键字搜索程序包名及summary信息</li></ul></li><li><p>查看指定包所依赖的capabilities：</p><ul><li>yum deplist package1 [package2] […]</li></ul></li><li><p>查看yum事务历史：</p><ul><li>yum history [info|list|packages-list|packages-info|</li><li>summary|addon-info|redo|undo|</li><li>rollback|new|sync|stats]</li><li>yum history</li><li>yum history info 6</li><li>yum history undo 6 </li></ul></li><li><p>日志 ：/var/log/yum.log</p></li><li><p>安装及升级本地程序包：</p><ul><li><p>yum localinstall rpmfile1 [rpmfile2] […]</p><p>(用install替代)</p></li><li><p>yum localupdate rpmfile1 [rpmfile2] […]</p><p>(用update替代)</p></li></ul></li><li><p>包组管理的相关命令：</p><ul><li>yum groupinstall group1 [group2] […]</li><li>yum groupupdate group1 [group2] […]</li><li>yum grouplist [hidden] [groupwildcard] […]</li><li>yum groupremove group1 [group2] […]</li><li>yum groupinfo group1 […]</li></ul></li><li><p>yum的命令行选项：</p><ul><li>–nogpgcheck：禁止进行gpg check</li><li>-y: 自动回答为“yes”</li><li>-q：静默模式</li><li>–disablerepo=repoidglob：临时禁用此处指定的repo</li><li>–enablerepo=repoidglob：临时启用此处指定的repo</li><li>–noplugins：禁用所有插件</li></ul></li></ul><h1 id="DNF-DaNdiFied"><a href="#DNF-DaNdiFied" class="headerlink" title="DNF(DaNdiFied)"></a>DNF(DaNdiFied)</h1><ul><li><p>DNF 介绍：新一代的RPM软件包管理器。DNF 发行日期是2015年5月11日，DNF 包管理器采用Python 编写，发行许可为GPL v2，首先出现在Fedora 18 发行版中。在RHEL 8.0 版本正式取代了 YUM，DNF包管理器克服了YUM包管理器的一些瓶颈，提升了包括用户体验，内存占用，依赖分析，运行速度等</p></li><li><p>安装所需软件包，依赖epel源</p><ul><li>wget <a href="http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/dnf-conf-0.6.4-2.sdl7.noarch.rpm">http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/dnf-conf-0.6.4-2.sdl7.noarch.rpm</a> </li><li>wget <a href="http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64//dnf-0.6.4-2.sdl7.noarch.rpm">http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64//dnf-0.6.4-2.sdl7.noarch.rpm</a> </li><li>wget <a href="http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/python-dnf-0.6.4-2.sdl7.noarch.rpm">http://springdale.math.ias.edu/data/puias/unsupported/7/x86_64/python-dnf-0.6.4-2.sdl7.noarch.rpm</a> </li><li>yum install python-dnf-0.6.4-2.sdl7.noarch.rpm dnf-0.6.4-2.sdl7.noarch.rpm dnf-conf-0.6.4-2.sdl7.noarch.rpm python2-libcomps-0.1.8-3.el7.x86_64.rpm libcomps-0.1.8-3.el7.x86_64.rpm</li></ul></li><li><p>配置文件：/etc/dnf/dnf.conf</p></li><li><p>仓库文件：/etc/yum.repos.d/ *.repo</p></li><li><p>日志： /var/log/dnf.rpm.log</p></li><li><p>帮助：man dnf</p></li><li><p>dnf 用法：与yum一致</p><ul><li><code>dnf [options] &lt;command&gt; [&lt;arguments&gt;...]</code></li><li><code>dnf --version</code></li><li><code>dnf repolist</code></li><li><code>dnf install httpd</code></li><li><code>dnf remove httpd</code></li><li><code>dnf clean all</code></li><li><code>dnf makecache</code></li><li><code>dnf list installed</code></li><li><code>dnf list available</code></li><li><code>dnf search nano</code></li><li><code>dnf history undo 1</code></li></ul></li></ul><h1 id="程序包编译"><a href="#程序包编译" class="headerlink" title="程序包编译"></a>程序包编译</h1><ul><li>程序包编译安装：</li><li>Application-VERSION-release.src.rpm –&gt; 安装后，使用rpmbuild命令制作成二进制格式的rpm包，而后再安装</li><li>源代码–&gt;预处理–&gt;编译–&gt;汇编–&gt;链接–&gt;执行</li><li>源代码组织格式：<ul><li>多文件：文件中的代码之间，很可能存在跨文件依赖关系</li><li>C、C++：make 项目管理器<ul><li>configure脚本 –&gt; Makefile.in –&gt; Makefile</li></ul></li><li>java: maven</li></ul></li></ul><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><ul><li><p>C语言源代码编译安装三步骤：</p><ol><li>./configure<br>(1) 通过选项传递参数，指定启用特性、安装路径等；执行时会参考用户的<br>指定以及Makefile.in文件生成Makefile<br>(2) 检查依赖到的外部环境，如依赖的软件包</li><li>make 根据Makefile文件，构建应用程序</li><li>make install 复制文件到相应路径</li></ol></li><li><p>开发工具：</p><ul><li>autoconf: 生成configure脚本</li><li>automake：生成Makefile.in</li></ul></li><li><p>注意：安装前查看README，INSTALL</p></li><li><p>开源程序源代码的获取：</p><ul><li>官方自建站点：<ul><li>apache.org (ASF：Apache Software Foundation)</li><li>mariadb.org</li></ul></li><li>…</li><li>代码托管：<ul><li>SourceForge.net</li><li>Github.com</li><li>code.google.com</li></ul></li></ul></li><li><p>c/c++编译器: gcc (GNU C Complier)</p></li><li><p>编译C源代码：</p><ul><li><p>准备：提供开发工具及开发环境</p><ul><li>开发工具：make, gcc等</li><li>开发环境：开发库，头文件<ul><li>glibc：标准库</li></ul></li></ul></li><li><p>实现：通过“包组”提供开发组件</p><ul><li>Development Tools</li><li>Server Platform Development</li></ul></li><li><p>生产实践：（基于最小化安装的系统）</p><p><code>yum install gcc gcc-c++ glibc glibc-devel pcre pcre-devel openssl openssl-devel systemd-devel zlib-devel vim lrzsz tree screen lsof tcpdump wget ntpdate net-tools iotop bc zip unzip nfs-utils</code></p></li></ul></li></ul><h3 id="第一步：configure脚本"><a href="#第一步：configure脚本" class="headerlink" title="第一步：configure脚本"></a>第一步：configure脚本</h3><ul><li><p>选项：指定安装位置、指定启用的特性</p><p>–help: 获取其支持使用的选项</p></li><li><p>选项分类：</p><ul><li><p>安装路径设定：</p><p>–prefix=/PATH：指定默认安装位置,默认为/usr/local/</p><p>–sysconfdir=/PATH：配置文件安装位置</p></li><li><p>System types：支持交叉编译</p></li><li><p>Optional Features: 可选特性</p><p>–disable-FEATURE</p><p>–enable-FEATURE[=ARG]</p></li><li><p>Optional Packages: 可选包</p><p>–with-PACKAGE[=ARG] 依赖包</p><p>–without-PACKAGE 禁用依赖关系</p></li><li><p>注意：通常被编译操作依赖的程序包，需要安装此程序包的“开发”组件，其包名一般类似于name-devel-VERSION </p></li></ul></li></ul><h3 id="第二步：make"><a href="#第二步：make" class="headerlink" title="第二步：make"></a>第二步：make</h3><h3 id="第三步：make-install"><a href="#第三步：make-install" class="headerlink" title="第三步：make install"></a>第三步：make install</h3><h3 id="安装后的配置"><a href="#安装后的配置" class="headerlink" title="安装后的配置"></a>安装后的配置</h3><ol><li><p>二进制程序目录导入至PATH环境变量中</p><p>编辑文件/etc/profile.d/NAME.sh</p><p>export PATH=/PATH/TO/BIN:$PATH</p></li><li><p>导出库文件路径</p><p>编辑/etc/ld.so.conf.d/NAME.conf</p><p>添加新的库文件所在的目录至此文件中</p><p>让系统重新生成缓存：ldconfig [-v]</p></li><li><p>导出头文件</p><p>基于链接的方式实现：ln -sv</p></li><li><p>导入帮助手册<br>编辑/etc/man.config|man_db.conf文件<br>添加一个MANPATH </p></li></ol><h1 id="Ubuntu软件管理"><a href="#Ubuntu软件管理" class="headerlink" title="Ubuntu软件管理"></a>Ubuntu软件管理</h1><h2 id="dpkg"><a href="#dpkg" class="headerlink" title="dpkg"></a>dpkg</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Debian软件包通常为预编译的二进制格式的扩展名“.deb”，类似rpm文件，因此安装快速，无需编译软件。包文件包括特定功能或软件所必需的文件、元数据和指令</li><li>dpkg：package manager for Debian，类似于rpm， dpkg是基于Debian的系统的包管理器。可以安装，删除和构建软件包，但无法自动下载和安装软件包或其依赖项</li></ul><h3 id="常见用法"><a href="#常见用法" class="headerlink" title="常见用法"></a>常见用法</h3><ul><li>dpkg -i package.deb 安装包</li><li>dpkg -r package 删除包，不建议，不自动卸载依赖于它的包</li><li>dpkg -P package 删除包（包括配置文件）</li><li>dpkg -l 列出当前已安装的包，类似rpm -qa</li><li>dpkg -l package 显示该包的简要说明，类似rpm –qi</li><li>dpkg -L package 列出该包中所包含的文件，类似rpm –ql</li><li>dpkg -S &lt;pattern&gt; 搜索包含pattern的包，类似rpm –qf</li><li>dpkg -s package 列出该包的状态，包括详细信息，类似rpm –qi</li><li>dpkg –configure package 配置包，-a 使用，配置所有没有配置的软件包</li><li>dpkg -c package.deb 列出 deb 包的内容，类似rpm –qpl</li><li>dpkg –unpack package.deb 解开 deb 包的内容</li></ul><h2 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><ul><li>Debian 使用APT工具来管理包系统，它与 apt 命令不同。在基于 Debian 的 Linux 发 行版中，有各种工具可以与 APT 进行交互，以方便用户安装、删除和管理的软件包。 apt-get 是其中一个常用的命令行工具，另外一款较为流行的命令行与 GUI 兼顾的工 具是 aptitude ，之前最常用的 Linux 包管理命令都被分散在了 apt-get、apt-cache 和 apt-config 这三条命令中</li><li>APT：Advanced Packaging Tool，功能强大的软件管理工具，甚至可升级整个Ubuntu的系统，基于客户/服务器架构</li><li>APT工作原理：在服务器上先复制所有DEB包，然后用APT的分析工具genbasedir根据每个DEB 包的包头（Header）信息对所有的DEB包进行分析，并将该分析结果记录在文件夹base内的一个DEB 索引清单文件中，一旦APT 服务器内的DEB有所变动，要使用genbasedir产生新的DEB索引清单。客户端在进行安装或升级时先要查询DEB索引清单，从而获知所有具有依赖关系的软件包，并一同下载到客户端以便安装。当客户端需要安<br>装、升级或删除某个软件包时，客户端计算机取得DEB索引清单压缩文件后，会将其解压置放于 /var/cache/apt/，而客户端使用apt-get install或apt-get upgrade命令的时候，就会将这个文件夹内的数据和客户端计算机内的DEB数据库比对，知道哪些DEB已安装、未安装或是可以升级的。</li><li>在 2014 年apt 命令发布第一个稳定版，Ubuntu 16.04 引入新特性之一便是 apt 命令， apt 命令解决了命令过于分散的问题，它包括 apt-get 命令出现以来使用最广泛的功能 选项，以及 apt-cache 和 apt-config 命令中很少用到的功能。在使用 apt 命令时，用 户不必再由 apt-get 转到 apt-cache 或 apt-config，提供管理软件包所需的必要选项</li><li>apt 相当于 apt-get、apt-cache 和 apt-config 中最常用命令选项的集合</li><li>apt 具有更精减但足够的命令选项，而且参数选项的组织方式更为有效。此外，启用的 几个特性也非常有帮助。例如：可以在使用 apt 命令安装或删除程序时看到进度条,apt 还会在更新存储库数据库时提示用户可升级的软件包个数</li><li>apt 与 apt-get 有一些类似的命令选项，但它并不能完全向下兼容 apt-get 命令,也即 可用 apt 替换部分 apt-get 系列命令，但不是全部</li></ul><h3 id="常见用法-1"><a href="#常见用法-1" class="headerlink" title="常见用法"></a>常见用法</h3><table><thead><tr><th>apt 命令</th><th>被取代的命令</th><th>命令的功能</th></tr></thead><tbody><tr><td>apt install</td><td>apt-get install</td><td>安装软件包</td></tr><tr><td>apt remove</td><td>apt-get remove</td><td>移除软件包</td></tr><tr><td>apt purge</td><td>apt-get purge</td><td>移除软件包及配置文件</td></tr><tr><td>apt update</td><td>apt-get update</td><td>刷新存储库索引</td></tr><tr><td>apt upgrade</td><td>apt-get upgrade</td><td>升级所有可升级的软件包</td></tr><tr><td>apt autoremove</td><td>apt-get autoremove</td><td>自动删除不需要的包</td></tr><tr><td>apt full-upgrade</td><td>apt-get dist-upgrade</td><td>在升级软件包时自动处理依赖关系</td></tr><tr><td>apt search</td><td>apt-cache search</td><td>搜索应用程序</td></tr><tr><td>apt show</td><td>apt-cache show</td><td>显示安装细节</td></tr></tbody></table><ul><li><p>apt 特有的命令</p><ul><li>apt list  列出包含条件的包（已安装，可升级等）</li><li>apt edit-sources 编辑源列表</li></ul></li><li><p>APT包索引来自/etc/apt/sources.list文件和/etc/apt/sources.list.d目录中定义<br>的存储库的可用包的数据库。要使用存储库中所做的最新更改来更新本地程序<br>包索引</p></li><li><p>apt命令操作（如安装和删除软件包）记录在/var/log/dpkg.log日志文件中</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-09-进程和计划任务</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-09-%E8%BF%9B%E7%A8%8B%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-09-%E8%BF%9B%E7%A8%8B%E5%92%8C%E8%AE%A1%E5%88%92%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><ul><li>内核功用：进程管理、文件系统、网络功能、内存管理、驱动程序、安全功能等</li><li>Process: 运行中的程序的一个副本，是被载入内存的一个指令集合<ul><li>进程ID（Process ID，PID）号码被用来标记各个进程</li><li>UID、GID、和SELinux语境决定对文件系统的存取和访问权限</li><li>通常从执行进程的用户来继承</li><li>存在生命周期</li></ul></li><li>task struct：Linux内核存储进程信息的数据结构格式</li><li>task list：多个任务的的task struct组成的链表</li><li>进程创建：<ul><li>init：第一个进程</li><li>进程：除了init进程，其他进程都由其父进程创建，fork()自身而来，父子关系</li><li>CoW，写时复制，即如果子进程需要修改数据，会把父进程的数据复制一份出来再修改</li></ul></li></ul><h2 id="进程，线程和协程"><a href="#进程，线程和协程" class="headerlink" title="进程，线程和协程"></a>进程，线程和协程</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503213959495.png" alt="image-20200503213959495"></p><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><ul><li>Page Frame: 页框，用存储页面数据，存储Page 4k</li><li>物理地址空间和线性地址空间</li><li>MMU：Memory Management Unit 负责转换线性和物理地址</li><li>TLB：Translation Lookaside Buffer 翻译后备缓冲器<br>用于保存虚拟地址和物理地址映射关系的缓存</li><li>LRU：Least Recently Used 近期最少使用算法,释放内存</li></ul><h2 id="用户和内核空间"><a href="#用户和内核空间" class="headerlink" title="用户和内核空间"></a>用户和内核空间</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503214119610.png" alt="image-20200503214119610"></p><h2 id="进程的基本状态及转换"><a href="#进程的基本状态及转换" class="headerlink" title="进程的基本状态及转换"></a>进程的基本状态及转换</h2><ul><li>创建状态：进程在创建时需要申请一个空白PCB(process control block进程控制块)，向其中填写控制和管理进程的信息，完成资源分配。如果创建工作无法完成，比如资源无法满足，就无法被调度运行，把此时进程所处状态称为创建状态</li><li>就绪状态：进程已准备好，已分配到所需资源，只要分配到CPU就能够立即运行</li><li>执行状态：进程处于就绪状态被调度后，进程进入执行状态</li><li>阻塞状态：正在执行的进程由于某些事件（I/O请求，申请缓存区失败）而暂时无法运行，进程受到阻塞。在满足请求时进入就绪状态等待系统调用</li><li>终止状态：进程结束，或出现错误，或被系统终止，进入终止状态。无法再执行</li></ul><hr><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503214227297.png" alt="image-20200503214227297"></p><p>转换的六种情况</p><ul><li>运行——&gt;就绪：1，主要是进程占用CPU的时间过长，而系统分配给该进程占用CPU的时间是有限的；2，在采用抢先式优先级调度算法的系统中,当有更高优先级的进程要运行时，该进程就被迫让出CPU，该进程便由执行状态转变为就绪状态</li><li>就绪——&gt;运行：运行的进程的时间片用完，调度就转到就绪队列中选择合适的进程分配CPU</li><li>运行——&gt;阻塞：正在执行的进程因发生某等待事件而无法执行，则进程由执行状态变为阻塞状态，如发生了I/O请求</li><li>阻塞——&gt;就绪:进程所等待的事件已经发生，就进入就绪队列</li><li>以下两种状态是不可能发生的：<ul><li>阻塞——&gt;运行：即使给阻塞进程分配CPU，也无法执行，操作系统在进行调度时不会从阻塞队列进行挑选，而是从就绪队列中选取</li><li>就绪——&gt;阻塞：就绪态根本就没有执行，谈不上进入阻塞态</li></ul></li></ul><h2 id="LRU算法"><a href="#LRU算法" class="headerlink" title="LRU算法"></a>LRU算法</h2><p>假设序列为 4 3 4 2 3 1 4 2物理块有3个，则</p><ul><li>第1轮 4调入内存 4</li><li>第2轮 3调入内存 3 4</li><li>第3轮 4调入内存 4 3</li><li>第4轮 2调入内存 2 4 3</li><li>第5轮 3调入内存 3 2 4</li><li>第6轮 1调入内存 1 3 2</li><li>第7轮 4调入内存 4 1 3</li><li>第8轮 2调入内存 2 4 1</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503214454170.png" alt="image-20200503214454170"></p><h2 id="IPC进程间通信"><a href="#IPC进程间通信" class="headerlink" title="IPC进程间通信"></a>IPC进程间通信</h2><p>IPC: Inter Process Communication</p><ul><li>同一主机：<ul><li>pipe 管</li><li>socket 套接字文件</li><li>signal 信号</li><li>shm ：shared memory</li><li>semaphore 信号量，一种计数器</li></ul></li><li>不同主机：socket IP和端口号<ul><li>RPC ：Remote Procedure Call</li><li>MQ 消息队列，如：Kafka，RabbitMQ，ActiveMQ</li></ul></li></ul><h2 id="进程优先级"><a href="#进程优先级" class="headerlink" title="进程优先级"></a>进程优先级</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503214617437.png" alt="image-20200503214617437"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503214625339.png" alt="image-20200503214625339"></p><ul><li><p>进程优先级：</p><ul><li><p>系统优先级：数字越小，优先级越高</p><ul><li>0-139：各有140个运行队列和过期队列</li></ul></li><li><p>实时优先级: 99-0 值最大优先级最高</p></li><li><p>nice值：-20到19，对应系统优先级100-139</p><p>注意：仅管理员可调低nice值</p><ul><li><p>nice命令<br>nice [OPTION] [COMMAND [ARG]…]</p><p><code>nice -n 19 vim &amp;  </code>#设置优先级为19</p></li><li><p>renice命令<br>renice [-n] priority pid…</p></li></ul></li></ul></li><li><p>Big O：时间复杂度，用时和规模的关系</p><ul><li>O(1), O(logn), O(n)线性, O(n^2)抛物线, O(2^n)</li></ul></li></ul><h2 id="进程运行状态"><a href="#进程运行状态" class="headerlink" title="进程运行状态"></a>进程运行状态</h2><ul><li><p>Linux内核：抢占式多任务</p></li><li><p>进程类型：</p><ul><li>守护进程: daemon,在系统引导过程中启动的进程，和终端无关进程</li><li>前台进程(用户进程)：跟终端相关，通过终端启动的进程</li><li>注意：两者可相互转化</li></ul></li><li><p>进程状态：</p><ul><li><p>运行态：running</p></li><li><p>就绪态：ready</p><blockquote><p><strong>就绪状态的状态标志state的值为TASK_RUNNING。</strong>此时，程序已被挂入运行队列，处于准备运行状态。一旦获得处理器使用权，即可进入运行状态。</p><p><strong>当进程获得处理器而运行时 ，state的值仍然为TASK_RUNNING</strong>，并不发生改变；但Linux会把一个专门用来指向当前运行任务的指针current指向它，以表示它是一个正在运行的进程。</p></blockquote></li><li><p>睡眠态：</p><ul><li>可中断：interruptable <strong>状态标志state的值为TASK_INTERRUPTIBL</strong>。此时，由于进程未获得它所申请的资源而处在等待状态。一旦资源有效或者有唤醒信号，进程会立即结束等待而进入就绪状态。</li><li>不可中断：uninterruptable <strong>状态标志state的值为TASK_UNINTERRUPTIBL</strong>。此时，进程也处于等待资源状态。一旦资源有效，进程会立即进入就绪状态。这个等待状态与可中断等待状态的区别在于：处于TASK_UNINTERRUPTIBL状态的进程不能被信号量或者中断所唤醒，只有当它申请的资源有效时才能被唤醒。这个状态被应用在内核中某些场景中，比如当进程需要对磁盘进行读写，而此刻正在DMA中进行着数据到内存的拷贝，如果这时进程休眠被打断（比如强制退出信号）那么很可能会出现问题，所以这时进程就会处于不可被打断的状态下。</li></ul></li><li><p>停止态：<strong>状态标志state的值为TASK_STOPPED。</strong>当进程收到一个SIGSTOP信号后，就由运行状态进入停止状态，当受到一个SIGCONT信号时，又会恢复运行状态。这种状态主要用于程序的调试，又被叫做“暂停状态”、“挂起状态”，即暂停于内存，但不会被调度，除非手动启动</p></li><li><p>僵死态：<strong>状态标志state的值为TASK_DEAD。</strong>进程因某种原因而中止运行，进程占有的所有资源将被回收，除了task_struct结构（以及少数资源）以外，并且系统对它不再予以理睬，所以这种状态也叫做“僵死状态”，父进程结束前，子进程不关闭</p></li></ul></li></ul><h2 id="进程的分类"><a href="#进程的分类" class="headerlink" title="进程的分类"></a>进程的分类</h2><ul><li>CPU-Bound：CPU密集型，非交互</li><li>IO-Bound：IO密集型，交互</li></ul><h1 id="管理工具"><a href="#管理工具" class="headerlink" title="管理工具"></a>管理工具</h1><h2 id="进程-1"><a href="#进程-1" class="headerlink" title="进程"></a>进程</h2><ul><li><p>Linux系统状态的查看及管理工具：</p><p>pstree, ps, pidof, pgrep, top, htop, glance, pmap, vmstat, dstat, kill, pkill, job, bg, fg, nohup</p></li><li><p>/proc/uptime 包括两个值，单位 s<br>系统启动时长，空闲进程的总时长（按总的CPU核数计算）</p></li><li><p>uptime 和 w</p><p>显示当前时间，系统已启动的时间、当前上线人数，系统平均负载（1、5、15)分钟的平均负载，一般不会超过1，超过5时建议警报）</p><ul><li>系统平均负载:<ul><li>指在特定时间间隔内运行队列中的平均进程数</li></ul></li><li>通常每个CPU内核的当前活动进程数不大于3，那么系统的性能良好。如果每个CPU内核的任务数大于5，那么此主机的性能有严重问题</li><li>如果linux主机是1个双核CPU，当Load Average 为6的时候说明机器已经被充分使用</li></ul></li></ul><h3 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h3><p>进程树查看</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[root@host1 ~]<span class="comment"># pstree</span></span><br><span class="line">systemd─┬─NetworkManager───2*[&#123;NetworkManager&#125;]</span><br><span class="line">        ├─VGAuthService</span><br><span class="line">        ├─agetty</span><br><span class="line">        ├─atd</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─chronyd</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon</span><br><span class="line">        ├─irqbalance───&#123;irqbalance&#125;</span><br><span class="line">        ├─polkitd───5*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rngd───&#123;rngd&#125;</span><br><span class="line">        ├─rsyslogd───2*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─sshd───sshd───sshd───bash───pstree</span><br><span class="line">        ├─sssd─┬─sssd_be</span><br><span class="line">        │      └─sssd_nss</span><br><span class="line">        ├─systemd───(sd-pam)</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-resolve</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        ├─tuned───3*[&#123;tuned&#125;]</span><br><span class="line">        └─vmtoolsd───&#123;vmtoolsd&#125;</span><br></pre></td></tr></table></figure><h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><ul><li>ps [OPTION]…  显示命令执行那一刻的进程状态</li><li>支持三种选项：<ul><li>UNIX选项  如-A -e</li><li>BSD选项 如a</li><li>GNU选项 如–help</li><li>选项：默认显示当前终端中的进程<ul><li>a 选项包括所有与终端相关的进程</li><li>x 选项包括所有与终端无关的进程</li><li>u 选项显示进程所有者的信息</li><li>f 选项显示进程树,相当于 –fores</li><li>k|–sort  属性 对属性排序,属性前加- 表示倒序</li><li>o 属性… 选项显示定制的信息 pid、cmd、%cpu、%mem。以逗号分隔</li><li>L 显示支持的属性列表</li></ul></li></ul></li></ul><h4 id="ps常见选项"><a href="#ps常见选项" class="headerlink" title="ps常见选项"></a>ps常见选项</h4><ul><li><p>-C cmdlist 指定命令，多个命令用，分隔</p></li><li><p>-L 显示线程</p></li><li><p>-e 显示所有进程，相当于-A</p></li><li><p>-f 显示完整格式程序信息</p></li><li><p>-F 显示更完整格式的进程信息</p></li><li><p>-H 以进程层级格式显示进程相关信息</p></li><li><p>-u userlist  指定有效用户ID或名称</p></li><li><p>-U userlist 指定实际用户ID或名称</p><blockquote><p>实际用户：表示一开始执行程序的用户，比如用账号iceup登录shell，然后执行程序ls，那么实际用户就是iceup。<br>有效用户：有效用户是指在程序运行时，计算权限的用户。大多数情况下实际用户和有效用户相等，但是在执行拥有SUID权限的程序的时候，这两个用户通常会不一致。</p></blockquote></li><li><p>-g gid或groupname  指定有效gid或组名称</p></li><li><p>-G gid或groupname  指定实际gid或组名称</p></li><li><p>-p pid 显示pid的进程</p></li><li><p>–ppid pid  显示属于pid的子进程</p></li><li><p>-t ttylist 指定tty,相当于 t</p></li><li><p>-M 显示SELinux信息，相当于Z</p></li></ul><h4 id="ps输出属性"><a href="#ps输出属性" class="headerlink" title="ps输出属性"></a>ps输出属性</h4><ul><li>VSZ: Virtual memory SiZe，虚拟内存集，线性内存</li><li>RSS: ReSident Size, 常驻内存集</li><li>TTY: 终端</li><li>STAT：进程状态<ul><li>R：running </li><li>S: interruptable sleeping</li><li>D: uninterruptable sleeping</li><li>T: stopped</li><li>Z: zombie</li><li>+: 前台进程</li><li>l: 多线程进程</li><li>L：内存分页并带锁</li><li>N：低优先级进程</li><li>&lt;: 高优先级进程</li><li>s: session leader，会话（子进程）发起者</li></ul></li><li>ni: nice值</li><li>pri: priority 优先级</li><li>rtprio: 实时优先级</li><li>C：cpu utilization  占用百分比</li><li>psr: processor CPU编号</li><li>SHR — 共享内存大小，单位kb</li><li>示例：<ul><li>ps axo pid,cmd,psr,ni,pri,rtprio</li></ul></li><li>常用组合：<ul><li>aux</li><li>-ef</li><li>-eFH</li><li>-eo pid,tid,class,rtprio,ni,pri,psr,pcpu,stat,comm</li><li>axo stat,euid,ruid,tty,tpgid,sess,pgrp,ppid,pid,pcpu,comm</li></ul></li></ul><h4 id="ps示例"><a href="#ps示例" class="headerlink" title="ps示例"></a>ps示例</h4><ul><li><p>查询你拥有的所有进程</p><ul><li><code>ps -x</code></li></ul></li><li><p>显示指定用户名(RUID)或用户ID的进程</p><ul><li><code>ps -fU apache</code></li><li><code>ps -fU 48</code></li></ul></li><li><p>显示指定用户名(EUID)或用户ID的进程</p><ul><li><code>ps -fu wang</code></li><li><code>ps -fu 1000</code></li></ul></li><li><p>查看以root用户权限（实际和有效ID）运行的每个进程</p><ul><li><code>ps -U root -u root</code></li></ul></li><li><p>列出某个组拥有的所有进程（实际组ID：RGID或名称）</p><ul><li><code>ps -fG nginx</code></li></ul></li><li><p>列出有效组名称（或会话）所拥有的所有进程</p><ul><li><code>ps -fg mysql</code></li><li><code>ps -fg 27</code></li></ul></li><li><p>显示指定的进程ID对应的进程</p><ul><li><code>ps -fp 1234</code></li></ul></li><li><p>以父进程ID来显示其下所有的进程，如显示父进程为1234的所有进程</p><ul><li><code>ps -f --ppid 1234</code></li></ul></li><li><p>显示指定PID的多个进程</p><ul><li><code>ps -fp 1204,1239,1263</code></li></ul></li><li><p>要按tty显示所属进程</p><ul><li><code>ps -ft pts/0</code></li></ul></li><li><p>以进程树显示系统中的进程如何相互链接</p><ul><li><code>ps -e --forest</code></li></ul></li><li><p>以进程树显示指定的进程</p><ul><li><code>ps -f --forest -C sshd</code></li><li><code>ps -ef --forest | grep -v grep | grep sshd</code></li></ul></li><li><p>要显示一个进程的所有线程,将显示LWP（轻量级进程）以及NLWP（轻量级进程数）列</p><ul><li><code>ps -fL -C nginx</code></li></ul></li><li><p>要列出所有格式说明符</p><ul><li><code>ps L</code></li></ul></li><li><p>查看进程的PID，PPID，用户名和命令</p><ul><li><code>ps -eo pid,ppid,user,cmd</code></li></ul></li><li><p>自定义格式显示文件系统组,ni值开始时间和进程的时间</p><ul><li><code>ps -p 1234 -o pid,ppid,fgroup,ni,lstart,etime</code></li></ul></li><li><p>使用其PID查找进程名称：</p><ul><li><code>ps -p 1244 -o comm=x</code></li></ul></li><li><p>要以其名称选择特定进程，显示其所有子进程</p><ul><li><code>ps -C sshd,bash</code></li></ul></li><li><p>查找指定进程名所有的所属PID，在编写需要从std输出或文件读取PID的脚本时这个参数很有用</p><ul><li><code>ps -C httpd,sshd -o pid=x</code></li></ul></li><li><p>检查一个进程的执行时间</p><ul><li><code>ps -eo comm,etime,user | grep nginx</code></li></ul></li><li><p>查找占用最多内存和CPU的进程</p><ul><li><code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head</code></li><li><code>ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%cpu | head</code></li></ul></li><li><p>显示安全信息</p><ul><li><code>ps -eM</code>                    </li><li><code>ps --context</code></li></ul></li><li><p>使用以下命令以用户定义的格式显示安全信息</p><ul><li><code>ps -eo euser,ruser,suser,fuser,f,comm,label</code></li></ul></li><li><p>使用watch实用程序执行重复的输出以实现对就程进行实时的监视，如下面的命令显示每秒钟的监视</p><ul><li><code>watch -n 1 &#39;ps -eo pid,ppid,cmd,%mem,%cpu --sort=-%mem | head&#39;</code></li></ul></li></ul><h3 id="pgrep"><a href="#pgrep" class="headerlink" title="pgrep"></a>pgrep</h3><ul><li>-u uid  有效用户</li><li>-U uid  真实用户</li><li>-t TERMINAL  与指定的终端相关的进程</li><li>-l  显示进程名</li><li>-a  显示完整格式的进程名</li><li>-P pid：显示此进程的子进程</li></ul><h3 id="pidof"><a href="#pidof" class="headerlink" title="pidof"></a>pidof</h3><p>根据进程名，取其pid</p><p><code>pidof sshd</code></p><h3 id="top"><a href="#top" class="headerlink" title="top"></a>top</h3><ul><li><p>top：有许多内置命令</p><ul><li>排序：<ul><li>P：以占据的CPU百分比,%CPU</li><li>M：占据内存百分比,%MEM</li><li>T：累积占据CPU时长,TIME+</li></ul></li><li>首部信息显示：<ul><li>uptime信息：l命令</li><li>tasks及cpu信息：t命令</li><li>cpu分别显示：1 (数字)</li><li>memory信息：m命令</li></ul></li><li>退出命令：q</li><li>修改刷新时间间隔：s</li><li>终止指定进程：k</li><li>保存文件：W</li></ul></li><li><p>指定显示的任务数：n</p></li><li><p>栏位信息简介</p><ul><li>us：用户空间</li><li>sy：内核空间</li><li>ni：调整nice时间</li><li>id：空闲</li><li>wa：等待IO时间</li><li>hi：硬中断</li><li>si：软中断s</li><li>st：虚拟机偷走的时间</li></ul></li><li><p>选项：</p><ul><li>-d # 指定刷新时间间隔，默认为3秒</li><li>-b 以批次方式显示</li><li>-n # 刷新多少次后退出</li><li>-H 线程模式，示例：top -H -p `pidof mysqld`</li></ul></li></ul><h3 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h3><ul><li><p>选项：</p><ul><li>-d #: 指定延迟时间；</li><li>-u UserName: 仅显示指定用户的进程</li><li>-s COLUME: 以指定字段进行排序</li></ul></li><li><p>子命令：</p><ul><li>s：跟踪选定进程的系统调用</li><li>l：显示选定进程打开的文件列表</li><li>a：将选定的进程绑定至某指定CPU核心</li><li>t：显示进程树</li></ul></li></ul><h3 id="kill"><a href="#kill" class="headerlink" title="kill"></a>kill</h3><ul><li>kill命令：向进程发送控制信号，以实现对进程管理,每个信号对应一个数字，信号名称以SIG开头（可省略），不区分大小写<ul><li>显示当前系统可用信号： <code>kill –l</code> 或者 <code>trap -l</code></li><li>常用信号：<code>man 7 signal</code><ol><li>SIGHUP 无须关闭进程而让其重读配置文件</li><li>SIGINT 中止正在运行的进程；相当于Ctrl+c</li><li>SIGQUIT 相当于ctrl+\</li><li>SIGKILL 强制杀死正在运行的进程</li><li>SIGTERM 终止正在运行的进程</li><li>SIGCONT 继续运行</li><li>SIGSTOP 后台休眠</li></ol></li><li>指定信号的方法 :<ul><li>(1) 信号的数字标识：1, 2, 9</li><li>(2) 信号完整名称：SIGHUP</li><li>(3) 信号的简写名称：HUP</li></ul></li></ul></li><li>按PID：kill [-SIGNAL] pid …<ul><li><code>kill –n SIGNAL pid</code></li><li><code>kill –s SIGNAL pid</code></li></ul></li><li>按名称：<code>killall [-SIGNAL] comm…</code></li><li>按模式：<code>pkill [options] pattern</code><ul><li>-SIGNAL</li><li>-u uid: effective user，生效者</li><li>-U uid: real user，真正发起运行命令者</li><li>-v: 与条件不符合的程序</li></ul></li></ul><h2 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h2><h3 id="free"><a href="#free" class="headerlink" title="free"></a>free</h3><p>free [OPTION]</p><ul><li><p>-b 以字节为单位</p></li><li><p>-m 以MB为单位</p></li><li><p>-g 以GB为单位</p></li><li><p>-h 易读格式</p></li><li><p>-o 不显示-/+buffers/cache行</p></li><li><p>-t  显示RAM + swap的总和<br>-s n 刷新间隔为n秒<br>-c n 刷新n次后即退出</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503221502623.png" alt="image-20200503221502623"></p></li></ul><h3 id="vmstat"><a href="#vmstat" class="headerlink" title="vmstat"></a>vmstat</h3><ul><li>vmstat命令：虚拟内存信息<ul><li>vmstat [options] [delay] [count]</li><li>vmstat 2 5 </li></ul></li><li>选项：<br>-s: 显示内存的统计数据</li></ul><hr><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@backup backup]<span class="comment"># vmstat</span></span><br><span class="line">procs -----------memory---------- ---swap-- -----io---- -system-- ------cpu-----</span><br><span class="line"> r  b   swpd   free   buff  cache   si   so    bi    bo   <span class="keyword">in</span>   cs us sy id wa st</span><br><span class="line"> 1  0      0 387012   3268 248620    0    0     5     1   43   60  0  0 100  0  0</span><br></pre></td></tr></table></figure><ul><li><p>procs:</p><ul><li>r：可运行（正运行或等待运行）进程的个数，和核心数有关</li><li>b：处于不可中断睡眠态的进程个数(被阻塞的队列的长度)</li></ul></li><li><p>memory：</p><ul><li>swpd: 交换内存的使用总量</li><li>free：空闲物理内存总量</li><li>buffer：用于buffer的内存总量</li><li>cache：用于cache的内存总量</li></ul></li><li><p>swap:</p><ul><li>si：从磁盘交换进内存的数据速率(kb/s)</li><li>so：从内存交换至磁盘的数据速率(kb/s)</li></ul></li><li><p>io：</p><ul><li>bi：从块设备读入数据到系统的速率(kb/s)</li><li>bo: 保存数据至块设备的速率</li></ul></li><li><p>system：</p><ul><li>in: interrupts 中断速率，包括时钟</li><li>cs: context switch 进程(上下文)切换速率</li></ul></li><li><p>cpu：</p><ul><li>us:Time spent running non-kernel code</li><li>sy: Time spent running kernel code</li><li>id: Time spent idle. Linux 2.5.41前,包括IO-wait time.</li><li>wa: Time spent waiting for IO. 2.5.41前，包括in idle.</li><li>st: Time stolen from a virtual machine. 2.6.11前, unknown.</li></ul></li></ul><h3 id="pmap"><a href="#pmap" class="headerlink" title="pmap"></a>pmap</h3><p>report memory map of a peocess</p><p>pmap [options] pid […]</p><ul><li>-x  查看细节</li><li>-X  查看更多细节</li></ul><p>另一种查看方式</p><p><code>cat /proc/PID/maps</code></p><h2 id="作业管理"><a href="#作业管理" class="headerlink" title="作业管理"></a>作业管理</h2><ul><li><p>Linux的作业控制</p><ul><li>前台作业：通过终端启动，且启动后一直占据终端</li><li>后台作业：可通过终端启动，但启动后即转入后台运行（释放终端）</li></ul></li><li><p>让作业运行于后台<br>(1) 运行中的作业： Ctrl+z<br>(2) 尚未启动的作业：COMMAND &amp;</p><p>后台作业虽然被送往后台运行，但其依然与终端相关；退出终端，将关闭后台作业。如果希望送往后台后，剥离与终端的关系</p><ul><li>nohup COMMAND &amp;&gt;/dev/null &amp;   </li><li>screen；COMMAND</li></ul></li><li><p>查看当前终端所有作业：<code>jobs</code></p></li><li><p>作业控制：</p><ul><li>fg [[%]JOB_NUM]：把指定的后台作业调回前台</li><li>bg [[%]JOB_NUM]：让送往后台的作业在后台继续运行</li><li>kill [%JOB_NUM]： 终止指定的作业  %不能省</li></ul></li><li><p>并行运行同时运行多个进程，提高效率</p><ul><li><p>方法1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim all.sh</span><br><span class="line">f1.sh&amp;</span><br><span class="line">f2.sh&amp;</span><br><span class="line">f3.sh&amp;</span><br></pre></td></tr></table></figure></li><li><p>方法2</p><p>(f1.sh&amp;);(f2.sh&amp;);(f3.sh&amp;)</p></li><li><p>方法3</p><p>{ f1.sh&amp; f2.sh&amp; f3.sh&amp; }</p></li></ul></li></ul><h1 id="监控工具"><a href="#监控工具" class="headerlink" title="监控工具"></a>监控工具</h1><ul><li><p>iostat：统计CPU和设备IO信息 示例：iostat 1 10</p></li><li><p>iftop：显示带宽使用情况，EPEL源 示例：iftop -n -i eth1</p></li><li><p>pmap命令：进程对应的内存映射</p><p>pmap [options] pid […]</p><ul><li>-x: 显示详细格式的信息</li><li>示例：<code>pmap 1</code></li></ul></li><li><p>另外一种实现</p><p><code>cat /proc/PID/maps</code></p></li></ul><h2 id="glance"><a href="#glance" class="headerlink" title="glance"></a>glance</h2><ul><li><p>glances命令：EPEL源</p></li><li><p><code>glances [-bdehmnrsvyz1] [-B bind] [-c server] [-C conffile] [-p port] [-P password] [--password] [-t refresh] [-f file] [-o output]</code></p></li><li><p>内建命令：</p><ul><li><p>a Sort processes automatically </p></li><li><p>l Show/hide logs</p></li><li><p>c Sort processes by CPU% </p></li><li><p>b Bytes or bits for network I/O </p></li><li><p>m Sort processes by MEM% </p></li><li><p>w Delete warning logs</p></li><li><p>p Sort processes by name </p></li><li><p>x Delete warning and critical logs</p></li><li><p>i  Sort processes by I/O rate </p></li><li><p>1 Global CPU or per-CPU stats</p></li><li><p>d Show/hide disk I/O stats </p></li><li><p>h Show/hide this help screen   显示帮助</p></li><li><p>f Show/hide file system stats </p></li><li><p>t View network I/O as combination</p></li><li><p>n Show/hide network stats </p></li><li><p>u View cumulative network I/O</p></li><li><p>s Show/hide sensors stats </p></li><li><p>q Quit (Esc and Ctrl-C also work)</p></li><li><p>y Show/hide hddtemp stats</p></li></ul></li><li><p>常用选项</p><ul><li>-b: 以Byte为单位显示网卡数据速率</li><li>-d: 关闭磁盘I/O模块</li><li>-f /path/to/somefile: 设定输入文件位置</li><li>-o {HTML|CSV}：输出格式</li><li>-m: 禁用mount模块</li><li>-n: 禁用网络模块</li><li>-t #: 延迟时间间隔</li><li>-1：每个CPU的相关数据单独显示</li></ul></li><li><p>C/S模式下运行glances命令</p><ul><li>服务器模式：<br><code>glances -s -B IPADDR</code><br>IPADDR: 指明监听的本机哪个地址</li><li>客户端模式：<br><code>glances -c IPADDR</code><br>IPADDR：要连入的服务器端地址</li></ul></li></ul><h2 id="dstat"><a href="#dstat" class="headerlink" title="dstat"></a>dstat</h2><ul><li>dstat命令：系统资源统计,代替vmstat,iostat</li><li>dstat [-afv] [options..] [delay] [count]<ul><li>-c 显示cpu相关信息</li><li>-C #,#,…,total  分别显示  </li><li>-d 显示disk相关信息</li><li>-D total,sda,sdb,…</li><li>-g 显示page相关统计数据</li><li>-m 显示memory相关统计数据</li><li>-n 显示network相关统计数据</li><li>-p 显示process相关统计数据</li><li>-r 显示io请求相关的统计数据</li><li>-s 显示swapped相关的统计数据</li><li>–tcp</li><li>–udp</li><li>–unix</li><li>–raw</li><li>–socket</li><li>–ipc</li><li>–top-io: 显示最占用io的进程</li><li>–top-mem: 显示最占用内存的进程</li><li>–top-latency: 显示延迟最大的进程</li></ul></li></ul><h2 id="iotop"><a href="#iotop" class="headerlink" title="iotop"></a>iotop</h2><ul><li><p>iotop命令是一个用来监视磁盘I/O使用状况的top类工具iotop具有与top相似的UI，其中包括PID、用户、I/O、进程等相关信息，可查看每个进程是如何使用IO</p></li><li><p>iotop输出</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200504082527152.png" alt="image-20200504082527152"></p><ul><li><p>第一行：Read和Write速率总计 </p></li><li><p>第二行：实际的Read和Write速率</p></li><li><p>第三行：参数如下：</p><ul><li>线程ID（按p切换为进程ID） </li><li>优先级</li><li>用户</li><li>磁盘读速率 </li><li>磁盘写速率</li><li>swap交换百分比</li><li>IO等待所占的百分比</li><li>线程/进程命令</li></ul></li><li><p>常用参数和快捷键</p><ul><li><p>-o, –only只显示正在产生I/O的进程或线程，除了传参，可以在运行过程中按o生效</p></li><li><p>-b, –batch非交互模式，一般用来记录日志</p></li><li><p>-n NUM, –iter=NUM设置监测的次数，默认无限。在非交互模式下很有用</p></li><li><p>-d SEC, –delay=SEC设置每次监测的间隔，默认1秒，接受非整形数据例如1.1</p></li><li><p>-p PID, –pid=PID指定监测的进程/线程</p></li><li><p>-u USER, –user=USER指定监测某个用户产生的I/O</p></li><li><p>-P, –processes仅显示进程，默认iotop显示所有线程</p></li><li><p>-a, –accumulated显示累积的I/O，而不是带宽</p></li><li><p>-k, –kilobytes使用kB单位，而不是对人友好的单位。在非交互模式下，脚本编程有用</p></li><li><p>-t, –time 加上时间戳，非交互非模式</p></li><li><p>-q, –quiet 禁止头几行，非交互模式，有三种指定方式</p><ul><li>-q 只在第一次监测时显示列名</li><li>-qq 永远不显示列名</li><li>-qqq 永远不显示I/O汇总</li></ul></li><li><p>交互按键</p><ul><li>left和right方向键：改变排序</li><li>r：反向排序</li><li>o：切换至选项–only</li><li>p：切换至–processes选项</li><li>a：切换至–accumulated选项</li><li>q：退出</li><li>i：改变线程的优先级</li></ul></li></ul></li></ul></li></ul><h2 id="nload"><a href="#nload" class="headerlink" title="nload"></a>nload</h2><ul><li><p>nload是一个实时监控网络流量和带宽使用情况，以数值和动态图展示进出的流量情况</p></li><li><p>界面操作</p><ul><li>上下方向键、左右方向键、enter键或者tab键都就可以切换查看多个网卡的流量情况</li><li>按 F2 显示选项窗口</li><li>按 q 或者 Ctrl+C 退出 nload</li></ul></li><li><p>示例：</p><ul><li>nload：默认只查看第一个网络的流量进出情况</li><li>nload eth0 eth1：在nload后面指定网卡，可以指定多个</li></ul></li><li><p>设置刷新间隔：默认刷新间隔是100毫秒，可通过 -t命令设置刷新时间（单位是毫秒）<code>nload -t 500 ens33</code></p></li><li><p>设置单位：显示两种单位一种是显示Bit/s、一种是显示Byte/s，默认是以Bit/s，也可不显示/s</p><p>-u h|b|k|m|g|H|B|K|M|G 表示的含义： </p><p>h: auto, b: Bit/s, k: kBit/s, m: MBit/s, H: auto, B: Byte/s, K: kByte/s, M: MByte/s</p><p><code>nload -u M eth0</code></p></li></ul><h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><ul><li><p>lsof：list open files查看当前系统文件的工具。在linux环境下，一切皆文件，用户通过文件不仅可以访问常规数据，还可以访问网络连接和硬件如传输控制协议 (TCP) 和用户数据报协议 (UDP)套接字等，系统在后台都为该应用程序分配了一个文件描述符</p></li><li><p>命令参数</p><ul><li><p>-a：列出打开文件存在的进程</p></li><li><p>-c&lt;进程名&gt;：列出指定进程所打开的文件</p></li><li><p>-g：列出GID号进程详情</p></li><li><p>-d&lt;文件号&gt;：列出占用该文件号的进程</p></li><li><p>+d&lt;目录&gt;：列出目录下被打开的文件</p></li><li><p>+D&lt;目录&gt;：递归列出目录下被打开的文件</p></li><li><p>-n&lt;目录&gt;：列出使用NFS的文件</p></li><li><p>-i&lt;条件&gt;：列出符合条件的进程(4、6、协议、:端口、 @ip )</p></li><li><p>-p&lt;进程号&gt;：列出指定进程号所打开的文件</p></li><li><p>-u：列出UID号进程详情</p></li><li><p>-n: 不反向解析网络名字</p></li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>进程管理</p><ul><li>查看由登陆用户启动而非系统启动的进程<br><code>lsof /dev/pts/1</code></li><li>指定进程号，可以查看该进程打开的文件<br><code>lsof -p 9527 </code></li></ul></li><li><p>文件管理</p><ul><li>查看指定程序打开的文件<br><code>lsof -c httpd</code></li><li>查看指定用户打开的文件<br><code>lsof -u root | more</code></li><li>查看指定目录下被打开的文件<ul><li><code>lsof +D /var/log/ </code></li><li><code>lsof +d /var/log/</code></li><li>参数+D为递归列出目录下被打开的文件，参数+d为列出目录下被打开的文件</li></ul></li></ul></li><li><p>查看所有网络连接</p><ul><li><code>lsof -i –n </code></li><li><code>lsof -i@127.0.0.1</code></li><li>通过参数-i查看网络连接的情况，包括连接的ip、端口等以及一些服务的连接情况，例如：sshd等。也可以通过指定ip查看该ip的网络连接情况</li></ul></li><li><p>查看端口连接情况</p><ul><li><code>lsof -i :80 -n</code></li><li>通过参数-i:端口可以查看端口的占用情况，-i参数还有查看协议，ip的连接情况等</li></ul></li><li><p>查看指定进程打开的网络连接</p><ul><li><code>lsof -i –n -a -p 9527</code></li><li>参数-i、-a、-p等，-i查看网络连接情况，-a查看存在的进程，-p指定进程</li></ul></li><li><p>查看指定状态的网络连接</p><ul><li><code>lsof -n -P -i TCP -s TCP:ESTABLISHED</code></li><li>-n:no host names, -P:no port names,-i TCP指定协议，-s指定协议状态通过多个参数可以清晰的查看网络连接情况、协议连接情况等</li></ul></li><li><p>恢复删除文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lsof |grep /var/<span class="built_in">log</span>/messages</span><br><span class="line">rm -f /var/<span class="built_in">log</span>/messages</span><br><span class="line">lsof |grep /var/<span class="built_in">log</span>/messages</span><br><span class="line">cat /proc/653/fd/6</span><br><span class="line">cat /proc/653/fd/6 &gt; /var/<span class="built_in">log</span>/messages</span><br></pre></td></tr></table></figure></li></ul><h1 id="计划任务"><a href="#计划任务" class="headerlink" title="计划任务"></a>计划任务</h1><p>Linux任务计划、周期性任务执行</p><ul><li>未来的某时间点执行一次任务<ul><li>at 指定时间点，执行一次性任务</li><li>batch 系统自行选择空闲时间去执行此处指定的任务</li></ul></li><li>周期性运行某任务<ul><li>cron</li></ul></li></ul><h2 id="at"><a href="#at" class="headerlink" title="at"></a>at</h2><ul><li>包：at</li><li>at 命令：at [option] TIME</li><li>常用选项：<ul><li>-V 显示版本信息</li><li>-t time 时间格式 [[CC]YY]MMDDhhmm[.ss] </li><li>-l 列出指定队列中等待运行的作业；相当于atq</li><li>-d 删除指定的作业；相当于atrm</li><li>-c 查看具体作业任务</li><li>-f /path/file 指定的文件中读取任务</li><li>-m 当任务被完成之后，将给用户发送邮件，即使没有标准输出</li></ul></li><li>注意：作业执行命令的结果中的标准输出和错误以邮件通知给相关用户</li></ul><h3 id="时间格式"><a href="#时间格式" class="headerlink" title="时间格式"></a>时间格式</h3><p>TIME：定义出什么时候进行 at 这项任务的时间</p><ul><li>HH:MM [YYYY-mm-dd]</li><li>noon, midnight, teatime（4pm）</li><li>tomorrow</li><li>now+#{minutes,hours,days, OR weeks}</li></ul><hr><ul><li><p>HH:MM 02:00</p><p>在今日的 HH:MM 进行，若该时刻已过，则明天此时执行任务</p></li><li><p>HH:MM YYYY-MM-DD 02:00 2016-09-20</p><p>规定在某年某月的某一天的特殊时刻进行该项任务</p></li><li><p>HH:MM[am|pm] [Month] [Date]</p><ul><li>04pm March 17</li><li>17:20 tomorrow</li></ul></li><li><p>HH:MM[am|pm] + number [minutes|hours|days|weeks]</p><p>在某个时间点再加几个时间后才进行该项任务</p><ul><li>now + 5 min </li><li>02pm + 3 days</li></ul></li></ul><h3 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h3><ul><li><p>执行方式：</p><p>1）交互式<br>2）输入重定向<br>3）at -f 文件</p></li><li><p>依赖与atd服务,需要启动才能实现at任务</p></li><li><p>at队列存放在/var/spool/at目录中</p></li><li><p>/etc/at.{allow,deny}控制用户是否能执行at任务</p><ul><li>白名单：/etc/at.allow 默认不存在，只有该文件中的用户才能执行at命令</li><li>黑名单：/etc/at.deny 默认存在，拒绝该文件中用户执行at命令，而没有在at.deny 文件中的使用者则可执行</li><li>如果两个文件都不存在，只有 root 可以执行 at 命令</li></ul></li></ul><h2 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h2><ul><li><p>周期性任务计划：cron</p></li><li><p>相关的程序包：</p><ul><li>cronie：主程序包，提供crond守护进程及相关辅助工具</li><li>crontabs：包含CentOS提供系统维护任务</li><li>cronie-anacron：cronie的补充程序，用于监控cronie任务执行状况，如cronie中的任务在过去该运行的时间点未能正常运行，则anacron会随后启动一次此任务</li></ul></li><li><p>计划周期性执行的任务提交给crond，到指定时间会自动运行</p><ul><li>系统cron任务：系统维护作业<ul><li>/etc/crontab</li></ul></li><li>用户cron任务：<ul><li>crontab命令</li></ul></li></ul></li><li><p>日志：/var/log/cron</p></li><li><p>系统的计划任务:</p><ul><li>/etc/crontab 配置文件</li><li>/etc/cron.d/ 配置文件</li><li>/etc/cron.hourly/ 脚本</li><li>/etc/cron.daily/ 脚本</li><li>/etc/cron.weekly/ 脚本</li><li>/etc/cron.monthly/ 脚本</li></ul></li></ul><h3 id="时间格式-1"><a href="#时间格式-1" class="headerlink" title="时间格式"></a>时间格式</h3><ul><li><p>系统cron任务:/etc/crontab</p></li><li><p>注释行以# 开头</p></li><li><p>详情参见  man 5 crontab</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Example of job definition:</span></span><br><span class="line"><span class="comment"># .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="comment"># | .------------- hour (0 - 23)</span></span><br><span class="line"><span class="comment"># | | .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="comment"># | | | .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="comment"># | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="comment"># | | | | |</span></span><br><span class="line"><span class="comment"># * * * * * user-name command to be executed</span></span><br></pre></td></tr></table></figure></li><li><p>时间表示法：</p><ul><li><p>(1) 特定值<br>给定时间点有效取值范围内的值</p></li><li><p>(2) *<br>给定时间点上有效取值范围内的所有值<br>表示“每…”</p></li><li><p>(3) 离散取值</p><p>#,#,#</p></li><li><p>(4) 连续取值</p><p>#-#</p></li><li><p>(5) 在指定时间范围上，定义步长<br>/#: #即为步长</p></li><li><p>其他示例：</p><ul><li>@yearly 0 0 1 1 *</li><li>@annually 0 0 1 1 *</li><li>@monthly 0 0 1 * *</li><li>@weekly 0 0 * * 0</li><li>@daily 0 0 * * *</li><li>@hourly 0 * * * *</li><li>@reboot Run once after reboot</li></ul></li></ul></li></ul><h3 id="命令"><a href="#命令" class="headerlink" title="命令"></a>命令</h3><ul><li>crontab命令定义<br>每个用户都有专用的cron任务文件：/var/spool/cron/USERNAME</li><li>crontab命令：<br>crontab [-u user] [-l | -r | -e] [-i] <ul><li>-l 列出所有任务</li><li>-e 编辑任务</li><li>-r 移除所有任务</li><li>-i 同-r一同使用，以交互式模式移除指定任务</li><li>-u user 仅root可运行，指定用户管理cron任务</li></ul></li><li>控制用户执行计划任务：<ul><li>/etc/cron.{allow,deny}</li></ul></li></ul><h2 id="at和cron差异"><a href="#at和cron差异" class="headerlink" title="at和cron差异"></a>at和cron差异</h2><ul><li>一次性作业使用 at</li><li>重复性作业使用crontab<ul><li>Create at time crontab -e </li><li>List at -l crontab -l </li><li>Details at -c jobnum crontab -l </li><li>Remove at -d jobnum crontab -r </li><li>Edit N/A crontab -e</li></ul></li><li>没有被重定向的输出会被邮寄给用户</li><li>root能够修改其它用户的作业</li></ul><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul><li>注意：运行结果的标准输出和错误以邮件通知给相关用户<br>(1) COMMAND &gt; /dev/null<br>(2) COMMAND &amp;&gt; /dev/null</li><li>对于cron任务来讲，%有特殊用途；如果在命令中要使用%，则需要转义，将%<br>放置于单引号中，则可不用转义</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-08-文本三剑客</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-08-%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-08-%E6%96%87%E6%9C%AC%E4%B8%89%E5%89%91%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="文本三剑客"><a href="#文本三剑客" class="headerlink" title="文本三剑客"></a>文本三剑客</h1><ul><li>grep：文本过滤(模式：pattern)工具<br>grep, egrep, fgrep（不支持正则表达式搜索）</li><li>sed：stream editor，文本编辑工具</li><li>awk：Linux上的实现gawk，文本报告生成器</li></ul><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><ul><li><p>grep: Global search REgular expression and Print out the line</p><ul><li>作用：文本搜索工具，根据用户指定的“模式”对目标文本逐行进行匹配检查；打印匹配到的行</li></ul></li><li><p>模式：由正则表达式字符及文本字符所编写的过滤条件</p></li><li><p>grep [OPTIONS] PATTERN [FILE…]</p><ul><li><code>grep root /etc/passwd</code></li><li><code>grep &quot;$USER&quot; /etc/passwd grep &#39;$USER&#39; /etc/passwd</code></li><li><code>grep $(whoami) /etc/passwd</code></li></ul></li></ul><h2 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h2><ul><li><p>–color=auto: 对匹配到的文本着色显示</p></li><li><p>-m # 匹配#次后停止</p></li><li><p>-v 显示不被pattern匹配到的行</p></li><li><p>-i 忽略字符大小写</p></li><li><p>-n 显示匹配的行号</p></li><li><p>-c 统计匹配的行数</p></li><li><p>-o 仅显示匹配到的字符串</p></li><li><p>-q 静默模式，不输出任何信息</p></li><li><p>-A # after, 后#行</p></li><li><p>-B # before, 前#行</p></li><li><p>-C # context, 前后各#行</p></li><li><p>-e 实现多个选项间的逻辑or关系<br><code>grep –e &#39;cat&#39; -e &#39;dog&#39; file</code></p></li><li><p>-w 匹配整个单词</p></li><li><p>-E 使用egrep</p></li><li><p>-F 相当于fgrep，不支持正则表达式</p></li><li><p>-f file 根据模式文件处理</p></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>1.显示/proc/meminfo文件中以大小s开头的行（2种方式）<br><code>reg： ^[Ss]</code><br><code>grep &quot;^[Ss]&quot; /proc/meminfo </code><br><code>grep -i &quot;^s&quot; /proc/meminfo</code></p><p>2.显示/etc/passwd文件中不以/bin/bash结尾的行<br><code>reg:  /bin/bash$</code><br><code>grep -v &quot;/bin/bash$&quot; /etc/passwd </code></p><p>3.如果root用户存在，显示其默认的shell程序  位置锚定<br><code>[root@test tmp]# id root &gt; /dev/null &amp;&amp; grep &quot;^root\&gt;&quot; /etc/passwd | cut -d: -f7</code></p><p>4.找出/etc/passwd中的两位或三位数 ; 贪婪匹配 –&gt; 继续往后匹配<br><code>reg: [[:digit:]]\&#123;2,3\&#125;</code><br><code>[root@test tmp]# grep &quot;\&lt;[[:digit:]]\&#123;2,3\&#125;\&gt;&quot; /etc/passwd</code><br><code>[root@test tmp]# grep &quot;\&lt;[0-9]\&#123;2,3\&#125;\&gt;&quot; /etc/passwd</code><br><code>[root@test tmp]# grep -E &quot;\&lt;[0-9]&#123;2,3&#125;\&gt;&quot; /etc/passwd</code>        – 使用ERE</p><p>5.显示/etc/grub2.cfg文件中，至少以一个空白字符开头的且后面存非空白字符行<br><code>reg : ^[[:space:]]\+[^[:space:]]\+</code><br><code>[root@test tmp]# grep &quot;^[[:space:]]\+[^[:space:]]\+&quot; /etc/grub2.cfg</code></p><p>6.找出“netstat -tan”命令的结果中以’LISTEN’后跟0、1或多个空白字符结尾的行<br><code>reg:  LISTEN[[:space:]]*$</code><br><code>netstat -tan | grep &quot;LISTEN[[:space:]]*$&quot;</code></p><p>7.添加用户bash、testbash以及nologin（其shell为/sbin/nologin）,然后找出/etc/passwd文件中用户名同shell名的行<br><code>useradd bash &amp;&amp; useradd testbash &amp;&amp; useradd nologin -s /sbin/nologin</code><br><code>bash:x:1010:1013::/home/bash:/bin/bash</code><br><code>nologin:x:1012:1015::/home/nologin:/sbin/nologin</code><br><code>reg： [[:alnum:]]\+</code><br>扩展正则：<br><code>[root@test tmp]# grep -E &quot;^(\&lt;[[:alnum:]]+\&gt;).*\1$&quot; /etc/passwd</code><br>基本正则：<br><code>[root@test tmp]# grep &quot;^\(\&lt;[[:alnum:]]\+\&gt;\).*\1$&quot; /etc/passwd</code></p><p>\1 ： 引用分组的内容；保证用户名和shell同名 </p><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><h2 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h2><ul><li>Stream EDitor, 行编辑器</li><li>sed是一种流编辑器，它一次处理一行内容。处理时，把当前处理的行存储在临时缓冲区中，称为“模式空间”（pattern space），接着用sed命令处理缓冲区中的内容，处理完成后，把缓冲区的内容送往屏幕。然后读入下行，执行下一个循环。如果没有使诸如‘D’的特殊命令，那会在两个循环之间清空模式空间，但不会清空保留空间。这样不断重复，直到文件末尾。文件内容并没有改变，除非你使用重定向存储输出。</li><li>功能：主要用来自动编辑一个或多个文件,简化对文件的反复操作,编写转换程序等</li><li>参考： <a href="http://www.gnu.org/software/sed/manual/sed.html">http://www.gnu.org/software/sed/manual/sed.html</a></li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><p><code>sed [option]... &#39;script&#39; inputfile...</code></p><ul><li><p>常用选项：</p><ul><li>-n 不输出模式空间内容到屏幕，即不自动打印</li><li>-e 多点编辑</li><li>-f  /PATH/SCRIPT_FILE 从指定文件中读取编辑脚本</li><li>-r 支持使用扩展正则表达式</li><li>-i.bak 备份文件并原处编辑</li></ul></li><li><p>script: </p><ul><li>‘地址命令’</li></ul></li><li><p>地址定界：</p><ul><li><p>不给地址：对全文进行处理</p></li><li><p>单地址：</p><ul><li><p>#：指定的行，$：最后一行</p></li><li><p>/pattern/：被此处模式所能够匹配到的每一行</p></li></ul></li><li><p>地址范围：</p><ul><li><p>x,y  从x行到y行</p></li><li><p>x;y  第x行和第y行</p></li><li><p>x,+y  x后y行</p></li><li><p>x,y! : 从x,y行之外</p></li><li><p>/pat1/,/pat2/   查询包含两个模式的行</p></li><li><p>#,/pat1/  #行后查询包含匹配模式的行</p></li><li><p>/pat1/,#  #行内查询包含匹配模式的行</p></li></ul></li><li><p>~：步进, 第一个数为起始行后一个数字为前进步数</p><ul><li>1~2 奇数行</li><li>2~2 偶数行</li></ul></li></ul></li><li><p>编辑命令：</p><ul><li>d 删除模式空间匹配的行，并立即启用下一轮循环</li><li>p 打印当前模式空间内容，追加到默认输出之后</li><li>a [\]text 在指定行后面追加文本，支持使用\n实现多行追加</li><li>i [\]text 在行前面插入文本</li><li>c [\]text 替换行为单行或多行文本</li><li>w /path/file 保存模式匹配的行至指定文件</li><li>r /path/file 读取指定文件的文本至模式空间中匹配到的行后</li><li>= 为模式空间中的行打印行号</li><li>! 模式空间中匹配行取反处理</li></ul></li><li><p>高级编辑命令：</p><ul><li>P： 打印模式空间开端至\n内容，并追加到默认输出之前</li><li>h: 把模式空间中的内容覆盖至保持空间中</li><li>H：把模式空间中的内容追加至保持空间中</li><li>g: 从保持空间取出数据覆盖至模式空间</li><li>G：从保持空间取出内容追加至模式空间</li><li>x: 把模式空间中的内容与保持空间中的内容进行互换</li><li>n: 读取匹配到的行的下一行覆盖至模式空间</li><li>N：读取匹配到的行的下一行追加至模式空间</li><li>D：如果模式空间包含换行符，则删除直到第一个换行符的模式空间中的文本，<br>并不会读取新的输入行，而使用合成的模式空间重新启动循环。如果模式空间<br>不包含换行符，则会像发出d命令那样启动正常的新循环</li><li>q： 第一个模式匹配后立即退出</li><li>{}: 在定位执行行的命令组，用;进行分隔</li></ul></li><li><p>s/// 查找替换,支持使用其它分隔符，s@@@，s###</p></li><li><p>替换标记：</p><ul><li>g 行内全局替换</li><li>p 显示替换成功的行</li><li>w /PATH/FILE 将替换成功的行保存至文件中</li></ul></li><li><p><strong>注意： -i 和 -n 不能一起使用</strong></p></li></ul><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><ul><li><p><code>sed ‘2p’ /etc/passwd</code> 显示/etc/passwd的第2行</p></li><li><p><code>sed -n ‘2p’ /etc/passwd</code>  不显示/etc/passwd的第2行</p></li><li><p><code>sed -n ‘1,4p’ /etc/passwd</code></p></li><li><p><code>sed -n ‘/root/p’ /etc/passwd</code></p></li><li><p><code>sed -n ‘2,/root/p’ /etc/passwd</code> 从2行开始</p></li><li><p><code>sed -n ‘/^$/=’ file</code> 显示空行行号</p></li><li><p><code>sed -n -e ‘/^\$/p’ -e ‘/^$/=’ file</code></p></li><li><p><code>sed‘/root/a\superman’ /etc/passwd</code>行后</p></li><li><p><code>sed ‘/root/i\superman’ /etc/passwd</code> 行前</p></li><li><p><code>sed ‘/root/c\superman’ /etc/passwd</code> 代替行</p></li><li><p><code>sed ‘/^$/d’  file</code></p></li><li><p><code>sed ‘1,10d’ file</code></p></li><li><p><code>nl /etc/passwd | sed ‘2,5d’</code></p></li><li><p><code>nl /etc/passwd | sed ‘2a tea’</code></p></li><li><p><code>sed &#39;s/test/mytest/g&#39; example</code></p></li><li><p><code>sed –n ‘s/root/&amp;superman/p’ /etc/passwd</code> 单词后</p></li><li><p><code>sed –n ‘s/root/superman&amp;/p’ /etc/passwd</code> 单词前</p></li><li><p><code>sed -e ‘s/dog/cat/’ -e ‘s/hi/lo/’ pets </code></p></li><li><p><code>sed –i.bak ‘s/dog/cat/g’ pets</code></p></li><li><p><code>sed -n &#39;n;p&#39; FILE</code></p></li><li><p><code>sed &#39;1!G;h;\$!d&#39; FILE</code></p></li><li><p><code>sed ‘N;D’FILE</code></p></li><li><p><code>sed &#39;$!N;$!D&#39; FILE</code></p></li><li><p><code>sed &#39;$!d&#39; FILE</code></p></li><li><p><code>sed ‘G’ FILE</code></p></li><li><p><code>sed ‘g’ FILE</code></p></li><li><p><code>sed ‘/^$/d;G’ FILE</code></p></li><li><p><code>sed &#39;n;d&#39; FILE </code></p></li><li><p><code>sed -n &#39;1!G;h;$p&#39; FILE</code></p></li><li><p><code>ls test*.txt|sed -r &#39;s#(.*)txt#mv &amp; \1jpg#g&#39;</code></p></li><li><p>只打印文本的第1到4行内容<br><code>[root@test tmp]# sed -n &#39;1,4p&#39; fstab</code>         </p></li><li><p>只打印文本中包含xfs的行<br><code>[root@test tmp]# sed -n &#39;/xfs/p&#39; fstab</code>    </p></li><li><p>只打印文本中以UUID开头的行<br><code>[root@test tmp]# sed -n &#39;/^UUID=.*/p&#39; fstab</code>     </p></li><li><p>显示文件中以UUID开头行的行号<br><code>[root@test tmp]# sed -n &#39;/^UUID=.*/=&#39; fstab</code> </p></li><li><p>在/etc/hosts文件中第3行位置添加主机名解析内容<br><code>[root@test tmp]# sed -i &#39;2a\192.168.10.10 node1&#39; /etc/hosts</code></p></li><li><p>删除上述添加的解析内容<br><code>[root@test tmp]# sed -i &#39;3d&#39; /etc/hosts</code></p></li><li><p>替换以UUID开头行的内容<br><code>[root@test tmp]# sed -i &#39;/^UUID=.*/c\test......&#39; fstab</code></p></li><li><p>将fstab文件中以#开头的所有内容保存至fstab_part文件中<br><code>[root@test tmp]# sed &#39;/^#.*/w fstab_part&#39; fstab</code></p></li><li><p>将fstab_part文件内容读写到1.txt文件中第2行以后位置<br><code>[root@test tmp]# sed -i &#39;2r fstab_part&#39; 1.txt</code> </p></li><li><p>将1.txt文本中hello替换成全局替换成大写<br><code>[root@test tmp]# sed -i &#39;s/hello/HELLO/g&#39; 1.txt </code></p></li><li><p>将替换的内容保存至1_part.txt文本中<br><code>[root@test tmp]# sed &#39;s/HELLO/Hi/g w 1_part.txt&#39; 1.txt</code></p></li><li><p>显示/etc/passwd文件中位于第偶数行的用户的用户名<br><code>sed -n &#39;n;p&#39; /etc/passwd | cut -d: -f1</code></p></li><li><p>为/tmp/1.txt 文件中前三行的行首加#号。<br><code>sed -i &#39;1,3s@\(^.\)@#\1@g&#39; /tmp/grub.conf</code><br><code>1,3s@\(^.\)@#\1@g</code><br><code>sed  &quot;1,3s/(.*)/#\1/&quot;</code> </p></li><li><p>取消注释行：<br><code>sed &#39;1,10s@^#\(.*\)$@\1@g&#39; 1.txt </code></p><p>^#+(.*)$ —&gt; 查询内容：所有#开头的行</p><p>\1 替换的内容 (.*)</p></li></ul><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><h2 id="awk介绍"><a href="#awk介绍" class="headerlink" title="awk介绍"></a>awk介绍</h2><ul><li>awk：Aho, Weinberger, Kernighan，报告生成器，格式化文本输出</li><li>有多种版本：New awk（nawk），GNU awk（ gawk）</li><li>gawk：模式扫描和处理语言</li><li>基本用法：<ul><li>awk [options]  ‘program’ var=value file…</li><li>awk [options]  -f programfile var=value file…</li><li>awk [options] ‘BEGIN{action;… }pattern{action;… }END{action;… }’ file …</li><li>awk 程序可由：BEGIN语句块、能够使用模式匹配的通用语句块、END语句块，共3部分组成</li><li>program 通常是被放在单引号中</li></ul></li><li>选项：<ul><li>-F “分隔符” 指明输入时用到的字段分隔符</li><li>-v var=value 变量赋值</li></ul></li></ul><h2 id="awk语言"><a href="#awk语言" class="headerlink" title="awk语言"></a>awk语言</h2><ul><li>基本格式：awk [options] ‘program’ file…</li><li>Program：pattern{action statements;..}</li><li>pattern和action<ul><li>pattern部分决定动作语句何时触发及触发事件<br>BEGIN,END</li><li>action statements对数据进行处理，放在{}内指明<br>print, printf</li></ul></li><li>分割符、域和记录<ul><li>awk执行时，由分隔符分隔的字段（域）标记$1,$2…$n称为域标识。$0为所有域，注意：此时和shell中变量$符含义不同</li><li>文件的每一行称为记录</li><li>省略action，则默认执行 print $0 的操作</li></ul></li></ul><h2 id="awk工作原理"><a href="#awk工作原理" class="headerlink" title="awk工作原理"></a>awk工作原理</h2><ul><li>第一步：执行BEGIN{action;… }语句块中的语句</li><li>第二步：从文件或标准输入(stdin)读取一行，然后执行pattern{ action;… }语句块，它逐行扫描文件，从第一行到最后一行重复这个过程，直到文件全部被读取完毕。</li><li>第三步：当读至输入流末尾时，执行END{action;…}语句块</li><li>BEGIN语句块在awk开始从输入流中读取行之前被执行，这是一个可选的语句块，比如变量初始化、打印输出表格的表头等语句通常可以写在BEGIN语句块中</li><li>END语句块在awk从输入流中读取完所有的行之后即被执行，比如打印所有行的分析结果这类信息汇总都是在END语句块中完成，它也是一个可选语句块</li><li>pattern语句块中的通用命令是最重要的部分，也是可选的。如果没有提供pattern语句块，则默认执行{ print }，即打印每一个读取到的行，awk读取的每一行都会执行该语句块</li></ul><h2 id="awk变量"><a href="#awk变量" class="headerlink" title="awk变量"></a>awk变量</h2><ul><li>变量：内置和自定义变量</li><li>自定义变量(区分字符大小写)<ul><li>-v var=value</li><li>在program中直接定义</li></ul></li><li>FS：输入字段分隔符，默认为空白字符<ul><li><code>awk -v FS=&#39;:&#39; &#39;&#123;print $1,FS,$3&#125;’ /etc/passwd</code></li><li><code>awk –F: &#39;&#123;print $1,$3,$7&#125;’ /etc/passwd</code></li></ul></li><li>OFS：输出字段分隔符，默认为空白字符<ul><li><code>awk -v FS=‘:’ -v OFS=‘:’ &#39;&#123;print $1,$3,$7&#125;’ /etc/passwd</code></li></ul></li><li>RS：输入记录分隔符，指定输入时的换行符<ul><li><code>awk -v RS=&#39; &#39; ‘&#123;print &#125;’ /etc/passwd</code></li></ul></li><li>ORS：输出记录分隔符，输出时用指定符号代替换行符<ul><li><code>awk -v RS=&#39; &#39; -v ORS=&#39;###&#39;‘&#123;print &#125;’ /etc/passwd</code></li></ul></li><li>NF：字段数量(列)<ul><li><code>awk -F：‘&#123;print NF&#125;’ /etc/fstab</code> 引用变量时，变量前不需加$</li><li><code>awk -F：‘&#123;print $(NF-1)&#125;&#39; /etc/passwd</code></li></ul></li><li>NR：记录号(行)<ul><li><code>awk ‘&#123;print NR&#125;’ /etc/fstab ; awk END‘&#123;print NR&#125;’ /etc/fstab</code></li></ul></li><li>FNR：各文件分别计数,记录号<ul><li><code>awk &#39;&#123;print FNR&#125;&#39; /etc/fstab /etc/inittab</code></li></ul></li><li>FILENAME：当前文件名<ul><li><code>awk &#39;&#123;print FILENAME&#125;’ /etc/fstab</code></li></ul></li><li>ARGC：命令行参数的个数<ul><li><code>awk &#39;&#123;print ARGC&#125;’ /etc/fstab /etc/inittab</code></li><li><code>awk ‘BEGIN &#123;print ARGC&#125;’ /etc/fstab /etc/inittab</code></li></ul></li><li>ARGV：数组，保存的是命令行所给定的各参数<ul><li><code>awk ‘BEGIN &#123;print ARGV[0]&#125;’ /etc/fstab /etc/inittab</code></li><li><code>awk ‘BEGIN &#123;print ARGV[1]&#125;’ /etc/fstab /etc/inittab</code></li></ul></li><li>示例：<ul><li><code>awk -v test=&#39;hello gawk&#39; &#39;&#123;print test&#125;&#39; /etc/fstab</code></li><li><code>awk -v test=&#39;hello gawk&#39; &#39;BEGIN&#123;print test&#125;&#39; </code></li><li><code>awk &#39;BEGIN&#123;test=&quot;hello,gawk&quot;;print test&#125;&#39; </code></li><li><code>awk -F:‘&#123;sex=“male”;print $1,sex,age;age=18&#125;’ /etc/passwd cat awkscript &#123;print script,$1,$2&#125;</code></li><li><code>awk -F: -f awkscript script=“awk” /etc/passwd</code></li></ul></li></ul><h2 id="print-amp-printf命令"><a href="#print-amp-printf命令" class="headerlink" title="print&amp;printf命令"></a>print&amp;printf命令</h2><ul><li>print格式：print item1, item2, …</li><li>要点：<br>(1) 逗号分隔符<br>(2) 输出item可以字符串，也可是数值；当前记录的字段、变量或awk的表达式<br>(3) 如省略item，相当于print $0</li><li>示例：<ul><li><code>awk &#39;&#123;print &quot;hello,awk&quot;&#125;&#39;</code></li><li><code>awk –F: &#39;&#123;print&#125;&#39; /etc/passwd</code></li><li><code>awk –F: ‘&#123;print “kong”&#125;’ /etc/passwd</code></li><li><code>awk –F: ‘&#123;print $1&#125;’ /etc/passwd</code></li><li><code>awk –F: ‘&#123;print $0&#125;’ /etc/passwd</code></li><li><code>awk –F: ‘&#123;print $1”\t”$3&#125;’ /etc/passwd</code></li><li><code>grep “^UUID”/etc/fstab| awk ‘&#123;print $2,$4&#125;’</code></li></ul></li></ul><hr><ul><li><p>格式化输出：printf “FORMAT”, item1, item2, …<br>(1) 必须指定FORMAT<br>(2) 不会自动换行，需要显式给出换行控制符，\n<br>(3) FORMAT中需要分别为后面每个item指定格式符</p></li><li><p>格式符：与item一一对应</p><ul><li>%c：显示字符的ASCII码</li><li>%d, %i：显示十进制整数</li><li>%e, %E：显示科学计数法数值</li><li>%f：显示为浮点数</li><li>%g, %G：以科学计数法或浮点形式显示数值</li><li>%s：显示字符串</li><li>%u：无符号整数</li><li>%%：显示%自身</li></ul></li><li><p>修饰符</p><ul><li>#[.#] 第一个数字控制显示的宽度；第二个#表示小数点后精度，%3.1f</li><li>-  左对齐（默认右对齐） %-15s</li><li>+ 显示数值的正负符号 %+d</li></ul></li><li><p>示例</p><ul><li><code>awk -F: ‘&#123;printf &quot;%s&quot;,$1&#125;’ /etc/passwd</code></li><li><code>awk -F: ‘&#123;printf &quot;%s\n&quot;,$1&#125;’ /etc/passwd</code></li><li><code>awk -F: &#39;&#123;printf &quot;%-20s %10d\n&quot;,$1,$3&#125;&#39; /etc/passwd</code></li><li><code>awk -F:‘ &#123;printf &quot;Username: %s\n&quot;,$1&#125;’ /etc/passwd</code></li><li><code>awk -F: ‘&#123;printf “Username: %s,UID:%d\n&quot;,$1,$3&#125;’ /etc/passwd</code></li><li><code>awk -F: ‘&#123;printf &quot;Username: %15s,UID:%d\n&quot;,$1,$3&#125;’ /etc/passwd</code></li><li><code>awk -F: ‘&#123;printf &quot;Username: %-15s,UID:%d\n&quot;,$1,$3&#125;’/etc/passwd</code></li></ul></li></ul><h2 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h2><ul><li><p>算术操作符：</p><ul><li>x+y, x-y, x*y, x/y, x^y, x%y</li><li>-x：转换为负数</li><li>+x：将字符串转换为数值</li></ul></li><li><p>字符串操作符：没有符号的操作符，字符串连接</p></li><li><p>赋值操作符：<br>=, +=, -=, *=, /=, %=, ^=，++, –</p></li><li><p>比较操作符：<br>==, !=, &gt;, &gt;=, &lt;, &lt;=</p></li><li><p>模式匹配符：</p><ul><li>~：左边是否和右边匹配，包含</li><li>!~：是否不匹配</li><li>示例：<ul><li><code>awk -F: &#39;$0 ~ /root/&#123;print $1&#125;‘ /etc/passwd</code></li><li><code>awk &#39;$0~“^root&quot;&#39;  /etc/passwd</code></li><li><code>awk &#39;$0 !~ /root/‘ /etc/passwd</code></li><li><code>awk -F: ‘$3==0’  /etc/passwd</code></li></ul></li></ul></li><li><p>逻辑操作符：与&amp;&amp;，或||，非!<br>示例：</p><ul><li><code>awk -F: &#39;$3&gt;=0 &amp;&amp; $3&lt;=1000 &#123;print $1&#125;&#39; /etc/passwd</code></li><li><code>awk -F: &#39;$3==0 || $3&gt;=1000 &#123;print $1&#125;&#39; /etc/passwd</code></li><li><code>awk -F: ‘!($3==0) &#123;print $1&#125;&#39; /etc/passwd</code></li><li><code>awk -F: ‘!($3&gt;=500) &#123;print $3&#125;’ /etc/passwd</code></li></ul></li><li><p>条件表达式（三目表达式）</p><p>selector?if-true-expression:if-false-expression<br>示例：</p><p><code>awk -F: &#39;&#123;$3&gt;=1000?usertype=&quot;Common User&quot;:usertype=&quot; SysUser&quot;;printf &quot;%15s:%-s\n&quot;,$1,usertype&#125;&#39; /etc/passwd</code></p></li></ul><h2 id="awk-PATTERN"><a href="#awk-PATTERN" class="headerlink" title="awk PATTERN"></a>awk PATTERN</h2><ul><li><p>PATTERN:根据pattern条件，过滤匹配的行，再做处理</p><p>(1)如果未指定：空模式，匹配每一行</p><p>(2) /regular expression/：仅处理能够模式匹配到的行，需要用/ /括起来</p><ul><li><code>awk&#39;/^UUID/&#123;print $1&#125;&#39; /etc/fstab</code></li><li><code>awk&#39;!/^UUID/&#123;print $1&#125;&#39; /etc/fstab</code></li></ul><p>(3) relational expression: 关系表达式，结果为“真”才会被处理</p><ul><li><p>真：结果为非0值，非空字符串</p></li><li><p>假：结果为空字符串或0值</p><p>示例：</p><ul><li><code>awk -F: &#39;i=1;j=1&#123;print i,j&#125;&#39; /etc/passwd</code></li><li><code>awk ‘!0’ /etc/passwd ; awk‘!1’ /etc/passwd</code></li><li><code>awk -F: &#39;$3&gt;=1000&#123;print $1,$3&#125;&#39; /etc/passwd</code></li><li><code>awk-F: &#39;$3&lt;1000&#123;print $1,$3&#125;&#39; /etc/passwd</code></li><li><code>awk -F: &#39;$NF==&quot;/bin/bash&quot;&#123;print $1,$NF&#125;&#39; /etc/passwd</code></li><li><code>awk -F: &#39;$NF ~ /bash$/&#123;print $1,$NF&#125;&#39; /etc/passwd</code></li></ul></li></ul><p>(4) line ranges：行范围</p><ul><li>startline,endline：/pat1/,/pat2/ 不支持直接给出数字格式</li><li><code>awk -F: ‘/^root\&gt;/,/^nobody\&gt;/&#123;print $1&#125;&#39; /etc/passwd</code></li><li><code>awk -F: ‘(NR&gt;=10&amp;&amp;NR&lt;=20)&#123;print NR,$1&#125;&#39; /etc/passwd</code></li></ul><p>(5) BEGIN/END模式</p><ul><li><p>BEGIN{}：仅在开始处理文件中的文本之前执行一次</p></li><li><p>END{}：仅在文本处理完成之后执行一次</p><p>示例：</p><ul><li><p><code>awk -F : ‘BEGIN &#123;print “USER USERID”&#125; &#123;print $1“:”$3&#125; END&#123;print “END FILE&quot;&#125;&#39; /etc/passwd</code></p></li><li><p><code>awk -F : &#39;&#123;print &quot;USER USERID“;print $1&quot;:&quot;$3&#125; END&#123;print &quot;END FILE&quot;&#125;&#39; /etc/passwd</code></p></li><li><p><code>awk -F: &#39;BEGIN&#123;print &quot; USER UID \n--------------- &quot;&#125;&#123;print $1,$3&#125;&#39; /etc/passwd</code></p></li><li><p><code>awk -F: ‘BEGIN&#123;print “ USER UID \n--------------- ”&#125;&#123;print $1,$3&#125;’END&#123;print “==============”&#125; /etc/passwd</code></p></li><li><p><code>seq 10 | awk  &#39;i=0&#39;</code></p></li><li><p><code>seq 10 | awk &#39;i=1&#39;</code></p></li><li><p><code>seq 10 | awk &#39;i=!i&#39;</code></p></li><li><p><code>seq 10 | awk&#39;&#123;i=!i;print i&#125;&#39;</code></p></li><li><p><code>seq 10 | awk‘!(i=!i)&#39;</code></p></li><li><p><code>seq 10 | awk-v i=1 &#39;i=!i&#39;</code></p></li></ul></li></ul></li></ul><h2 id="awk-action"><a href="#awk-action" class="headerlink" title="awk action"></a>awk action</h2><ul><li><p>常用的action分类</p><p>(1) Expressions：算术，比较表达式等</p><p>(2) Control statements：if, while等</p><p>(3) Compound statements：组合语句</p><p>(4) input statements</p><p>(5) output statements：print等</p></li></ul><p>更多请参看<a href="https://www.runoob.com/w3cnote/awk-built-in-functions.html#b2">https://www.runoob.com/w3cnote/awk-built-in-functions.html#b2</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-07-文本处理和正则表达式</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-07-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-07-%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="抽取文本的工具"><a href="#抽取文本的工具" class="headerlink" title="抽取文本的工具"></a>抽取文本的工具</h1><ul><li>文件内容： cat ,more,less</li><li>文件截取：head,tail</li><li>按列抽取：cut</li><li>排序和统计：sort,wc</li></ul><h1 id="文本查看"><a href="#文本查看" class="headerlink" title="文本查看"></a>文本查看</h1><h2 id="文本文件内容"><a href="#文本文件内容" class="headerlink" title="文本文件内容"></a>文本文件内容</h2><ul><li>文件查看命令：<br>cat，nl，tac，rev</li><li>cat [OPTION]… [FILE]…<ul><li>-E：显示行结束符$</li></ul></li><li>-n：对显示出的每一行进行编号<ul><li>-A：显示所有控制</li></ul></li><li>-b：非空行编号<ul><li>-s：压缩连续的空行成一行</li></ul></li><li>nl</li><li>tac</li><li>rev</li></ul><h2 id="非文本文件内容"><a href="#非文本文件内容" class="headerlink" title="非文本文件内容"></a>非文本文件内容</h2><ul><li><p>hexdump</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hexdump -C -n 512 /dev/sda</span><br><span class="line">00000000 eb 63 90 10 8e d0 bc 00 b0 b8 00 00 8e d8 8e c0 |.c..............|</span><br><span class="line"><span class="built_in">echo</span> &#123;a..z&#125; | tr -d <span class="string">&#x27; &#x27;</span>|hexdump -C</span><br><span class="line">00000000 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 |abcdefghijklmnop|</span><br><span class="line">00000010 71 72 73 74 75 76 77 78 79 7a 0a |qrstuvwxyz.|</span><br><span class="line">0000001b</span><br></pre></td></tr></table></figure></li><li><p>od：dump files in octal and other formats</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &#123;a..z&#125; | tr -d <span class="string">&#x27; &#x27;</span>|od -A x -t x1z</span><br><span class="line">000000 61 62 63 64 65 66 67 68 69 6a 6b 6c 6d 6e 6f 70 &gt;abcdefghijklmnop&lt;</span><br><span class="line">000010 71 72 73 74 75 76 77 78 79 7a 0a &gt;qrstuvwxyz.&lt;</span><br><span class="line">00001b</span><br></pre></td></tr></table></figure></li><li><p>xxd </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> &#123;a..z&#125; | tr -d <span class="string">&#x27; &#x27;</span>|xxd </span><br><span class="line">0000000: 6162 6364 6566 6768 696a 6b6c 6d6e 6f70 abcdefghijklmnop</span><br><span class="line">0000010: 7172 7374 7576 7778 797a 0a qrstuvwxyz.</span><br></pre></td></tr></table></figure></li></ul><h2 id="分页查看"><a href="#分页查看" class="headerlink" title="分页查看"></a>分页查看</h2><ul><li><p>more：分页查看文件</p><p><code>more [OPTIONS...] FILE...</code></p><ul><li>-d: 显示翻页及退出提示</li></ul></li><li><p>less：一页一页地查看文件或STDIN输出<br>查看时有用的命令包括：<br>/文本 搜索 文本<br>n/N 跳到下一个 或 上一个匹配<br>less 命令是man命令使用的分页器</p></li></ul><h2 id="显示文本前或后行内容"><a href="#显示文本前或后行内容" class="headerlink" title="显示文本前或后行内容"></a>显示文本前或后行内容</h2><ul><li>head [OPTION]… [FILE]…<ul><li>-c # 指定获取前#字节</li><li>-n # 指定获取前#行</li><li>-# 同上</li></ul></li><li>tail [OPTION]… [FILE]…<ul><li>-c # 指定获取后#字节</li><li>-n # 指定获取后#行</li><li>-# 同上</li><li>-f 跟踪显示文件fd新追加的内容,常用日志监控，相当于 –follow=descriptor，文件被删除或移动走, 需要进行重新追踪</li><li>-F 跟踪文件名，相当于–follow=name –retry ，文件被删除或移动走, 不需要进行重新追踪,只要文件恢复回来会继续追踪</li></ul></li><li>tailf 类似tail –f，当文件不增长时并不访问文件</li></ul><h1 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h1><h2 id="按列抽取文本cut和合并文件paste"><a href="#按列抽取文本cut和合并文件paste" class="headerlink" title="按列抽取文本cut和合并文件paste"></a>按列抽取文本cut和合并文件paste</h2><ul><li><p>cut [OPTION]… [FILE]…</p><ul><li>-d DELIMITER: 指明分隔符，默认tab</li><li>-f FILEDS:<ul><li>#: 第#个字段</li><li>#,#[,#]：离散的多个字段，例如1,3,6</li><li>#-#：连续的多个字段, 例如1-6</li><li>混合使用：1-3,7</li></ul></li><li>-c 按字符切割</li><li>–output-delimiter=STRING指定输出分隔符</li></ul></li><li><p>显示文件或STDIN数据的指定列</p><ul><li><code>cut -d: -f1 /etc/passwd</code></li><li><code>cat /etc/passwd | cut -d: -f7</code></li><li><code>cut -c2-5 /usr/share/dict/words</code></li></ul></li><li><p>paste 合并两个文件同行号的列到一行</p><p>paste [OPTION]… [FILE]…</p><ul><li>-d 分隔符：指定分隔符，默认用TAB</li><li>-s : 所有行合成一行显示</li></ul><p>示例：<br><code>paste f1 f2</code><br><code>paste -s f1 f2</code></p></li></ul><h2 id="收集文本统计数据wc"><a href="#收集文本统计数据wc" class="headerlink" title="收集文本统计数据wc"></a>收集文本统计数据wc</h2><ul><li><p>可用于统计文件的行总数、单词总数、字节总数和字符总数</p></li><li><p>可以对文件或STDIN中的数据统计</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wc story.txt</span><br><span class="line">39  237  1901 story.txt</span><br><span class="line">行数 字数 字节数</span><br></pre></td></tr></table></figure></li><li><p>常用选项</p><ul><li>-l 只计数行数</li><li>-w 只计数单词总数</li><li>-c 只计数字节总数</li><li>-m只计数字符总数</li><li>-L 显示文件中最长行的长度</li></ul></li></ul><h2 id="文本排序sort"><a href="#文本排序sort" class="headerlink" title="文本排序sort"></a>文本排序sort</h2><ul><li>把整理过的文本显示在STDOUT，不改变原始文件<br>sort [options] file(s)</li><li>常用选项<ul><li>-r 执行反方向（由上至下）整理</li><li>-R 随机排序</li><li>-n 执行按数字大小整理</li><li>-f 选项  忽略字符串中的字符大小写</li><li>-u 选项（独特，unique）删除输出中的重复行</li><li>-t  指定列的分割符</li><li>-k 以指定字段为标准排序</li></ul></li></ul><h2 id="去除文件中的重复行uniq"><a href="#去除文件中的重复行uniq" class="headerlink" title="去除文件中的重复行uniq"></a>去除文件中的重复行uniq</h2><ul><li><p>uniq命令：从输入中删除前后相接的重复的行</p></li><li><p>uniq [OPTION]… [FILE]…</p><ul><li>-c: 显示每行重复出现的次数</li><li>-d: 仅显示重复过的行</li><li>-u: 仅显示不曾重复的行</li></ul><p>注：连续且完全相同方为重复</p></li><li><p>常和sort 命令一起配合使用：</p><p><code>sort userlist.txt | uniq -c</code></p></li></ul><h2 id="比较文件"><a href="#比较文件" class="headerlink" title="比较文件"></a>比较文件</h2><ul><li><p>比较两个文件之间的区别</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">diff foo.conf foo2.conf</span><br><span class="line">5c5 </span><br><span class="line">&lt;</span><br><span class="line">use_widgets = no </span><br><span class="line">---</span><br><span class="line">&gt; </span><br><span class="line">use_widgets = yes</span><br></pre></td></tr></table></figure><ul><li>注明第5行有区别（改变）</li></ul></li><li><p>可以使用vimdiff</p></li></ul><h2 id="复制对文件改变patch"><a href="#复制对文件改变patch" class="headerlink" title="复制对文件改变patch"></a>复制对文件改变patch</h2><ul><li><p>diff 命令的输出被保存在一种叫做“补丁”的文件中</p><p>使用 -u 选项来输出“统一的（unified）”diff格式文件，最适用于补丁文件</p></li><li><p>patch 复制在其它文件中进行的改变（要谨慎使用）<br>使用 -b 选项来自动备份改变了的文件<br><code>diff -u foo.conf foo2.conf &gt; foo.patch</code><br><code>patch -b foo.conf foo.patch</code></p></li></ul><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><ul><li><p>REGEXP： Regular Expressions，由一类特殊字符及文本字符所编写的模式，其中有些字符（元字符）不表示字符字面意义，而表示控制或通配的功能</p></li><li><p>程序支持：grep,sed,awk,vim, less,nginx,varnish等</p></li><li><p>分两类：</p><ul><li>基本正则表达式：BRE</li><li>扩展正则表达式：ERE</li></ul></li><li><p>正则表达式引擎：</p><p>采用不同算法，检查处理正则表达式的软件模块</p><p>PCRE（Perl Compatible Regular Expressions）</p></li><li><p>元字符分类：字符匹配、匹配次数、位置锚定、分组</p></li><li><p>man 7 regex</p></li></ul><h2 id="基本正则表达式"><a href="#基本正则表达式" class="headerlink" title="基本正则表达式"></a>基本正则表达式</h2><ul><li><p>字符匹配:</p><ul><li>. 匹配任意单个字符</li><li>[] 匹配指定范围内的任意单个字符，示例：[king] [0-9] [a-z] [a-zA-Z]</li><li>[^] 匹配指定范围外的任意单个字符</li><li>[:alnum:] 字母和数字</li><li>[:alpha:] 代表任何英文大小写字符，亦即 A-Z, a-z</li><li>[:lower:] 小写字母</li><li>[:upper:] 大写字母</li><li>[:blank:] 空白字符（空格和制表符）</li><li>[:space:] 水平和垂直的空白字符（比[:blank:]包含的范围广）</li><li>[:cntrl:] 不可打印的控制字符（退格、删除、警铃…）</li><li>[:digit:] 十进制数字 [:xdigit:]十六进制数字</li><li>[:graph:] 可打印的非空白字符</li><li>[:print:] 可打印字符</li><li>[:punct:] 标点符号</li></ul></li><li><p>匹配次数：用在要指定次数的字符后面，用于指定前面的字符要出现的次数</p><ul><li>* 匹配前面的字符任意次，包括0次<ul><li>贪婪模式：尽可能长的匹配</li></ul></li><li>.* 任意长度的任意字符</li><li>? 匹配其前面的字符0或1次</li><li>\+ 匹配其前面的字符至少1次</li><li>\{n\} 匹配前面的字符n次</li><li>\{m,n\} 匹配前面的字符至少m次，至多n次</li><li>\{,n\} 匹配前面的字符至多n次</li><li>\{n,\} 匹配前面的字符至少n次</li></ul></li><li><p>位置锚定：定位出现的位置</p><ul><li>^ 行首锚定，用于模式的最左侧</li><li>$ 行尾锚定，用于模式的最右侧</li><li>^PATTERN$ 用于模式匹配整行<ul><li>^​$ 空行</li><li>^[[:space:]]*$ 空白行</li></ul></li><li>\&lt; 或 \b 词首锚定，用于单词模式的左侧</li><li>\&gt; 或 \b 词尾锚定，用于单词模式的右侧</li><li>\&lt;PATTERN\&gt; 匹配整个单词</li></ul></li><li><p>分组：() 将一个或多个字符捆绑在一起，当作一个整体处理，如：(root)+</p></li><li><p>分组括号中的模式匹配到的内容会被正则表达式引擎记录于内部的变量中，这些变量的命名方式为: \1, \2, \3, …</p></li><li><p>\1 表示从左侧起第一个左括号以及与之匹配右括号之间的模式所匹配到的字符</p><p>示例：\(string1(string2\)\)</p><p>​            \1 ：string1\(string2\)</p><p>​            \2 ：string2</p></li><li><p>后向引用：引用前面的分组括号中的模式所匹配字符，而非模式本身</p></li><li><p>或者：\|</p><p>示例： a\|b   a或b </p><p>​            C\|cat C或cat </p><p>​            \(C\|c\)at Cat或cat</p></li></ul><p>总结：</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503142753267.png" alt="image-20200503142753267"></p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503142817307.png" alt="image-20200503142817307"></p><h2 id="拓展正则表达式"><a href="#拓展正则表达式" class="headerlink" title="拓展正则表达式"></a>拓展正则表达式</h2><ul><li><p>次数匹配：</p><ul><li>*  匹配前面字符任意次</li><li>?  0或1次</li><li>+ 1次或多次</li><li>{m} 匹配m次</li><li>{m,n} 至少m，至多n次</li></ul></li><li><p>位置锚定：</p><ul><li>^ 行首</li><li>$ 行尾</li><li>\&lt;, \b 语首</li><li>\&gt;, \b 语尾</li></ul></li><li><p>分组：</p><ul><li>( )</li><li>后向引用：\1, \2, …</li></ul></li><li><p>或者：</p><ul><li>a|b a或b</li><li>C|cat C或cat</li><li>(C|c)at Cat或cat</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-06-vim</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-06-vim/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-06-vim/</url>
      
        <content type="html"><![CDATA[<h1 id="vim简介"><a href="#vim简介" class="headerlink" title="vim简介"></a>vim简介</h1><ul><li>vi: Visual editor，文本编辑器</li><li>文本：ASCII, Unicode</li><li>文本编辑种类：<ul><li>行编辑器：sed</li><li>全屏编辑器：nano, vi,vim</li></ul></li><li>vim<ul><li>VIsual editor iMproved </li><li>官网：<a href="http://www.vim.org/">www.vim.org</a></li></ul></li><li>其他编辑器：<ul><li>gedit  一个简单的图形编辑器</li><li>gvim 一个Vim编辑器的图形版本</li></ul></li></ul><h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><ul><li><p>vim [OPTION]… FILE…</p><ul><li>+#   打开文件后，让光标处于第#行的行首，+默认行尾</li><li>+/PATTERN 让光标处于第一个被PATTERN匹配到的行的行首</li><li>–b file 二进制方式打开文件</li><li>–d file1 file2… 比较多个文件</li><li>-m file 只读打开文件</li></ul></li><li><p>vim -e file 或 ex file 直接进入ex模式</p></li><li><p>如果该文件存在，文件被打开并显示内容</p></li><li><p>如果该文件不存在，当编辑后第一次存盘时创建它</p></li></ul><h1 id="vim模式"><a href="#vim模式" class="headerlink" title="vim模式"></a>vim模式</h1><ul><li><p>击键行为是依赖于 vim的 的“模式”</p></li><li><p>三种主要模式：</p><ul><li>命令(Normal)模式：默认模式，移动光标，剪切/粘贴文本</li><li>插入(Insert)或编辑模式：修改文本</li><li>扩展命令(extended command )模式：保存，退出等</li></ul></li><li><p>Esc键 退出当前模式</p></li><li><p>Esc键 Esc键 总是返回到命令模式</p></li></ul><h2 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h2><p>命令模式 –&gt; 插入模式</p><ul><li>i     insert, 在光标所在处输入</li><li>I    在当前光标所在行的行首输入</li><li>a append, 在光标所在处后面输入</li><li>A 在当前光标所在行的行尾输入</li><li>o 在当前光标所在行的下方打开一个新行</li><li>O 在当前光标所在行的上方打开一个新行</li><li>C  剪切至行尾</li><li>c/d  剪切光标后的一个单词，d和c的区别是c会进入插入模式</li></ul><p>插入模式 ——–&gt; 命令模式</p><ul><li>ESC</li></ul><p>命令模式 ——–&gt; 扩展命令模式</p><ul><li>：</li></ul><p>扩展命令模式 ——–&gt; 命令模式</p><ul><li>ESC,enter</li></ul><h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><ul><li><p>扩展命令模式：</p><ul><li>:q    退出</li><li>:q!   强制退出，丢弃做出的修改</li><li>:wq  保存退出</li><li>:x    保存退出</li></ul></li><li><p>命令模式</p><ul><li>ZZ 保存退出</li><li>ZQ 不保存退出</li></ul></li></ul><h2 id="拓展命令模式"><a href="#拓展命令模式" class="headerlink" title="拓展命令模式"></a>拓展命令模式</h2><ul><li>按“:”进入Ex模式</li><li>创建一个命令提示符:  处于底部的屏幕左侧</li><li>常见命令<ul><li>w               写（存）磁盘文件wq 写入并退出</li><li>x                 写入并退出</li><li>q    退出</li><li>q！  不存盘退出，即使更改都将丢失</li><li>r filename 读文件内容到当前文件中</li><li>w     filename 将当前文件内容写入另一个文件</li><li>!command 执行命令</li><li>r!command 读入命令的输出</li></ul></li></ul><h2 id="命令模式光标跳转"><a href="#命令模式光标跳转" class="headerlink" title="命令模式光标跳转"></a>命令模式光标跳转</h2><ul><li><p>字符间跳转：</p><ul><li>h: 左 l: 右 j: 下 k: 上</li><li>#COMMAND：跳转由#指定的个数的字符</li></ul></li><li><p>单词间跳转：</p><ul><li>w：下一个单词的词首             </li><li>e：当前或下一单词的词尾          </li><li>b：当前或前一个单词的词首</li><li>#COMMAND：由#指定一次跳转的单词数</li></ul></li><li><p>当前页跳转：</p><ul><li>H：页首 M：页中间行 L：页底</li></ul></li><li><p>zt：将光标所在当前行移到屏幕顶端</p></li><li><p>zz：将光标所在当前行移到屏幕中间</p></li><li><p>zb：将光标所在当前行移到屏幕底端</p></li><li><p>行首行尾跳转：</p><ul><li>^    跳转至行首的第一个非空白字符</li><li>0    跳转至行首</li><li>$    跳转至行尾</li></ul></li><li><p>行间移动：</p><ul><li>#G 或者扩展命令模式下:# 跳转至由第#行</li><li>G 最后一行</li><li>1G, gg 第一行</li></ul></li><li><p>句间移动：</p><ul><li>) 下一句    ( 上一句</li></ul></li><li><p>段落间移动：</p><ul><li>} 下一段    { 上一段</li></ul></li></ul><h2 id="命令模式翻屏操作"><a href="#命令模式翻屏操作" class="headerlink" title="命令模式翻屏操作"></a>命令模式翻屏操作</h2><ul><li>Ctrl+f    向文件尾部翻一屏</li><li>Ctrl+b   向文件首部翻一屏</li><li>Ctrl+d   向文件尾部翻半屏</li><li>Ctrl+u   向文件首部翻半屏</li></ul><h2 id="命令模式操作"><a href="#命令模式操作" class="headerlink" title="命令模式操作"></a>命令模式操作</h2><ul><li><p>字符编辑：</p><ul><li>x      删除光标处的字符</li><li>#x   删除光标处起始的#个字符</li><li>xp   交换光标所在处的字符及其后面字符的位置</li><li>~    转换大小写</li><li>J             删除当前行后的换行符</li></ul></li><li><p>替换命令(r, replace)</p><ul><li>r     替换光标所在处的字符</li><li>R    切换成REPLACE模式</li></ul></li><li><p>删除命令：</p><ul><li>d    删除命令，可结合光标跳转字符，实现范围删除</li><li>d$   删除到行尾</li><li>d^ 删除到非空行首</li><li>d0 删除到行首</li><li>dw </li><li>de </li><li>db</li><li>#COMMAND</li><li>dd：删除光标所在的行#dd 多行删除</li><li>D：从当前光标位置一直删除到行尾，等同于d$</li></ul></li><li><p>复制命令(y, yank)：</p><ul><li><p>y 复制，行为相似于d命令</p></li><li><p>y$ </p></li><li><p>y0</p></li><li><p>y^ </p></li><li><p>ye </p></li><li><p>yw </p></li><li><p>yb</p></li><li><p>#COMMAND</p></li><li><p>yy：复制行</p></li><li><p>#yy  复制多行</p></li><li><p>Y：复制整行</p></li></ul></li><li><p>粘贴命令(p, paste)：</p><ul><li><p>p    缓冲区存的如果为整行，则粘贴当前光标所在行的下方；否则，则粘贴至当前光标所在处的后面</p></li><li><p>P    缓冲区存的如果为整行，则粘贴当前光标所在行的上方；否则，则粘贴至当前光标所在处的前面</p></li></ul></li><li><p>改变命令(c, change)</p><ul><li>c: 修改后切换成插入模式</li></ul></li><li><p>命令模式 –&gt; 插入模式</p><ul><li>c$ </li><li>c^ </li><li>c0 </li><li>cb </li><li>ce </li><li>cw</li><li>#COMMAND</li></ul></li><li><p>cc：删除当前行并输入新内容，相当于S #cc</p></li><li><p>C：删除当前光标到行尾，并切换成插入模式</p></li></ul><hr><ul><li><p>100iwang [ESC] 粘贴“wang”100次</p></li><li><p>&lt;start position&gt;&lt;command&gt;&lt;end position&gt;</p></li><li><p>常见Command</p><ul><li><p>y 复制、d 删除、gU 变大写、gu 变小写</p></li><li><p>例如： 0y$ 命令</p><p>​            0 → 先到行头</p><p>​            y → 从这里开始拷贝</p><p>​            $ → 拷贝到本行最后一个字符</p></li></ul></li><li><p>di”  光标在” “之间，则删除” “之间的内容</p></li><li><p>yi(  光标在()之间，则复制()之间的内容</p></li><li><p>vi[  光标在[]之间，则选中[]之间的内容</p></li><li><p>dtx 删除字符直到遇见光标之后的第一个 x 字符</p></li><li><p>ytx 复制字符直到遇见光标之后的第一个 x 字符</p></li></ul><h2 id="地址定界"><a href="#地址定界" class="headerlink" title="地址定界"></a>地址定界</h2><ul><li><p>地址定界</p><ul><li>:start_pos,end_pos</li><li># 具体第#行，例如2表示第2行</li><li>#,# 从左侧#表示起始行，到右侧#表示结尾行</li><li>#,+# 从左侧#表示的起始行，加上右侧#表示的行数<ul><li>示例：2,+3 表示2到5行</li></ul></li><li>.  当前行</li><li>$ 最后一行<ul><li>.,$-1 当前行到倒数第二行</li></ul></li><li>% 全文, 相当于1,$</li></ul></li><li><p>/pattern/  匹配pattern的行</p></li><li><p>/pat1/,/pat2/</p><ul><li>从第一次被pat1模式匹配到的行开始，一直到第一次被pat2匹配到的行结束</li><li>#,/pat/</li><li>/pat/,$</li></ul></li><li><p>使用方式：后跟一个编辑命令</p><ul><li>d</li><li>y</li><li>w file: 将范围内的行另存至指定文件中</li><li>r file：在指定位置插入指定文件中的所有内容</li></ul></li></ul><h2 id="查找-amp-替换"><a href="#查找-amp-替换" class="headerlink" title="查找&amp;替换"></a>查找&amp;替换</h2><ul><li><p>查找</p><ul><li>/PATTERN：从当前光标所在处向文件尾部查找</li><li>?PATTERN：从当前光标所在处向文件首部查找</li><li>n：与命令同方向</li><li>N：与命令反方向</li></ul></li><li><p>在扩展命令模式下完成查找替换操作</p><ul><li>格式：s/要查找的内容/替换为的内容/修饰符</li><li>要查找的内容：可使用模式</li><li>替换为的内容：不能使用模式，但可以使用\1, \2, …等后向引用符号；还可以使用“&amp;”引用前面查找时查找到的整个内容</li><li>修饰符：<ul><li>i     忽略大小写</li><li>g    全局替换，默认情况下，每一行只替换第一次出现</li><li>gc   全局替换，每次替换前询问</li></ul></li></ul></li><li><p>查找替换中的分隔符/可替换为其它字符</p><ul><li>s@/etc@/var@g</li><li>s#/boot#/#i</li></ul></li></ul><h2 id="撤销更改"><a href="#撤销更改" class="headerlink" title="撤销更改"></a>撤销更改</h2><ul><li>u  撤销最近的更改</li><li>#u 撤销之前多次更改</li><li>U  撤消光标落在这行后所有此行的更改</li><li>Ctrl - r   重做最后的“撤消”更改</li><li>.   重复前一个操作</li><li>#.  重复前一个操作#次</li></ul><h2 id="vim的寄存器"><a href="#vim的寄存器" class="headerlink" title="vim的寄存器"></a>vim的寄存器</h2><ul><li>有26个命名寄存器和1个无命名寄存器，常存放不同的剪贴版内容，可以不同会话间共享</li><li>寄存器名称a，b,…,z,格式：“寄存器 放在数字和命令之间<ul><li>如：3”tyy 表示复制3行到t寄存器中</li><li>“tp 表示将t寄存器内容粘贴</li></ul></li><li>未指定，将使用无命名寄存器</li><li>有10个数字寄存器，用0，1，…，9表示，0存放最近复制内容，1存放最近删除内容。当新的文本变更和删除时，1转存到2，2转存到3，以此类推。数字寄存器不能在不同会话间共享</li></ul><h1 id="标记和宏-macro"><a href="#标记和宏-macro" class="headerlink" title="标记和宏(macro)"></a>标记和宏(macro)</h1><ul><li>ma  将当前位置标记为a，26个字母均可做标记， mb 、 mc 等等</li><li>‘a   跳转到a标记的位置，实用的文档内标记方法，文档中跳跃编辑时很有用</li><li>qa  录制宏 a，a为宏的名称</li><li>q   停止录制宏</li><li>@a  执行宏 a</li><li>@@  重新执行上次执行的宏</li></ul><h1 id="编辑二进制文件"><a href="#编辑二进制文件" class="headerlink" title="编辑二进制文件"></a>编辑二进制文件</h1><ul><li>以二进制方式打开文件<ul><li>vim -b binaryfile</li></ul></li><li>扩展命令模式下，利用xxd命令转换为可读的十六进制<ul><li>:%!xxd</li></ul></li><li>插入模式下，编辑二进制文件</li><li>扩展命令模式下，利用xxd命令转换回二进制<ul><li>:%!xxd -r</li></ul></li><li>保存退出</li></ul><h1 id="可视化模式"><a href="#可视化模式" class="headerlink" title="可视化模式"></a>可视化模式</h1><ul><li>允许选择的文本块<ul><li>v 面向字符</li><li>V面向行ctrl-v 面向块</li></ul></li><li>可视化键可用于与移动键结合使用w ) } 箭头等</li><li>突出显示的文字可被删除，复制，变更，过滤，搜索，替换等</li></ul><h1 id="使用多个”窗口”"><a href="#使用多个”窗口”" class="headerlink" title="使用多个”窗口”"></a>使用多个”窗口”</h1><ul><li><p>多文件分割</p><ul><li>vim -o|-O FILE1 FILE2 …</li><li>-o: 水平分割</li><li>-O: 垂直分割</li><li>在窗口间切换：Ctrl+w, Arrow</li></ul></li><li><p>单文件窗口分割</p><ul><li>Ctrl+w,s：split, 水平分割</li><li>Ctrl+w,v：vertical, 垂直分割</li><li>ctrl+w,q：取消相邻窗口ctrl+w,o：取消全部窗口</li><li>：wqall 退出</li></ul></li></ul><h1 id="定制vim的工作特性"><a href="#定制vim的工作特性" class="headerlink" title="定制vim的工作特性"></a>定制vim的工作特性</h1><ul><li><p>配置文件：永久有效</p><ul><li>全局：/etc/vimrc </li><li>个人：~/.vimrc</li></ul></li><li><p>扩展命令模式：当前vim进程有效</p><ol><li><p>行号</p><ul><li><p>显示：set number，简写 set nu</p></li><li><p>取消显示：set nonumber, 简写 set nonu</p></li></ul></li></ol></li></ul><ol start="2"><li><p>忽略字符的大小写</p><ul><li>启用：set ignorecase，简写 set ic <ul><li>不忽略：set noic</li></ul></li></ul></li><li><p>自动缩进</p></li></ol><ul><li>启用：set autoindent，简写 set ai <ul><li>禁用：set noai</li></ul></li></ul><ol start="4"><li>复制保留格式<ul><li>启用：set paste</li></ul></li></ol><ul><li>禁用：set nopaste</li></ul><ol start="5"><li>显示Tab和换行符 ^I 和$显示<ul><li>启用：set list</li><li>禁用：set nolist</li></ul></li><li>高亮搜索<ul><li>启用 ：set hlsearch </li><li>禁用：set nohlsearch</li></ul></li><li>语法高亮</li></ol><ul><li>启用：syntax on <ul><li>禁用：syntax off</li></ul></li></ul><ol start="8"><li>文件格式<ul><li>启用windows格式：set fileformat=dos </li></ul></li></ol><ul><li>启用unix格式：set fileformat=unix<ul><li>简写 set ff=dos|unix</li></ul></li></ul><ol start="9"><li>设置文本宽度<ul><li>set textwidth=65 (vim only) </li></ul></li></ol><ul><li>set wrapmargin=15</li></ul><ol start="10"><li><p>设置光标所在行的标识线</p><ul><li>启用：set cursorline，简写 set cul </li><li>禁用：set nocursorline</li></ul></li><li><p>解决粘贴导致的缩进错误</p><ul><li>set paste</li></ul></li></ol><h1 id="了解更多"><a href="#了解更多" class="headerlink" title="了解更多"></a>了解更多</h1><ul><li><p>Set 帮助</p><ul><li>:help option-list</li><li>:set or :set all</li></ul></li><li><p>vi/vim内置帮助</p><ul><li>:help</li><li>:help <em>topic</em></li><li>Use :q to exit help</li></ul></li><li><p>vimtutor</p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200429215536140.png" alt="image-20200429215536140"></p><p><img src="https://s1.ax1x.com/2020/04/29/JHk01K.png" alt="JHk01K.png">    </p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-05-文件管理</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-05-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-05-%E6%96%87%E4%BB%B6%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux文件系统介绍"><a href="#Linux文件系统介绍" class="headerlink" title="Linux文件系统介绍"></a>Linux文件系统介绍</h1><h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p><code>Window：C:\Users\xxx\xxx\xxx</code><br><code>Linux: /etc/sysconfig/network-scripts/</code></p><p>文件=Metadata+Data</p><p>Metadata：元数据，描述文件属性等信息</p><p>Data：数据，文件本身的信息</p><p>文件名称命名规则</p><ol><li>严格区分大小写</li><li>可以使用除/以外的任意字符，避免使用一些特殊字符(* . ?)</li><li>不超过255字符</li><li>以.开头的文件为隐藏文件</li></ol><h2 id="文件路径"><a href="#文件路径" class="headerlink" title="文件路径"></a>文件路径</h2><p>绝对路径：从/位置开始（从根位置开始）</p><p>相对路径：从.开始（从当前位置开始）</p><h2 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h2><ul><li>普通文件 [-]</li><li>目录文件 [d]</li><li>块设备文件 [b]</li><li>字符设备文件 [c]</li><li>套接字文件 [s]</li><li>管道文件 [p]</li><li>链接文件 [l]</li></ul><p>如何去查看文件类型</p><ol><li>ls -l -a命令（ll）</li><li>file命令</li><li>stat命令</li></ol><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><blockquote><p>注意：介绍/下的第1级目录</p></blockquote><ul><li><p>bin：Binary缩写，存放着经常使用的命令</p></li><li><p>boot：启动Linux需要的部分核心文件</p></li><li><p>dev：Device缩写，Linux外部设备（磁盘等）</p></li><li><p>etc：系统管理所需要的配置文件和子目录</p></li><li><p>home：用户的家目录</p></li><li><p>lib：程序运行时所依赖的库文件（包括内核模块）</p></li><li><p>lib64：专用于x86_64系统上的辅助共享库文件存放位置</p></li><li><p>media：自动识别的设备存放位置</p></li><li><p>mnt：用户临时挂载别的文件系统</p></li><li><p>opt：安装额外软件的存放位置</p></li><li><p>proc：虚拟目录，访问该目录可以获取系统相关信息</p></li><li><p>root：超级管理员家目录</p></li><li><p>run：存储系统运行依赖所有信息</p></li><li><p>sbin：超级管理员所使用的命令</p></li><li><p>srv：服务启动后需要的数据</p></li><li><p>sys：子文件系统，会映射一些内核信息（针对内核做调整的话）</p></li><li><p>tmp：临时文件目录</p></li><li><p>usr：用户的应用程序和相关文件</p></li><li><p>var：经常被修改的文件存储位置（日志等）</p></li></ul><p>显示目录结构信息</p><ul><li>tree /xxx         — 显示指定目录中的所有数据和所有结构信息</li><li>tree -L 2 /           — 查看目录结构层级信息</li><li>tree -d /xxx       — 显示目录中所有结构信息    </li></ul><h1 id="命令使用规则"><a href="#命令使用规则" class="headerlink" title="命令使用规则"></a>命令使用规则</h1><p>&lt;command&gt;  [options]  [obj]</p><p>options:</p><ul><li>长选项 –</li><li>短选项 -   短选项可以组合使用（-aild）</li><li>一般来说，短选项的使用放在长选项之前</li></ul><p>obj：肯定是文件</p><p>注意有空格</p><p>ls命令<br><code>[root@test ~]# ls --help</code><br>Usage: ls [OPTION]… [FILE]…<br>List information about the FILEs (the current directory by default).</p><p>OPTIONS:<br>    -a : 显示所有文件（包括隐藏文件）<br>    -l ：显示列表中文件的详细信息<br>    -i : 显示文件的inode号<br>    -d ：查看目录文件的信息</p><p>pwd命令： 显示当前路径<br><code>[root@test tmp]# pwd</code></p><p>cd命令 ： 切换目录</p><p>cd命令默认是切换到各自的家目录下：/root/ </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cd /etc/sysconfig/network-scripts/</span></span><br><span class="line">[root@<span class="built_in">test</span> network-scripts]<span class="comment"># pwd</span></span><br><span class="line">/etc/sysconfig/network-scripts</span><br><span class="line"></span><br><span class="line">[rot@<span class="built_in">test</span> ~]<span class="comment"># cd test/</span></span><br><span class="line">[root@<span class="built_in">test</span> <span class="built_in">test</span>]<span class="comment"># cd </span></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cd ./test/</span></span><br><span class="line">[root@<span class="built_in">test</span> <span class="built_in">test</span>]<span class="comment"># cd</span></span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> test2]<span class="comment"># pwd</span></span><br><span class="line">/root/<span class="built_in">test</span>/test2</span><br><span class="line">[root@<span class="built_in">test</span> test2]<span class="comment"># cd ..# 返回上层目录</span></span><br><span class="line">[root@<span class="built_in">test</span> <span class="built_in">test</span>]<span class="comment"># ls</span></span><br><span class="line">test2</span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> test2]<span class="comment"># cd - # 返回上次所在的目录 </span></span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># file test/</span></span><br><span class="line"><span class="built_in">test</span>/: directory</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># file anaconda-ks.cfg </span></span><br><span class="line">anaconda-ks.cfg: ASCII text</span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># stat anaconda-ks.cfg </span></span><br><span class="line">  File: ‘anaconda-ks.cfg’</span><br><span class="line">  Size: 1260      Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># stat test/</span></span><br><span class="line">  File: ‘<span class="built_in">test</span>/’</span><br><span class="line">  Size: 19        Blocks: 0          IO Block: 4096   directory</span><br></pre></td></tr></table></figure><h1 id="Linux基础文件操作"><a href="#Linux基础文件操作" class="headerlink" title="Linux基础文件操作"></a>Linux基础文件操作</h1><h2 id="目录管理命令"><a href="#目录管理命令" class="headerlink" title="目录管理命令"></a>目录管理命令</h2><ul><li>mkdir 命令：创建目录<ul><li>常用参数：<ul><li>-p：递归创建</li><li>-v：显示创建过程</li><li>-m：指定权限 如<code>mkdir -m 700 /usr/xxx</code></li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test tmp]# mkdir -pv book&#x2F;linux</span><br><span class="line">mkdir: created directory ‘book’</span><br><span class="line">mkdir: created directory ‘book&#x2F;linux</span><br></pre></td></tr></table></figure><ul><li><p>rmdir 命令：删除目录</p><ul><li>-p：递归删除</li><li>-v：显示删除过程</li></ul></li><li><p>mktemp命令：用来建立暂存文件，其创建的临时文件是唯一的 ，供shell 使用 。</p><p>TEMPLATE 最后部分必须含有至少 3 个连续的”X“。如果 TEMPLATE 没有指定，将会使用tmp.XXXXXXXXXX。</p><ul><li>-q：不显示任何有关文件或目录创建错误信息</li><li>-d：创建一个目录而非文件</li><li>-u：不创建任何东西，仅打印出名字</li><li>–tmpdir[=DIR]：在指定目录下</li></ul></li></ul><h2 id="文件时间戳"><a href="#文件时间戳" class="headerlink" title="文件时间戳"></a>文件时间戳</h2><p>文件 = 元数据 + 用户数据<br>             metadata + data</p><p>stat命令：查看文件的元数据信息</p><p>file  显示文件信息类型命令</p><p>三种类型的文件时间戳：<br>Access: 2020-02-06 02:34:47.219532839 -0500     访问时间（读取文件内容） atime<br>Modify: 2020-02-06 02:34:47.219532839 -0500     修改时间（改变文件内容） mtime<br>Change: 2020-02-06 02:34:47.219532839 -0500    改变时间（元数据的改变） ctime</p><ul><li>touch命令：可以创建文件<ul><li>-a ：只更改atime</li><li>-m : 只更改mtime</li><li>-t ：指定更改时间的格式</li></ul></li></ul><h2 id="文件管理类命令"><a href="#文件管理类命令" class="headerlink" title="文件管理类命令"></a>文件管理类命令</h2><ul><li><p>cp命令</p><p>原理：新建文件</p><blockquote><p>Usage: cp [OPTION]… [-T] SOURCE DEST<br>or:  cp [OPTION]… SOURCE… DIRECTORY<br>or:  cp [OPTION]… -t DIRECTORY SOURCE…</p></blockquote><ul><li>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpr参数组合。</li><li>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。</li><li>-f：覆盖已经存在的目标文件而不给出提示。</li><li>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。</li><li>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。</li><li>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。</li><li>-l：不复制文件，只是生成链接文件。</li><li>-t：指定复制到的目标目录</li></ul></li><li><p><strong>注意</strong></p><ul><li>SRC是单个文件<ul><li>DEST不存在： 将SRC文件内容写入到DEST文件中</li><li>DEST存在： 将SRC文件覆盖至DEST文件中</li></ul></li><li>SRC是多个文件<ul><li>DEST必须是个目录</li></ul></li><li>SRC是目录文件：<ul><li>需要使用-r参数</li><li>DEST为目录：<ul><li>DEST不存在： 创建同名目录和一致性文件</li><li>DEST存在： 一致性文件</li></ul></li><li>DEST为文件：报错</li></ul></li></ul></li><li><p>mv命令： 移动文件</p><p>原理：在同一文件系统，改变的仅是其路径；不在同一文件系统，复制数据至目标文件，并删除原文件。</p><blockquote><p>Usage: mv [OPTION]… [-T] SOURCE DEST<br>or:  mv [OPTION]… SOURCE… DIRECTORY<br>or:  mv [OPTION]… -t DIRECTORY SOURCE…</p></blockquote><ul><li>-i: 若指定目录已有同名文件，则先询问是否覆盖旧文件;</li><li>-f: 在 mv 操作要覆盖某已有的目标文件时不给任何指示;</li><li>-b:当文件存在时，覆盖前为其创建一个备份</li></ul></li></ul><table><thead><tr><th align="left">命令格式</th><th align="left">运行结果</th></tr></thead><tbody><tr><td align="left">mv 文件名 文件名</td><td align="left">将源文件名改为目标文件名</td></tr><tr><td align="left">mv 文件名 目录名</td><td align="left">将文件移动到目标目录</td></tr><tr><td align="left">mv 目录名 目录名</td><td align="left">目标目录已存在，将源目录移动到目标目录；目标目录不存在则改名</td></tr><tr><td align="left">mv 目录名 文件名</td><td align="left">出错</td></tr></tbody></table><ul><li><p>rm命令：删除文件</p><p>原理：将此文件指向的所有data block和inode标记为未使用</p><ul><li>-i 删除前逐一询问确认。</li><li>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。</li><li>-r 将目录及以下之档案亦逐一删除。</li><li>-v 显示过程</li></ul></li></ul><p>更多命令及用法请参看：</p><ul><li><p><a href="https://www.runoob.com/linux/linux-command-manual.html">https://www.runoob.com/linux/linux-command-manual.html</a></p></li><li><p><a href="https://www.linuxcool.com/">https://www.linuxcool.com/</a></p></li></ul><h2 id="文件链接"><a href="#文件链接" class="headerlink" title="文件链接"></a>文件链接</h2><p><code>stat</code> 查看文件类型</p><h3 id="链接方式"><a href="#链接方式" class="headerlink" title="链接方式"></a>链接方式</h3><ul><li>硬链接：为inode分配多个文件名，通过文件名找到inode，从而读取文件信息</li><li>软链接：类似Window上的快捷方式</li></ul><p><img src="https://s2.ax1x.com/2020/02/06/1cm5yd.jpg" alt="1cm5yd.jpg"></p><p>文件 = metadata + data </p><p>inode： 一个指向数据存储位置的指针</p><p>block:    索引节点指向的位置，文件或数据的具体内容</p><p>metdata： inode 文件名 等信息</p><blockquote><p>读取数据的原理</p><ol><li><p>找到指定数据</p></li><li><p>读取数据内容,先获取文件数据inode信息</p></li><li><p>根据inode信息在磁盘上找到对应block</p></li><li><p>根据block信息获取文件真正内容    </p></li></ol></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">元数据信息</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># stat hello </span></span><br><span class="line">  File: ‘hello’</span><br><span class="line">  Size: 1         Blocks: 8          IO Block: 4096   regular file</span><br><span class="line">Device: fd00h/64768dInode: 33575029    Links: 1</span><br><span class="line"></span><br><span class="line">权限 用户ID组ID</span><br><span class="line">Access: (0644/-rw-r--r--)  Uid: (    0/    root)   Gid: (    0/    root)</span><br><span class="line">selinux权限</span><br><span class="line">Context: unconfined_u:object_r:admin_home_t:s0</span><br><span class="line"></span><br><span class="line">时间戳</span><br><span class="line">Access: 2020-05-04 02:51:04.011007753 -0500</span><br><span class="line">Modify: 2020-05-04 02:50:51.949787952 -0500</span><br><span class="line">Change: 2020-05-04 02:50:51.950787970 -0500</span><br><span class="line">Birth: -</span><br></pre></td></tr></table></figure><h3 id="ln命令"><a href="#ln命令" class="headerlink" title="ln命令"></a>ln命令</h3><p>作用：创建链接文件</p><p>Usage: ln [OPTION]… [-T] TARGET LINK_NAME   (1st form)</p><p>常见选项：</p><ul><li>-s： 建立符号链接文件，默认情况下是硬链接文件</li><li>-f： 强制创建</li><li>-i： 交互模式</li><li>-v：显示每个链接文件的名字</li><li>-b：为每个已存在的目标文件创建备份文件</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ll -i 1.txt </span></span><br><span class="line">16777289 -rw-r--r--. 1 root root 0 Feb  6 06:53 1.txt</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># echo &quot;hello&quot; &gt; 1.txt</span></span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ln 1.txt 1_hard.txt</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ln -s 1.txt 1_soft.txt</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ll -i </span></span><br><span class="line">total 8</span><br><span class="line">16777289 -rw-r--r--. 2 root root 6 Feb  6 06:53 1_hard.txt</span><br><span class="line">17256888 lrwxrwxrwx. 1 root root 5 Feb  6 06:55 1_soft.txt -&gt; 1.txt</span><br><span class="line">16777289 -rw-r--r--. 2 root root 6 Feb  6 06:53 1.txt</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：</p><ol><li>当我们创建硬链接文件的时候，inode不会发生改变，链接数会加1，同时文件内容相同</li><li>当我们创建软链接文件的时候，inode会重新分配，链接数保持为1，同时文件内容相同</li><li>链接目的：在节省存储空间的情况下，共享文件</li><li>当源文件内容改变时，软硬链接文件内容都会改变</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test tmp]# echo &quot;eagles&quot; &gt;&gt; 1.txt</span><br><span class="line">[root@test tmp]# cat 1_soft.txt &amp;&amp; cat 1_hard.txt </span><br><span class="line">hello</span><br><span class="line">eagles</span><br><span class="line">hello</span><br><span class="line">eagles</span><br></pre></td></tr></table></figure><ol start="5"><li>当删除源文件时，软链接失效，硬链接正常；硬链接其实和源文件可以说表现上是独立的</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@test tmp]# rm 1.txt</span><br><span class="line">[root@test tmp]# cat 1_soft.txt</span><br><span class="line">cat: 1_soft.txt: No such file or directory</span><br><span class="line">[root@test tmp]# cat 1_hard.txt </span><br><span class="line">hello</span><br><span class="line">eagles</span><br></pre></td></tr></table></figure><ul><li><p>硬链接特点</p><ol><li>无论修改源文件还是硬链接文件，另一个文件都会改变</li><li>无论删除源文件还是硬链接文件，只要存在一个文件（link），这个文件依然可用</li><li>硬链接不会新建inode，也不会更改inode的总数</li><li>硬链接不能跨文件系统，因为在不同的文件系统中inode号是可以重新进行分配的</li><li>硬链接不能够链接目录</li></ol></li><li><p>软链接特点</p><ol><li><p>无论修改源文件还是软链接文件，另一个文件都会改变</p></li><li><p>删除软链接文件，源文件不受影响；反之，软链接文件不正常</p></li><li><p>软链接会新建inode号和block，block中不存储实际文件数据，只存源文件的inode和绝对路径</p></li><li><p>软链接是可以链接目录的</p></li><li><p>软连接是可以跨分区的</p></li></ol></li></ul><p><strong>问题：</strong>导致文件创建失败的原因</p><ul><li>命令有误</li><li>空间不足</li><li>inode无法分配</li><li>无相应权限</li><li>文件重名</li></ul><h1 id="文件查找"><a href="#文件查找" class="headerlink" title="文件查找"></a>文件查找</h1><ul><li>在文件系统上查找符合条件的文件</li><li>文件查找：locate, find<ul><li>非实时查找(数据库查找)：locate</li><li>实时查找：find</li></ul></li></ul><h2 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h2><ul><li><p>查询系统上预建的文件索引数据库<br>/var/lib/mlocate/mlocate.db</p></li><li><p>依赖于事先构建的索引</p><p>索引的构建是在系统较为空闲时自动进行(周期性任务)，管理员手动更新数据库<br><code>updatedb</code></p></li><li><p>索引构建过程需要遍历整个根文件系统，极消耗资源</p></li><li><p>工作特点:</p><ul><li>查找速度快</li><li>模糊查找</li><li> 非实时查找</li><li> 搜索的是文件的全路径，不仅仅是文件名</li><li>可能只搜索用户具备读取和执行权限的目录</li></ul></li><li><p>常用选项</p><ul><li>-i 不区分大小写的搜索</li><li>-n N 只列举前N个匹配项目</li><li>-r 使用基本正则表达式</li></ul></li><li><p>示例</p><ul><li>搜索名称或路径中带有“conf”的文件<br><code>locate conf</code></li><li>使用Regex来搜索以“.conf”结尾的文件<br><code>locate -r ‘\.conf$’</code></li></ul></li></ul><h2 id="find"><a href="#find" class="headerlink" title="find"></a>find</h2><ul><li><p>实时查找工具，通过遍历指定路径完成文件查找</p></li><li><p>工作特点：</p><ul><li>查找速度略慢</li><li>精确查找</li><li>实时查找</li><li>可能只搜索用户具备读取和执行权限的目录</li></ul></li><li><p>语法：find [OPTION]… [查找路径] [查找条件] [处理动作]</p><ul><li>查找路径：指定具体目标路径；默认为当前目录</li><li>查找条件：指定的查找标准，可以文件名、大小、类型、权限等标准进行;默认为找出指定路径下的所有文件</li><li>处理动作：对符合条件的文件做操作，默认输出至屏幕</li></ul></li></ul><h3 id="查找条件"><a href="#查找条件" class="headerlink" title="查找条件"></a>查找条件</h3><ul><li><p>指搜索层级</p><ul><li>-maxdepth level 最大搜索目录深度,指定目录下的文件为第1级</li><li>-mindepth level 最小搜索目录深度</li></ul></li><li><p>先处理目录内的文件，再处理指定目录</p><ul><li>-depth</li></ul></li><li><p>使用这一选项可以使find命令不在当前指定的目录中查找，如果同时使用了- depth选项，那么-prune选项将被find命令忽略。</p><ul><li>-prune </li></ul></li><li><p>根据文件名和inode查找：</p><ul><li>-name “文件名称”：支持使用glob<ul><li>*, ?, [], [^]</li></ul></li><li>-iname “文件名称”：不区分字母大小写</li><li>-inum n 按inode号查找</li><li>-samefile name 相同inode号的文件</li><li>-links n 链接数为n的文件</li><li>-regex “PATTERN”：以PATTERN匹配整个文件路径，而非文件名称</li></ul></li><li><p>根据属主、属组查找：</p><ul><li>-user USERNAME：查找属主为指定用户的文件</li><li>-group GRPNAME: 查找属组为指定组的文件</li><li>-uid UserID：查找属主为指定的UID号的文件</li><li>-gid GroupID：查找属组为指定的GID号的文件</li><li>-nouser：查找没有属主的文件</li><li>-nogroup：查找没有属组的文件</li></ul></li><li><p>根据文件类型查找</p><p>-type TYPE</p><ul><li>f: 普通文件</li><li>d: 目录文件</li><li>l: 符号链接文件</li><li>s：套接字文件</li><li>b: 块设备文件</li><li>c: 字符设备文件</li><li>p: 管道文件</li></ul></li><li><p>空文件或目录</p><p>-empty<br>示例：<code>find /app -type d -empty</code></p></li><li><p>组合条件：</p><ul><li>与：-a</li><li>或：-o</li><li>非：-not !</li></ul></li><li><p>德·摩根定律：</p><ul><li>(非 A) 或 (非 B) = 非(A 且 B) </li><li>(非 A) 且 (非 B) = 非(A 或 B) </li></ul></li><li><p>示例：</p><ul><li>!A -a !B = !(A -o B)</li><li>!A -o !B = !(A -a B)</li></ul></li><li><p>根据文件大小来查找：</p><ul><li>-size [+|-]#UNIT<br>常用单位：k, M, G，c（byte）</li><li>#UNIT: (#-1, #]<ul><li>如：6k 表示(5k,6k]</li></ul></li><li>-#UNIT：[0,#-1]<ul><li>如：-6k 表示[0,5k]</li></ul></li><li>+#UNIT：(#,∞)<ul><li>如：+6k 表示(6k,∞)</li></ul></li></ul></li><li><p>根据时间戳：</p><ul><li><p>以“天”为单位</p><ul><li><p>-atime [+|-]#, </p><ul><li>#: [#,#+1)</li><li>+#: [#+1,∞]</li><li>-#: [0,#)</li></ul></li><li><p>-mtime</p></li><li><p>-ctime</p></li></ul></li><li><p>以“分钟”为单位</p><ul><li><p>-amin</p></li><li><p>-mmin</p></li><li><p>-cmin</p></li></ul></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200503192632140.png" alt="image-20200503192632140"></p></li><li><p>根据权限查找：</p><p>-perm [/|-]MODE</p><ul><li>MODE: 精确权限匹配</li><li>/MODE：任何一类(u,g,o)对象的权限中只要能一位匹配即可，或关系，+ 从centos7开始淘汰</li><li>-MODE：每一类对象都必须同时拥有指定权限，与关系</li><li>0 表示不关注</li><li>find -perm 755 会匹配权限模式恰好是755的文件</li><li>只有当每个人都有写权限时，find -perm -222才会匹配</li><li>只有当其它人（other）有写权限时，find -perm -002才会匹配</li></ul></li></ul><h3 id="处理动作"><a href="#处理动作" class="headerlink" title="处理动作"></a>处理动作</h3><ul><li>-print：默认的处理动作，显示至屏幕</li><li>-ls：类似于对查找到的文件执行“ls -l”命令</li><li>-delete：删除查找到的文件</li><li>-fls file：查找到的所有文件的长格式信息保存至指定文件中</li><li>-ok COMMAND {} ; 对查找到的每个文件执行由COMMAND指定的命令，对于每个文件执行命令之前，都会交互式要求用户确认</li><li>-exec COMMAND {} ; 对查找到的每个文件执行由COMMAND指定的命令<ul><li>{}: 用于引用查找到的文件名称自身</li></ul></li><li>find传递查找到的文件至后面指定的命令时，查找到所有符合条件的文件一次性传递给后面的命令</li></ul><h3 id="参数替换xargs"><a href="#参数替换xargs" class="headerlink" title="参数替换xargs"></a>参数替换xargs</h3><ul><li>由于很多命令不支持管道|来传递参数，xargs用于产生某个命令的参数，xargs<br>可以读入 stdin 的数据，并且以空格符或回车符将 stdin 的数据分隔成为参数</li><li>许多命令不能接受过多参数，命令执行可能会失败，xargs可以解决</li><li>注意：文件名或者是其他意义的名词内含有空格符的情况</li><li>find和xargs的组合：find | xargs COMMAND</li><li>示例：<ul><li><code>ls | xargs rm</code>    删除当前目录下的大量文件</li><li>find /sbin/ -perm +700 | ls -l <strong>这个命令是错误的</strong></li><li>find /bin/ -perm /7000 | xargs ls -sl 查找有特殊权限的文件，并排序</li><li>find -type f -name “*.txt” -print0 | xargs -0 rm 以字符nul分隔</li></ul></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul><li><p>找出/tmp目录下，属主不是root，且文件名不以f开头的文件<br><code>find /tmp \( -not -user root -a -not -name &#39;f*&#39; \) -ls</code><br><code>find /tmp -not \( -user root -o -name &#39;f*&#39; \) –ls</code></p></li><li><p>查找/etc/下，除/etc/sane.d目录的其它所有.conf后缀的文件</p><p><code>find /etc -path ‘/etc/sane.d’ -a -prune -o -name &quot;*.conf&quot;</code></p></li><li><p>查找/etc/下，除/etc/sane.d和/etc/fonts两个目录的所有.conf后缀的文件</p><p><code>find /etc \( -path &quot;/etc/sane.d&quot; -o -path &quot;/etc/fonts&quot; \) -a -prune -o -name &quot;*.conf&quot;</code></p></li><li><p>备份配置文件，添加.orig这个扩展名<br><code>find -name “*.conf” -exec cp &#123;&#125; &#123;&#125;.orig \;</code></p></li><li><p>提示删除存在时间超过３天以上的joe的临时文件<br><code>find /tmp -ctime +3 -user joe -ok rm &#123;&#125; \;</code></p></li><li><p>在主目录中寻找可被其它用户写入的文件<br><code>find ~ -perm -002 -exec chmod o-w &#123;&#125; \;</code></p></li><li><p>查找/data下的权限为644，后缀为sh的普通文件，增加执行权限<br><code>find /data –type f -perm 644 -name “*.sh” –exec chmod 755 &#123;&#125; \;</code></p></li><li><p>查看/home的目录<br><code>find /home –type d -ls</code></p></li><li><p>查找/var目录下属主为root，且属组为mail的所有文件或目录<br><code>find /var ‐user root ‐group mail</code></p></li><li><p>查找/usr目录下不属于root，bin或Hadoop的所有文件或目录<br><code>find /usr ‐not ‐user root ‐a ‐not ‐user bin ‐a ‐not ‐user centos</code><br><code>find /usr ‐not \(‐user root ‐o ‐user bin ‐o ‐user hadoop\)</code></p></li><li><p>查找/etc目录下最近一周内容曾被访问过的文件或目录<br><code>find /etc/ ‐atime ‐7</code></p></li><li><p>查找当前系统上没有属主或属组，且最近一周内曾被访问过的文件或目录<br><code>find / ‐nouser ‐a ‐nogroup ‐a ‐atime ‐7</code></p></li><li><p>查找/etc目录下大于1M且类型为普通文件的所有文件或目录<br><code>find /etc ‐size +1M ‐type f</code></p></li><li><p>查找/etc目录下所有用户都没有写权限的文件<br><code>find /etc ‐not ‐perm /222</code></p></li><li><p>查找/etc目录下至少一类用户没有执行权限的文件<br><code>find /etc ‐not ‐perm ‐111</code></p></li><li><p>查找/etc/init.d目录下，所有用户都执行权限，且其它用户写权限的文件<br><code>find /etc/init.d ‐perm ‐113</code></p></li><li><p>查找指定数据信息进行复制  查找出*.txt文件,批量复制到/tmp目录*</p></li><li><p>将找到的信息放到cp 和 最终目录中间<br><code>find /oldboy -type f -name &quot;*.txt&quot;|xargs -i cp &#123;&#125; /tmp</code></p><p>xargs -i：用{}代替传递的数据</p></li><li><p>利用cp指明谁是数据最终保存的目录信息<br><code>find /oldboy -type f -name &quot;*.txt&quot;|xargs  cp -t /tmp</code>       </p></li><li><p>查找指定数据信息进行移动  查找出*.txt文件,批量移动到/tmp目录</p><ul><li>将找到的信息放到cp 和 最终目录中间<br><code>find /oldboy -type f -name &quot;*.txt&quot;|xargs -i mv &#123;&#125; /tmp</code></li><li>利用cp指明谁是数据最终保存的目录信息<br><code>find /oldboy -type f -name &quot;\*.txt&quot;|xargs mv -t /tmp</code></li></ul></li></ul><h1 id="文件压缩"><a href="#文件压缩" class="headerlink" title="文件压缩"></a>文件压缩</h1><ul><li>file-roller</li><li>compress/uncompress: .Z</li><li>gzip/gunzip: .gz</li><li>bzip2/bunzip2: .bz2</li><li>xz/unxz: .xz</li><li>zip/unzip</li><li>tar</li><li>cpio</li></ul><h2 id="compress-uncompress"><a href="#compress-uncompress" class="headerlink" title="compress/uncompress"></a>compress/uncompress</h2><ul><li>compress [-dfvcVr] [-b maxbits] [file …]<ul><li>-d 解压缩，相当于uncompress</li><li>-c 结果输出至标准输出,不删除原文件</li><li>-v 显示详情</li></ul></li><li>uncompress file.Z  解压缩</li><li>zcat file.Z  不显式解压缩的前提下查看文本文件内容<br>示例：<code>zcat file.Z &gt;file</code></li></ul><h2 id="gzip-gunzip"><a href="#gzip-gunzip" class="headerlink" title="gzip/gunzip"></a>gzip/gunzip</h2><ul><li>gzip [OPTION]… FILE …<ul><li>-d 解压缩，相当于gunzip</li><li>-c 结果输出至标准输出，保留原文件不改变</li><li>-# 指定压缩比，#取值为1-9，值越大压缩比越大</li></ul></li><li>gunzip file.gz   解压缩</li><li>zcat file.gz   不显式解压缩的前提下查看文本文件内容</li><li>示例：<ul><li><code>gzip -c messages &gt;messages.gz</code></li><li><code>gzip -c -d messages.gz &gt; messages</code></li><li><code>zcat messages.gz &gt; messages</code></li><li><code>cat messages | gzip &gt; m.gz</code></li></ul></li></ul><h2 id="bzip2-bunzip2-bzcat"><a href="#bzip2-bunzip2-bzcat" class="headerlink" title="bzip2/bunzip2/bzcat"></a>bzip2/bunzip2/bzcat</h2><ul><li>bzip2 [OPTION]… FILE …<ul><li>-k keep, 保留原文件</li><li>-d 解压缩</li><li>-# 1-9，压缩比，默认为9</li></ul></li><li>bunzip2 file.bz2 解压缩</li><li>bzcat file.bz2 不显式解压缩的前提下查看文本文件内容</li></ul><h2 id="xz-unxz-xzcat"><a href="#xz-unxz-xzcat" class="headerlink" title="xz/unxz/xzcat"></a>xz/unxz/xzcat</h2><ul><li>xz [OPTION]… FILE …<ul><li>-k keep, 保留原文件</li><li>-d 解压缩</li><li>-# 压缩比，取值1-9，默认为6</li></ul></li><li>unxz file.xz  解压缩</li><li>xzcat file.xz  不显式解压缩的前提下查看文本文件内容</li></ul><h2 id="zip-unzip"><a href="#zip-unzip" class="headerlink" title="zip/unzip"></a>zip/unzip</h2><ul><li>打包压缩<br><code>zip –r /backup/sysconfig /etc/sysconfig/</code></li><li>解包解压缩<ul><li><code>unzip sysconfig.zip</code></li><li><code>cat /var/log/messages | zip messages</code></li><li><code>unzip -p message.gz &gt; message</code>  -p 表示管道</li></ul></li></ul><h2 id="tar工具"><a href="#tar工具" class="headerlink" title="tar工具"></a>tar工具</h2><ul><li><p>tar（Tape ARchive，磁带归档的缩写）</p></li><li><p>tar [OPTION]… </p><ul><li><p>-A 追加 tar 文件至归档</p></li><li><p>-c 创建一个新归档</p></li><li><p>-r 追加文件至归档结尾</p></li><li><p>-t 列出归档内容</p></li><li><p>-x 从归档中解压文件</p></li><li><p>-f 使用归档文件或 ARCHIVE 设备</p></li><li><p>-p 解压文件权限信息(默认只为超级用户服务)</p></li><li><p>-z 通过 gzip 过滤归档</p></li></ul></li></ul><ol><li><p>创建归档，保留权限</p><p><code>tar -cpvf /PATH/FILE.tar FILE...</code></p></li><li><p>追加文件至归档： 注：不支持对压缩文件追加</p><p><code>tar -rf /PATH/FILE.tar FILE...</code></p></li><li><p>查看归档文件中的文件列表</p><p><code>tar -tf /PATH/FILE.tar</code></p></li><li><p>展开归档</p><p><code>tar -xf /PATH/FILE.tar</code></p><p><code>tar -xf /PATH/FILE.tar -C /PATH/</code> -C 指定目录</p></li><li><p>结合压缩工具实现：归档并压缩</p><p>-j: bzip2, -z: gzip, -J: xz</p></li></ol><ul><li><p>–exclude 排除文件<br><code>tar zcvf /root/a3.tgz --exclude=/app/host1 --exclude=/app/host2 /app</code></p></li><li><p>–exclude-from=FILE 批量排除FILE中指定的文件</p><p><code>tar zcvf /root/a3.tgz --exclude-frome=a.txt</code></p></li></ul><ul><li>–remove-files 归档/压缩之后删除源文件</li></ul><ul><li>-T 选项指定输入文件  -X 选项指定包含要排除的文件列表<br><code>tar zcvf mybackup.tgz -T /root/includefilelist -X /root/excludefilelist</code></li><li>split：分割大的 tar 文件为多份小文件<ul><li>split -b Size –d tar-file-name prefix-name</li><li>split -b 1M –d mybackup.tgz mybackup-parts</li><li>split -b 1M mybackup.tgz mybackup-parts</li><li>合并：<br><code>cat mybackup-parts* &gt; mybackup.tar.gz-</code></li></ul></li></ul><ul><li><p>其他常用：</p><ul><li>-d   记录文件差异</li><li>-v   显示指令执行过程</li></ul></li><li><p>-z   通过gzip指令压缩/解压缩文件，文件名最好为*.tar.gz</p></li><li><p>-h   跟踪符号链接；将它们所指向的文件归档并输出</p></li></ul><h2 id="cpio"><a href="#cpio" class="headerlink" title="cpio"></a>cpio</h2><ul><li><p>功能：复制文件从或到归档</p></li><li><p>cpio命令是通过重定向的方式将文件进行打包备份，还原恢复的工具，它可以解压以“.cpio”或者“.tar”结尾的文件</p></li><li><p>cpio [选项] &gt; 文件名或者设备名</p></li><li><p>cpio [选项] &lt; 文件名或者设备名</p></li><li><p>选项</p><ul><li>-o 将文件拷贝打包成文件或者将文件输出到设备上</li><li>-O filename 输出到指定的归档文件名</li><li>-A 向已存在的归档文件中追加文件</li><li>-i 解包，将打包文件解压或将设备上的备份还原到系统</li><li>-I filename 对指定的归档文件名解压</li><li>-t 预览，查看文件内容或者输出到设备上的文件内容</li><li>-F filename 使用指定的文件名替代标准输入或输出</li><li>-d 解包生成目录，在cpio还原时，自动的建立目录</li><li>-v 显示打包过程中的文件名称</li></ul></li><li><p>示例</p><ul><li>将etc目录备份：<br><code>find ./etc -print |cpio -ov &gt;bak.cpio</code></li><li>将/data内容追加bak.cpio<br><code>find /data | cpio -oA -F bak.cpio</code></li><li>内容预览<br><code>cpio –tv &lt; etc.cpio</code></li><li>解包文件<br><code>cpio –idv &lt; etc.cpio</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-04-用户组和权限管理</title>
      <link href="2020/05/03/Linux%E5%9F%BA%E7%A1%80-04-%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/"/>
      <url>2020/05/03/Linux%E5%9F%BA%E7%A1%80-04-%E7%94%A8%E6%88%B7%E7%BB%84%E5%92%8C%E6%9D%83%E9%99%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux用户-amp-组"><a href="#Linux用户-amp-组" class="headerlink" title="Linux用户&amp;组"></a>Linux用户&amp;组</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ul><li>Linux用户<ul><li>管理员： root 0 （UID）</li><li>普通用户：1-65535<ul><li>系统用户：1-499/1-999 </li><li>登录用户: 500+ / 1000+ </li></ul></li></ul></li><li>Linux组<ul><li>管理员组： root 0 </li><li>普通组：1-65535<ul><li>系统组：1-499/1-999 </li><li>登录用户组：500+ / 1000+ </li></ul></li><li>组类型：<ul><li>基本组–主组： 组名会和用户名相同，且仅包含一个用户的组–私有组</li><li>附加组–额外组：一个用户可以属于多个附加组</li></ul></li></ul></li></ul><h2 id="Linux安全上下文"><a href="#Linux安全上下文" class="headerlink" title="Linux安全上下文"></a>Linux安全上下文</h2><ul><li>运行中的程序： 进程</li><li>进程能够访问的所有资源的权限在于进程发起者的用户身份    </li></ul><h2 id="用户和组相关的配置文件"><a href="#用户和组相关的配置文件" class="headerlink" title="用户和组相关的配置文件"></a>用户和组相关的配置文件</h2><ul><li><p>/etc/passwd : 用户及其属性信息（用户名称，用户ID，基本组ID等等）</p></li><li><p>/etc/group: 组及其属性信息</p></li><li><p>/etc/shadow: 用户密码及其属性信息</p></li><li><p>/etc/gshadow: 组密码及其属性信息</p></li><li><p>配置文件/etc/passwd：<br><code>root:x:0:0:root:/root:/bin/bash</code><br><code>username：password：UID：GID：GECOS（用户注释信息）：home directory：shell </code></p></li><li><p>配置文件/etc/group<br><code>root:x:0:gname:password:GID:user_list </code></p></li><li><p>配置文件/etc/shadow<br><code>root:xxxx::0:99999:7:::</code></p><p><code>登录名：加密密码：最近一次更改密码的日期：密码的最小使用期限：密码的最大使用期限：密码的警告时间段：密码的禁用日期：账户过期日期：保留字段</code></p></li></ul><h2 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h2><ul><li><p>useradd命令：创建用户<br><code>[root@test ~]# useradd --help</code><br>Usage: useradd [options] LOGIN</p><p>常用选项：</p><ul><li><p>-u: 指定uid</p></li><li><p>-g：指定gid</p></li><li><p>-c：指定用户注释信息</p></li><li><p>-d：指定家目录</p></li><li><p>-s：指定shell类型（默认是/bin/bash）</p></li><li><p>-G：指定附加组</p></li><li><p>-r：指定为系统用户</p></li><li><p>-M：不创建家目录</p></li></ul><p>默认设置： </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># useradd zhangsan</span></span><br><span class="line">zhangsan:x:1000:1000::/home/zhangsan:/bin/bash</span><br></pre></td></tr></table></figure><p>创建用户的默认配置：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># cat /etc/default/useradd </span></span><br><span class="line">useradd defaults file</span><br><span class="line">GROUP=100</span><br><span class="line">HOME=/home</span><br><span class="line">INACTIVE=-1</span><br><span class="line">EXPIRE=</span><br><span class="line">SHELL=/bin/bash</span><br><span class="line">SKEL=/etc/skel</span><br><span class="line">CREATE_MAIL_SPOOL=yes</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># useradd -u 2000  -c &quot;this is lisi&quot; -d /home/ll lisi</span></span><br><span class="line">lisi:x:2000:2000:this is lisi:/home/ll:/bin/bash</span><br></pre></td></tr></table></figure></li><li><p>userdel命令：删除用户<br>常用选项：</p><ul><li>-r：remove home directory and mail spool 删除用户家目录和邮件信息</li></ul></li><li><p>usermod命令：编辑用户信息，<br>常用选项：    </p><ul><li>-G：将用户添加到附加组中</li><li>-dm：移动用户新登录目录（默认情况会登录到自己的家目录下）</li><li>-L： 锁定用户</li><li>-U： 解锁用户</li><li>其他选项与useradd基本类似</li></ul></li><li><p>passwd命令：编辑用户密码<br>常用选项：    </p><ul><li><p>-n mindays: 指定最短使用期限</p></li><li><p>-x maxdays：指定最大使用期限</p></li><li><p>-w warndays：提前多少天开始警告</p></li><li><p>-i Inactivedays： 非活动期限</p></li><li><p>–stdin： 从标准输入接收用户密码</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># echo &quot;111111&quot; | passwd --stdin zhangsan</span></span><br><span class="line">Changing password <span class="keyword">for</span> user zhangsan.</span><br><span class="line">passwd: all authentication tokens updated successfully.</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>案例1：创建用户gentoo、附加组为distro和linux，默认shell为/bin/csh，注释信息为“Gentoo Distribution”<br><code>[root@test ~]# useradd -G linux,distro -c &quot;Gentoo Distribution&quot; -s /bin/csh gentoo</code></p><p>组管理命令：</p><ul><li><p>groupadd命令：创建组<br>常用选项：    </p><ul><li>-g： 指定gid</li><li>-r： 指定为系统组</li><li>-p, –password PASSWORD       use this encrypted password for the new group</li></ul><p><code>[root@test ~]# groupadd -g 2000 -r linux</code></p></li><li><p>groupdel命令：删除组<br>常用选项： </p><ul><li>-r, –remove                  remove home directory and mail spool</li><li>-f, –force                      force some actions that would fail otherwise</li></ul></li><li><p>groupmod命令：编辑组信息<br>常用选项：</p><ul><li>-g, –gid GID                 change the group ID to GID 指定GID </li><li>-n, –new-name NEW_GROUP      change the name to NEW_GROUP    修改组名称</li><li>-p, –password PASSWORD       change the password to this (encrypted)    修改组密码</li></ul></li><li><p>gpasswd命令：编辑组密码<br>常用选项：</p><ul><li>-a, –add USER                add USER to GROUP    添加用户到某个组中</li><li>-d, –delete USER             remove USER from GROUP    移除用户从某个组</li><li>-r, –delete-password         remove the GROUP’s password    删除组密码</li><li>-M, –members USER,…        set the list of members of GROUP    设置组列表</li><li>-A, –administrators ADMIN,…    set the list of administrators for GROUP设置组中管理员</li></ul></li></ul><h2 id="用户-组相关命令"><a href="#用户-组相关命令" class="headerlink" title="用户/组相关命令"></a>用户/组相关命令</h2><ul><li><p>id命令：<br><code>[root@test ~]# id --help</code><br>Usage: id [OPTION]… [USER]</p><p>常用选项：</p><ul><li><p>-Z, –context  print only the security context of the current user 只输出当前用户的安全上下文</p></li><li><p>-g, –group    print only the effective group ID    只输出主组ID </p></li><li><p>-G, –groups   print all group IDs    输出所有组ID </p></li><li><p>-n, –name     print a name instead of a number, for -ugG    输出是名字代替ID号</p></li><li><p>-r, –real     print the real ID instead of the effective ID, with -ugG 输出真实ID号</p></li><li><p>-u, –user     print only the effective user ID</p></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># id zhangsan</span></span><br><span class="line">uid=1000(zhangsan) gid=1000(zhangsan) groups=1000(zhangsan),0(root)</span><br></pre></td></tr></table></figure></li><li><p>su命令：切换用户或提权<br>常用的切换方式：</p><ul><li><p><code>su username</code> : 切换用户，不读取用户配置信息</p></li><li><p><code>su - username</code>: 切换用户，读取用户配置信息（完全切换）</p></li><li><p><code>su [-] username -c &quot;Command&quot;</code>: 切换用户执行命令</p><p><code>[zhangsan@test ~]$ su root -c &quot;cat /etc/shadow</code></p></li></ul></li></ul><h1 id="Linux权限管理"><a href="#Linux权限管理" class="headerlink" title="Linux权限管理"></a>Linux权限管理</h1><p><code>-rw-r--r--. 1 root root 128 Feb  6 06:39 1.txt</code></p><ul><li>-： 文件类型；普通文件</li><li>rw-： 属主拥有的权限  – 读写权限</li><li>r–： 属组拥有的权限  – 只读权限</li><li>r–： other 拥有的权限    – 只读权限</li><li>1： 链接引用数</li><li>root： 文件属主</li><li>root： 文件属组</li><li>128： 文件大小</li></ul><p>文件的权限主要针对三类对象进行定义：</p><ul><li>owner : 属主 u </li><li>group : 属组 g </li><li>other ：其他 o</li></ul><p>每个文件针对每类访问者都定义了三种权限：</p><ul><li>r: readable 可读</li><li>w：writeable 可写</li><li>x：eXcutable 可执行</li></ul><blockquote><p> 文件的权限建立在r权限，目录的权限建立在x权限</p></blockquote><ul><li>文件<ul><li>r：可以使用文件查看类工具获取其内容（4）</li><li>w：可以修改其内容（2）</li><li>x：可以把此文件提交给内核启动为一个进程（1）</li></ul></li><li>目录： <ul><li>r： 可以使用ls查看目录中的文件列表    </li><li>w： 可以在此目录创建或删除文件</li><li>x： 可以cd到此目录中 </li></ul></li></ul><p><img src="https://s2.ax1x.com/2020/02/08/12Lh28.jpg" alt="12Lh28.jpg"></p><h2 id="权限相关命令"><a href="#权限相关命令" class="headerlink" title="权限相关命令"></a>权限相关命令</h2><ul><li><p>chmod命令： 设置文件权限<br><code>[root@test ~]# chmod --help</code><br>Usage: chmod [OPTION]… MODE[,MODE]… FILE…</p><p>常用选项： </p><ul><li><p>-R： 递归修改</p></li><li><p>MODE</p><ul><li>u=[rwx]  : 设置属主权限</li><li>g=[rwx]  : 设置属组权限</li><li>o=[rwx]  : 设置其他权限</li></ul></li><li><p>a=[rwx]  :  设置所有人的权限</p></li></ul></li><li><p>方式1：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# chmod u&#x3D;rwx,g&#x3D;rw,o&#x3D;rx hello </span><br><span class="line">[root@test ~]# ll hello </span><br><span class="line">-rwxrw-r-x. 1 root root 1 Feb  6 02:50 hello</span><br></pre></td></tr></table></figure></li><li><p>方式2：</p><p>  <code>chmod [1-7][1-7][1-7] filename </code><br>r:4    w:2    x:1     </p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# chmod 644 hello</span><br><span class="line">-rw-r--r--. 1 root root 1 Feb  6 02:50 hello</span><br></pre></td></tr></table></figure></li><li><p>chown命令：改变文件属主和属组</p><p><code>[root@test ~]# chown --help </code><br>Usage: chown [OPTION]… [OWNER][:[GROUP]] FILE…</p><p>常用选项： </p><ul><li>-R： 递归修改</li><li>[OWNER]        指定属主</li><li>[GROUP]        指定属组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# chown wangwu:wangwu hello </span><br><span class="line">[root@test ~]# ll hello </span><br><span class="line">-rw-r--r--. 1 wangwu wangwu 1 Feb  6 02:50 hello</span><br></pre></td></tr></table></figure></li><li><p>chgrp命令：修改属组</p><p><code>[root@test ~]# chgrp --help</code><br>Usage: chgrp [OPTION]… GROUP FILE…<br>常用参数： </p><ul><li>-R：递归处理</li><li>GROUP 指定的是属组</li><li>–reference=RFILE      ：以参考文件的属主数组来设定</li></ul></li><li><p>umask:文件或者目录的遮掩码： 当用户创建文件或者目录的时候的默认权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# umask </span><br><span class="line">0022</span><br></pre></td></tr></table></figure><p><code>[root@test ~]# umask 0042</code> 设定umask值</p><p>FILE： 666-umask值（通常来说文件预设没有x权限）<br>DIR： 777 - umask值</p><p>查看umask： umask</p></li><li><p>chattr</p><ul><li>+i  不得任意改动文件或目录</li></ul></li></ul><h1 id="Linux特殊权限"><a href="#Linux特殊权限" class="headerlink" title="Linux特殊权限"></a>Linux特殊权限</h1><p>文件的特殊权限：SUID  SGID  SBIT</p><h2 id="SUID"><a href="#SUID" class="headerlink" title="SUID"></a>SUID</h2><p>借出程序所有者的权限（4）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# ll &#x2F;usr&#x2F;bin&#x2F;passwd </span><br><span class="line">-rwsr-xr-x. 1 root root 27832 Jun 10  2014 &#x2F;usr&#x2F;bin&#x2F;passwd</span><br></pre></td></tr></table></figure><p>属主的执行x权限位：s  –&gt; SUID 权限</p><p>案例：</p><p>passwd命令：修改用户密码 ,需要修改/etc/shadow文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# ll &#x2F;etc&#x2F;passwd</span><br><span class="line">-rw-r--r--. 1 root root 1037 Feb  7 07:56 &#x2F;etc&#x2F;passwd</span><br><span class="line"></span><br><span class="line">[root@test ~]# ll &#x2F;etc&#x2F;shadow</span><br><span class="line">----------. 1 root root 797 Feb  7 07:56 &#x2F;etc&#x2F;shadow</span><br></pre></td></tr></table></figure><p>根据权限可以得知同一用户或其他人都可以调用该命令</p><p>问题：</p><ol><li>/etc/passwd文件仅仅root用户拥有w权限，其他用户没有</li><li>其他用户虽然可以调用passwd命令，但是无法写入到/etc/passwd文件</li></ol><p>SUID权限作用： 其他用户没有权限修改/etc/passwd文件，但是root用户可以将<br>w权限赋予给其他用户去修改/etc/passwd命令 </p><p><strong>注意</strong>：</p><ol><li>SUID权限仅仅对二进制程序有效  </li><li>执行者必须有用x权限 </li><li>仅在本程序中拥有修改权限</li><li>属主拥有s权限，即可将自己的权限暂时借由他人使用，前提是要拥有x权限</li></ol><h2 id="SGID"><a href="#SGID" class="headerlink" title="SGID"></a>SGID</h2><p>借出用户组的权限 （2）</p><p>案例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment"># useradd zhangsan</span></span><br><span class="line">[root@localhost ~]<span class="comment"># useradd lisi</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll /home/</span></span><br><span class="line">total 0</span><br><span class="line">drwx------. 2 lisi     lisi     62 Aug  5 09:51 lisi</span><br><span class="line">drwx------. 2 zhangsan zhangsan 62 Aug  5 09:51 zhangsan</span><br><span class="line">[root@localhost ~]<span class="comment"># chmod 2770 /home/zhangsan</span></span><br><span class="line">[root@localhost ~]<span class="comment"># ll -d /home/zhangsan</span></span><br><span class="line">drwxrws---. 2 zhangsan zhangsan 62 Aug  5 09:51 /home/zhangsan</span><br><span class="line">[root@localhost ~]<span class="comment"># usermod -aG zhangsan lisi</span></span><br><span class="line">[root@localhost ~]<span class="comment"># su lisi</span></span><br><span class="line">[lisi@localhost root]$ <span class="built_in">cd</span> /home/lisi/</span><br><span class="line">[lisi@localhost ~]$ touch 1.txt</span><br><span class="line">[lisi@localhost ~]$ ll </span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 lisi lisi 0 Aug  5 09:56 1.txt</span><br><span class="line">[lisi@localhost ~]$ <span class="built_in">cd</span> /home/zhangsan</span><br><span class="line">[lisi@localhost zhangsan]$ touch 1.txt</span><br><span class="line">[lisi@localhost zhangsan]$ ll</span><br><span class="line">total 0</span><br><span class="line">-rw-rw-r--. 1 lisi zhangsan 0 Aug  5 09:57 1.txt   </span><br></pre></td></tr></table></figure><p>lisi用户在SGID目录创建文件的属主为zhangsan（该目录的所属组）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">都是test2做的事情</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ll /home/test1/1.txt </span></span><br><span class="line">-rw-rw-r--. 1 test2 test1 0 Feb  8 02:00 /home/test1/1.txt</span><br><span class="line">[root@<span class="built_in">test</span> ~]<span class="comment"># ll /home/test2/1.txt </span></span><br><span class="line">-rw-rw-r--. 1 test2 test2 0 Feb  8 01:59 /home/test2/1.txt</span><br></pre></td></tr></table></figure><p>这种权限特性可以在同一个用户组的多个用户拥有共同的目录，在创建文件时该用户组的所有用户具有相同的权限操作，同一个属组中的用户在拥有SGID权限的目录下创建文件，属组都是该目录的所属组</p><p><strong>注意：</strong></p><ol><li>二进制程序有效</li><li>执行者拥有x权限 </li><li>执行过程中暂时拥有用户组权限</li></ol><h2 id="Sticky"><a href="#Sticky" class="headerlink" title="Sticky"></a>Sticky</h2><p>对目录有效 （1）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@test ~]# ll -d &#x2F;tmp&#x2F;</span><br><span class="line">drwxrwxrwt. 8 root root 172 Feb  8 01:16 &#x2F;tmp&#x2F;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ol><li>当用户对此目录具有w|x权限时，及拥有写入权限</li><li>用户在此目录创建文件，只有自己和root用户有权限删除</li><li>用户不允许对其他用户进行任何操作</li></ol><h2 id="umask"><a href="#umask" class="headerlink" title="umask"></a>umask</h2><p>0022 默认遮掩码</p><h1 id="Linux-ACL权限"><a href="#Linux-ACL权限" class="headerlink" title="Linux ACL权限"></a>Linux ACL权限</h1><p>ACL 访问控制列表； 主要目的是在提供的传统的owner group  w x r 权限之外的细部权限设定  </p><p>ACL 可以针对某一个使用者，某一个文件或者目录来设定rwx权限，对于需要特殊权限的使用状态非常有帮助</p><h2 id="setfacl-命令"><a href="#setfacl-命令" class="headerlink" title="setfacl 命令"></a>setfacl 命令</h2><p>设定权限</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># setfacl --help </span></span><br><span class="line">setfacl 2.2.51 -- <span class="built_in">set</span> file access control lists</span><br><span class="line">Usage: setfacl [-bkndRLP] &#123; -m|-M|-x|-X ... &#125; file ...</span><br></pre></td></tr></table></figure><p>常用选项： </p><ul><li>-m : 更改acl设定参数</li><li>-x ：删除acl设定参数</li><li>-b ：移除所有的acl设定参数</li><li>-R ：递归添加acl设定参数</li><li>-d ： 添加默认acl设定参数</li></ul><p><img src="https://s2.ax1x.com/2020/02/08/1WBNyF.png" alt="1WBNyF.png"></p><p>删除用户权限： <code>setfacl -x u:username file </code><br>删除组权限： <code>setfacl -x g:groupname file</code><br>删除整个acl权限： <code>setfacl -b file</code></p><p>实例1 针对用户的设定方式：<br>设定规范：u:username:power<br>1.设定user对testfile有rwx权限<br><code>setfacl -m u:user:rwx testfile</code><br>2.设定user对testdirectory目录下所有文件有rwx权限<br><code>setfacl -R -m u:user:rwx testdirectory </code><br>3.去掉user对testdirectory的x权限<br><code>setfacl -m u:user:rw- testdirectory</code><br>4.去掉所有acl权限<br><code>setfacl -b</code><br>5.为testdirectory目录添加默认的acl权限，此目录下创建目录和文件,user都有rwx权限<br><code>setfacl -d -m u:user:rwx testdirectory</code></p><p>实例2： 针对用户组的设定方式</p><p>设定规范：g:groupname:power</p><p>给acl_test1文件添加mygropu1组rx权限设定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@study ~]<span class="comment"># setfacl -m g:mygroup1:rx acl_test1 </span></span><br><span class="line">[root@study ~]<span class="comment"># getfacl acl_test1</span></span><br><span class="line">file: acl_test1</span><br><span class="line">owner: root</span><br><span class="line">group: root</span><br><span class="line">user::rwx</span><br><span class="line">user:vbird1:rx</span><br><span class="line">group::r--</span><br><span class="line">group:mygroup1:rx   <span class="comment"># 组权限设定</span></span><br><span class="line">mask::rx</span><br><span class="line">other::r--</span><br></pre></td></tr></table></figure><h2 id="getfacl命令"><a href="#getfacl命令" class="headerlink" title="getfacl命令"></a>getfacl命令</h2><p>查看acl权限设定</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># getfacl testfile </span></span><br><span class="line"><span class="comment"># file: testfile</span></span><br><span class="line"><span class="comment"># owner: root</span></span><br><span class="line"><span class="comment"># group: root</span></span><br><span class="line">user::rw-</span><br><span class="line">user:user:rwx<span class="comment"># 针对user用户具有rwx权限</span></span><br><span class="line">group::r--</span><br><span class="line">group:group1:rw-<span class="comment"># 针对group1组具有rw权限 </span></span><br><span class="line">mask::rwx</span><br><span class="line">other::r--<span class="comment"># 如果没有其他设定 默认属于other</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-03-IO重定向和管道</title>
      <link href="2020/05/02/Linux%E5%9F%BA%E7%A1%80-03-IO%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E7%AE%A1%E9%81%93/"/>
      <url>2020/05/02/Linux%E5%9F%BA%E7%A1%80-03-IO%E9%87%8D%E5%AE%9A%E5%90%91%E5%92%8C%E7%AE%A1%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><ul><li>输入输出<ul><li>标准输入</li><li>标准输出            1</li><li>标准错误输出     2</li></ul></li><li>输出重定向<ul><li>&gt;覆盖重定向</li><li>&gt;&gt;追加重定向</li><li>2&gt;覆盖重定向错误输出流</li><li>2&gt;&gt;追加重定向错误输出流</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># echo &quot;hello kinmfer&quot;</span></span><br><span class="line">hello eagles</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># echo &quot;hello kinmfer&quot; &gt; 2.txt</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat 2.txt </span></span><br><span class="line">hello eagles</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># echo &quot;hello kinmfer&quot; &gt;&gt; 2.txt</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat 2.txt </span></span><br><span class="line">hello eagles</span><br><span class="line">hello eagles</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lnd </span></span><br><span class="line">-bash: lnd: <span class="built_in">command</span> not found</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lnd 2&gt; output_error</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat output_error </span></span><br><span class="line">-bash: lnd: <span class="built_in">command</span> not found</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lnd 2&gt;&gt; output_error</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat output_error </span></span><br><span class="line">-bash: lnd: <span class="built_in">command</span> not found</span><br><span class="line">-bash: lnd: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><ul><li>标准输出和错误输出到各自不同的位置</li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ll 1&gt; file.out 2&gt; file_error.out</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat file.out </span></span><br><span class="line">total 8</span><br><span class="line">lrwxrwxrwx. 1 root root  5 Feb  6 07:26 1_soft.txt -&gt; 1.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 Feb  6 07:26 1.txt</span><br><span class="line">-rw-r--r--. 1 root root 26 Feb  6 07:51 2.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 Feb  6 07:53 file_error.out</span><br><span class="line">-rw-r--r--. 1 root root  0 Feb  6 07:53 file.out</span><br><span class="line">-rw-r--r--. 1 root root 60 Feb  6 07:51 output_error</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lld 1&gt; file.out 2&gt; file_error.out</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat file_error.out </span></span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br></pre></td></tr></table></figure><ul><li><p>垃圾桶： /dev/null     被重定向到此的会被清空</p></li><li><p>合并标准输出和错误输出为同一数据流进行重定向</p><ul><li>&amp;&gt;  覆盖重定向</li><li>&amp;&gt;&gt; 追加重定向</li><li>2&gt;&amp;1  将错误流重定向到标准输出文件中 （&gt;&gt;）</li><li>1&gt;&amp;2  将正确流重定向到错误输出文件中  (&gt;&gt;)</li></ul></li></ul><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lld &amp;&gt; all.out</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ll &amp;&gt;&gt; all.out</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat all.out </span></span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br><span class="line">total 16</span><br><span class="line">lrwxrwxrwx. 1 root root  5 Feb  6 07:26 1_soft.txt -&gt; 1.txt</span><br><span class="line">-rw-r--r--. 1 root root  0 Feb  6 07:26 1.txt</span><br><span class="line">-rw-r--r--. 1 root root 26 Feb  6 07:51 2.txt</span><br><span class="line">-rw-r--r--. 1 root root 30 Feb  6 07:56 all.out</span><br><span class="line">-rw-r--r--. 1 root root 30 Feb  6 07:53 file_error.out</span><br><span class="line">-rw-r--r--. 1 root root  0 Feb  6 07:53 file.out</span><br><span class="line">-rw-r--r--. 1 root root 60 Feb  6 07:51 output_error</span><br><span class="line"></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># lld 1&gt; file.out 2&gt; file_error.out 2&gt;&amp;1</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat file.out </span></span><br><span class="line">-bash: lld: <span class="built_in">command</span> not found</span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># ll 1&gt; file.out 2&gt; file_error.out 1&gt;&amp;2</span></span><br><span class="line">[root@<span class="built_in">test</span> tmp]<span class="comment"># cat file_error.out </span></span><br><span class="line">total 16</span><br><span class="line">-rw-r--r--. 1 root root  30 Feb  6 07:57 1.out</span><br><span class="line">lrwxrwxrwx. 1 root root   5 Feb  6 07:26 1_soft.txt -&gt; 1.txt</span><br><span class="line">-rw-r--r--. 1 root root   0 Feb  6 07:26 1.txt</span><br><span class="line">-rw-r--r--. 1 root root  26 Feb  6 07:51 2.txt</span><br><span class="line">-rw-r--r--. 1 root root 396 Feb  6 07:56 all.out</span><br><span class="line">-rw-r--r--. 1 root root   0 Feb  6 07:59 file_error.out</span><br><span class="line">-rw-r--r--. 1 root root   0 Feb  6 07:59 file.out</span><br><span class="line">-rw-r--r--. 1 root root  60 Feb  6 07:51 output_error</span><br></pre></td></tr></table></figure><ul><li><p>标准输入</p><ul><li><p>覆盖：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /path/somefile &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li><li><p>追加：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;&gt; /path/somefile &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">....</span></span><br><span class="line"><span class="string">EOF</span></span><br></pre></td></tr></table></figure></li></ul></li><li><p>tee命令</p><p>tee指令会从标准输入设备读取数据，将其内容输出到标准输出设备，同时保存成文件 。</p><ul><li>-a  追加</li><li>-i   无视中断</li></ul></li></ul><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><p><code>command1 | command2 | command3 ...</code><br>最后一个命令会在当前shell进程的子shell进程中执行；前一个命令的执行结果会由当前命令继续使用。</p><ul><li><p>tr命令，用于转换或删除文件中的字符</p><p>Usage: tr [OPTION]… SET1 [SET2]</p><ul><li>常用选项：<ul><li>-c, –complement：反选设定字符。也就是符合 SET1 的部份不做处理，不符合的剩余部份才进行转换</li><li>-d, –delete：删除指令字符</li><li>-s, –squeeze-repeats：缩减连续重复的字符成指定的单个字符</li><li>-t, –truncate-set1：削减 SET1 指定范围，使之与 SET2 设定长度相等</li></ul></li></ul></li></ul><p>案例1：将/etc/passwd文件中的前5行内容转换为大写后保存至/tmp/passwd.out文件中<br><code>[root@node1 ~]# head ‐n 5 /etc/passwd | tr &#39;a‐z&#39; &#39;A‐Z&#39; &gt; /tmp/passwd.output  </code></p><p>案例2：将登陆至当前系统上用户信息中的最后1行的信息转换为大写后保存至/tmp/who.out文件中<br><code>[root@node1 ~]# who | tail ‐n 1 | tr &#39;a‐z&#39; &#39;A‐Z&#39; &gt;/tmp/who.out</code></p><p>案例3：将文件中的：删除之后重定向到新文件中<br><code>[root@test tmp]# cat output_error | tr -d &quot;:&quot; &gt; output_error_new</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-02-Linux基础</title>
      <link href="2020/04/28/Linux%E5%9F%BA%E7%A1%80-02-Linux%E5%9F%BA%E7%A1%80/"/>
      <url>2020/04/28/Linux%E5%9F%BA%E7%A1%80-02-Linux%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Linux-基础"><a href="#Linux-基础" class="headerlink" title="Linux 基础"></a>Linux 基础</h1><h2 id="用户类型"><a href="#用户类型" class="headerlink" title="用户类型"></a>用户类型</h2><ul><li><p>root 用户</p><ul><li><p>一个特殊的管理帐户</p></li><li><p>也被称为超级用户</p></li><li><p>root已接近完整的系统控制</p></li><li><p>对系统损害几乎有无限的能力</p></li><li><p>除非必要,不要登录为 root</p></li></ul></li><li><p>普通（ 非特权 ）用户</p><ul><li>权限有限</li><li>造成损害的能力比较有限</li></ul></li></ul><h2 id="终端-terminal"><a href="#终端-terminal" class="headerlink" title="终端 terminal"></a>终端 terminal</h2><p>设备终端：键盘、鼠标、显示器</p><h3 id="终端类型"><a href="#终端类型" class="headerlink" title="终端类型"></a>终端类型</h3><ul><li><p>控制台终端： /dev/console</p></li><li><p>串行终端：/dev/ttyS#</p></li><li><p>虚拟终端：tty：teletypewriters， /dev/tty#，tty 可有n个，Ctrl+Alt+F# </p></li><li><p>图形终端：startx, xwindows</p><ul><li>CentOS 6: Ctrl + Alt + F7</li><li>CentOS 7: 在哪个终端启动，即位于哪个虚拟终端</li></ul></li><li><p>伪终端：pty：pseudo-tty ， /dev/pts/# 如：SSH远程连接</p></li></ul><h3 id="查看当前的终端设备"><a href="#查看当前的终端设备" class="headerlink" title="查看当前的终端设备"></a>查看当前的终端设备</h3><p><code>tty</code> 命令可以查看当前所在终端</p><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#tty</span></span><br><span class="line">/dev/pts/0</span><br></pre></td></tr></table></figure><h2 id="交互式接口"><a href="#交互式接口" class="headerlink" title="交互式接口"></a>交互式接口</h2><p>交互式接口：启动终端后，在终端设备附加一个交互式应用程序</p><h3 id="交互式接口类型"><a href="#交互式接口类型" class="headerlink" title="交互式接口类型"></a>交互式接口类型</h3><ul><li><p>GUI：Graphic User Interface</p><p>X protocol, window manager, desktop </p><ul><li>Desktop:<ul><li>GNOME (C, 图形库gtk)，</li><li>KDE (C++,图形库qt) XFCE (轻量级桌面)</li></ul></li></ul></li><li><p>CLI：Command Line Interface </p><ul><li>shell程序</li></ul></li></ul><h3 id="什么是shell"><a href="#什么是shell" class="headerlink" title="什么是shell"></a>什么是shell</h3><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428224932049.png" alt="image-20200428224932049"></p><ul><li>Shell 是Linux系统的用户界面，提供了用户与内核进行交互操作的一种接口。它接收用户输入的命令并把它送入内核去执行</li><li>shell也被称为LINUX的命令解释器（command interpreter）</li><li>shell是一种高级程序设计语言</li></ul><h3 id="各种Shell"><a href="#各种Shell" class="headerlink" title="各种Shell"></a>各种Shell</h3><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428224940125.png" alt="image-20200428224940125"></p><ul><li>sh：Steve Bourne</li><li>bash：Bourne-Again Shell，GPL，CentOS 和 Ubuntu 默认使用</li><li>csh：c shell , C 语言风格</li><li>tcsh</li><li>ksh ：Korn Shell, AIX 默认 shell </li><li>zsh： MacOS默认shell</li></ul><h3 id="bash-shell"><a href="#bash-shell" class="headerlink" title="bash shell"></a>bash shell</h3><p>GNU Bourne-Again Shell(bash)是GNU计划中重要的工具软件之一，目前也是 Linux标准的shell，与sh兼容</p><p>显示当前使用的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;SHELL&#125;</span></span><br></pre></td></tr></table></figure><p>显示当前系统使用的所有shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><h2 id="设置主机名"><a href="#设置主机名" class="headerlink" title="设置主机名"></a>设置主机名</h2><p>临时</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostname NAME</span><br></pre></td></tr></table></figure><p>永久</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname NAME</span><br></pre></td></tr></table></figure><p>范例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname kinmfer</span><br></pre></td></tr></table></figure><p>注意：主机名不要使用下划线</p><h2 id="命令提示符"><a href="#命令提示符" class="headerlink" title="命令提示符"></a>命令提示符</h2><h3 id="命令提示符：prompt"><a href="#命令提示符：prompt" class="headerlink" title="命令提示符：prompt"></a>命令提示符：prompt</h3><p>范例：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@localhost ~]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p># 管理员</p><p>$ 普通用户</p><h3 id="显示提示符格式"><a href="#显示提示符格式" class="headerlink" title="显示提示符格式"></a>显示提示符格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#echo $PS1</span></span><br><span class="line">\[\e[1;35m\][\u@\h \W]\$\[\e[0m\]</span><br></pre></td></tr></table></figure><h3 id="修改提示符格式范例"><a href="#修改提示符格式范例" class="headerlink" title="修改提示符格式范例"></a>修改提示符格式范例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS1=<span class="string">&quot;\[\e[1;5;41;33m\][\u@\h \W]\\$\[\e[0m\]&quot;</span></span><br><span class="line">PS1=<span class="string">&quot;\[\e[1;32m\][\t \[\e[1;33m\]\u\[\e[35m\]@\h\[\e[1;31m\] \W\[\e[1;32m\]]\[\e[0m\]\\$&quot;</span></span><br></pre></td></tr></table></figure><h3 id="提示符格式说明："><a href="#提示符格式说明：" class="headerlink" title="提示符格式说明："></a>提示符格式说明：</h3><ul><li>\e 控制符\033</li><li>\u 当前用户</li><li>\h 主机名简称</li><li>\H 主机名</li><li>\w 当前工作目录</li><li>\W 当前工作目录基名</li><li>\t 24小时时间格式</li><li>\T 12小时时间格式</li><li>! 命令历史数</li><li># 开机后命令历史数</li></ul><p>范例：持久保存提示符格式相关变量 PS1</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment"># echo &#x27;PS1=&quot;\[\e[1;32m\][\t \[\e[1;33m\]\u\[\e[35m\]@\h\</span></span><br><span class="line">[\e[1;31m\] \W\[\e[1;32m\]]\[\e[0m\]\\$<span class="string">&quot;&#x27; &gt; /etc/profile.d/env.sh</span></span><br><span class="line"><span class="string">[root@centos8 ~]# cat /etc/profile.d/env.sh</span></span><br><span class="line"><span class="string">PS1=&quot;</span>\[\e[1;32m\][\t \[\e[1;33m\]\u\[\e[35m\]@\h\[\e[1;31m\] \W\[\e[1;32m\]]\</span><br><span class="line">[\e[0m\]\\$<span class="string">&quot;</span></span><br><span class="line"><span class="string">[root@centos8 ~]# exit</span></span><br><span class="line"><span class="string">logout</span></span><br><span class="line"><span class="string">Connection closed by foreign host.</span></span><br><span class="line"><span class="string">Disconnected from remote host(centos8) at 21:28:38.</span></span><br><span class="line"><span class="string">Type`help&#x27; to learn how to use Xshell prompt.</span></span><br><span class="line"><span class="string">[c:\~]$</span></span><br><span class="line"><span class="string">Reconnecting in 1 seconds. Press any key to exit local shell..</span></span><br><span class="line"><span class="string">Connecting to 10.0.0.100:22...</span></span><br><span class="line"><span class="string">Connection established.</span></span><br><span class="line"><span class="string">To escape to local shell, press &#x27;Ctrl+Alt+]&#x27;.</span></span><br><span class="line"><span class="string">Activate the web console with: systemctl enable --now cockpit.socket</span></span><br><span class="line"><span class="string">Last login: Tue Apr 28 21:28:34 2020 from 10.0.0.1</span></span><br><span class="line"><span class="string">[21:28:40 root@centos8 ~]#</span></span><br></pre></td></tr></table></figure><h2 id="执行命令"><a href="#执行命令" class="headerlink" title="执行命令"></a>执行命令</h2><h3 id="执行命令过程"><a href="#执行命令过程" class="headerlink" title="执行命令过程"></a>执行命令过程</h3><p>输入命令后回车，提请shell程序找到键入命令所对应的可执行程序或代码，并由其分析后提交给内核分 配资源将其运行起来</p><h3 id="shell中可执行的两类命令"><a href="#shell中可执行的两类命令" class="headerlink" title="shell中可执行的两类命令"></a>shell中可执行的两类命令</h3><ul><li>内部命令：由shell自带的，而且通过某命令形式提供</li><li>外部命令：在文件系统路径下有对应的可执行程序文件</li></ul><p>区别指定的命令是内部或外部命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span> COMMAND</span><br></pre></td></tr></table></figure><p>范例: 查看是否存在对应内部和外部命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#type -a echo</span></span><br><span class="line"><span class="built_in">echo</span> is a shell <span class="built_in">builtin</span></span><br><span class="line"><span class="built_in">echo</span> is /usr/bin/<span class="built_in">echo</span></span><br></pre></td></tr></table></figure><h4 id="内部命令相关"><a href="#内部命令相关" class="headerlink" title="内部命令相关"></a>内部命令相关</h4><ul><li><p>help 内部命令列表</p></li><li><p>enable 管理内部命令</p><ul><li><p>enable cmd 启用内部命令</p></li><li><p>enable –n cmd 禁用内部命令</p></li><li><p>enable –n 查看所有禁用的内部命令</p></li></ul></li></ul><h4 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h4><p>查看外部命令路径：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> -a |--skip-alias</span><br><span class="line">whereis</span><br></pre></td></tr></table></figure><h3 id="Hash缓存表"><a href="#Hash缓存表" class="headerlink" title="Hash缓存表"></a>Hash缓存表</h3><p>系统初始hash表为空，当外部命令执行时，默认会从PATH路径下寻找该命令，找到后会将这条命令的 路径记录到hash表中，当再次使用该命令时，shell解释器首先会查看hash表，存在将执行之，如果不 存在，将会去PATH路径下寻找，利用hash缓存表可大大提高命令的调用速率</p><p>hash 命令常见用法</p><ul><li><p>hash    显示hash缓存</p></li><li><p>hash -l  显示hash缓存，可作为输入使用</p></li><li><p>hash -p path name 将命令全路径path起别名为name</p></li><li><p>hash -t name 打印缓存中name的路径</p></li><li><p>hash -d name 清除name缓存</p></li><li><p>hash -r 清除缓存</p></li></ul><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>对于经常执行的较长的命令，可以将其定义成较短的别名，以方便执行显示当前shell进程所有可用的命令别名</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span></span><br></pre></td></tr></table></figure><p>定义别名NAME，其相当于执行命令VALUE</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> NAME=<span class="string">&quot;VALUE&quot;</span></span><br></pre></td></tr></table></figure><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#echo &quot;alias free=&#x27;free -h&#x27;&quot; &gt;&gt; .bashrc</span></span><br></pre></td></tr></table></figure><p>撤消别名：unalias</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">unalias</span> [-a] name [name ...]</span><br><span class="line"><span class="built_in">unalias</span> -a <span class="comment">#取消所有别名</span></span><br></pre></td></tr></table></figure><p>注意：在命令行中定义的别名，仅对当前shell进程有效如果想永久有效，要定义在配置文件中</p><ul><li><p>仅对当前用户：~/.bashrc</p></li><li><p>对所有用户有效：/etc/bashrc</p></li></ul><p>编辑配置给出的新配置不会立即生效，bash进程重新读取配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source &#x2F;path&#x2F;to&#x2F;config_file</span><br><span class="line">. &#x2F;path&#x2F;to&#x2F;config_file</span><br></pre></td></tr></table></figure><p>如果别名同原命令同名，如果要执行原命令，可使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">\ALIASNAME</span><br><span class="line">“ALIASNAME”</span><br><span class="line">‘ALIASNAME’</span><br><span class="line"><span class="built_in">command</span> ALIASNAME</span><br><span class="line">/path/commmand <span class="comment">#只适用于外部命令</span></span><br></pre></td></tr></table></figure><h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">COMMAND [OPTIONS...] [ARGUMENTS...]</span><br></pre></td></tr></table></figure><p>选项：用于启用或关闭命令的某个或某些功能</p><ul><li>短选项：UNIX 风格选项，-c 例如：-l, -h</li><li>长选项：GNU风格选项，–word 例如：–all, –human </li><li>BSD风格选项： 一个字母，例如：a，使用相对较少</li></ul><p>参数：命令的作用对象，比如:文件名，用户名等</p><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#id -u kinmfer</span></span><br><span class="line">1000</span><br><span class="line">[root@centos8 ~]<span class="comment">#ls -a</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#ls --all</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#free -h</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#free --human</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#ps a</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><ul><li>多个选项以及多参数和命令之间使用空白字符分隔</li><li>取消和结束命令执行：Ctrl+c，Ctrl+d</li><li>多个命令可以用 “;” 符号分开</li><li>一个命令可以用\分成多行</li></ul><h3 id="查看命令所在目录"><a href="#查看命令所在目录" class="headerlink" title="查看命令所在目录"></a>查看命令所在目录</h3><ul><li><p>which  显示命令绝对路径信息</p></li><li><p>whereis  显示命令路径以及文件</p><p>作用: 显示命令路径以及命令相关的帮助手册文件路径</p></li></ul><h2 id="常见命令"><a href="#常见命令" class="headerlink" title="常见命令"></a>常见命令</h2><h3 id="查看硬件信息"><a href="#查看硬件信息" class="headerlink" title="查看硬件信息"></a>查看硬件信息</h3><h4 id="查看cpu"><a href="#查看cpu" class="headerlink" title="查看cpu"></a>查看cpu</h4><p>lscpu命令可以查看cpu信息<br>cat /proc/cpuinfo也可看查看到</p><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment"># lscpu</span></span><br><span class="line">Architecture: x86_64</span><br><span class="line">CPU op-mode(s): 32-bit, 64-bit</span><br><span class="line">Byte Order: Little Endian</span><br><span class="line">CPU(s): 8</span><br><span class="line">On-line CPU(s) list: 0-7</span><br><span class="line">Thread(s) per core: 1 <span class="comment">#每个core 有几个线程</span></span><br><span class="line">Core(s) per socket: 4 <span class="comment">#每个槽位有4个core</span></span><br><span class="line">Socket(s): 2 <span class="comment">#服务器面板上有2个cpu 槽位</span></span><br><span class="line">NUMA node(s): 2 <span class="comment">#nodes的数量</span></span><br><span class="line">Vendor ID: GenuineIntel</span><br><span class="line">CPU family: 6</span><br><span class="line">Model: 44</span><br><span class="line">Stepping: 2</span><br><span class="line">CPU MHz: 2128.025</span><br><span class="line">BogoMIPS: 4256.03</span><br><span class="line">Virtualization: VT-x</span><br><span class="line">L1d cache: 32K</span><br><span class="line">L1i cache: 32K</span><br><span class="line">L2 cache: 256K</span><br><span class="line">L3 cache: 8192K</span><br><span class="line">NUMA node0 CPU(s): 0,2,4,6 <span class="comment">#对应的core</span></span><br><span class="line">NUMA node1 CPU(s): 1,3,5,7</span><br><span class="line">[root@centos8 ~]<span class="comment"># cat /proc/cpuinfo</span></span><br></pre></td></tr></table></figure><h4 id="查看内存大小"><a href="#查看内存大小" class="headerlink" title="查看内存大小"></a>查看内存大小</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#free</span></span><br><span class="line">total used free shared buff/cache available</span><br><span class="line">Mem: 816188 156888 412660 5792 246640 527024</span><br><span class="line">Swap: 2097148 0 2097148</span><br><span class="line">[root@centos8 ~]<span class="comment">#cat /proc/meminfo</span></span><br><span class="line">MemTotal: 816188 kB</span><br><span class="line">MemFree: 412780 kB</span><br><span class="line">MemAvailable: 527144 kB</span><br><span class="line">Buffers: 5304 kB</span><br><span class="line">Cached: 208252 kB</span><br><span class="line">SwapCached: 0 kB</span><br><span class="line">Active: 138976 kB</span><br><span class="line">Inactive: 127508 kB</span><br><span class="line">Active(anon): 53348 kB</span><br><span class="line">Inactive(anon): 5368 kB</span><br><span class="line">Active(file): 85628 kB</span><br><span class="line">Inactive(file): 122140 kB</span><br><span class="line">Unevictable: 0 kB</span><br><span class="line">Mlocked: 0 kB</span><br><span class="line">SwapTotal: 2097148 kB</span><br><span class="line">SwapFree: 2097148 kB</span><br><span class="line">Dirty: 0 kB</span><br><span class="line">Writeback: 0 kB</span><br><span class="line">AnonPages: 52964 kB</span><br><span class="line">Mapped: 78456 kB</span><br><span class="line">Shmem: 5792 kB</span><br><span class="line">KReclaimable: 33084 kB</span><br><span class="line">Slab: 69144 kB</span><br><span class="line">SReclaimable: 33084 kB</span><br><span class="line">SUnreclaim: 36060 kB</span><br><span class="line">KernelStack: 4428 kB</span><br><span class="line">PageTables: 5888 kB</span><br><span class="line">NFS_Unstable: 0 kB</span><br><span class="line">Bounce: 0 kB</span><br><span class="line">WritebackTmp: 0 kB</span><br><span class="line">CommitLimit: 2505240 kB</span><br><span class="line">Committed_AS: 250040 kB</span><br><span class="line">VmallocTotal: 34359738367 kB</span><br><span class="line">VmallocUsed: 0 kB</span><br><span class="line">VmallocChunk: 0 kB</span><br><span class="line">HardwareCorrupted: 0 kB</span><br><span class="line">AnonHugePages: 6144 kB</span><br><span class="line">ShmemHugePages: 0 kB</span><br><span class="line">ShmemPmdMapped: 0 kB</span><br><span class="line">HugePages_Total: 0</span><br><span class="line">HugePages_Free: 0</span><br><span class="line">HugePages_Rsvd: 0</span><br><span class="line">HugePages_Surp: 0</span><br><span class="line">Hugepagesize: 2048 kB</span><br><span class="line">Hugetlb: 0 kB</span><br><span class="line">DirectMap4k: 108416 kB</span><br><span class="line">DirectMap2M: 940032 kB</span><br><span class="line">DirectMap1G: 0 kB</span><br></pre></td></tr></table></figure><h4 id="查看硬盘和分区情况"><a href="#查看硬盘和分区情况" class="headerlink" title="查看硬盘和分区情况"></a>查看硬盘和分区情况</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#lsblk</span></span><br><span class="line">NAME MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda 8:0 0 200G 0 disk</span><br><span class="line">├─sda1 8:1 0 1G 0 part /boot</span><br><span class="line">├─sda2 8:2 0 100G 0 part /</span><br><span class="line">├─sda3 8:3 0 50G 0 part /data</span><br><span class="line">├─sda4 8:4 0 1K 0 part</span><br><span class="line">└─sda5 8:5 0 2G 0 part [SWAP]</span><br><span class="line">sr0 11:0 1 7G 0 rom</span><br><span class="line">[root@centos8 ~]<span class="comment">#cat /proc/partitions</span></span><br><span class="line">major minor <span class="comment">#blocks name</span></span><br><span class="line">8 0 209715200 sda</span><br><span class="line">8 1 1048576 sda1</span><br><span class="line">8 2 104857600 sda2</span><br><span class="line">8 3 52428800 sda3</span><br><span class="line">8 4 1 sda4</span><br><span class="line">8 5 2097152 sda5</span><br><span class="line">11 0 7377920 sr0</span><br></pre></td></tr></table></figure><h3 id="查看系统版本信息"><a href="#查看系统版本信息" class="headerlink" title="查看系统版本信息"></a>查看系统版本信息</h3><h4 id="查看内核版本"><a href="#查看内核版本" class="headerlink" title="查看内核版本"></a>查看内核版本</h4> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#uname -r</span></span><br><span class="line">4.18.0-147.el8.x86_64</span><br></pre></td></tr></table></figure><h4 id="查看操作系统发行版本"><a href="#查看操作系统发行版本" class="headerlink" title="查看操作系统发行版本"></a>查看操作系统发行版本</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS8 查看发行版本</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#cat /etc/redhat-release</span></span><br><span class="line">CentOS Linux release 8.1.1911 (Core)</span><br><span class="line">[root@centos8 ~]<span class="comment">#cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;CentOS Linux&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;8 (Core)&quot;</span></span><br><span class="line">ID=<span class="string">&quot;centos&quot;</span></span><br><span class="line">ID_LIKE=<span class="string">&quot;rhel fedora&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;8&quot;</span></span><br><span class="line">PLATFORM_ID=<span class="string">&quot;platform:el8&quot;</span></span><br><span class="line">PRETTY_NAME=<span class="string">&quot;CentOS Linux 8 (Core)&quot;</span></span><br><span class="line">ANSI_COLOR=<span class="string">&quot;0;31&quot;</span></span><br><span class="line">CPE_NAME=<span class="string">&quot;cpe:/o:centos:centos:8&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.centos.org/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.centos.org/&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT=<span class="string">&quot;CentOS-8&quot;</span></span><br><span class="line">CENTOS_MANTISBT_PROJECT_VERSION=<span class="string">&quot;8&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT=<span class="string">&quot;centos&quot;</span></span><br><span class="line">REDHAT_SUPPORT_PRODUCT_VERSION=<span class="string">&quot;8&quot;</span></span><br><span class="line"></span><br><span class="line">[root@centos8 ~]<span class="comment">#lsb_release -a</span></span><br><span class="line">LSB Version: :core-4.1-amd64:core-4.1-noarch</span><br><span class="line">Distributor ID: CentOS</span><br><span class="line">Description: CentOS Linux release 8.1.1911 (Core)</span><br><span class="line">Release: 8.1.1911</span><br><span class="line">Codename: Core</span><br><span class="line"></span><br><span class="line"><span class="comment">#ubuntu查看发行版本</span></span><br><span class="line">[root@ubuntu1804 ~]<span class="comment">#cat /etc/os-release</span></span><br><span class="line">NAME=<span class="string">&quot;Ubuntu&quot;</span></span><br><span class="line">VERSION=<span class="string">&quot;18.04.1 LTS (Bionic Beaver)&quot;</span></span><br><span class="line">ID=ubuntu</span><br><span class="line">ID_LIKE=debian</span><br><span class="line">PRETTY_NAME=<span class="string">&quot;Ubuntu 18.04.1 LTS&quot;</span></span><br><span class="line">VERSION_ID=<span class="string">&quot;18.04&quot;</span></span><br><span class="line">HOME_URL=<span class="string">&quot;https://www.ubuntu.com/&quot;</span></span><br><span class="line">SUPPORT_URL=<span class="string">&quot;https://help.ubuntu.com/&quot;</span></span><br><span class="line">BUG_REPORT_URL=<span class="string">&quot;https://bugs.launchpad.net/ubuntu/&quot;</span></span><br><span class="line">PRIVACY_POLICY_URL=<span class="string">&quot;https://www.ubuntu.com/legal/terms-and-policies/privacy-policy&quot;</span></span><br><span class="line">VERSION_CODENAME=bionic</span><br><span class="line">UBUNTU_CODENAME=bionic</span><br><span class="line">[root@ubuntu1804 ~]<span class="comment">#cat /etc/issue</span></span><br><span class="line">Ubuntu 18.04.1 LTS \n \l</span><br><span class="line">[root@ubuntu1804 ~]<span class="comment">#lsb_release -a</span></span><br><span class="line">No LSB modules are available.</span><br><span class="line">Distributor ID: Ubuntu</span><br><span class="line">Description: Ubuntu 18.04.1 LTS</span><br><span class="line">Release: 18.04</span><br><span class="line">Codename: bionic</span><br></pre></td></tr></table></figure><h3 id="日期和时间"><a href="#日期和时间" class="headerlink" title="日期和时间"></a>日期和时间</h3><p>Linux的两种时钟</p><ul><li>系统时钟：由Linux内核通过CPU的工作频率进行的</li><li>硬件时钟：主板</li></ul><p>相关命令</p><ul><li><p>date 显示和设置系统时间</p></li><li><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">date +%s</span><br><span class="line">date -d @1509536033</span><br></pre></td></tr></table></figure></li><li><p>clock，hwclock: 显示硬件时钟</p><ul><li>-s, –hctosys 以硬件时钟为准，校正系统时钟</li><li>-w, –systohc 以系统时钟为准，校正硬件时钟</li></ul></li></ul><p>时区：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/localtime</span><br></pre></td></tr></table></figure><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#timedatectl set-timezone Asia/Shanghai</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#ll /etc/localtime</span></span><br><span class="line">lrwxrwxrwx. 1 root root 35 Dec 11 11:19 /etc/localtime -&gt;</span><br><span class="line">../usr/share/zoneinfo/Asia/Shanghai</span><br><span class="line">root@ubuntu1804:~<span class="comment"># cat /etc/timezone</span></span><br><span class="line">Asia/Shanghai</span><br></pre></td></tr></table></figure><p>显示日历：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cal -y</span><br></pre></td></tr></table></figure><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[16:47:36 root@centos8 ~]<span class="comment">#cal 9 1752</span></span><br><span class="line">September 1752</span><br><span class="line">Su Mo Tu We Th Fr Sa</span><br><span class="line">1 2 14 15 16</span><br><span class="line">17 18 19 20 21 22 23</span><br><span class="line">24 25 26 27 28 29 30</span><br></pre></td></tr></table></figure><h3 id="关机和重启"><a href="#关机和重启" class="headerlink" title="关机和重启"></a>关机和重启</h3><p>关机：</p><ul><li>halt </li><li>poweroﬀ</li></ul><p>重启：</p><ul><li>reboot<ul><li>-f: 强制，不调用shutdown</li><li>-p: 切断电源</li></ul></li></ul><p>关机或重启：shutdown</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shutdown [OPTION]... [TIME] [MESSAGE]</span><br></pre></td></tr></table></figure><ul><li>-r: reboot</li><li>-h: halt</li><li>-c：cancel                      </li><li>TIME：无指定，默认相当于+1（CentOS7）<ul><li>now: 立刻,相当于+0</li><li>+#: 相对时间表示法，几分钟之后；例如 +3 </li><li>hh:mm: 绝对时间表示，指明具体时间</li></ul></li></ul><h3 id="用户登录信息查看命令"><a href="#用户登录信息查看命令" class="headerlink" title="用户登录信息查看命令"></a>用户登录信息查看命令</h3><ul><li>whoami: 显示当前登录有效用户</li><li>who: 系统当前所有的登录会话</li><li>w: 系统当前所有的登录会话及所做的操作</li></ul><h3 id="文本编辑"><a href="#文本编辑" class="headerlink" title="文本编辑"></a>文本编辑</h3><ul><li><p>nano 工具可以实现文本的编辑，上手容易，适合初学者</p></li><li><p>gedit 工具是图形工具</p></li></ul><h3 id="会话管理"><a href="#会话管理" class="headerlink" title="会话管理"></a>会话管理</h3><p>命令行的典型使用方式是，打开一个终端窗口（terminal window，以下简称”窗口”），在里面输入命令。用户与计算机的这种临时的交互，称为一次”会话”（session）</p><p>会话的一个重要特点是，窗口与其中启动的进程是连在一起的。打开窗口，会话开始；关闭窗口，会话 结束，会话内部的进程也会随之终止，不管有没有运行完</p><p>一个典型的例子就是，SSH 登录远程计算机，打开一个远程窗口执行命令。这时，网络突然断线，再次登录的时候，是找不回上一次执行的命令的。因为上一次 SSH 会话已经终止了，里面的进程也随之消失了。为了解决这个问题，会话与窗口可以”解绑”：窗口关闭时，会话并不终止，而是继续运行，等到 以后需要的时候，再让会话”绑定”其他窗口</p><p>终端复用器软件就是会话与窗口的”解绑”工具，将它们彻底分离。</p><p>（1） 它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。</p><p>（2）  它可以让新窗口”接入”已经存在的会话。</p><p>（3） 它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</p><p>（4） 它还支持窗口任意的垂直和水平拆分。</p><p>类似的终端复用器还有Screen，Tmux</p><h4 id="screen"><a href="#screen" class="headerlink" title="screen"></a>screen</h4><p>利用screen 可以实现会话管理,如：新建会话,共享会话等</p><p>注意：CentOS7 来自于base源，CentOS8 来自于epel源</p><p>范例：安装 screen</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#yum -y install screen</span></span><br></pre></td></tr></table></figure><p>screen命令常见用法：</p><ul><li><p>创建新screen会话</p><ul><li>screen –S [SESSION] </li></ul></li><li><p>加入screen会话</p><ul><li>screen –x [SESSION]</li></ul></li><li><p>退出并关闭screen会话</p><ul><li>exit</li></ul></li><li><p>剥离当前screen会话</p><ul><li>Ctrl+a,d</li></ul></li><li><p>显示所有已经打开的screen会话</p><ul><li>screen -ls</li></ul></li><li><p>恢复某screen会话</p><ul><li>screen -r [SESSION]</li></ul></li></ul><h4 id="tmux"><a href="#tmux" class="headerlink" title="tmux"></a>tmux</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428225052623.png" alt="image-20200428225030870"></p><p>Tmux 是一个终端复用器（terminal multiplexer），类似 screen，但是更易用，也更强大</p><p>Tmux 就是会话与窗口的”解绑”工具，将它们彻底分离，功能如下</p><ul><li>它允许在单个窗口中，同时访问多个会话。这对于同时运行多个命令行程序很有用。 </li><li>它可以让新窗口”接入”已经存在的会话。</li><li>它允许每个会话有多个连接窗口，因此可以多人实时共享会话。</li><li>它还支持窗口任意的垂直和水平拆分</li></ul><p>安装</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dnf install tmux -y</span><br></pre></td></tr></table></figure><p>启动与退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]#tmux</span><br><span class="line">[root@centos8 ~]#exit</span><br><span class="line">logout</span><br></pre></td></tr></table></figure><p>mux 窗口有大量的快捷键。所有快捷键都要通过前缀键唤起。默认的前缀键是<code>Ctrl+b</code> ，即先按下</p><p><code>Ctrl+b</code> ，快捷键才会生效。帮助命令的快捷键是<code>Ctrl+b ? </code>然后，按下<code>q </code>键，就可以退出帮助</p><p>新建会话</p><p>第一个启动的 Tmux 窗口，编号是0，第二个窗口的编号是1，以此类推。这些窗口对应的会话，就是 0 号会话、1  号会话。使用编号区分会话，不太直观，更好的方法是为会话起名。下面命令新建一个指定名称的会话。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new -s &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>tmux ls或Ctrl+b,s 可以查看当前所有的 Tmux 会话</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br><span class="line">tmux list-session</span><br></pre></td></tr></table></figure><p>分离会话</p><p>在 Tmux 窗口中，按下Ctrl+b d或者输入tmux detach命令，就会将当前会话与窗口分离。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux detach</span><br></pre></td></tr></table></figure><p>接入会话</p><p>tmux attach 命令用于重新接入某个已存在的会话。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux attach -t 0</span><br></pre></td></tr></table></figure><p>杀死会话</p><p>tmux kill-session命令用于杀死某个会话。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>切换会话</p><p>tmux switch命令用于切换会话</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux switch -t &lt;session-name&gt;</span><br></pre></td></tr></table></figure><p>可以将窗口分成多个窗格（pane），每个窗格运行不同的命令</p><p>上下分窗格</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window</span><br><span class="line">ctrl+b,<span class="string">&quot;</span></span><br></pre></td></tr></table></figure><p><strong><strong>左右分窗格</strong></strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tmux split-window -h</span><br><span class="line">ctrl+b,%</span><br></pre></td></tr></table></figure><p>窗格快捷键</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+b %：划分左右两个窗格</span><br><span class="line">Ctrl+b <span class="string">&quot;</span></span><br><span class="line"><span class="string">：划分上下两个窗格</span></span><br><span class="line"><span class="string">Ctrl+b &lt;arrow key&gt;：光标切换到其他窗格。&lt;arrow key&gt;是指向要切换到的窗格的方向键，比如切换</span></span><br><span class="line"><span class="string">到下方窗格，就按方向键↓</span></span><br><span class="line"><span class="string">Ctrl+b ;：光标切换到上一个窗格</span></span><br><span class="line"><span class="string">Ctrl+b o：光标切换到下一个窗格。</span></span><br><span class="line"><span class="string">Ctrl+b &#123;：当前窗格左移</span></span><br><span class="line"><span class="string">Ctrl+b &#125;：当前窗格右移</span></span><br><span class="line"><span class="string">Ctrl+b Ctrl+o：当前窗格上移</span></span><br><span class="line"><span class="string">Ctrl+b Alt+o：当前窗格下移</span></span><br><span class="line"><span class="string">Ctrl+b x：关闭当前窗格</span></span><br><span class="line"><span class="string">Ctrl+b !：将当前窗格拆分为一个独立窗口</span></span><br><span class="line"><span class="string">Ctrl+b z：当前窗格全屏显示，再使用一次会变回原来大小</span></span><br><span class="line"><span class="string">Ctrl+b Ctrl+&lt;arrow key&gt;：按箭头方向调整窗格大小</span></span><br><span class="line"><span class="string">Ctrl+b q：显示窗格编号</span></span><br></pre></td></tr></table></figure><p>窗口管理</p><p>除了将一个窗口划分成多个窗格，Tmux 也允许新建多个窗口</p><p>新建窗口</p><p>tmux new-window命令用来创建新窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window</span><br></pre></td></tr></table></figure><p>新建一个指定名称的窗口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux new-window -n &lt;window-name</span><br></pre></td></tr></table></figure><p>切换窗口</p><p>tmux select-window命令用来切换窗口</p><p>切换到指定编号的窗口</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux select-window -t &lt;window-number&gt;</span><br></pre></td></tr></table></figure><p>切换到指定名称的窗口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux select-window -t &lt;window-name&gt;</span><br></pre></td></tr></table></figure><p>窗口快捷键</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Ctrl+b c：创建一个新窗口，状态栏会显示多个窗口的信息。</span><br><span class="line">Ctrl+b p：切换到上一个窗口（按照状态栏上的顺序）。</span><br><span class="line">Ctrl+b n：切换到下一个窗口。</span><br><span class="line">Ctrl+b &lt;number&gt;：切换到指定编号的窗口，其中的&lt;number&gt;是状态栏上的窗口编号</span><br><span class="line">Ctrl+b w：从列表中选择窗口</span><br><span class="line">Ctrl+b ,：窗口重命名</span><br></pre></td></tr></table></figure><p>列出所有快捷键，及其对应的 Tmux 命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-keys</span><br></pre></td></tr></table></figure><p>列出所有 Tmux 命令及其参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux list-commands</span><br></pre></td></tr></table></figure><h3 id="输出信息echo"><a href="#输出信息echo" class="headerlink" title="输出信息echo"></a>输出信息echo</h3><p>echo 命令可以将后面跟的字符进行输出</p><p>功能：显示字符，echo会将输入的字符串送往标准输出。输出的字符串间以空白字符隔开, 并在最后加上换行号</p><p>语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> [-neE][字符串]</span><br></pre></td></tr></table></figure><p>选项：</p><ul><li>-E （默认）不支持 \ 解释功能</li><li>-n 不自动换行</li><li>-e 启用 \ 字符的解释功能</li></ul><p>显示变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$VAR_NAME</span>” #变量会替换，弱引用</span></span><br><span class="line"><span class="string">echo &#x27;<span class="variable">$VAR_NAME</span>’ #变量不会替换，强引用</span></span><br></pre></td></tr></table></figure><p>启用命令选项-e，若字符串中出现以下字符，则特别加以处理，而不会将它当成一般文字输出</p><ul><li>\a 发出警告声</li><li>\b 退格键</li><li>\c 最后不加上换行符号</li><li>\e escape，相当于\033</li><li>\n 换行且光标移至行首</li><li>\r 回车，即光标移至行首，但不换行</li><li>\t 插入tab</li><li>\ 插入\字符</li><li>\0nnn 插入nnn（八进制）所代表的ASCII字符</li><li>\xHH插入HH（十六进制）所代表的ASCII数字（man 7 ascii）</li></ul><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#echo -e &#x27;a\x0Ab&#x27;</span></span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">[root@centos8 ~]<span class="comment">#echo -e &#x27;\033[43;31;1;5mmagedu\e[0m&#x27;</span></span><br><span class="line">magedu</span><br><span class="line">[root@centos8 ~]<span class="comment">#echo -e &#x27;\x57\x41\x4E\x47&#x27;</span></span><br><span class="line">WANG</span><br></pre></td></tr></table></figure><h2 id="字符集和编码"><a href="#字符集和编码" class="headerlink" title="字符集和编码"></a>字符集和编码</h2><p>许多场合下，字符集与编码这两个概念常被混为一谈，但两者是有差别的。字符集与字符集编码是两个 不同层面的概念</p><p>charset是character set的简写，即字符集，即二进制和字符的对应关系，不关注最终的存储形式encoding是charset encoding的简写，即字符集编码，简称编码，实现如何将字符转化为实际的二进制进行存储或相反，编码决定了空间的使用的大小</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428225030870.png" alt="image-20200428225052623"></p><h3 id="ASCII码"><a href="#ASCII码" class="headerlink" title="ASCII码"></a>ASCII码</h3><p>计算机内部，所有信息最终都是一个二进制值。上个世纪60年代，美国制定了一套字符编码，对英语字 符与二进制位之间的关系，做了统一规定，即ASCII（American Standard Code for Information Interchange） 码</p><p>ASCII 码一共规定了128个字符的编码，占用了一个字节的后面7位，最前面的一位统一规定为 0</p><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428225131821.png" alt="image-20200428225109297"></p><p>范例：查看 ascii 表</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#dnf -y install man-pages</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#man ascii</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428225120254.png" alt="image-20200428225120254"></p><h3 id="Unicode"><a href="#Unicode" class="headerlink" title="Unicode"></a>Unicode</h3><p>由于计算机是美国人发明的，因此，最早只有127个字母被编码到计算机里，即ASCII编码，但是要处理 中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，中国制定了GB2312编码，用来把中文编进去。</p><p>全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就 会不可避免地出现冲突，结果就是，在多语言混合的文本中，显示出来会有乱码</p><p>为了表示世界上所有语言中的所有字符。每一个符号都给予一个独一无二的编码数字，Unicode 是一个很大的集合，现在的规模可以容纳100多万个符号。Unicode  仅仅只是一个字符集，规定了每个字符对应的二进制代码，至于这个二进制代码如何存储则没有规定</p><h4 id="Unicode编码方案："><a href="#Unicode编码方案：" class="headerlink" title="Unicode编码方案："></a>Unicode编码方案：</h4><ul><li>UTF-8：变长，1到4个字节</li><li>UTF-16：变长，2或4个字节</li><li>UTF-32：固定长度，4个字节</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/image-20200428225109297.png" alt="image-20200428225131821"></p><p>UTF-8 是目前互联网上使用最广泛的一种 Unicode 编码方式，可变长存储。使用 1 - 4 个字节表示一个字符，根据字符的不同变换长度。编码规则如下：</p><p>对于单个字节的字符，第一位设为 0，后面的 7 位对应这个字符的 Unicode 码。因此，对于英文中的 0</p><p>- 127 号字符，与 ASCII 码完全相同。这意味着 ASCII 码的文档可用 UTF-8 编码打开</p><p>对于需要使用 N 个字节来表示的字符（N &gt; 1），第一个字节的前 N 位都设为 1，第 N + 1 位设为0，剩余的 N - 1 个字节的前两位都设位 10，剩下的二进制位则使用这个字符的 Unicode 码来填充</p><h4 id="编码转换和查询"><a href="#编码转换和查询" class="headerlink" title="编码转换和查询"></a>编码转换和查询</h4><p><a href="http://www.chi2ko.com/tool/CJK.htm">http://www.chi2ko.com/tool/CJK.htm</a> </p><p><a href="https://javawind.net/tools/native2ascii.jsp?action=transform">https://javawind.net/tools/native2ascii.jsp?action=transform</a> </p><p><a href="http://tool.oschina.net/encode">http://tool.oschina.net/encode</a></p><h4 id="Unicode和UTF-8"><a href="#Unicode和UTF-8" class="headerlink" title="Unicode和UTF-8"></a>Unicode和UTF-8</h4><table><thead><tr><th>Unicode符号范围(十六进制)</th><th>UTF-8编码方式二进制）</th></tr></thead><tbody><tr><td>0000 0000-0000 007F</td><td>0xxxxxxx</td></tr><tr><td>0000 0080-0000 07FF</td><td>110xxxxx 10xxxxxx</td></tr><tr><td>0000 0800-0000 FFFF</td><td>1110xxxx 10xxxxxx 10xxxxxx</td></tr><tr><td>0001 0000-0010 FFFF</td><td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td></tr></tbody></table><p>范例：</p><p>“汉”的 Unicode 码 0x6C49（110 110001 001001），需要三个字节存储，格式为： 1110xxxx 10xxxxxx 10xxxxxx，从后向前依次填充对应格式中的 x，多出的 x 用 0 补，得出UTF-8 编码为</p><p>11100110 10110001 10001001</p><p>“马”的 Unicode 码 0x9A6C（1001 101001 101100），需要三个字节存储，格式为： 1110xxxx 10xxxxxx 10xxxxxx，从后向前依次填充对应格式中的 x，多出的 x 用 0 补，得出UTF-8 编码为</p><p>11101001 10101001 10101100</p><p>范例：修改LANG变量实现中文语言提示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@centos7 ~]<span class="comment">#xxx</span></span><br><span class="line">bash: xxx: <span class="built_in">command</span> not found...</span><br><span class="line">[root@centos7 ~]<span class="comment">#echo $LANG</span></span><br><span class="line">en_US.UTF-8</span><br><span class="line">[root@centos7 ~]<span class="comment">#LANG=zh_CN.UTF-8</span></span><br><span class="line">[root@centos7 ~]<span class="comment">#echo $LANG</span></span><br><span class="line">zh_CN.UTF-8</span><br></pre></td></tr></table></figure><h2 id="命令行扩展和被括起来的集合"><a href="#命令行扩展和被括起来的集合" class="headerlink" title="命令行扩展和被括起来的集合"></a>命令行扩展和被括起来的集合</h2><h3 id="命令行扩展：-（）"><a href="#命令行扩展：-（）" class="headerlink" title="命令行扩展：$（）"></a>命令行扩展：$（）</h3><p>把一个命令的输出打印给另一个命令的参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(CMD) 或 `CMD`</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[09:18:04 root@centos8 data]<span class="comment">#echo &quot;This system&#x27;s name is $(hostname)&quot;</span></span><br><span class="line">This system<span class="string">&#x27;s name is centos8.kinmfer</span></span><br><span class="line"><span class="string">[09:18:55 root@centos8 data]#echo &quot;i am `whoami`&quot;</span></span><br><span class="line"><span class="string">i am root</span></span><br><span class="line"><span class="string">[09:15:37 root@centos8 data]#touch $(date +%F).log</span></span><br><span class="line"><span class="string">[09:16:29 root@centos8 data]#ls</span></span><br><span class="line"><span class="string">2019-12-13.log</span></span><br><span class="line"><span class="string">[09:16:31 root@centos8 data]#ll</span></span><br><span class="line"><span class="string">total 0</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:16 2019-12-13.log</span></span><br><span class="line"><span class="string">[09:16:34 root@centos8 data]#touch `date +%F`.txt</span></span><br><span class="line"><span class="string">[09:17:14 root@centos8 data]#ll</span></span><br><span class="line"><span class="string">total 0</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:16 2019-12-13.log</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:17 2019-12-13.txt</span></span><br><span class="line"><span class="string">[09:17:15 root@centos8 data]#touch `hostname`-`date +%F`.log</span></span><br><span class="line"><span class="string">[09:18:02 root@centos8 data]#ll</span></span><br><span class="line"><span class="string">total 0</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:16 2019-12-13.log</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:17 2019-12-13.txt</span></span><br><span class="line"><span class="string">-rw-r--r--. 1 root root 0 Dec 13 09:18 centos8.kinmfer.org-2019-12-13.log</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><h3 id="括号扩展："><a href="#括号扩展：" class="headerlink" title="括号扩展：{ }"></a>括号扩展：{ }</h3><p>{} 可以实现打印重复字符串的简化形式</p><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> file&#123;1,3,5&#125; 结果为：file1 file3 file5</span><br><span class="line">rm -f file&#123;1,3,5&#125;</span><br><span class="line"><span class="built_in">echo</span> &#123;1..10&#125;</span><br><span class="line"><span class="built_in">echo</span> &#123;a..z&#125;</span><br><span class="line"><span class="built_in">echo</span> &#123;000..20..2&#125;</span><br></pre></td></tr></table></figure><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[10:35:11 root@centos8 ~]<span class="comment">#echo &#123;000..20..2&#125;</span></span><br><span class="line">000 002 004 006 008 010 012 014 016 018 020</span><br><span class="line">[10:35:27 root@centos8 ~]<span class="comment">#echo &#123;A..z&#125;</span></span><br><span class="line">A B C D E F G H I J K L M N O P Q R S T U V W X Y Z [ ] ^_`a b c d e f g h i</span><br><span class="line">j k l m n o p q r s t u v w x y z</span><br></pre></td></tr></table></figure><h2 id="tab-键补全"><a href="#tab-键补全" class="headerlink" title="tab 键补全"></a>tab 键补全</h2><p>tab键可以实现命令及路径等补全，提高输入效率，避免出错</p><h3 id="命令补全"><a href="#命令补全" class="headerlink" title="命令补全"></a>命令补全</h3><ul><li><p>内部命令：</p></li><li><p>外部命令：bash根据PATH环境变量定义的路径，自左而右在每个路径搜寻以给定命令名命名的文 件，第一次找到的命令即为要执行的命令</p></li></ul><p>注意：用户给定的字符串只有一条惟一对应的命令，直接补全，否则，再次Tab会给出列表</p><h3 id="路径补全"><a href="#路径补全" class="headerlink" title="路径补全"></a>路径补全</h3><p>把用户给出的字符串当做路径开头，并在其指定上级目录下搜索以指定的字符串开头的文件名 </p><p>如果惟一：则直接补全，否则：再次Tab给出列表</p><h3 id="双击Tab键"><a href="#双击Tab键" class="headerlink" title="双击Tab键"></a>双击Tab键</h3><ul><li>command 2Tab 所有子命令或文件补全</li><li>string2Tab 以string开头命令</li><li>/2Tab 显示所有根目录下一级目录，包括隐藏目录</li><li>./2Tab 当前目录下子目录，包括隐藏目录</li><li>*2Tab 当前目录下子目录，不包括隐藏目录</li><li>~2Tab 所有用户列表</li><li>$2Tab 所有变量</li><li>@2Tab /etc/hosts记录 （centos7不支持）</li><li>=2Tab 相当于ls –A （centos7不支持）</li></ul><h2 id="命令行历史"><a href="#命令行历史" class="headerlink" title="命令行历史"></a>命令行历史</h2><p>保存你输入的命令历史。可以用它来重复执行命令</p><p>登录shell时，会读取命令历史文件中记录下的命令~/.bash_history</p><p>登录进shell后新执行的命令只会记录在缓存中；这些命令会用户退出时“追加”至命令历史文件中</p><p>命令：history</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">history</span> [-c] [-d offset] [n]</span><br><span class="line"><span class="built_in">history</span> -anrw [filename]</span><br><span class="line"><span class="built_in">history</span> -ps arg [arg...]</span><br></pre></td></tr></table></figure><ul><li>-c: 清空命令历史</li><li>-d oﬀset: 删除历史中指定的第oﬀset个命令</li><li>n: 显示最近的n条历史</li><li>-a: 追加本次会话新执行的命令历史列表至历史文件</li><li>-r: 读历史文件附加到历史列表</li><li>-w: 保存历史列表到指定的历史文件</li><li>-n: 读历史文件中未读过的行到历史列表</li><li>-p: 展开历史参数成多行，但不存在历史列表中</li><li>-s: 展开历史参数成一行，附加在历史列表后</li></ul><h4 id="命令历史相关环境变量"><a href="#命令历史相关环境变量" class="headerlink" title="命令历史相关环境变量"></a>命令历史相关环境变量</h4><ul><li>HISTSIZE： 命 令 历 史 记 录 的 条 数        </li><li>HISTFILE： 指 定 历 史 文 件 ， 默 认 为 ~/.bash_history </li><li>HISTFILESIZE：命令历史文件记录历史的条数</li><li>HISTTIMEFORMAT=”%F %T <code>whoami</code>“ 显示时间和用户</li><li>HISTIGNORE=”str1:str2*:…” 忽略str1命令，str2开头的历史</li><li>HISTCONTROL：控制命令历史的记录方式<ul><li>ignoredups 是默认值，可忽略重复的命令，连续且相同为“重复” </li><li>ignorespace 忽略所有以空白开头的命令</li><li>ignoreboth 相当于ignoredups, ignorespace的组合</li><li>erasedups    删除重复命令</li></ul></li></ul><h4 id="持久保存变量"><a href="#持久保存变量" class="headerlink" title="持久保存变量"></a>持久保存变量</h4><ul><li>以上变量可以 export 变量名=”值” 形式存放在 /etc/proﬁle 或 ~/.bash_proﬁle</li></ul><p>范例：</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#cat .bash</span></span><br><span class="line">_profile</span><br><span class="line"><span class="comment"># .bash_profile</span></span><br><span class="line"><span class="comment"># Get the aliases and functions</span></span><br><span class="line"><span class="keyword">if</span> [ -f ~/.bashrc ]; <span class="keyword">then</span></span><br><span class="line">.~/.bashrc</span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"><span class="comment"># User specific environment and startup programs</span></span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> PATH</span><br><span class="line"><span class="built_in">export</span> HISTCONTROL=ignoreboth</span><br><span class="line"><span class="built_in">export</span> HISTTIMEFORMAT=<span class="string">&quot;%F %T &quot;</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#history</span></span><br><span class="line">    1 2019-12-13 08:39:05 ls /data</span><br><span class="line">    2 2019-12-13 08:39:05 date</span><br><span class="line">    3 2019-12-13 08:39:05 vie0</span><br><span class="line">    4 2019-12-13 08:39:05 nano .bash_profile</span><br><span class="line">    5 2019-12-13 08:39:05 <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h2 id="调用命令行历史"><a href="#调用命令行历史" class="headerlink" title="调用命令行历史"></a>调用命令行历史</h2> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#重复前一个命令方法</span></span><br><span class="line">重复前一个命令使用上方向键，并回车执行</span><br><span class="line">按 !! 并回车执行</span><br><span class="line">输入 !-1 并回车执行</span><br><span class="line">按 Ctrl+p 并回车执行</span><br><span class="line">!:0 执行前一条命令（去除参数）</span><br><span class="line">!n 执行<span class="built_in">history</span>命令输出对应序号n的命令</span><br><span class="line">!-n 执行<span class="built_in">history</span>历史中倒数第n个命令</span><br><span class="line">!string 重复前一个以“string”开头的命令</span><br><span class="line">!?string 重复前一个包含string的命令</span><br><span class="line">!string:p 仅打印命令历史，而不执行</span><br><span class="line">!$:p 打印输出 !$ （上一条命令的最后一个参数）的内容</span><br><span class="line">!*:p 打印输出 !*（上一条命令的所有参数）的内容</span><br><span class="line">^string 删除上一条命令中的第一个string</span><br><span class="line">^string1^string2 将上一条命令中的第一个string1替换为string2</span><br><span class="line">!:gs/string1/string2 将上一条命令中所有的string1都替换为 string2</span><br><span class="line">使用up（向上）和down（向下）键来上下浏览从前输入的命令</span><br><span class="line">ctrl-r来在命令历史中搜索命令</span><br><span class="line">（reverse-i-search）`’：</span><br><span class="line">Ctrl+g：从历史搜索模式退出</span><br><span class="line"><span class="comment">#要重新调用前一个命令中最后一个参数</span></span><br><span class="line">!$    表示</span><br><span class="line">Esc, . 点击Esc键后松开，然后点击 . 键</span><br><span class="line">Alt+ . 按住Alt键的同时点击 . 键</span><br><span class="line"><span class="built_in">command</span> !^ 利用上一个命令的第一个参数做cmd的参数</span><br><span class="line"><span class="built_in">command</span> !$ 利用上一个命令的最后一个参数做cmd的参数</span><br><span class="line"><span class="built_in">command</span> !* 利用上一个命令的全部参数做cmd的参数</span><br><span class="line"><span class="built_in">command</span> !:n 利用上一个命令的第n个参数做cmd的参数</span><br><span class="line"><span class="built_in">command</span> !n:^ 调用第n条命令的第一个参数</span><br><span class="line"><span class="built_in">command</span> !n:$ 调用第n条命令的最后一个参数</span><br><span class="line"><span class="built_in">command</span> !n:m 调用第n条命令的第m个参数</span><br><span class="line"><span class="built_in">command</span> !n:* 调用第n条命令的所有参数</span><br><span class="line"><span class="built_in">command</span> !string:^ 从命令历史中搜索以 string 开头的命令，并获取它的第一个参数</span><br><span class="line"><span class="built_in">command</span> !string:$ 从命令历史中搜索以 string 开头的命令,并获取它的最后一个参数</span><br><span class="line"><span class="built_in">command</span> !string:n 从命令历史中搜索以 string 开头的命令，并获取它的第n个参数</span><br><span class="line"><span class="built_in">command</span> !string:* 从命令历史中搜索以 string 开头的命令，并获取它的所有参数</span><br></pre></td></tr></table></figure><h2 id="bash的快捷键"><a href="#bash的快捷键" class="headerlink" title="bash的快捷键"></a>bash的快捷键</h2><ul><li>Ctrl + l  清屏，相当于clear命令</li><li>Ctrl + o 执行当前命令，并重新显示本命令</li><li>Ctrl + s 阻止屏幕输出，锁定</li><li>Ctrl + q 允许屏幕输出</li><li>Ctrl + c  终止命令</li><li>Ctrl + z  挂起命令</li><li>Ctrl + a 光标移到命令行首，相当于Home Ctrl + e 光标移到命令行尾，相当于End Ctrl + f   光标向右移动一个字符</li><li>Ctrl + b 光标向左移动一个字符Alt + f 光标向右移动一个单词尾Alt + b 光标向左移动一个单词首</li><li>Ctrl + xx 光标在命令行首和光标之间移动</li><li>Ctrl + u 从光标处删除至命令行首</li><li>Ctrl + k 从光标处删除至命令行尾</li><li>Alt + r 删除当前整行</li><li>Ctrl + w 从光标处向左删除至单词首</li><li>Alt + d 从光标处向右删除至单词尾</li><li>Ctrl + d 删除光标处的一个字符</li><li>Ctrl + h 删除光标前的一个字符</li><li>Ctrl + y 将删除的字符粘贴至光标后</li><li>Alt + c 从光标处开始向右更改为首字母大写的单词</li><li>Alt + u 从光标处开始，将右边一个单词更改为大写</li><li>Alt + l 从光标处开始，将右边一个单词更改为小写Ctrl + t 交换光标处和之前的字符位置</li><li>Alt + t 交换光标处和之前的单词位置</li><li>Alt + # 提示输入指定字符后，重复显示该字符#次</li></ul><p>注意：Alt组合快捷键经常和其它软件冲突</p><h1 id="获得帮助"><a href="#获得帮助" class="headerlink" title="获得帮助"></a>获得帮助</h1><p>获取帮助的能力决定了技术的能力！ </p><p>多层次的帮助</p><ul><li>whatis </li><li>command –help </li><li>man and info</li><li>/usr/share/doc/</li><li>Red Hat documentation</li><li>其它网站和搜索</li></ul><h2 id="whatis"><a href="#whatis" class="headerlink" title="whatis"></a>whatis</h2><p>whatis 使用数据库来显示命令的简短描述刚安装后不可立即使用，需要制作数据库</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS 7 版本以后</span></span><br><span class="line">mandb</span><br><span class="line"><span class="comment">#CentOS 6 版本之前</span></span><br><span class="line">makewhatis</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whatis cal</span><br><span class="line">man -f cal</span><br></pre></td></tr></table></figure><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#whatis ls</span></span><br><span class="line">ls: nothing appropriate.</span><br><span class="line"><span class="comment">#生成man相关数据库</span></span><br><span class="line">[root@centos8 ~]<span class="comment">#mandb</span></span><br><span class="line">Processing manual pages under /usr/share/man...</span><br><span class="line">Updating index cache <span class="keyword">for</span> path `/usr/share/man/mann<span class="string">&#x27;. Wait...done.</span></span><br><span class="line"><span class="string">Checking for stray cats under /usr/share/man...</span></span><br><span class="line"><span class="string">...省略...</span></span><br><span class="line"><span class="string">0 old database entries were purged.</span></span><br><span class="line"><span class="string">[root@centos8 ~]#whatis ls</span></span><br><span class="line"><span class="string">ls (1) - list directory contents</span></span><br></pre></td></tr></table></figure><h2 id="查看命令的帮助"><a href="#查看命令的帮助" class="headerlink" title="查看命令的帮助"></a>查看命令的帮助</h2><p>内部命令：</p><ul><li>help COMMAND </li><li>man bash</li></ul><p>外部命令和软件：</p><ul><li><p>COMMAND –help 或 COMMAND -h</p></li><li><p>使用手册(manual) </p><ul><li>man COMMAND</li></ul></li><li><p>信息页</p><ul><li>info COMMAND</li></ul></li><li><p>程序自身的帮助文档</p><ul><li>README</li><li>INSTALL</li><li>ChangeLog</li></ul></li><li><p>程序官方文档</p><p>官方站点：Documentation</p></li><li><p>发行版的官方文档</p></li><li><p>Google</p></li></ul><h2 id="–help或-h-选项"><a href="#–help或-h-选项" class="headerlink" title="–help或-h 选项"></a>–help或-h 选项</h2><p>显示用法总结和参数列表，使用的大多数，但并非所有的</p><p>范例：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#date --help</span></span><br><span class="line">Usage: date [OPTION]... [+FORMAT]</span><br><span class="line">or: date [-u|--utc|--universal] [MMDDhhmm[[CC]YY][.ss]]</span><br><span class="line">Display the current time <span class="keyword">in</span> the given FORMAT, or <span class="built_in">set</span> the system date.</span><br></pre></td></tr></table></figure><p>格式说明：</p><ul><li>[] 表示可选项</li><li>CAPS或 &lt;&gt; 表示变化的数据</li><li>… 表示一个列表</li><li>x |y| z 的意思是“ x 或 y 或 z ”</li><li>-abc的 意思是-a -b –c</li><li> 表示分组</li></ul><p>范例：</p><p>1、显示当前时间，格式：2016-06-18 10:20:30</p><p>2、显示前天是星期几</p><p>3、设置当前日期为2019-08-07 06:05:10</p><h2 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h2><p>man 提供命令帮助的文件,手册页存放在/usr/share/man 几乎每个命令都有man的“页面”</p><p>中文man需安装包</p><ul><li>man-pages</li><li>man-pages-zh-CN</li></ul><p>man页面分组为不同的“章节”,统称为Linux手册，man 1 man </p><ul><li>1：用户命令</li><li>2：系统调用</li><li>3：C库调用</li><li>4：设备文件及特殊文件</li><li>5：配置文件格式</li><li>6：游戏</li><li>7：杂项</li><li>8：管理类的命令</li><li>9：Linux 内核API</li></ul><p>man命令的配置文件：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#CentOS 6 之前版 man 的配置文件</span></span><br><span class="line">/etc/man.config</span><br><span class="line"><span class="comment">#CentOS 7 之后版 man 的配置文件</span></span><br><span class="line">/etc/man_db.conf</span><br><span class="line"><span class="comment">#ubuntu man 的配置文件</span></span><br><span class="line">/etc/manpath.config</span><br></pre></td></tr></table></figure><p>格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MANPATH /PATH/TO/SOMEWHERE <span class="comment">#指明man文件搜索位置</span></span><br></pre></td></tr></table></figure><p>也可以指定位置下搜索COMMAND命令的手册页并显示</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -M /PATH/TO/SOMEWHERE COMMAND</span><br></pre></td></tr></table></figure><p>查看man手册页</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [章节] keyword</span><br></pre></td></tr></table></figure><p>man 帮助段落说明</p><ul><li>NAME 名称及简要说明</li><li>SYNOPSIS 用法格式说明</li><li>[] 可选内容</li><li>&lt;&gt; 必选内容</li><li>a|b 二选一</li><li>{ }分组</li><li>… 同一内容可出现多次</li><li>DESCRIPTION 详细说明</li><li>OPTIONS 选项说明</li><li>EXAMPLES 示例</li><li>FILES 相关文件</li><li>AUTHOR 作者</li><li>COPYRIGHT 版本信息</li><li>REPORTING BUGS bug信息</li><li>SEE ALSO 其它帮助参考</li></ul><p>列出所有帮助</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -a keyword</span><br></pre></td></tr></table></figure><p>搜索man手册</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#列出所有匹配的页面，使用 whatis 数据库</span></span><br><span class="line">man -k keyword</span><br></pre></td></tr></table></figure><p>相当于 whatis</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -f keyword </span><br></pre></td></tr></table></figure><p>打印man帮助文件的路径</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man -w [章节] keyword </span><br></pre></td></tr></table></figure><p>范例:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@centos8 ~]<span class="comment">#man -w 1 passwd</span></span><br><span class="line">/usr/share/man/man1/passwd.1.gz</span><br><span class="line">[root@centos8 ~]<span class="comment">#whatis passwd</span></span><br><span class="line">openssl-passwd (1ssl) - compute password hashes</span><br><span class="line">passwd (1) - update user<span class="string">&#x27;s authentication tokens</span></span><br><span class="line"><span class="string">[root@centos8 ~]#man 1ssl openssl-passwd</span></span><br><span class="line"><span class="string">[root@centos8 ~]#dnf install man-pages</span></span><br><span class="line"><span class="string">[root@centos8 ~]#man 7 ascii</span></span><br><span class="line"><span class="string">[root@centos8 ~]#man 7 utf8</span></span><br></pre></td></tr></table></figure><p>man命令的操作方法：使用less命令实现</p><ul><li><p>space, ^v, ^f, ^F: 向文件尾翻屏</p></li><li><p>b, ^b: 向文件首部翻屏</p></li><li><p>d, ^d: 向文件尾部翻半屏</p></li><li><p>u, ^u: 向文件首部翻半屏</p></li><li><p>RETURN, ^N, e, ^E or j or ^J: 向文件尾部翻一行</p></li><li><p>y or ^Y or ^P or k or ^K：向文件首部翻一行</p></li><li><p>q: 退出</p></li><li><p>#：跳转至第#行1G: 回到文件首部G：翻至文件尾部</p></li><li><p>/KEYWORD</p><p>以KEYWORD指定的字符串为关键字，从当前位置向文件尾部搜索；不区分字符大小写</p><ul><li>n：下一个</li><li>N：上一个</li></ul></li><li><p>?KEYWORD</p><p>以KEYWORD指定的字符串为关键字，从当前位置向文件首部搜索；不区分字符大小写</p><ul><li>n：跟搜索命令同方向，下一个</li><li>N：跟搜索命令反方向，上一个</li></ul></li></ul><p>范例：</p><p>1、在本机字符终端登录时，除显示原有信息外，再显示当前登录终端号，主机名和当前时间</p><p>2、今天18：30自动关机，并提示用户</p><h2 id="info"><a href="#info" class="headerlink" title="info"></a>info</h2><p>man常用于命令参考 ，GNU工具 info 适合通用文档参考没有参数,列出所有的页面</p><p>info 页面的结构就像一个网站每一页分为“节点”</p><p>链接节点之前 *</p><p>info 命令格式</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info [ 命令 ]</span><br></pre></td></tr></table></figure><p>导航info页</p><ul><li>方向键，PgUp，PgDn 导航</li><li>Tab键 移动到下一个链接</li><li>d 显示主题目录</li><li>Home 显示主题首部</li><li>Enter进入 选定链接</li><li>n/p/u/l 进入下/前/上一层/最后一个链接</li><li>s 文字 文本搜索</li><li>q 退出 info</li></ul><h2 id="Linux安装提供的本地文档获取帮助"><a href="#Linux安装提供的本地文档获取帮助" class="headerlink" title="Linux安装提供的本地文档获取帮助"></a>Linux安装提供的本地文档获取帮助</h2><p>Applications -&gt; documentation-&gt;help（centos7） </p><p>System-&gt;help（centos6）</p><h2 id="命令自身提供的官方使用指南"><a href="#命令自身提供的官方使用指南" class="headerlink" title="命令自身提供的官方使用指南"></a>命令自身提供的官方使用指南</h2><p>/usr/share/doc 目录</p><p>多数安装了的软件包的子目录,包括了这些软件的相关原理说明</p><p>常见文档：README INSTALL CHANGES</p><p>不适合其它地方的文档的位置</p><p>配置文件范例</p><p>HTML/PDF/PS 格式的文档</p><p>授权书详情</p><h2 id="系统及第三方应用官方文档"><a href="#系统及第三方应用官方文档" class="headerlink" title="系统及第三方应用官方文档"></a>系统及第三方应用官方文档</h2><h3 id="通过在线文档获取帮助"><a href="#通过在线文档获取帮助" class="headerlink" title="通过在线文档获取帮助"></a>通过在线文档获取帮助</h3><p><a href="http://www.github.com/">http://www.github.com</a></p><p><a href="https://www.kernel.org/doc/html/latest/">https://www.kernel.org/doc/html/latest/</a> </p><p><a href="http://httpd.apache.org/">http://httpd.apache.org</a> </p><p><a href="http://www.nginx.org/">http://www.nginx.org</a> </p><p><a href="https://mariadb.com/kb/en">https://mariadb.com/kb/en</a> </p><p><a href="https://dev.mysql.com/doc/">https://dev.mysql.com/doc/</a> </p><p><a href="http://tomcat.apache.org/">http://tomcat.apache.org</a> </p><p><a href="https://jenkins.io/zh/doc/">https://jenkins.io/zh/doc/</a></p><p><a href="https://kubernetes.io/docs/home/">https://kubernetes.io/docs/home/</a> </p><p><a href="https://docs.openstack.org/train/">https://docs.openstack.org/train/</a> </p><p><a href="http://www.python.org/">http://www.python.org</a> </p><p><a href="http://php.net/">http://php.net</a></p><h3 id="红帽知识库和官方在线文档"><a href="#红帽知识库和官方在线文档" class="headerlink" title="红帽知识库和官方在线文档"></a>红帽知识库和官方在线文档</h3><p>通过发行版官方的文档光盘或网站可以获得安装指南、部署指南、虚拟化指南等</p><p><a href="http://kbase.redhat.com/">http://kbase.redhat.com</a> </p><p><a href="http://www.redhat.com/docs">http://www.redhat.com/docs</a> </p><p><a href="http://access.redhat.com/">http://access.redhat.com</a> </p><p><a href="https://help.ubuntu.com/lts/serverguide/index.html">https://help.ubuntu.com/lts/serverguide/index.html</a></p><h3 id="红帽全球技术支持服务"><a href="#红帽全球技术支持服务" class="headerlink" title="红帽全球技术支持服务"></a>红帽全球技术支持服务</h3><p>rhn.redhat.com或者本地卫星服务器/代理服务器RHN账户为及其注册和基于网络管理的RHN用户</p><p>sosreport  收集所有系统上的日志信息的工具，并自动打成压缩包，方便技术支持人员和红帽全球支持提供分析问题依据</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux基础-01-硬件+系统介绍</title>
      <link href="2020/04/27/Linux%E5%9F%BA%E7%A1%80-01-%E7%A1%AC%E4%BB%B6+%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/"/>
      <url>2020/04/27/Linux%E5%9F%BA%E7%A1%80-01-%E7%A1%AC%E4%BB%B6+%E7%B3%BB%E7%BB%9F%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机系统"><a href="#计算机系统" class="headerlink" title="计算机系统"></a>计算机系统</h1><p>计算机（Computer）：俗称电脑，是一种能接收和存储信息，并按照存储在其内部的程序对海量数据 进行自动、高速地处理，然后把处理结果输出的现代化智能电子设备。</p><p>计算机有很多形式，比如：生活中常见的家用电脑，笔记本，智能手机，平板电脑等，还有生产环境中 提供重要业务支撑的各种服务器（Server），都算是计算机。</p><p>其中一个完整的计算机系统由硬件(Hardware)系统和软件(Software)系统两大部分组成。</p><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfJFi9.png" alt="JfJFi9"></p><h2 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h2><p>计算机发展历史：</p><ol><li><p>第一代计算机(1946-1957)       电子管时代</p></li><li><p>第二代计算机(1958-1964)       晶体管时代</p></li><li><p>第三代计算机(1965-1970)      集成电路时代</p></li><li><p>第四代计算机(1971以后)        大规模集成电路时代</p></li></ol><h3 id="世界上第一台计算机"><a href="#世界上第一台计算机" class="headerlink" title="世界上第一台计算机"></a>世界上第一台计算机</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfY8HS.png"></p><p>1946年,世界上第一台计算机ENIAC(electronic numerical integrator and calculator 电子数字积分计算机)在美国宾州大学诞生，是美国奥伯丁武器试验场为了满足计算弹道需要而研制成的。使用了17468只 电子管，占地170平方米,重达30吨，耗电174千瓦，耗资40多万美元。每秒可进行5000次加法或减法运 算</p><h3 id="冯·诺依曼体系结构"><a href="#冯·诺依曼体系结构" class="headerlink" title="冯·诺依曼体系结构"></a>冯·诺依曼体系结构</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JftQgI.png" alt="JftQgI.png"></p><p>1946年美籍匈牙利数学家冯·诺依曼于提出存储程序原理，把程序本身当作数据来对待，程序和该程序 处理的数据用同样的方式储存。 冯·诺依曼体系结构冯·诺依曼理论的要点是：</p><ol><li><p>数字计算机的数制采用二进制，bit 位, byte 字节 1 byte =8 bit</p></li><li><p>计算机应该按照程序顺序执行</p></li><li><p>计算机硬件由运算器、控制器、存储器、输入设备和输出设备五大部分组成</p></li></ol><h3 id="计算机分类"><a href="#计算机分类" class="headerlink" title="计算机分类"></a>计算机分类</h3><h4 id="按规模划分"><a href="#按规模划分" class="headerlink" title="按规模划分"></a>按规模划分</h4><ol><li><p>超级计算机：Super Computer，又称巨型计算机，应用于国防尖端技术和现代科学计算中。巨型机的运算速度可达每秒百万亿次以上， “天河一号”为我国首台千万亿次超级计算机。</p></li><li><p>大型计算机：具有较高的运算速度，每秒可以执行几千万条指令，而且有较大的存储空间。往往用 于科学计算、数据处理或作为网络服务器使用，如：IBM z13 mainframe</p></li><li><p>小型计算机：指采用精简指令集处理器，性能和价格介于PC服务器和大型主机之间的一种高性能64 位计算机。在中国，小型机习惯上用来指UNIX服务器</p></li><li><p>微型计算机：指采用 X86 CPU 架构的PC服务器，中央处理器（CPU）采用微处理器芯片，体积小巧轻便，广泛用于商业、服务业、工厂的自动控制、办公自动化以及大众化的信息处理,互联网公 司发起去IOE运动,代替小型机</p></li></ol><h4 id="按功能和角色划分"><a href="#按功能和角色划分" class="headerlink" title="按功能和角色划分"></a>按功能和角色划分</h4><ul><li><p>服务器和客户机</p><ul><li><p>服务器：即 Server，计算机的一种，通常是网络中为客户端计算机提供各种服务的高性能的计算机，服务器在网络操作系统的控制下，将与其相连的硬盘、磁带、打印机及昂贵的专用通讯设备提供给网络上 的客户站点共享，也能为网络用户提供集中计算、信息发布及数据管理等服务。</p></li><li><p>客户机：即 Client，向服务器提出请求，需要服务器为之提供相应的服务和支持的计算机。</p></li></ul></li><li><p>服务器按应用功能可分为：</p><p>Web服务器、数据库服务器、文件服务器、中间件应用服务器、日志服务器、监控服务器、程序版本控 制服务器、虚拟机服务器、邮件服务器、打印服务器、域控制服务器、多媒体服务器、通讯服务器、 ERP服务器等</p></li></ul><h4 id="服务器按外形分类"><a href="#服务器按外形分类" class="headerlink" title="服务器按外形分类"></a>服务器按外形分类</h4><ul><li><p>PC器常见的三种外型：</p><ul><li>塔式服务器</li><li>刀片式服务器</li><li>机架式服务器</li></ul></li><li><p>塔式Tower服务器</p><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfUwn0.png" alt="JfUwn0.png"></p></li></ul><p>早期的服务器形式，目前较少使用<br>外形以及结构和平时使用的立式PC差不多机箱空间大，主板扩展性较强，插槽较多<br>预留了足够的内部空间，以便日后进行硬盘和电源的冗余扩展，设计一般都考虑降噪</p><ul><li><p>刀片式Blade服务器</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfaAuq.png" alt="JfaAuq.png"></p></li></ul><p>在标准高度的机架式机箱内可插装多个卡式的服务器单元，实现高可用和高密度 更高的密度，集中管理，高性能，灵活扩展，按需配置<br>可以使用系统软件将这些母板集合成一个服务器集群。在集群模式下，所有的母板可以连接起来提供高 速的网络环境，并同时共享资源，为相同的用户群服务</p><ul><li><p>机架式Rack服务器</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfaWGQ.png" alt="JfaWGQ.png"></p><img src="https://s1.ax1x.com/2020/04/27/Jfaoq0.png" alt="Jfaoq0.png" style="zoom: 25%;" /></li></ul><ul><li><p>按照统一标准设计，配合机柜统一使用，便于统计管理，高密度，节省空间，常用U为单位，1U=1.75英寸=44.45毫米，机箱尺寸比较小巧，在机柜中可以同时放置多台服务器</p></li><li><p>机架式服务器的宽度为19英寸（48.26cm），厚度通常有1U，2U，3U，4U，5U，7U几种标准的 服务器</p></li><li><p>机柜的尺寸也是采用通用的工业标准，如：宽度600mm,深度1000mm,高2000mm（42U） </p></li><li><p>现阶段是最主流的的服务器</p></li></ul><h3 id="服务器硬件组成"><a href="#服务器硬件组成" class="headerlink" title="服务器硬件组成"></a>服务器硬件组成</h3><p> <a href="https://imgchr.com/i/JfdlFS"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfdlFS.png" alt="JfdlFS.png"></a></p><p>服务器配置示例（参考价格47588元）</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfdL0P.png" alt="JfdL0P.png"></p><h4 id="服务器硬件–CPU"><a href="#服务器硬件–CPU" class="headerlink" title="服务器硬件–CPU"></a>服务器硬件–CPU</h4><p><a href="https://imgchr.com/i/JfwT4U"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfwT4U.png" alt="JfwT4U.png"></a></p><ul><li><p>CPU：Central Processing Unit，即中央处理器。由控制器和运算器构成，是整个计算机系统中最重要的部分</p></li><li><p>CPU 架构：</p><ul><li>CISC：Complex Instruction Set Computer，复杂指令集</li><li>RISC：Reduced Instruction Set Computer，精减指令集</li></ul></li></ul><p>精减指令集和复杂指令集：</p><p>早期计算机一直沿用CISC指令集方式。它的设计目的是要用最少的机器语言指令来完成所需的计算任   务。在CISC处理器中，程序的各条指令是按顺序串行执行的，每条指令中的各个操作也是按顺序串行执 行的。顺序执行的优点是控制简单，但计算机各部分的利用率不高，执行速度慢。CISC的指令系统庞   大，功能复杂，指令格式、寻址方式多；执行速度慢；难以优化编译，编译程序复杂； 无法并行；无法兼容。大约20%的指令占据了80%的处理器时间。其余80%指令使用频度只占20%的处理机运行时间。  由此CISC生产厂商长期致力于复杂指令系统的设计，实际上是在设计一种难得在实践中用得上的指令系 统的处理器，同时．复杂的指令系统必然带来结构的复杂性．这不但增加了设计的时间与成本还容易造 成设计失误。目前个人计算机x86体系 CPU 厂商一直在走CISC的发展道路，包括Intel、AMD、VIA（威盛）等。之所以称为X86，是因为最早Intel的CPU型号是8086，后来出现了80286，80386， 80486，80586等，所以之后的Intel和其兼容的厂商的生产CPU都称为X86   CPU。而后CPU从最初的8 位，16位，32位，发展到目前主流的64位。为了区别非64位的CPU，一般将64位的CPU称为X86-64。  由于最早在1999由AMD设计公开 64 位技术，称为 x86-64，后来改名为 AMD64，不同厂商称呼有所不同，所以AMD 64,x86-64,x64都指的是64位的基于X86的CPU。</p><p>因为CISC存在上面的问题，于是有了RISC，它是图灵奖得主John L. Hennessy和David A. Patterson对行业的重大贡献，由加州大学伯克利分校于1980年发布，其基本思想是尽量简化计算机指令功能，只保 留那些功能简单、能在一个节拍内执行完成的指令，使其实现更容易，指令并行执行程度更好，此称为 精简指令集RISC(Reduced Instruction Set Computing）。精减指令集其风格是强调计算机结构的简单性和高效性,其特点是所有指令的格式都是一致的，所有指令的指令周期也是相同的，支持并行，并且采 用流水线技术。当需要完成复杂任务时，就由多个指令组合来实现。常用的精简指令集微处理器包括： ARM、RISC-V、MIPS、PA-RISC、PowerArchitecture(包括PowerPC)、DECAlpha和SPARC等。说到这 里不得不提一下ARM，全世界超过95%的智能手机和平板电脑都采用ARM架构，当前最先进的华为的海 思麒麟990 CPU，高通的骁龙865 CPU，苹果的A13 CPU也都属于ARM架构。ARM可以说是目前世界上使用最广泛的CPU架构了。</p><ul><li><p>CPU类型</p><ul><li><p>X86：CISC</p></li><li><p>ARM：Acorn RISC Machine 高通，华为麒麟</p></li><li><p>RISC-V 阿里玄铁910</p></li><li><p>MIPS 龙芯</p></li><li><p>Power：IBM</p></li><li><p>Powerpc：apple,ibm,moto</p></li><li><p>Ultrasparc ：Sun </p></li><li><p>Alpha：HP</p></li><li><p>安腾：compaq</p></li></ul></li><li><p>服务器CPU公司</p><ul><li><p>Intel：</p><ul><li>Xeon   至强</li><li>Itanium 安腾</li></ul></li><li><p>AMD： Althlon MP</p></li><li><p>IBM： Power</p></li></ul></li></ul><p>按照CPU体系架构来区分，服务器主要分为两类：</p><p>x86服务器：采用CISC（复杂指令集）架构服务器，即通常所讲的PC服务器，它是基于PC机体系结构， 使用Intel或其它兼容x86指令集的处理器芯片的服务器。目前主要为intel的Xeon  E3，E5，E7系列，价格相对便宜、兼容性好、稳定性较差、安全性不算太高</p><p>非x86服务器：采用RISC（精简指令集）或EPIC（并行指令代码）  处理器，主要采用UNIX和其它专用操作系统的服务器，CPU主要有IBM的Power  PC、MIPS的MIPS、SUN的Sparc、Compaq的Alpha、HP的PA-RISC、Intel研发的EPIC安腾处理器等。这种服务器价格昂贵，体系封闭，但是稳定性好，性能 强，主要用在金融、电信等大型企业的核心系统</p><ul><li>微处理器</li></ul><p>1971年11月15日，Intel公司的工程师特德·霍夫发明了世界上第一个微处理器—4004，这款4位微处理 器虽然只有45条指令，而且每秒只能执行5万条指令。性能很低，但它的集成度却要高很多，一块4004 的重量还不到一盅司</p><p>Intel从8086开始，就进入了我们常说的x86时代。而80386的诞生则标志着Intel正是进入了32位微处理 器的时代。从80386到Pentium 4这个年代的CPU，就是传说中的IA-32时代</p><p>x86-64（ 又称x64，即英文词64-bit extended，64位拓展 的简写）是x86架构的64位拓展，向后兼容于16位及32位的x86架构。x64于1999年由AMD设计，AMD首次公开64位集以扩展给x86，称为“AMD64”。其后也为英特尔所采用，现时英特尔称之为“Intel 64”，在之前曾使用过“Clackamas Technology” (CT)、“IA-32e”及“EM64T”</p><p>Intel公司的CPU发展历程</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfB1JO.png" alt="JfB1JO.png"></p><p>CPU主频：主频是CPU的时钟频率(CPU Clock Speed)，是CPU运算时的工作的频率（1秒内发生的同步脉冲数）的简称。单位是Hz。一般说来，主频越高，CPU的速度越快，由于内部结构不同，并非所有的 时钟频率相同的CPU的性能都一样</p><p>外频：系统总线的工作频率， CPU与外部（主板芯片组）交换数据、指令的工作时钟频率倍频：倍频则是指CPU外频与主频相差的倍数</p><p>三者关系是：主频=外频x倍频</p><p>高速缓存（cache）：高速交换的存储器。CPU缓存分为一级，二级，三级缓存，即L1，L2，L3</p><p>内存总线速度(Memory-Bus Speed)：一般等同于CPU的外频，指CPU与二级(L2)高速缓存和内存之间的通信速度</p><p>地址总线宽度：决定了CPU可以访问的物理地址空间</p><h4 id="服务器硬件—主板"><a href="#服务器硬件—主板" class="headerlink" title="服务器硬件—主板"></a>服务器硬件—主板</h4><p><a href="https://imgchr.com/i/JfBWT0"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfBWT0.png" alt="JfBWT0.png"></a></p><p>主板mainboard，安装在机箱内，是计算机最基本的也是最重要的部件之一</p><p>主板一般为矩形电路板，上面安装了组成计算机的主要电路系统，一般有BIOS芯片、I/O控制芯片、键 盘和面板控制开关接口、指示灯插接件、扩充插槽、主板及插卡的直流电源供电接插件等元件</p><h4 id="服务器硬件—内存"><a href="#服务器硬件—内存" class="headerlink" title="服务器硬件—内存"></a>服务器硬件—内存</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfrjzD.png" alt="JfrjzD.png"></p><p>内存是介于CPU 和外部存储之间，是CPU 对外部存储中程序与数据进行高速运算时存放程序指令、数据和中间结果的临时场所，它的物理实质就是一组具备数据输入输出和数据存储功能的高速集成电路  内存是CPU能直接寻址的存储空间，由半导体器件制成。内存的特点是存取速度快<br>计算机中所有程序的运行都是在内存中进行的，因此内存的性能对计算机的影响非常大</p><p>外存：硬盘，U盘，软盘，光盘</p><ul><li><p>内存和外存的区别：</p><ul><li><p>内存断电后数据丢失</p></li><li><p>外存断电后数据可以保存</p></li></ul></li><li><p>服务器内存常用技术：</p></li></ul><ol><li><p>在线备用内存技术</p><ul><li>当主内存或者是扩展内存中的内存出现多位错误时或者出现物理内存故障时，服务器仍继续运行</li><li>由备用内存接替出现故障内存的工作</li><li>备用的内存区域必须比其它区域的内存容量要大或相同</li></ul></li><li><p>内存镜像</p><ul><li>镜像为系统在出现多位错或内存物理故障时提供数据保护功能，以保证系统仍能正常的运行</li><li>数据同时写入两个镜像的内存区域</li><li>从一个区域进行数据的读取</li></ul></li></ol><ul><li><p>容量：即该内存的存储容量，单位一般为GB</p></li><li><p>内存带宽：</p><p>内存带宽是指内存与北桥芯片之间的数据传输率<br>单通道内存控制器一般都是64-bit的，8个二进制位相当于1个字节，换算成字节是64/8=8，再乘以内存 的运行频率，如果是双通道内存就要再乘以2</p></li><li><p>计算公式： <code>内存带宽=内存总线频率×数据总线位数/8</code></p><p>范例：</p><ul><li><p>单通道DDR（Double Data Rate双倍速率）内存带宽计算</p><ul><li>DDR4-4000：4000MHz*64bit/8=32000MB/S</li><li>DDR4-3600：3600MHz*64bit/8=28800MB/S</li></ul></li><li><p>双通道：</p><ul><li>DDR4-4000：4000MHz<em>64bit</em>2/8=64000MB/S</li></ul></li></ul></li></ul><h4 id="服务器硬件—硬盘"><a href="#服务器硬件—硬盘" class="headerlink" title="服务器硬件—硬盘"></a>服务器硬件—硬盘</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jfs4tP.png" alt="Jfs4tP.png"></p><ul><li><p>常见的磁盘接口种类：</p><ul><li><p>IDE：Integrated Drive Electronics，电子集成[驱动器，早期家用电脑常用接</p></li><li><p>SCSI：Small Computer System Interface，小型计算机系统接口，早期的服务器常用接口</p></li><li><p>SATA：Serial ATA （Advanced Technology Attachment 高技术配置），家用电脑常用的接口</p></li><li><p>SAS：Serial Attached SCSI，是目前服务器上主流的接口</p></li><li><p>光纤通道：Fiber Channe，高性能服务器上采用的接口</p></li><li><p>M.2 ：固态硬盘接口，性能更强</p></li></ul></li><li><p>结构分类：</p><ul><li>机械硬盘HDD（Hard Disk Drive）</li><li>固态硬盘SSD（Solid State Drives ）</li></ul></li><li><p>机械硬盘：</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfyucD.png" alt="JfyucD.png"></p><ul><li><p>存储介质（Media）——盘片</p><p>盘片的基板是金属或玻璃材质制成，为达到高密度高稳定的质量，基板要求表面光滑平整，不可有任何暇疵</p></li><li><p>读写磁头（Read Write Head）——磁头</p><p>磁头是硬盘读取数据的关键部件，它的主要作用就是将存储在硬盘盘片上的磁信息转化为电信 号向外传输</p></li><li><p>马达（ Spindle Motor &amp; Voice Coil Motor ）</p><p>马达上装有一至多片盘片，以7200，10000，15000 RPM等定速旋转，为保持其平衡不可抖动，所以其质量要求严谨，不产生高温躁音</p></li></ul></li><li><p>机械硬盘基本参数：</p><ul><li><p>容量：容量是硬盘最主要的参数。单位有MB、GB、TB，常见容量：500GB，1T，2T，3T，4T，6T</p></li><li><p>转速：转速是指硬盘盘片每分钟转动的圈数，单位为rpm。常见：7200rpm，10000rpm，15000rpm</p></li><li><p>传输速率：传输速率(Data Transfer Rate) 。硬盘的数据传输率是指硬盘读写数据的速度，单位为兆字节每秒（MB/s），常见：6Gb/s,12Gb/s</p></li><li><p>缓存：硬盘缓存的目的是为了解决系统前后级读写速度不匹配的问题，以提高硬盘的读写速度</p></li><li><p>磁盘尺寸：3.5”/2.5”/1.8”</p></li><li><p>是否支持热插拔</p></li></ul></li><li><p>SSD硬盘：</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf6P8f.png" alt="Jf6P8f.png"></p></li></ul><p>SSD，即固态硬盘，泛指使用NAND  Flash组成的固态硬盘。其特别之处在于没有机械结构，以区块写入和抹除的方式作读写的功能，因此在读写的效率上，非常依赖读写技术上的设计SSD读写存取速度   快，性能稳定，防震性高，发热低，耐低温，电耗低，无噪音。因为没有机械部分，所以长时间使用也 出现故障几率也较小。缺点：价格高，容量小，相对普通机械硬盘性价比低</p><h4 id="服务器硬件—网卡"><a href="#服务器硬件—网卡" class="headerlink" title="服务器硬件—网卡"></a>服务器硬件—网卡</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf6YZ9.png" alt="Jf6YZ9.png"></p><p>服务器都在主板上集成了网卡，传输速率为1Gbps，即千兆网卡</p><p>特殊应用需要高端网卡，如光纤网卡，Inﬁniband网卡等，传输速率能达到10Gbps、20Gbps，即万兆 网卡</p><h4 id="服务器硬件—相关其它硬件"><a href="#服务器硬件—相关其它硬件" class="headerlink" title="服务器硬件—相关其它硬件"></a>服务器硬件—相关其它硬件</h4><ul><li>服务器硬件—阵列卡</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf6jzT.png" alt="Jf6jzT.png"></p><p>Raid卡用来实现RAID的建立和重建，检测和修复多位错误，错误磁盘自动检测等功能。RAID芯片使  CPU的资源得以释放，阵列卡把若干硬盘驱动器按照一定要求组成一个整体、由阵列控制器管理的系统 阵列卡可以用来提高磁盘子系统的性能及可靠性</p><p>支持的多种RAID级别，RAID0，1，5，6等阵列卡提供缓存及电池保护</p><ul><li><p>服务器硬件—电源</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfclFI.png" alt="JfclFI.png"></p></li></ul><p>支持服务器的电力负载，支持冗余，防止电源故障 ，故障预警和防止 ，故障之前的预防性维护，保证服务器持续运行，电源子系统包括：冗余电源和风扇</p><ul><li><p>服务器硬件—显卡</p><p>服务器都在主板上集成了显卡，但是显存容量不高，一般为16M或32M，GPU： Graphic Processing Unit，即“图形处理器”</p></li><li><p>服务器硬件—热插拔技术</p><p>热插拔技术，称为热交换技术（Hot  Swap），允许在不关机的状态下更换故障热插拔设备，常见的热插拔设备：硬盘，电源，PCI设备，风扇等。热插拔硬盘技术与RAID技术配合起来，可以使服务器在不 关机的状态下恢复故障硬盘上的数据，同时并不影响网络用户对数据的使用</p></li><li><p>服务器硬件—机柜</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf2mad.png" alt="Jf2mad.png"></p></li></ul><p>机架式服务器-服务器放置在机柜中</p><p>通常使用的机柜是42U（约2米高）机柜（ 1U=44.45mm） 外观尺寸一般为：宽600<em>深1000\</em>高2000（mm）</p><p>在一个机架上，累计设备U数一般不超过26U，全1U设备部署数量一般不超过16台，全2U设备一般不 超过12台，全4U设备一般4到7台</p><ul><li><p>机架式服务器-机架及其配件</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf2taj.png" alt="Jf2taj.png"></p></li></ul><h3 id="各种硬件处理速度和性能优化"><a href="#各种硬件处理速度和性能优化" class="headerlink" title="各种硬件处理速度和性能优化"></a>各种硬件处理速度和性能优化</h3><p>服务器的性能短板：如果CPU有每秒处理1000个服务请求的能力，各种总线的负载能力能达到500个， 但网卡只能接受200个请求，而硬盘只能负担150个的话，那这台服务器得处理能力只能是150个请求/  秒，有85%的处理器计算能力浪费了，在计算机系统当中，硬盘的读写速率已经成为影响系统性能进一步提高的瓶颈.</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf2ain.png" alt="Jf2ain.png"></p><p>电脑的各个设备部件之间的延时从高到底的排列，依次是机械硬盘、固态硬盘、内存、CPU</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf2rsU.png" alt="Jf2rsU.png"> </p><p>上图可以看到，CPU最快，一个时钟周期是0.3纳秒，内存访问需要120纳秒，固态硬盘访问需要50-150 微秒，传统硬盘访问需要1-10毫秒， 网络访问最慢，都是几十毫秒。 上图最有趣的地方在于它把计算机世界的时间和人类世界的时间做了对比，常常把CPU比喻成跑得很快，但是记不住事情的“阿甘”， 他的一个时钟周期如果按1秒算：</p><p>内存访问就是6分钟</p><p>一次 CPU 上下文切换(系统调用)需要大约需要1小时在 1Gbps 的网络上传输 2K 的数据需要10多个小时</p><p>从 SSD 读取 1MB 的顺序数据，大约需要 1ms，换算成人类时间是 1个月从磁盘读取 1MB 连续数据需要 20ms，换算成人类时间是 20个月</p><p>如果说打开一个网页可以秒开的话，那也相当于100年</p><p><strong>对于CPU来说，这个世界真是太慢了!</strong></p><ul><li>存储器的层次结构</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jf2zy8.png" alt="Jf2zy8.png"></p><p>上图以层次化的方式，增加了价格信息，它展示了一个真理：世界上没有免费的午餐。存储器越往上速 度越快，但是价格越来越贵， 越往下速度越慢，但是价格越来越便宜。正是由于计算机各个部件的速度不同，容量不同，价格不同，导致了计算机系统/编程中的各种问题以及相应的解决方案</p><ul><li><p>并发和多线程</p><p>CPU的速度超级快，不能老是让它闲着，要充分地压榨它！这里有两个强劲的理由：</p></li></ul><ol><li><p>人类需要多个程序“同时”运行，我们要把CPU的时间进行分片，让各个程序在CPU上轮转，造成一 种多个程序同时在运行的假象，即<strong>并发</strong>。</p></li><li><p>当CPU遇到IO操作（硬盘，网络）时，不能坐在那里干等“几个月”甚至“几年”，在等待的时候，一定要切换，去执行别的程序。</p></li></ol><p>说起来简单，但是程序的切换需要保存程序执行的现场，以便以后恢复执行，于是需要一个数据结构来 表示，这就是进程了。如果一个进程只有一个“执行流”， 如果进程去等待硬盘的操作，那这个程序就会被阻塞，无法响应用户的输入了，所以必须得有多个“执行流”，即<strong>多线程</strong>。</p><ul><li>缓存</li></ul><p>需要持久化的数据一定要保存到硬盘中，但是硬盘超级慢，支持不了大量的并发访问，那怎么办呢？</p><p>可以把最常访问的热点数据放到CPU的缓存中嘛， 其实CPU也是这么做的，但是CPU的L1, L2, L3级缓存实在是太小， 根本满足不了需求。于是只好退而求其次，把热点数据放到速度稍慢的内存中，于是<strong>应用程序的缓存</strong>就出现了。缓存虽然是解决了问题，但是也带来了更多的问题，例如：缓存数据和数据库 数据怎么保持一致性？</p><p>缓存如果崩溃了该怎么处理？数据在一台机器的内存放不下了，要分布到多个机器上，怎么搞分布式 啊，用什么算法？…..</p><ul><li>异步</li></ul><p>对于Tomcat这样的应用服务器，对于每个请求都要用一个线程来处理，如果现在有一万个请求进来， Tomcat会建立1万个线程来处理吗？ 不会的，因为线程多了开销会很大 ，线程切换起来也很慢，所以它只好用个线程池来复用线程。现在假设线程池中有一千个可用线程（已经非常多了），它们都被派去 访问硬盘，数据库，或者发起网络调用，这是非常慢的操作，导致这一千个线程都在等待结果的返回</p><p>（阻塞了），那剩下的九千个请求就没法处理了，对吧？所以后来人们就发明了新的处理办法，仅使用 几个线程（例如和CPU核心数量一样），让他们疯狂运行，遇到I/O操作，程序就注册一个钩子函数放  在那里，然后线程就去处理别的请求，等到I/O操作完成了，系统会给这个线程发送一个事件， 线程就回过头来调用之前的钩子函数（也叫回调函数）来处理。</p><p>这就是<strong>异步，非阻塞</strong>的处理方式。nginx,Node.js，Vert.x等采用的都是类似的思想。</p><ul><li>单线程</li></ul><p>Redis使用<strong>单线程</strong>的方式来处理请求的，为什么用单线程就可以呢？ 它为什么不像Tomcat那样使用多线程和线程池呢？因为它面对的仅仅是内存，内存的速度在计算机的体系中仅次于CPU，比那些网络操作 不知道要快到哪里去了所以这个唯一的线程就可以快速地执行内存的读写操作，完成从许多网络过来的 缓存请求了。单线程还有个巨大的优势，没有竞争，不需要加锁！</p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="操作系统功能"><a href="#操作系统功能" class="headerlink" title="操作系统功能"></a>操作系统功能</h3><p>OS: Operating System 操作系统，通用目的的软件程序</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfT6e0.png" alt="JfT6e0.png"></p><ul><li><p>主要功能：</p><ul><li>硬件驱动进程管理内存管理网络管理安全管理文件管理</li></ul></li><li><p>OS分类：</p><ul><li><p>服务器OS：CentOS，Ubuntu，Windows Server，AIX</p></li><li><p>桌面OS：Windows 10，Mac OS，Fedora</p></li><li><p>移动设备OS：Andriod，IOS，AliOS，HarmonyOS</p></li></ul></li></ul><h3 id="操作系统相关概念"><a href="#操作系统相关概念" class="headerlink" title="操作系统相关概念"></a>操作系统相关概念</h3><p><strong>接口：</strong>interface，来源于电气工程学科，指的是插座与插头的连接口，起到将电与电器连接起来的功能。后来延伸到软件工程里指软件包向外提供的功能模块的函数接口。所以接口是用来连接两个东西、 信号转换和屏蔽细节</p><p>操作系统通过接口的方式，建立了用户与计算机硬件的沟通方式。用户通过调用操作系统的接口来使用 计算机的各种计算服务。</p><p>为操作系统一般会提供两个重要的接口来满足用户的一些一般性的使用需求：</p><ul><li>命令行：实际是一个叫shell的终端程序提供的功能，该程序底层的实质还是调用一些操作系统提 供的函数</li><li>窗口界面：窗口界面通过编写的窗口程序接收来自操作系统消息队列的一些鼠标、键盘动作，进而做出一些响应</li></ul><h4 id="ABI"><a href="#ABI" class="headerlink" title="ABI"></a>ABI</h4><p>Application Binary Interface，应用程序二进制接口，ABI描述了应用程序与OS之间的底层接口,允许编译好的目标代码在使用兼容ABI的系统中无需改动就能运行</p><p>Windows: PE(portable executable）格式， .dll(dynamic link library)，.lib </p><p>Linux: ELF(Executable and Linking Format)格式, .so(shared object), .a</p><h4 id="API"><a href="#API" class="headerlink" title="API"></a>API</h4><p>Application Programming Interface，应用程序开发接口，API定义了源代码和库之间的接口，因此同样的源代码可以在支持这个API的任何系统中编译</p><p>POSIX: Portable Operating System Interface 可移植的操作系统接口</p><p>IEEE在操作系统上定义的一系列API标准</p><p>POSIX兼容的程序可在其它POSIX操作系统编译执行</p><h4 id="用户态和内核态"><a href="#用户态和内核态" class="headerlink" title="用户态和内核态"></a>用户态和内核态</h4><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfHGUf.png" alt="JfHGUf.png"></p><p>计算机硬件资源都是操作系统内核进行管理的，目前操作系统都是基于多任务、多用户的。如果每个用 户进程都可以随便访问操作系统内核的模块，改变状态，那整个操作系统的稳定性、安全性都大大降低 为了将内核程序与用户程序隔离开，在硬件层面上提供了一次机制，将程序执行的状态分为了不同的级 别，从0到3，数字越小，访问级别越高。0代表内核态，在该特权级别下，所有内存上的数据都是可见 的，可访问的。3代表用户态，在这个特权级下，程序只能访问一部分的内存区域，只能执行一些限定 的指令</p><h4 id="函数库和系统调用system-call"><a href="#函数库和系统调用system-call" class="headerlink" title="函数库和系统调用system call"></a>函数库和系统调用system call</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfHU2Q.png" alt="JfHU2Q.png"></p><p>对于非一般性使用需求，操作系统提供了一系列的函数调用给软件开发者，由软件开发者来实现一些用 户需要的功能。这些函数调用由于是操作系统内核提供的，为了有别于一般的函数调用，被称为系统调 用。比如使用C语言进行软件开发时，经常用的printf函数，它的内部实际就是通过write这个系统调用，让操作系统内核把字符打印在屏幕上的</p><h4 id="用户和内核空间"><a href="#用户和内核空间" class="headerlink" title="用户和内核空间"></a>用户和内核空间</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfHBbq.png" alt="JfHBbq.png"></p><h4 id="用户空间：User-space"><a href="#用户空间：User-space" class="headerlink" title="用户空间：User space"></a>用户空间：User space</h4><ul><li><p>用户程序的运行空间。为了安全，它们是隔离的，即使用户的程序崩溃，内核也不受影响</p></li><li><p>只能执行简单的运算，不能直接调用系统资源，必须通过系统接口（ system call），才能向内核发出指令</p></li><li><p>内核空间：Kernel space</p><ul><li><p>是 Linux 内核的运行空间</p></li><li><p>可以执行任意命令，调用系统的一切资源</p></li></ul></li><li><p>范例：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">&quot;www.magedu.com&quot;</span> <span class="comment">// 用户空间</span></span><br><span class="line">x = x + <span class="number">100</span> <span class="comment">// 用户空间</span></span><br><span class="line">file.write(str) <span class="comment">// 切换到内核空间</span></span><br><span class="line">y = x + <span class="number">200</span> <span class="comment">// 切换回用户空间</span></span><br></pre></td></tr></table></figure></li></ul><p>说明：第一行和第二行都是简单的赋值运算，在 User space 执行。第三行需要写入文件，就要切换到Kernel space，因为用户不能直接写文件，必须通过内核安排。第四行又是赋值运算，就切换回 User space</p><h4 id="编程语言"><a href="#编程语言" class="headerlink" title="编程语言"></a>编程语言</h4><ul><li><p>低级语言：计算机能理解的语言，二进制机器语言：0和1</p></li><li><p>汇编语言：和机器语言一一对应，与硬件相关的特有代码、驱动程序开发中级语言：C 语言，系统级应用、驱动程序</p></li><li><p>高级语言： java，python，go，php，Objective-C，C#，易语言(中文)，应用级程序开发，人类语言实现</p></li></ul><h3 id="各种操作系统"><a href="#各种操作系统" class="headerlink" title="各种操作系统"></a>各种操作系统</h3><h4 id="操作系统演变"><a href="#操作系统演变" class="headerlink" title="操作系统演变"></a>操作系统演变</h4><ul><li><p>单用户系统：一次只能支持一个用户程序的运行。向用户提供联机交互式的工作环境，如：DOS   </p></li><li><p>批处理系统：用户将一批作业提交给操作系统后就不再交互，由操作系统控制自动运行，提高系统 运行效率</p></li><li><p>多道程序系统：程序控制 CPU 处理顺序</p></li><li><p>分时系统：提高系统利用率，操作系统控制 CPU 处理顺序</p></li><li><p>个人计算机：每人用户对应一个系统，廉价，方便，易用</p></li><li><p>分布式计算：每个用户对应多个系统，云计算，大数据处理</p></li></ul><h4 id="服务器三大操作系统"><a href="#服务器三大操作系统" class="headerlink" title="服务器三大操作系统"></a>服务器三大操作系统</h4><ul><li><p>Windows</p></li><li><p>Linux：GNU/Linux</p></li><li><p>Unix：1969年 Ken Thompson</p><ul><li><p>System: Bell Lab </p><ul><li><p>AIX （IBM）</p></li><li><p>Solaris (SUN) </p></li><li><p>HP-UX (HP)</p></li></ul></li><li><p>BSD: （BSRG）Berkeley System Distribution</p><ul><li>NetBSD</li><li>OpenBSD</li><li>FreeBSD</li></ul></li></ul><p>服务器操作系统市场</p></li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfbRFf.png" alt="JfbRFf.png"></p><h4 id="UNIX历史"><a href="#UNIX历史" class="headerlink" title="UNIX历史"></a>UNIX历史</h4><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfbIyj.png" alt="JfbIyj.png"></p><h4 id="兼容分时系统Multics"><a href="#兼容分时系统Multics" class="headerlink" title="兼容分时系统Multics"></a>兼容分时系统Multics</h4><p> <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/Jfb7mn.png" alt="Jfb7mn.png"></p><p>为了进一步强化大型主机的功能，让主机的资源可以提供更多的使用者来利用，所以在1964年，  由贝尔实验室(Bell)、麻省理工学院(MIT)及奇异公司(GE美国通用电气公司)共同发起了Multics（多路信息计  算系统）的计划， Multics计划的目的是让大型主机可以同时支持300个以上的终端机连线使用。不过， 到了1969年前后，由于计划进度缓慢，资金也短缺，所以该计划虽然继续在研究，但最终贝尔实验室还 是选择了退出</p><p>1966年从加州大学伯克利分校毕业的Ken  Thompson加入了贝尔实验室。参与了Multics系统的研发。他基于Multics开发了“star travel”游戏。不幸的是，1969年由于贝尔实验室退出Multics项目，这同时意味着Ken将没有机器可以再玩这个游戏了。面对此情此景，Ken作为一个创造者的本性立即体现了出来，于是他决定自己写一个操作系统来满足他玩游戏的需要，Ken找到了一台废弃已久的老式PDP-7， 并在这台机器上重写了他的游戏。在这个过程中，Ken有了一个主意，要开发一个全新的操作系统。利 用PDP-7上的汇编语言，Ken只花了一个月就编写完了操作系统的内核，在这个一个月中，他一周一个 内核，一个文件系统，一个编辑器和一个编译程序的完成</p><ul><li><p>1969 Unix 雏形 UNICS</p><ul><li>Ken Thompson 汇编语言 B语言1973 正式命名为 Unix</li></ul></li><li><p>1973正式命名为Unix</p><ul><li>Dennis Ritchie C语言</li></ul></li><li><p>1977 BSD</p><ul><li>Berkeley Software Distribution 伯克利大学</li></ul></li><li><p>1979 System V架构 版权声明</p><ul><li>HP-UNIX IBM AIX “不对学生提供源码” 收回版权</li></ul></li><li><p>1984年 Minix操作系统</p><ul><li>Andrew S. Tanenbaum 荷兰阿姆斯特丹自由大学计算机科学系</li></ul></li></ul><h4 id="GNU"><a href="#GNU" class="headerlink" title="GNU"></a>GNU</h4><p>GNU：GNU is Not Unix</p><p>1984年由Richard Stallman发起并创建</p><p>目标是编写大量兼容于Unix系统的自由软件</p><p>官方网站 ：<a href="http://www.gnu.org/">http://www.gnu.org</a> </p><p>GPL：GNU General Public License</p><p>自由软件基金会：Free Software Foundation</p><p>允许用户任意复制、传递、修改及再发布</p><p>基于自由软件修改再次发布的软件，仍需遵守GPL</p><p>LGPL：Lesser General Public License，LGPL相对于GPL较为宽松，允许不公开全部源代码</p><p>GNU操作系统：</p><p>Hurd：Hird(Hurd of Interfaces Representing Depth) of Unix-Replacing Daemons richard Stallman 为了无止境寻找完美内核，而忘记了HURD的原本目的:能用的操作系统</p><h3 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h3><p>1991年的10月5日Linus Benedict Torvalds在comp.os.minix 新闻组上发布消息，正式向外宣布他自行编写的完全自由免费的内核诞生（Freeminix-like kernel sources for 386-AT） — FREAX，含义是怪诞的、怪物、异想天开类Unix的内核，在GPL下发布</p><p>官网：<a href="http://www.kernel.org/">www.kernel.org</a></p><h4 id="Linux操作系统："><a href="#Linux操作系统：" class="headerlink" title="Linux操作系统："></a>Linux操作系统：</h4><p>完整的类UNIX操作系统</p><p>Linux内核+ GNU工具=Linux/GNU</p><p>如：CentOS,Ubuntu,Android</p><h4 id="Linux的内核版本组成"><a href="#Linux的内核版本组成" class="headerlink" title="Linux的内核版本组成"></a>Linux的内核版本组成</h4><ul><li>主版本号</li><li>次版本号</li><li>末版本号打包版本号</li><li>厂商版本</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfLmCT.png" alt="JfLmCT.png"></p><h4 id="Linux-发行版"><a href="#Linux-发行版" class="headerlink" title="Linux 发行版"></a>Linux 发行版</h4><ul><li><p>slackware：SUSE Linux Enterprise Server (SLES) , OpenSuse桌面</p></li><li><p>debian: ubuntu，deepin（深度），mint</p></li><li><p>redhat： RHEL: RedHat Enterprise Linux, 每18个月发行一个新版本</p><ul><li>CentOS： <strong>C</strong>ommunity <strong>Ent</strong>erprise <strong>O</strong>perating <strong>S</strong>ystem 兼容RHEL的格式中标麒麟：中标软件</li><li>Fedora：每6个月发行一个新版本</li></ul></li><li><p>Alpine： 一个面向安全的轻型 Linux 发行版。它不同于通常 Linux 发行版，Alpine 采用了 musl libc 和 busybox 以减小系统的体积和运行时资源消耗，但功能上比 busybox 又完善的多，只有5M左右大小</p></li><li><p>ArchLinux：轻量简洁，遵循K.I.S.S.原则（ keep it simple and stupid ），Manjaro</p></li><li><p>Gentoo：极致性能，不提供传统意义的安装程序，下载源代码在本机上编译安装软</p></li><li><p>LFS：Linux From scratch 自制Linux</p></li><li><p>Android：kernel+busybox（工具集）+java虚拟机</p></li></ul><p>Linux 分支参考网站：<a href="http://futurist.se/gldt/">http://futurist.se/gldt/</a></p><p>Linux发行版排名: <a href="https://distrowatch.com/dwres.php?resource=popularity">https://distrowatch.com/dwres.php?resource=popularity</a></p><h4 id="RedHat-红帽公司"><a href="#RedHat-红帽公司" class="headerlink" title="RedHat 红帽公司"></a>RedHat 红帽公司</h4><p>Marc Ewing早在卡内基梅隆大学读书的时候就戴着他祖父的红色曲球帽. Marc在Marc Ewing大学常把自己的软件命名为Red Hat — Red hat 1, Red Hat 2 用来区别他人的软件. 所以当他开始自己的Linux项目, 自然就会命名为Red Hat Linux。Ewing非常乐于帮助同学解决计算机问题 “你的朋友可能会说, 去跟我的朋友Marc交流. 谁是Marc? 他是红帽男孩. ” 所以, 至少在他们最亲密的朋友当中, 红帽子成为了技术专家的同义词</p><p>1993年，Bob Young 建立ACC公司，营销Linux和UNIX的支持软件和书籍杂志</p><p>1995年，Bob Young 收购了Marc Ewing的业务，合并后的ACC公司成为新的Red Hat软件公司，发布了Red Hat Linux 2.0</p><p>2018年10月29日，IBM宣布将以约340亿美元收购开源软件和技术主要供应商红帽公司</p><h4 id="红帽发行版本"><a href="#红帽发行版本" class="headerlink" title="红帽发行版本"></a>红帽发行版本</h4><ul><li>Red Hat Linux 1.0 (Mother’s Day) 1994年11月03日</li><li>Red Hat Linux 2.0 1995年09月20日</li><li>Red Hat Linux 3.0 (Picasso) 1996年05月01日</li><li>Red Hat Linux 4.0 (Colgate) 1996年10月08日</li><li>Red Hat Linux 5.0 (Hurricane) 1997年12月01日</li><li>Red Hat Linux 6.0 (Hedwig) 1999年04月26日</li><li>Red Hat Linux 6.2 (Zoot)  Red Hat Linux 6.2E 2000年04月03日</li><li>Red Hat Linux 7.0 (Guinness) 2000年03月27日</li><li>Red Hat Linux 7.2 (Enigma)      Red Hat Enterprise Linux 2 2001年10月22日Red Hat</li><li>Linux 8.0 (Psyche) 2002年09月30日</li><li>Red Hat Linux 9.0 (Shrike) 2003年03月31日</li><li>Red Hat Enterprise Linux 3.0(Taroon)  Fedora 1 (Yarrow) 2003年10月22日</li><li>Red Hat Enterprise Linux 4.0 2005年02月15日</li><li>Red Hat Enterprise Linux 5.0(Tikanga) 2007年03月14日</li><li>Red Hat Enterprise Linux 6.0(Santiago) 2010年11月10日</li><li>Red Hat Enterprise Linux 7.0(Maipo) 2014年06月10日</li><li>Red Hat Enterprise Linux 8.0 2019年05月07日</li></ul><h3 id="开源-Open-Source"><a href="#开源-Open-Source" class="headerlink" title="开源 Open Source"></a>开源 Open Source</h3><p> <a href="https://imgchr.com/i/JfONoq"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfONoq.png" alt="JfONoq.png"></a></p><h4 id="开源Open-Source"><a href="#开源Open-Source" class="headerlink" title="开源Open Source"></a>开源Open Source</h4><ul><li>软件和源代码提供给所有人,自由分发软件和源代码</li><li>能够修改和创建衍生作品</li></ul><h4 id="软件分类"><a href="#软件分类" class="headerlink" title="软件分类"></a>软件分类</h4><ul><li>商业</li><li>共享</li><li>自由 </li></ul><h4 id="开源协议"><a href="#开源协议" class="headerlink" title="开源协议"></a>开源协议</h4><p>世界上的开源许可证，大概有上百种</p><p><a href="https://imgchr.com/i/JfORFx"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/JfORFx.png" alt="JfORFx.png"></a></p><ul><li>GPLv2, GPLv3, LGPL(lesser) ：通用公共许可 copyleft </li><li>Apache: apache</li><li>BSD: bsd </li><li>Mozilla MIT</li></ul><h1 id="Linux-介绍"><a href="#Linux-介绍" class="headerlink" title="Linux 介绍"></a>Linux 介绍</h1><h2 id="Linux哲学思想"><a href="#Linux哲学思想" class="headerlink" title="Linux哲学思想"></a>Linux哲学思想</h2><ul><li>一切都是一个文件（包括硬件）</li><li>小型，单一用途的程序</li><li>链接程序，共同完成复杂的任务</li><li>避免令人困惑的用户界面</li><li>配置数据存储在文本中</li></ul><h2 id="Linux-生产主流版本"><a href="#Linux-生产主流版本" class="headerlink" title="Linux 生产主流版本"></a>Linux 生产主流版本</h2><h3 id="Linux-各种版本"><a href="#Linux-各种版本" class="headerlink" title="Linux 各种版本"></a>Linux 各种版本</h3><p>Centos 各版本介绍</p><p><a href="https://zh.wikipedia.org/wiki/CentOS">https://zh.wikipedia.org/wiki/CentOS</a> </p><p>RHEL各版本介绍</p><p><a href="https://zh.wikipedia.org/wiki/Red_Hat_Enterprise_Linux">https://zh.wikipedia.org/wiki/Red_Hat_Enterprise_Linux</a> </p><p>Ubuntu 各版本介绍</p><p><a href="https://zh.wikipedia.org/wiki/Ubuntu">https://zh.wikipedia.org/wiki/Ubuntu</a> </p><p><a href="https://blog.csdn.net/songfulu/article/details/85310273">https://blog.csdn.net/songfulu/article/details/85310273</a></p><h3 id="获取发行版"><a href="#获取发行版" class="headerlink" title="获取发行版"></a>获取发行版</h3><p>CentOS </p><p><a href="https://wiki.centos.org/Download">https://wiki.centos.org/Download</a></p><p><a href="http://mirrors.aliyun.com/">http://mirrors.aliyun.com</a> </p><p><a href="http://mirrors.sohu.com/">http://mirrors.sohu.com</a> </p><p><a href="http://mirrors.163.com/">http://mirrors.163.com</a></p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/centos/">https://mirrors.tuna.tsinghua.edu.cn/centos/</a></p><p>Ubuntu</p><p><a href="http://cdimage.ubuntu.com/releases/">http://cdimage.ubuntu.com/releases/</a>     server版</p><p><a href="http://releases.ubuntu.com/">http://releases.ubuntu.com/</a>            desktop版</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux基础 </tag>
            
            <tag> 系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-12-富文本</title>
      <link href="2020/03/17/Django-12-%E5%AF%8C%E6%96%87%E6%9C%AC/"/>
      <url>2020/03/17/Django-12-%E5%AF%8C%E6%96%87%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>富文本:Rich Text Format（RTF），是有微软开发的跨平台文档格式，大多数的文字处理软件都能读取和保存RTF文档，其实就是可以添加样式的文档，和HTML有很多相似的地方</p><p>django的插件</p><p><code>pip install django-tinymce</code></p><h1 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h1><p>用处大约有两种</p><ol><li><p>在后台管理中使用</p></li><li><p>在页面中使用，通常用来作博客</p></li></ol><h1 id="后台中使用"><a href="#后台中使用" class="headerlink" title="后台中使用"></a>后台中使用</h1><p>配置settings.py文件</p><p> INSTALLED_APPS 添加 tinymce 应用</p><p> 添加默认配置</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">TINYMCE_DEFAULT_CONFIG = &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">&#x27;theme&#x27;:&#x27;advanced&#x27;,</span></span><br><span class="line"></span><br><span class="line"><span class="xml">&#x27;width&#x27;:800,</span></span><br><span class="line"></span><br><span class="line"><span class="xml">&#x27;height&#x27;:600,</span></span><br><span class="line"></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>创建模型类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tinymce.models <span class="keyword">import</span> HTMLField</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    sBlog = HTMLField()</span><br></pre></td></tr></table></figure><p>配置站点</p><p><code>admin.site.register</code></p><p>在视图中使用</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">使用文本域盛放内容</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&#x27;url&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">在head中添加script</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&#x27;/static/tiny_mce/tiny_mce.js&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">tinyMCE.init(&#123;</span></span><br><span class="line"><span class="xml">&#x27;mode&#x27;:&#x27;textareas&#x27;, &#x27;theme&#x27;:&#x27;advanced&#x27;,</span></span><br><span class="line"><span class="xml">&#x27;width&#x27;:800,&#x27;height&#x27;:600,</span></span><br><span class="line"><span class="xml">&#125;)</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>EditBlog<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/static/tiny_mce/tiny_mce.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        tinyMCE.init(&#123;</span></span><br><span class="line"><span class="xml">            &quot;mode&quot;: &quot;textareas&quot;,</span></span><br><span class="line"><span class="xml">            &quot;theme&quot;: &quot;advanced&quot;,</span></span><br><span class="line"><span class="xml">            &quot;width&quot;: 800,</span></span><br><span class="line"><span class="xml">            &quot;height&quot;: 600</span></span><br><span class="line"><span class="xml">        &#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:edit_blog&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-11-验证码</title>
      <link href="2020/03/17/Django-11-%E9%AA%8C%E8%AF%81%E7%A0%81/"/>
      <url>2020/03/17/Django-11-%E9%AA%8C%E8%AF%81%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇文章主要讲实现验证码的原生方法，当然，在实际开发中，有很多插件可以实现验证码。</p></blockquote><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>在用户登录，注册以及一些敏感操作的时候，我们为了防止服务器被暴力请求，或爬虫爬取，我们可以使用验证码进行过滤，减轻服务器的压力。</p><p>验证码需要使用绘图 Pillow</p><p><code>pip install Pillow</code></p><p>核心</p><p>Image,ImageDraw,ImageFont</p><p>绘制流程</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">background = (<span class="number">10</span>,<span class="number">20</span>,<span class="number">30</span>)  RGB颜色</span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化画布 </span></span><br><span class="line"></span><br><span class="line">image = Image.new(‘RGB’,(<span class="number">100</span>,<span class="number">50</span>),background)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取画布中画笔对象</span></span><br><span class="line"></span><br><span class="line">draw = ImageDraw.Draw(image)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制验证码，随机四个</span></span><br><span class="line"></span><br><span class="line">font = ImageFont.truetype(‘path’,size)</span><br><span class="line"></span><br><span class="line">fontcolor = (<span class="number">20</span>,<span class="number">40</span>,<span class="number">60</span>)</span><br><span class="line"></span><br><span class="line">draw.text((x,y),’R’,font,fontcolor)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后扫尾</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> draw </span><br><span class="line"></span><br><span class="line">Import io</span><br><span class="line"></span><br><span class="line">buf = io.BytesIO()</span><br><span class="line"></span><br><span class="line">Image.save(buf,’png’)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> HttpResponse(buf.getvalue(),’image/png’)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><blockquote><ul><li><p>对于功能性的函数，我们一般在app目录中建立utils.py文件，将功能函数或者与视图函数无关的函数放入</p></li><li><p>如果想要自定义字体，可以在setting中添加FONT_PATH，把字体文件放入static/font中</p></li></ul></blockquote><h2 id="步骤1"><a href="#步骤1" class="headerlink" title="步骤1"></a>步骤1</h2><p>首先建立好两个视图函数，一个是生成验证码的，还有一个是验证是否成功的登录页面</p><p>具体步骤不在赘述，可以参看前面的文章。</p><h2 id="步骤2"><a href="#步骤2" class="headerlink" title="步骤2"></a>步骤2</h2><p>在utils.py文件中编写两个函数，一个用来生成随机RBG值，一个用来生成随机的验证码文字。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_color</span>():</span></span><br><span class="line">    <span class="keyword">return</span> random.randrange(<span class="number">256</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">generate_code</span>():</span></span><br><span class="line">    source = <span class="string">&quot;qwertyuiopasdfghjklzxcvbnm1234567890QWERTYUIOPASDFGHJKLZXCVBNM&quot;</span></span><br><span class="line">    code = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        code += random.choice(source)</span><br><span class="line">    <span class="keyword">return</span> code</span><br></pre></td></tr></table></figure><h2 id="步骤3"><a href="#步骤3" class="headerlink" title="步骤3"></a>步骤3</h2><p>在views中创建生成验证码的界面和包含验证码的登录界面</p><p>验证码生成函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_code</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># 初始化画布，初始化画笔</span></span><br><span class="line">    mode = <span class="string">&quot;RGB&quot;</span></span><br><span class="line">    size = (<span class="number">200</span>, <span class="number">100</span>)</span><br><span class="line">    red = get_color()</span><br><span class="line">    green = get_color()</span><br><span class="line">    blue = get_color()</span><br><span class="line">    color_bg = (red, green, blue)</span><br><span class="line">    <span class="comment"># 新建画布</span></span><br><span class="line">    image = Image.new(mode=mode, size=size, color=color_bg)</span><br><span class="line">    <span class="comment"># 新建画笔</span></span><br><span class="line">    imagedraw = ImageDraw(image, mode=mode)</span><br><span class="line">    imagefont = ImageFont.truetype(settings.FONT_PATH, <span class="number">100</span>)</span><br><span class="line">    verify_code = generate_code()</span><br><span class="line">    request.session[<span class="string">&#x27;verify_code&#x27;</span>] = verify_code</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        fill = (get_color(), get_color(), get_color())</span><br><span class="line">        imagedraw.text(xy=(<span class="number">50</span>*i, <span class="number">0</span>), text=verify_code[i], font=imagefont, fill=fill)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">        fill = (get_color(), get_color(), get_color())</span><br><span class="line">        xy = (random.randrange(<span class="number">201</span>), random.randrange(<span class="number">100</span>))</span><br><span class="line">        imagedraw.point(xy=xy, fill=fill)</span><br><span class="line">    fp = BytesIO()<span class="comment"># 添加二进制内存流</span></span><br><span class="line">    image.save(fp, <span class="string">&quot;png&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(fp.getvalue(), content_type=<span class="string">&quot;image/png&quot;</span>)<span class="comment"># 需要添加格式限定</span></span><br></pre></td></tr></table></figure><p>登陆函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        receive_code = request.POST.get(<span class="string">&quot;verify_code&quot;</span>)</span><br><span class="line">        store_code = request.session.get(<span class="string">&quot;verify_code&quot;</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> receive_code.lower() != store_code.lower():</span><br><span class="line">            <span class="keyword">return</span> redirect(reverse(<span class="string">&#x27;app:login&#x27;</span>))</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;登录成功&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="步骤4"><a href="#步骤4" class="headerlink" title="步骤4"></a>步骤4</h2><p>实现登陆界面</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.11.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> &#x27;js/login.js&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:login&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名:<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>验证码:<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;verify_code&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入下图中的验证码&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:get_code&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span></span><br><span class="line"><span class="comment">&#123;#    &lt;img src=&quot;#&quot;&gt;#&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="步骤5"><a href="#步骤5" class="headerlink" title="步骤5"></a>步骤5</h2><p>实现登录界面中的js模块，添加点击验证码自动切换的功能</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">&quot;img&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;点到我了&quot;</span>);</span><br><span class="line">        $(<span class="built_in">this</span>).attr(<span class="string">&quot;src&quot;</span>, <span class="string">&quot;/app/getcode/?t=&quot;</span> + <span class="built_in">Math</span>.random());</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><a href="https://imgchr.com/i/8NIiRO"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NIiRO.md.png" alt="8NIiRO.md.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-10-分页</title>
      <link href="2020/03/17/Django-10-%E5%88%86%E9%A1%B5/"/>
      <url>2020/03/17/Django-10-%E5%88%86%E9%A1%B5/</url>
      
        <content type="html"><![CDATA[<p>django提供了分页的工具，存在于django.core中 </p><p>Paginator  : 数据分页工具</p><p>Page : 具体的某一页面</p><h1 id="Paginator"><a href="#Paginator" class="headerlink" title="Paginator"></a>Paginator</h1><h2 id="对象创建"><a href="#对象创建" class="headerlink" title="对象创建"></a>对象创建</h2><p><code>Paginator(数据集，每一页数据数)</code></p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>count:                对象总数</li><li>num_pages：   页面总数</li><li>page_range:      页码列表，从1开始</li></ul><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>page(整数): 获得一个page对象</p><h2 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h2><ul><li>InvalidPage：page()                   传递无效页码</li><li>PageNotAnInteger：page()       传递的不是整数</li><li>Empty：page()                             传递的值有效，但是没有数据</li></ul><h1 id="Page"><a href="#Page" class="headerlink" title="Page"></a>Page</h1><p>对象获得，通过Paginator的page()方法获得</p><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ul><li>object_list：                 当前页面上所有的数据对象</li><li>number：                    当前页的页码值</li><li>paginator:                    当前page关联的Paginator对象</li></ul><h2 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h2><ul><li>has_next() :判断是否有下一页</li><li>has_previous():判断是否有上一页</li><li>has_other_pages():判断是否有上一页或下一页</li><li>next_page_number():返回下一页的页码</li><li>previous_page_number():返回上一页的页码 </li><li>len()：返回当前页的数据的个数</li></ul><hr><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NTSC6.png" alt="8NTSC6.png"></p><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_students</span>.<span class="title">with_page</span>(<span class="params"> request</span>):</span></span><br><span class="line">page = <span class="built_in">int</span>(request.GET.get(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>))</span><br><span class="line">per_page =<span class="built_in">int</span>(request.GET.get(<span class="string">&quot;per. page&quot;</span>, <span class="number">10</span>))</span><br><span class="line">students = Student.objects.<span class="built_in">all</span>()</span><br><span class="line">paginator = Paginator(students, per_page)</span><br><span class="line">page_object = paginator.page(page)</span><br><span class="line">data = &#123;</span><br><span class="line"><span class="string">&quot;page_object&quot;</span>: page_object</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> render( request, <span class="string">&#x27; students_with_page.html&#x27;</span>，context=data)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个带分页界面的模板</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>StudentsWithPage<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.css&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/jquery/1.11.1/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> student <span class="keyword">in</span> page_object.object_list %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; student.s_name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">&quot;Page navigation&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;pagination&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page_object.has_previous %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:get_students_with_page&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">?page=</span></span></span><span class="template-variable">&#123;&#123; page_object.previous_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Previous&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> page_index <span class="keyword">in</span> page_range %&#125;</span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">ifequal</span></span> page_index page_object.number %&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:get_students_with_page&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">?page=</span></span></span><span class="template-variable">&#123;&#123; page_index &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; page_index &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:get_students_with_page&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">?page=</span></span></span><span class="template-variable">&#123;&#123; page_index &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span>&gt;</span></span><span class="template-variable">&#123;&#123; page_index &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">endifequal</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> page_object.has_next %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> &#x27;app:get_students_with_page&#x27; %&#125;</span><span class="xml"><span class="tag"><span class="string">?page=</span></span></span><span class="template-variable">&#123;&#123; page_object.next_page_number &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;disabled&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">aria-label</span>=<span class="string">&quot;Next&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><a href="https://imgchr.com/i/8N5rVI"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8N5rVI.png" alt="8N5rVI.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-09-中间件</title>
      <link href="2020/03/17/Django-09-%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
      <url>2020/03/17/Django-09-%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>是一个轻量级的，底层的插件，可以介入Django的请求和相应过程（面向切面编程）</p><p>中间件的本质就是一个python类</p><p>详细介绍请看：<a href="https://segmentfault.com/a/1190000019992887">https://segmentfault.com/a/1190000019992887</a></p><h1 id="MCS结构体系"><a href="#MCS结构体系" class="headerlink" title="MCS结构体系"></a>MCS结构体系</h1><p><a href="https://imgchr.com/i/8NIoOH"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NIoOH.png" alt="8NIoOH.png"></a></p><h1 id="面向切面编程"><a href="#面向切面编程" class="headerlink" title="面向切面编程"></a>面向切面编程</h1><p>简称AOP（Aspect Oriented Programming）。AOP的主要实现目的是针对业务处理过程中的切面进行提取，它所面对的是处理过程中的某个步骤或阶段，以获得逻辑过程中各部分之间低耦合的隔离效果。</p><h1 id="中间件的可切入点"><a href="#中间件的可切入点" class="headerlink" title="中间件的可切入点"></a>中间件的可切入点</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1NjpFI.png" alt="1NjpFI.png"></p><h1 id="切入函数"><a href="#切入函数" class="headerlink" title="切入函数"></a>切入函数</h1><ul><li><code>__init__:</code>没有参数，服务器响应第一个请求的时候自动调用，用户确定是否启用该中间件</li><li><code>process_request(self,request):</code>在执行视图前被调用，每个请求上都会调用，不主动进行返回或返回HttpResponse对象</li><li><code>process_view(self,request,view_func,view_args,view_kwargs)：</code>调用视图之前执行，每个请求都会调用，不主动进行返回或返回HttpResponse对象</li><li><code>process_template_response(self,request,response):</code>在视图刚好执行完后进行调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</li><li><code>process_response(self,request,response):</code>所有响应返回浏览器之前调用，每个请求都会调用，不主动进行返回或返回HttpResponse对象</li></ul><h1 id="自定义中间件"><a href="#自定义中间件" class="headerlink" title="自定义中间件"></a>自定义中间件</h1><p><code>process_exception(self,request,exception):</code>当视图抛出异常时调用，不主动进行返回或返回HttpResponse对象</p><h2 id="自定义中间件流程"><a href="#自定义中间件流程" class="headerlink" title="自定义中间件流程"></a>自定义中间件流程</h2><ol><li><p>在工程目录下创建middleware目录</p></li><li><p>目录中创建一个python文件</p></li><li><p>在python文件中导入中间件的基类</p><p><code> from django.utils.deprecation import MiddlewareMixin</code></p></li><li><p>在类中根据功能需求，创建切入需求类，重写切入点方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LearnAOP</span>(<span class="params">MiddlewareMixin</span>):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">process_request</span>(<span class="params">self,request</span>):</span></span><br><span class="line">print(<span class="string">&#x27;request的路径&#x27;</span>,request.GET.path)</span><br></pre></td></tr></table></figure></li><li><p>启用中间件，在settings中进行配置，MIDDLEWARE中添加</p><p><code>middleware.文件名.类名</code></p></li></ol><p><strong>注意：</strong>在django2.2官方推荐的文档里，一般这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Md1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response</span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="comment"># 在这里编写视图和后面的中间件被调用之前需要执行的代码</span></span><br><span class="line">        <span class="comment"># 这里其实就是旧的process_request()方法的代码</span></span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        <span class="comment"># 在这里编写视图调用后需要执行的代码</span></span><br><span class="line">        <span class="comment"># 这里其实就是旧的process_response()方法的代码</span></span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_view</span>(<span class="params">self, request, view_func, view_args, view_kwargs</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Md1在执行%s视图前&quot;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_exception</span>(<span class="params">self,request,exception</span>):</span></span><br><span class="line">        print(<span class="string">&quot;Md1处理视图异常&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="实例1-ip拦截"><a href="#实例1-ip拦截" class="headerlink" title="实例1 ip拦截"></a>实例1 ip拦截</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BlackListMiddleware</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response</span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        <span class="keyword">if</span> request.META[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] <span class="keyword">in</span> <span class="built_in">getattr</span>(settings, <span class="string">&quot;BLACKLIST&quot;</span>, []):</span><br><span class="line">            <span class="keyword">return</span> HttpResponseForbidden(<span class="string">&#x27;&lt;h1&gt;该IP地址被限制访问！&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">        <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h2 id="实例2-频率反爬"><a href="#实例2-频率反爬" class="headerlink" title="实例2 频率反爬"></a>实例2 频率反爬</h2><p><a href="https://imgchr.com/i/8NoFkq"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NoFkq.png" alt="8NoFkq.png"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Md1</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, get_response</span>):</span></span><br><span class="line">        self.get_response = get_response</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self, request</span>):</span></span><br><span class="line">        black_list = cache.get(<span class="string">&#x27;black&#x27;</span>,[])</span><br><span class="line">        <span class="keyword">if</span> ip <span class="keyword">in</span> black <span class="built_in">list</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;黑名单用户，凉凉&quot;</span>)</span><br><span class="line">        requests = cache.get(ip, [])</span><br><span class="line">        <span class="keyword">while</span> requests <span class="keyword">and</span> time.time().requests[<span class="number">-1</span>] &gt; <span class="number">60</span>:</span><br><span class="line">            requests.pop()</span><br><span class="line">        requests.insert(<span class="number">0</span>，time.time())</span><br><span class="line">        cache.<span class="built_in">set</span>(ip, requests, timeout=<span class="number">60</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(requests) &gt; <span class="number">30</span>:</span><br><span class="line">            black_list.append(ip)</span><br><span class="line">            cache.<span class="built_in">set</span>(<span class="string">&#x27;black&#x27;</span>, black <span class="built_in">list</span>, timeout=<span class="number">60</span>*<span class="number">60</span>*<span class="number">24</span>)</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(<span class="string">&quot;小爬虫小黑屋里呆着吧&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(requests) &gt; <span class="number">10</span>:</span><br><span class="line">            <span class="keyword">return</span> HttpResponse(<span class="string">&quot;请求次数过于频繁，小爬虫回家睡觉吧&quot;</span>)</span><br><span class="line">        response = self.get_response(request)</span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h1 id="CSRF豁免"><a href="#CSRF豁免" class="headerlink" title="CSRF豁免"></a>CSRF豁免</h1><p>在views函数前加装饰器<code>@csrf_exempt</code></p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8N5kbn.png" alt="8N5kbn.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-08-DjangoCache</title>
      <link href="2020/03/17/Django-08-DjangoCache/"/>
      <url>2020/03/17/Django-08-DjangoCache/</url>
      
        <content type="html"><![CDATA[<h1 id="缓存框架的核心目标"><a href="#缓存框架的核心目标" class="headerlink" title="缓存框架的核心目标"></a>缓存框架的核心目标</h1><ul><li>较少的代码<ul><li>缓存应该尽可能快</li><li>因此围绕缓存后端的所有框架代码应该保持在绝对最小值，特别是对于获取操作</li></ul></li><li>一致性<ul><li>缓存API应该是提供跨越不同缓存后端的一致接口</li></ul></li><li>可扩展性<ul><li>基于开发人员的需求，缓存API应该可以在应用程序级别扩展</li></ul></li></ul><h1 id="缓存"><a href="#缓存" class="headerlink" title="缓存"></a>缓存</h1><ul><li>django内置了缓存框架，并提供了几种常用的缓存<ul><li>基于Memcached缓存</li><li>使用数据库进行缓存</li><li>使用文件系统进行缓存</li><li>使用本地内存进行缓存</li><li>提供缓存扩展接口</li></ul></li></ul><h2 id="缓存配置"><a href="#缓存配置" class="headerlink" title="缓存配置"></a>缓存配置</h2><ol><li><p>创建缓存表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createcachetable [table_name]</span><br></pre></td></tr></table></figure></li><li><p>缓存配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CACHES &#x3D; &#123;</span><br><span class="line">    &#39;default&#39;: &#123;</span><br><span class="line">        &#39;BACKEND&#39;: &#39;django.core.cache.backends.db.DatabaseCache&#39;,</span><br><span class="line">        &#39;LOCATION&#39;: &#39;my_cache_table&#39;,</span><br><span class="line">        &#39;TIMEOUT&#39;: &#39;60&#39;,</span><br><span class="line">        &#39;OPTIONS&#39;: &#123;</span><br><span class="line">            &#39;MAX_ENTRIES&#39;: &#39;300&#39;,</span><br><span class="line">        &#125;,</span><br><span class="line">        &#39;KEY_PREFIX&#39;: &#39;rock&#39;,</span><br><span class="line">        &#39;VERSION&#39;: &#39;1&#39;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="缓存使用"><a href="#缓存使用" class="headerlink" title="缓存使用"></a>缓存使用</h2><ul><li>在视图中使用（使用最多的场景）</li><li>@cache_page()（函数装饰器）例如：@cache_page(60, cache=’redis_backend’)<ul><li>time 秒 60*5 缓存五分钟</li><li>cache 缓存配置, 默认default，</li><li>key_prefix 前置字符串</li></ul></li></ul><h2 id="缓存底层"><a href="#缓存底层" class="headerlink" title="缓存底层"></a>缓存底层</h2><ul><li><p>获取cache</p><ul><li><pre><code>from django.core.cache import cachescache = caches[&#39;cache_name&#39;]<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 获取cache</span><br><span class="line"></span><br><span class="line">  - &#96;&#96;&#96;</span><br><span class="line">    from django.core.cache import cache</span><br></pre></td></tr></table></figure></code></pre></li></ul></li><li><p>缓存操作</p><ul><li>cache.set<ul><li>key</li><li>value</li><li>timeout</li></ul></li><li>get</li><li>add</li><li>get_or_set</li><li>get_many</li><li>set_many</li><li>delete</li><li>delete_many</li><li>clear</li><li>incr 增加<ul><li>incr(key, value) key对应的值上添加 value</li></ul></li><li>decr 减少<ul><li>decr(key, value) key对应的值上减少value</li><li>如果value不写，默认变更为1</li></ul></li></ul></li></ul><hr><p><a href="https://imgchr.com/i/8No1tx"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8No1tx.png" alt="8No1tx.png"></a></p><h1 id="使用Redis做缓存"><a href="#使用Redis做缓存" class="headerlink" title="使用Redis做缓存"></a>使用Redis做缓存</h1><ul><li><p>常见的有两个实现</p><ul><li>django-redis<ul><li><a href="http://django-redis-chs.readthedocs.io/zh_CN/latest/#django">http://django-redis-chs.readthedocs.io/zh_CN/latest/#django</a></li></ul></li><li>django-redis-cache<ul><li>·<a href="https://pypi.python.org/pypi/django-redis-cache/">https://pypi.python.org/pypi/django-redis-cache/</a></li></ul></li></ul></li><li><p>配置和内置的缓存配置基本一致</p><ul><li><pre><code>CACHES = &#123;    &quot;default&quot;: &#123;        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,        &quot;LOCATION&quot;: &quot;redis://127.0.0.1:6379/1&quot;,        &quot;OPTIONS&quot;: &#123;            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,        &#125;    &#125;&#125;</code></pre></li></ul></li><li><p>用法和内置缓存使用一样</p></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><a href="https://imgchr.com/i/8N4C01"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8N4C01.png" alt="8N4C01.png"></a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-07-拓展-01</title>
      <link href="2020/03/17/Django-07-%E6%8B%93%E5%B1%95-01/"/>
      <url>2020/03/17/Django-07-%E6%8B%93%E5%B1%95-01/</url>
      
        <content type="html"><![CDATA[<h1 id="静态文件配置"><a href="#静态文件配置" class="headerlink" title="静态文件配置"></a>静态文件配置</h1><p>在settings.py中最底下有一个叫做static的文件夹，主要用来加载一些模板中用到的资源，提供给全局使用</p><p>这个静态文件主要用来配置CSS,HTML,图片,字体文件等 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line">STATICFILES_DIRS = [</span><br><span class="line">  os.path.join(BASE_DIR,<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>之后在模板中，首先加载静态文件，之后调用静态，就不用写绝对全路径了</p><p>模板中的声明</p><p><code>&#123; % load static % &#125;</code> 或<code>&#123; % load staticfiles % &#125;</code></p><p>在引用资源的时候使用</p><p><code>&#123; % static &#39;xxx&#39; % &#125;</code>  xxx 就是相对于STATICFILES_DIRS的一个位置</p><h1 id="图片（文件）上传"><a href="#图片（文件）上传" class="headerlink" title="图片（文件）上传"></a>图片（文件）上传</h1><p>文件数据存储在request.FILES属性中</p><p>form表单上传文件需要添加<code>enctype=&#39;multipart/form-data&#39;</code></p><p>文件上传必须使用POST请求方式</p><p>存储:</p><p>在static文件夹下创建uploadefiles用与存储接收上传的文件</p><p>在settings中配置，<code>MEDIA_ROOT=os.path.join(BASE_DIR,r&#39;static/uploadefiles&#39;)</code></p><p>在开发中通常是存储的时候，我们要存储到关联用户的表中</p><h2 id="上传示例代码"><a href="#上传示例代码" class="headerlink" title="上传示例代码"></a>上传示例代码</h2><p>在模板文件中</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">action</span>=<span class="string">&#x27;xxx&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span></span><br><span class="line">&#123;% csrf_token %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;icon&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>  <span class="attr">value</span>=<span class="string">&#x27;上传&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在view函数中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">savefIcon</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span></span><br><span class="line">f = request.FILES[<span class="string">&#x27;icon&#x27;</span>]</span><br><span class="line">filePath = os.path.join(settings.MEDIA_ROOT,f.name)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filePath,<span class="string">&#x27;wb) as fp:</span></span><br><span class="line"><span class="string">for part in f.chunks():</span></span><br><span class="line"><span class="string">fp.write(part)</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong>：ImageField中的upload_to属性指向的是相对路径，可以添加年月日 等，相对于MEDIA_ROOT媒体根目录，所以也可以在setting.py中建立MEDIA_ROOT=’xxx’</p><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NhYe1.png" alt="8NhYe1.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-06-DjangoView-02</title>
      <link href="2020/02/02/Django-06-DjangoView-02/"/>
      <url>2020/02/02/Django-06-DjangoView-02/</url>
      
        <content type="html"><![CDATA[<h1 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest"></a>HttpRequest</h1><p>服务器在接收到Http请求后，会根据报文创建HttpRequest对象<br>视图中的第一一个 参数就是HttpRequest对象<br>Django框架会进行自己的包装，之后传递给视图</p><h2 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h2><ul><li>path                  请求的完整路径</li><li>method            请求的方法，常用GET,POST</li><li>encoding          编码方式，常用utf-8</li><li>GET                   类似字典的参数，但是一个key可以有多个值，包含了get的所有参数<ul><li>​                   通常有get()获取一个，getlist()获取多个</li></ul></li><li>POST                 类似字典的参数，包含了post所有参数</li><li>FILES                 类似字典的参数，包含了上传的文件</li><li>COOKIES          字典，包含了所有COOKIE</li><li>session             类似字典，表示会话</li><li>META                 各种客户端元信息</li></ul><h2 id="方法-部分"><a href="#方法-部分" class="headerlink" title="方法(部分)"></a>方法(部分)</h2><ul><li>is_ ajax()          判断是否是ajax()，通常用在移动端和js中</li></ul><h1 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h1><p>服务器返回给客户端的数据</p><p>HttpResponse由程序猿自己创建</p><ul><li><p>不使用模板，直接HttpResponse()</p></li><li><p>调用模板，进行渲染</p><ul><li><p>先load模板，再渲染</p></li><li><p>直接使用render一步到位</p><ul><li><code>render(request,template_ name[,context])</code><ul><li>request                            请求体对象</li><li>template_ name             模板路径</li><li>context                             字典参数，用来填坑</li></ul></li></ul></li></ul></li></ul><h2 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h2><ul><li>content                             返回的内容</li><li>charset                             编码格式</li><li>status. code                     响应状态码(200,3xx,404,5xx)</li><li>content-type                    MIME类型   百科请参照<a href="https://baike.baidu.com/item/MIME/2900607?fr=aladdin">https://baike.baidu.com/item/MIME/2900607?fr=aladdin</a> </li></ul><h2 id="方法-部分-1"><a href="#方法-部分-1" class="headerlink" title="方法(部分)"></a>方法(部分)</h2><ul><li>init                                                  初始化内容</li><li>write(xxx)                                      直接写出文本</li><li>flush()冲刷缓冲区</li><li>set_cookie(key,value= xxx ,max age=None,exprise=None)</li><li>delete cookie(key)                       删除cookie, 上面那个是设置</li></ul><h1 id="HttpResponse子类"><a href="#HttpResponse子类" class="headerlink" title="HttpResponse子类"></a>HttpResponse子类</h1><h2 id="HttpResponseRedirect"><a href="#HttpResponseRedirect" class="headerlink" title="HttpResponseRedirect"></a>HttpResponseRedirect</h2><p>也可以通过导包简写成redirect</p><p>响应重定向:可以实现服务器内部跳转<br><code>return Http.ResponseRedict(/grade/2017&#39;)</code></p><p>使用的时候推荐使用反向解析</p><h2 id="JsonResponse"><a href="#JsonResponse" class="headerlink" title="JsonResponse"></a>JsonResponse</h2><p>返回Json数据的请求，通常用在异步请求上</p><p>​              JsonResponse. ( dict )<br>也可以使用_ init (self.data) 设置数据</p><p>Content-type自动设置为application/json</p><h2 id="其他（部分）"><a href="#其他（部分）" class="headerlink" title="其他（部分）"></a>其他（部分）</h2><ul><li>HttpResponsePermanentRedirect<ul><li>重定向，永久性</li><li>301</li></ul></li><li>HttpResponseBadRequest<ul><li>400</li></ul></li><li>HttpResponseNotFound<ul><li>404</li></ul></li><li>HttpResponseForbidden<ul><li>403</li></ul></li><li>HttpResponseNotAllowed<ul><li>405</li></ul></li><li>HttpResponseServerError<ul><li>500</li></ul></li><li>Http404<ul><li>Exception</li><li>raise 主动抛异常出来</li></ul></li></ul><h1 id="会话技术"><a href="#会话技术" class="headerlink" title="会话技术"></a>会话技术</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li>出现场景<ul><li> 服务器如何识别客户端</li><li> Http在Web开发中基本都是短连接</li></ul></li><li>请求生命周期<ul><li>从Request开始</li><li>到Response结束</li></ul></li><li>种类<ul><li>Cookie<ul><li>客户端会话技术<ul><li>数据存储在客户端</li></ul></li><li>键值对存储</li><li>支持过期时间</li><li>默认Cookie会自动携带，本网站所有Cookie</li><li>Cookie不能跨域名，跨网站</li><li>通过HttpResponse</li><li>Cookie默认不支持中文</li><li>可以加盐<ul><li>加密</li><li>获取的时候需要解密</li></ul></li></ul></li><li>Session<ul><li>服务端会话技术</li><li>数据存储在服务器中</li><li>默认Session存储在内存中</li><li>Django中默认会把Session持久化到数据库中</li><li>Django中Session的默认过期时间是14天</li><li>主键是字符串</li><li>数据是使用了数据安全<ul><li>使用的base64</li><li>在前部添加了一个混淆串</li></ul></li><li>Session依赖于Cookie</li></ul></li><li>Token<ul><li>服务端会话技术</li><li>自定义的Session</li><li>如果Web页面开发中，使用起来和Session基本一致</li><li>如果使用在移动端或客户端开发中，通常以Json形式传输，需要移动端自己存储Token，需要获取Token关联数据的时候，主动传递Token</li></ul></li><li>Cookie和Session,Token对比<ul><li>Cookie使用更简洁，服务器压力更小，数据不是很安全</li><li>Session服务器要维护Session，相对安全</li><li>Token拥有Session的所有优点，自己维护略微麻烦，支持更多的终端</li></ul></li></ul></li></ul><h2 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h2><p>浏览器端的会话技术</p><p>cookie本身由浏览器生成，通过Response将cookie写到浏览器上，下一次访问，浏览器会根据不同的规则携带cookie过来</p><p> <code>response.set_cookie(key,value[,max_age=None,exprise=None])</code><br> <code>request.GET.get(key,defaultvalue)</code></p><p>cookie不能跨浏览器</p><p><code>response.set_cookie(key,value,max_age=None,exprise=None)</code></p><p><code>max_age</code>: 整数，指定cookie过期时间</p><p><code>expries</code>  :  整数，指定过期时间，还支持是一个datetime或 timedelta，可以指定一个具体日期时间</p><p><code>max_age</code>和<code>expries</code>两个选一个指定</p><p>过期时间的几个关键时间</p><p>max_age 设置为 0 浏览器关闭失效</p><p>设置为None永不过期</p><p>expires=timedelta(days=10) 10天后过期</p><p><img src="https://s1.ax1x.com/2020/03/17/8NTTII.png" alt="8NTTII.png"></p><h2 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h2><p>服务器端会话技术,依赖于cookie</p><p>django中启用SESSION</p><p>settings中</p><ul><li><p>INSTALLED_APPS：</p><p><code> &#39;django.contrib.sessions&#39;</code></p></li><li><p>MIDDLEWARE:</p><p><code> &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;</code></p></li></ul><p>每个HttpRequest对象都有一个session属性，也是一个类字典对象</p><p>常用操作</p><ul><li><p><code>get(key,default=None)</code>根据键获取会话的值</p></li><li><p><code> clear()</code> 清除所有会话</p></li><li><p><code> flush()</code> 删除当前的会话数据并删除会话的cookie</p></li><li><p><code>del request.session[&#39;xxx&#39;]</code>删除会话</p></li><li><p><code> session.session_key</code>获取session的key </p><p>设置数据</p><p><code>request.session[‘user’] = username</code></p><p>数据存储到数据库中会进行编码使用的是Base64</p></li></ul><p><a href="https://imgchr.com/i/8NTvLQ"><img src="https://s1.ax1x.com/2020/03/17/8NTvLQ.png" alt="8NTvLQ.png"></a></p><h1 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h1><ul><li>防跨站攻击</li><li>防止恶意注册，确保客户端是我们自己的客户端</li><li>使用了cookie中csrftoken 进行验证，传输</li><li>服务器发送给客户端，客户端将cookie获取过来，还要进行 编码转换 （数据安全）</li><li>添加<code>&#123; %   csrf_token   % &#125;</code>即可</li><li>如何实现的<ul><li>在我们 存在csrf_token 标签的页面中，响应会自动设置一个cookie， csrftoken</li><li>当我们提交的时候，会自动验证csrftoken</li><li>验证通过，正常执行以后流程，验证不通过，直接403</li></ul></li></ul><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><ul><li>编码解码<ul><li>Base64 </li><li>urlencode</li></ul></li><li>摘要算法，指纹算法，杂凑算法<ul><li>MD5，SHA<ul><li>MD5 默认是128的二进制</li><li>32位的十六进制</li><li>32位的Unicode</li></ul></li><li>单向不可逆的</li><li>不管输出多长，输出都是固定长度</li><li>只要输入有任意的变更，输出都会发生巨大的变化</li></ul></li><li>加密<ul><li>对称加密<ul><li>一把钥匙</li><li>DES，AES</li><li>加密解密效率高</li><li>钥匙一旦丢失，所有数据就全玩完了</li></ul></li><li>非对称加密<ul><li>两把钥匙，成对的</li><li>公钥和私钥</li><li>RSA，PGP</li><li>安全性最高</li><li>算法复杂，需要时间长</li><li>支付宝，微信都是RSA</li></ul></li></ul></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p>![1YVf29 ](<a href="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1YVf29">https://gitee.com/Kinmfer/BlogImages/raw/master/img/1YVf29</a> .png)</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-03-DjangoModel-02</title>
      <link href="2020/02/01/Django-03-DjangoModel-02/"/>
      <url>2020/02/01/Django-03-DjangoModel-02/</url>
      
        <content type="html"><![CDATA[<h1 id="如何实现自定义的迁移"><a href="#如何实现自定义的迁移" class="headerlink" title="如何实现自定义的迁移"></a>如何实现自定义的迁移</h1><ul><li>分两步实现<ul><li>生成迁移文件</li><li>执行迁移文件</li></ul></li><li>迁移文件的生成<ul><li>根据models文件生成对应的迁移文件</li><li>根据models和已有迁移文件差别 生成新的迁移文件</li></ul></li><li>执行迁移文件<ul><li>先去迁移记录查找，哪些文件未迁移过<ul><li>app_label + 迁移文件名字</li></ul></li><li>执行未迁移的文件</li><li>执行完毕，记录执行过的迁移文件</li></ul></li><li>重新迁移<ul><li>删除迁移文件</li><li>删除迁移文件产生的表</li><li>删除迁移记录</li></ul></li></ul><h1 id="模型的对应关系"><a href="#模型的对应关系" class="headerlink" title="模型的对应关系"></a>模型的对应关系</h1><ul><li>1   :  1            一对一</li><li>1   ：N          一对多</li><li>M  ：N          多对多</li></ul><p>常见的几种数据关系，django都提供了很好的支持</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul><li><p>1:1</p><ul><li>应用场景<ul><li>用于复杂表的拆分</li><li>扩展新功能</li></ul></li><li>Django中 OneToOneField<ul><li>使用的时候，关系声明还是有细微差别的</li></ul></li><li>实现<ul><li>使用外键实现的</li><li>对外键添加了唯一约束</li></ul></li><li>数据删除<ul><li>级联表<ul><li>主表</li><li>从表</li><li>谁声明关系谁就是从表</li><li>在开发中如何确认主从<ul><li>当系统遭遇不可避免毁灭时，只能保留一张表，这个表就是你的主表</li></ul></li></ul></li><li>默认特性（CASECADE）<ul><li>从表数据删除，主表不受影响</li><li>主表数据删除，从表数据直接删除</li></ul></li><li>PROTECT 受保护<ul><li>开发中为了防止误操作，我们通常会设置为此模式</li><li>主表如果存在级联数据，删除动作受保护，不能成功</li><li>主表不存在级联数据，可以删除成功</li></ul></li><li>SET<ul><li>SET_NULL<ul><li>允许为NULL</li></ul></li><li>SET_DEFAULT<ul><li>存在默认值</li></ul></li><li>SET()<ul><li>指定值</li></ul></li></ul></li><li>级联数据获取<ul><li>主获取从 隐性属性  默认就是级联模型的名字</li><li>从获取主，显性属性，就是属性的名字</li></ul></li></ul></li></ul></li><li><p>1:M</p><ul><li>ForeignKey</li><li>主从获取<ul><li>主获取从  隐性属性  级联模型_set<ul><li>student_set   Manager的子类<ul><li>all</li><li>filter</li><li>exclude</li><li>Manager上能使用的函数都能使用</li></ul></li></ul></li><li>从获取主<ul><li>显性属性</li></ul></li></ul></li></ul></li><li><p>M:N</p><ul><li><p>实际上最复杂</p></li><li><p>开发中很少直接使用多对多属性，而是自己维护多对多的关系</p></li><li><p>产生表的时候会产生单独的关系表</p><ul><li>关系表中存储关联表的主键，通过多个外键实现的</li><li>多个外键值不能同时相等</li></ul></li><li><p>级联数据获取</p><ul><li>从获取主<ul><li>使用属性，属性是一个Manager子类</li></ul></li><li>主获取从<ul><li>隐性属性<ul><li>也是Manager子类，操作和从操作主完全一样</li></ul></li></ul></li></ul></li><li><p>级联数据</p><ul><li>add</li><li>remove</li><li>clear</li><li>set</li></ul></li></ul></li><li><p>ManyRelatedManager</p><ul><li>函数中定义的类</li><li>并且父类是一个参数</li><li>动态创建</li></ul></li></ul><h2 id="1-：-1"><a href="#1-：-1" class="headerlink" title="1 ： 1"></a>1 ： 1</h2><p>使用<code>models.OneToOneField()</code>进行关联</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    person = models.OneToOneField(Person)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>绑定卡与人的一对一关系，默认情况下，当人被删除的情况下，与人绑定的卡就也删除了，这个可以使用on_delete进行调整</p><ul><li>on_delete <ul><li>models.CASCADE                      默认值</li><li>models.PROTECT                      保护模式</li><li>models.SET_NULL                     置空模式</li><li>models.SET_DEFAULT              置默认值</li><li>models.SET()                              删除的时候重新动态指向一个实体</li></ul></li></ul><p>访问对应元素  person.pcard</p><h2 id="1-N-和-M-：N"><a href="#1-N-和-M-：N" class="headerlink" title="1  : N 和 M ：N"></a>1  : N 和 M ：N</h2><h3 id="1-N"><a href="#1-N" class="headerlink" title="1 : N"></a>1 : N</h3><p>使用models.ForeignKey关联</p><p>删除时同 1  ： 1</p><p>获取对应元素 grade.student_set </p><h3 id="M-N"><a href="#M-N" class="headerlink" title="M : N"></a>M : N</h3><p>使用models.</p><p>删除会删除指定对象和关系表中的关系映射</p><p>获取对应元素Goods和Buyer</p><p><code>goods. buyer_set</code></p><p><code>buyer. bgoods</code></p><p>买家添加<code>buyer.bgoods.add</code>  买家清空<code>buyer.bgoods.clear</code></p><p>买家移除<code>buyer.bgoods.remove </code></p><h1 id="Models的面向对象"><a href="#Models的面向对象" class="headerlink" title="Models的面向对象"></a>Models的面向对象</h1><p>django中的数据库模块提供了一个非常不错的功能，就是支持models的面向对象，可以在models中添加Meta，指定是否抽象，然后进行继承。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">xxx</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">abstract = <span class="literal">True</span>/<span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>(<span class="params">Animal</span>):</span></span><br><span class="line">xxx</span><br></pre></td></tr></table></figure><ul><li>默认继承是会将通用字段放到父表中，特定字段放在自己的表中，中间使用外键连接<ul><li>关系型数据库关系越复杂，效率越低，查询越慢</li><li>父类表中也会存储过多的数据</li></ul></li><li>使用元信息来解决这个问题<ul><li>使模型抽象化</li><li>抽象的模型就不会在数据库中产生映射了</li><li>子模型映射出来的表直接包含父模型的字段</li></ul></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1YVaCQ.png" alt="1YVaCQ.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-05-DjangoView-01</title>
      <link href="2020/01/30/Django-05-DjangoView-01/"/>
      <url>2020/01/30/Django-05-DjangoView-01/</url>
      
        <content type="html"><![CDATA[<h1 id="视图概述"><a href="#视图概述" class="headerlink" title="视图概述"></a>视图概述</h1><ul><li><p>Django中的视图主要用来接受Web请求，并做出响应。</p></li><li><p>视图的本质就是一个Python中的函数</p></li><li><p>视图的响应分为两大类</p><ul><li>以json数据形势返回</li><li>以网页的形势返回<ul><li>重定向到另一个网页</li><li>错误视图(40X,50X)</li></ul></li></ul></li><li><p>视图响应过程:浏览器输入-&gt; django获取信息并去掉ip:端口，剩下路<br>径-&gt; urls路由匹配-&gt;视图响应-&gt;回馈到浏览器</p></li></ul><h1 id="url配置"><a href="#url配置" class="headerlink" title="url配置"></a>url配置</h1><h2 id="配置流程"><a href="#配置流程" class="headerlink" title="配置流程"></a>配置流程</h2><p>setting中指定根级url配置文件，对应的属性ROOT_ URLCONF</p><p>urlpatterns: 一个url实例的列表，全在根配置搞定</p><p>内部由url组成(正则匹配路径)<br>path (‘Learn/‘,views.learn)</p><p>即</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    path(正则表达式, views视图函数，参数，别名),</span><br><span class="line">]</span><br><span class="line">参数说明：</span><br><span class="line">1、一个正则表达式字符串</span><br><span class="line">2、一个可调用对象，通常为一个视图函数或一个指定视图函数路径的字符串</span><br><span class="line">3、可选的要传递给视图函数的默认参数（字典形式）</span><br><span class="line">4、一个可选的name参数(别名)</span><br></pre></td></tr></table></figure><p>导入其它url配置:<br>在应用中 创建urls.py文件,编写匹配规则，在工程urls.py中进行</p><p>导入包含</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line">urlpatterns = [ path(<span class="string">&#x27;xxx/&#x27;</span>) ,include(<span class="string">&#x27;Appurls&#x27;</span>)]</span><br></pre></td></tr></table></figure><h1 id="获取url路径上的参数"><a href="#获取url路径上的参数" class="headerlink" title="获取url路径上的参数"></a>获取url路径上的参数</h1><p>下面是一个简单的URLconf例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&#x27;</span>, views.month_archive),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&lt;int:month&gt;/&lt;slug:slug&gt;/&#x27;</span>, views.article_detail),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="url匹配注意事项"><a href="#url匹配注意事项" class="headerlink" title="url匹配注意事项"></a>url匹配注意事项</h2><ol><li>要捕获一段url中的值，需要使用尖括号，而不是之前的圆括号；</li><li>可以转换捕获到的值为指定类型，比如例子中的。默认情况下，捕获到的结果保存为字符串类型，不包含**<code>/</code>**这个特殊字符；</li><li>规则的前面不需要添加**<code>/</code><strong>，因为默认情况下，每个url都带一个最前面的</strong><code>/</code>**。比如：articles, 不能写成 /articles。</li></ol><h2 id="匹配例子"><a href="#匹配例子" class="headerlink" title="匹配例子"></a>匹配例子</h2><p>1、/articles/2005/03/ 将匹配第三条，并调用views.month_archive(request, year=2005, month=3)；</p><p>2、/articles/2003/匹配第一条，并调用views.special_case_2003(request)；</p><p>3、/articles/2003将一条都匹配不上，因为它最后少了一个斜杠，而列表中的所有模式中都以斜杠结尾；</p><p>4、/articles/2003/03/building-a-django-site/ 将匹配最后一个，并调用views.article_detail(request, year=2003, month=3, slug=”building-a-django-site”)</p><h2 id="path转换器"><a href="#path转换器" class="headerlink" title="path转换器"></a>path转换器</h2><p>Django默认情况下内置下面的路径转换器：</p><p>1、str：匹配任何非空字符串，但不含斜杠/，如果你没有专门指定转换器，那么这个是默认使用的；<br>2、int：匹配0和正整数，返回一个int类型<br>3、slug：可理解为注释、后缀、附属等概念，是url拖在最后的一部分解释性字符。该转换器匹配任何ASCII字符以及连接符和下划线，比如’ building-your-1st-django-site‘；<br>4、uuid：匹配一个uuid格式的对象。为了防止冲突，规定必须使用破折号，所有字母必须小写，例如’075194d3-6885-417e-a8a8-6c931e272f00‘ 。返回一个UUID对象；<br>5、path：匹配任何非空字符串，重点是可以包含路径分隔符’/‘。这个转换器可以帮助你匹配整个url而不是一段一段的url字符串。</p><h2 id="注册自定义路径转换器"><a href="#注册自定义路径转换器" class="headerlink" title="注册自定义路径转换器"></a>注册自定义路径转换器</h2><p>对于更复杂的匹配需求，您可以定义自己的路径转换器。自定义，就是单独写一个类，它包含下面的内容：<br>1、类属性regex：一个字符串形式的正则表达式属性；<br>2、to_python(self, value) 方法：一个用来将匹配到的字符串转换为你想要的那个数据类型，并传递给视图函数。如果不能转换给定的值，则会引发ValueError。</p><p>3、to_url(self, value)方法：将Python数据类型转换为一段url的方法，上面方法的反向操作。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FourDigitYearConverter</span>:</span></span><br><span class="line">    regex = <span class="string">&#x27;[0-9]&#123;4&#125;&#x27;</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_python</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">int</span>(value)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">to_url</span>(<span class="params">self, value</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;%04d&#x27;</span> % value</span><br></pre></td></tr></table></figure><p>在URLconf中注册自定义转换器类，并使用它:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, register_converter</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> converters, </span><br><span class="line">viewsregister_converter(converters.FourDigitYearConverter, <span class="string">&#x27;yyyy&#x27;</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;yyyy:year&gt;/&#x27;</span>, views.year_archive),</span><br><span class="line">    ...</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h2 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h2><p>如果路径和转换器语法不足以定义URL模式，也可以使用正则表达式。这时我们就需要使用re_path()而不是path()。</p><p>在Python正则表达式中，命名正则表达式组的语法是 (?P<name>pattern)，其中name是组的名称，pattern是需要匹配的规则。</p><p>前面的URLconf示例，如果使用正则表达式重写，是这样子的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, re_path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;articles/2003/&#x27;</span>, views.special_case_2003),</span><br><span class="line">    <span class="comment">#表示articles/2003/这个路径映射views模块的special_case_2003函数</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/$&#x27;</span>, views.year_archive),</span><br><span class="line">    <span class="comment">#表示匹配4个0-9的任意数字</span></span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/$&#x27;</span>, views.month_archive),</span><br><span class="line">    re_path(<span class="string">r&#x27;^articles/(?P&lt;year&gt;[0-9]&#123;4&#125;)/(?P&lt;month&gt;[0-9]&#123;2&#125;)/(?P&lt;slug&gt;[\w-]+)/$&#x27;</span>, views.article_detail),</span><br><span class="line">    ]</span><br><span class="line"><span class="comment">#注意:上面匹配都加了小括号，这些括号里面的值会当作参数传递到后面的视图函数中</span></span><br></pre></td></tr></table></figure><p>re_path与path()不同的主要在于两点：<br>1、year中匹配不到10000等非四位数字，这是正则表达式决定的<br>2、传递给视图的所有参数都是字符串类型。而不像path()方法中可以指定转换成某种类型。</p><h2 id="指定视图参数的默认值"><a href="#指定视图参数的默认值" class="headerlink" title="指定视图参数的默认值"></a>指定视图参数的默认值</h2><p>有一个方便的小技巧是指定视图参数的默认值。 下面是一个URLconf 和视图的示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URLconf</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, views.page),</span><br><span class="line">    path(<span class="string">&#x27;blog/page&lt;int:num&gt;/&#x27;</span>, views.page),</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># View (in blog/views.py)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page</span>(<span class="params">request, num=<span class="number">1</span></span>):</span></span><br><span class="line"><span class="comment"># Output the appropriate page of blog entries, according to num.</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>在上面的例子中，两个URL模式指向同一个视图views.page —— 但是第一个模式不会从URL 中捕获任何值。如果第一个模式匹配，page() 函数将使用num参数的默认值”1”。如果第二个模式匹配，page() 将使用正则表达式捕获的num 值。</p><h2 id="URLconf匹配请求URL中的哪些部分"><a href="#URLconf匹配请求URL中的哪些部分" class="headerlink" title="URLconf匹配请求URL中的哪些部分"></a>URLconf匹配请求URL中的哪些部分</h2><p>请求的URL被看做是一个普通的Python字符串，URLconf在其上查找并匹配。进行匹配时将不包括GET或POST请求方式的参数以及域名。<br>例如，在<a href="https://www.example.com/myapp/%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8CURLconf%E5%B0%86%E6%9F%A5%E6%89%BEmyapp/%E3%80%82">https://www.example.com/myapp/的请求中，URLconf将查找myapp/。</a><br>在<a href="https://www.example.com/myapp/?page=3%E7%9A%84%E8%AF%B7%E6%B1%82%E4%B8%AD%EF%BC%8CURLconf%E4%B9%9F%E5%B0%86%E6%9F%A5%E6%89%BEmyapp/%E3%80%82">https://www.example.com/myapp/?page=3的请求中，URLconf也将查找myapp/。</a><br>URLconf不检查使用何种HTTP请求方法，所有请求方法POST、GET、HEAD等都将路由到同一个URL的同一个视图。在视图中，才根据具体请求方法的不同，进行不同的处理。</p><h1 id="错误页面处理"><a href="#错误页面处理" class="headerlink" title="错误页面处理"></a>错误页面处理</h1><p>当Django找不到与请求匹配的URL时，或者当抛出一个异常时，将调用一个错误处理视图。错误视图包括400、403、404和500，分别表示请求错误、拒绝服务、页面不存在和服务器错误。它们分别位于：</p><ul><li>handler400 —— django.conf.urls.handler400。</li><li>handler403 —— django.conf.urls.handler403。</li><li>handler404 —— django.conf.urls.handler404。</li><li>handler500 —— django.conf.urls.handler500。</li></ul><p>这些值可以在根URLconf中设置。在其它app中的二级URLconf中设置这些变量无效。</p><p>Django有内置的HTML模版，用于返回错误页面给用户，但是这些403，404页面实在丑陋，通常我们都自定义错误页面。</p><p>首先，在根URLconf中额外增加下面的条目：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># urls.py</span></span><br><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> url</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    url(<span class="string">r&#x27;^blog/$&#x27;</span>, views.page),</span><br><span class="line">    url(<span class="string">r&#x27;^blog/page(?P&lt;num&gt;[0-9]+)/$&#x27;</span>, views.page),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 增加的条目</span></span><br><span class="line">handler400 = views.bad_request</span><br><span class="line">handler403 = views.permission_denied</span><br><span class="line">handler404 = views.page_not_found</span><br><span class="line">handler500 = views.page_error</span><br></pre></td></tr></table></figure><p>然后在，views.py文件中增加四个处理视图：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_not_found</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;404.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">page_error</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;500.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">permission_denied</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;403.html&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bad_request</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">&#x27;400.html&#x27;</span>)</span><br></pre></td></tr></table></figure><p>再根据自己的需求，在templates文件夹中创建404.html、400.html等四个页面文件，就可以了。</p><h1 id="urls分层模块化（路由分发）"><a href="#urls分层模块化（路由分发）" class="headerlink" title="urls分层模块化（路由分发）"></a>urls分层模块化（路由分发）</h1><p>通常，我们会在每个app里，各自创建一个urls.py路由模块，然后从根路由出发，将app所属的url请求，全部转发到相应的urls.py模块中。</p><p>例如，下面是Django网站本身的URLconf节选。 它包含许多其它URLconf：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">    path(<span class="string">&#x27;community/&#x27;</span>, include(<span class="string">&#x27;aggregator.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;contact/&#x27;</span>, include(<span class="string">&#x27;contact.urls&#x27;</span>)),</span><br><span class="line">    <span class="comment"># ... snip ...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>路由转发使用的是include()方法，需要提前导入，它的参数是转发目的地路径的字符串，路径以圆点分割。</p><p>注意，这个例子中的正则表达式没有包含$（字符串结束匹配符），但是包含一个末尾的斜杠。 每当Django 遇到<code>include()</code>（来自<code>django.conf.urls.include()</code>）时，它会去掉URL中匹配的部分并将剩下的字符串发送给include的URLconf做进一步处理，也就是转发到二级路由去。</p><p>另外一种转发其它URL模式的方式是使用一个url()实例的列表。 例如，下面的URLconf：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> apps.main <span class="keyword">import</span> views <span class="keyword">as</span> main_views</span><br><span class="line"><span class="keyword">from</span> credit <span class="keyword">import</span> views <span class="keyword">as</span> credit_views</span><br><span class="line">extra_patterns = [</span><br><span class="line">    path(<span class="string">&#x27;reports/&#x27;</span>, credit_views.report),</span><br><span class="line">    path(<span class="string">&#x27;reports/&lt;int:id&gt;/&#x27;</span>, credit_views.report),</span><br><span class="line">    path(<span class="string">&#x27;charge/&#x27;</span>, credit_views.charge),</span><br><span class="line">]</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, main_views.homepage),</span><br><span class="line">    path(<span class="string">&#x27;help/&#x27;</span>, include(<span class="string">&#x27;apps.help.urls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;credit/&#x27;</span>, include(extra_patterns)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在这个例子中， /credit/reports/ URL将被 credit.views.report() 这个Django 视图处理。<br>上面这种方法可以用来去除URLconf 中的冗余，其中某个模式前缀被重复使用。例如，下面这个例子:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/history/&#x27;</span>, views.history),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/edit/&#x27;</span>, views.edit),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/discuss/&#x27;</span>, views.discuss),</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/permissions/&#x27;</span>, views.permissions),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>我们可以改进它，通过只声明共同的路径前缀一次并将后面的部分分组转发:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;page_slug&gt;-&lt;page_id&gt;/&#x27;</span>, include([</span><br><span class="line">        path(<span class="string">&#x27;history/&#x27;</span>, views.history),</span><br><span class="line">        path(<span class="string">&#x27;edit/&#x27;</span>, views.edit),</span><br><span class="line">        path(<span class="string">&#x27;discuss/&#x27;</span>, views.discuss),</span><br><span class="line">        path(<span class="string">&#x27;permissions/&#x27;</span>, views.permissions),</span><br><span class="line">    ])),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="捕获参数"><a href="#捕获参数" class="headerlink" title="捕获参数"></a>捕获参数</h2><p>被转发的URLconf会收到来自父URLconf捕获的所有参数，看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># In settings/urls/main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&lt;username&gt;/blog/&#x27;</span>, include(<span class="string">&#x27;foo.urls.blog&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># In foo/urls/blog.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.blog.index),</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.blog.archive),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在上面的例子中，捕获的”username”变量将被传递给include()指向的URLconf，再进一步传递给对应的视图。</p><h1 id="嵌套参数"><a href="#嵌套参数" class="headerlink" title="嵌套参数"></a>嵌套参数</h1><p>正则表达式允许嵌套参数，Django将解析它们并传递给视图。当反查时，Django将尝试填满所有外围捕获的参数，并忽略嵌套捕获的参数。 考虑下面的URL模式，它带有一个可选的page参数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from django.urls import re_path</span><br><span class="line">urlpatterns &#x3D; [</span><br><span class="line">    re_path(r&#39;^blog&#x2F;(page-(\d+)&#x2F;)?$&#39;, blog_articles),   # bad</span><br><span class="line">    re_path(r&#39;^comments&#x2F;(?:page-(?P&lt;page_number&gt;\d+)&#x2F;)?$&#39;, comments),  # good]</span><br></pre></td></tr></table></figure><p>两个模式都使用嵌套的参数，其解析方式是：例如<code>blog/page-2/</code>将匹配<code>page-2/</code>并带有两个位置参数<code>blog_articles</code>和2。第二个comments的模式将匹配<code>page_number</code>并带有一个值为2的关键字参数<code>comments/page-2/</code>。这个例子中外围参数是一个不捕获的参数(?:…)。</p><p><code>blog_articles</code>视图需要最外层捕获的参数来反查，在这个例子中是comments或者没有参数，而<code>page-2/</code>可以不带参数或者用一个<code>page_number</code>值来反查。</p><h1 id="向视图传递额外的参数"><a href="#向视图传递额外的参数" class="headerlink" title="向视图传递额外的参数"></a>向视图传递额外的参数</h1><p>URLconfs具有一个钩子（hook），允许你传递一个Python字典作为额外的关键字参数给视图函数。</p><p>像这样：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&lt;int:year&gt;/&#x27;</span>, views.year_archive, &#123;<span class="string">&#x27;foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在上面的例子中，对于<code>/blog/2005/</code>请求，Django将调<code>用views.year_archive(request, year=&#39;2005&#39;, foo=&#39;bar&#39;)</code>。理论上，你可以在这个字典里传递任何你想要的传递的东西。但是要注意，URL模式捕获的命名关键字参数和在字典中传递的额外参数有可能具有相同的名称，这会发生冲突，要避免。</p><h1 id="传递额外的参数给include"><a href="#传递额外的参数给include" class="headerlink" title="传递额外的参数给include()"></a>传递额外的参数给include()</h1><p>类似上面，也可以传递额外的参数给include()。参数会传递给include指向的urlconf中的每一行。</p><p>例如，下面两种URLconf配置方式在功能上完全相同：</p><p>配置一：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, include(<span class="string">&#x27;inner&#x27;</span>), &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># inner.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.archive),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, views.about),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>配置二：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> mysite <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;blog/&#x27;</span>, include(<span class="string">&#x27;inner&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"><span class="comment"># inner.py</span></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;archive/&#x27;</span>, views.archive, &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">    path(<span class="string">&#x27;about/&#x27;</span>, views.about, &#123;<span class="string">&#x27;blog_id&#x27;</span>: <span class="number">3</span>&#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>注意，只有当你确定被include的URLconf中的每个视图都接收你传递给它们的额外的参数时才有意义，否则其中一个以上视图不接收该参数都将导致错误异常。</p><h1 id="url的反向解析"><a href="#url的反向解析" class="headerlink" title="url的反向解析"></a>url的反向解析</h1><p>在实际的Django项目中，经常需要获取某条URL，为生成的内容配置URL链接。</p><p>比如，我要在页面上展示一列文章列表，每个条目都是个超级链接，点击就进入该文章的详细页面。</p><p>现在我们的urlconf是这么配置的：<code>^post/(?P\d+)</code>。</p><p>在前端中，这就需要为HTML的标签的href属性提供一个诸如<code>http://www.xxx.com/post/3</code>的值。其中的域名部分，Django会帮你自动添加无须关心，我们关注的是<code>post/3</code>。</p><p>此时，一定不能硬编码URL为<code>post/3</code>，那样费时、不可伸缩，而且容易出错。试想，如果哪天，因为某种原因，需要将urlconf中的正则改成<code>^entry/(?P\d+)</code>，为了让链接正常工作，必须修改对应的herf属性值，于是你去项目里将所有的<code>post/3</code>都改成<code>entry/3</code>吗？显然这是不行的！</p><p>我们需要一种安全、可靠、自适应的机制，当修改URLconf中的代码后，无需在项目源码中大范围搜索、替换失效的硬编码URL。</p><p>为了解决这个问题，Django提供了一种解决方案，只需在URL中提供一个name参数，并赋值一个你自定义的、好记的、直观的字符串。</p><p>通过这个name参数，可以反向解析URL、反向URL匹配、反向URL查询或者简单的URL反查。</p><p>在需要解析URL的地方，对于不同层级，Django提供了不同的工具用于URL反查：</p><ul><li>在模板语言中：使用<code>url</code>模板标签。(也就是写前端网页时）</li><li>在Python代码中：使用<code>reverse()</code>函数。（也就是写视图函数等情况时）</li><li>在更高层的与处理Django模型实例相关的代码中：使用<code>get_absolute_url()</code>方法。(也就是在模型model中)</li></ul><p><strong>示例：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    path(<span class="string">&#x27;articles/&lt;int:year&gt;/&#x27;</span>, views.year_archive, name=<span class="string">&#x27;news-year-archive&#x27;</span>),</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>某一年nnnn对应的归档的URL是<code>/articles/nnnn/</code>。</p><p>可以在模板的代码中使用下面的方法获得它们：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;&#123;% url &#x27;news-year-archive&#x27; 2012 %&#125;&quot;&gt;2012 Archive&lt;/a&gt;</span><br><span class="line">&#123;<span class="comment"># Or with the year in a template context variable: #&#125;</span></span><br><span class="line">&lt;ul&gt;</span><br><span class="line">&#123;% <span class="keyword">for</span> yearvar <span class="keyword">in</span> year_list %&#125;</span><br><span class="line">&lt;li&gt;&lt;a href=&quot;&#123;% url &#x27;news-year-archive&#x27; yearvar %&#125;&quot;&gt;&#123;&#123; yearvar &#125;&#125; Archive&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">&#123;% endfor %&#125;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p>在Python代码中，这样使用：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">redirect_to_year</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    year = <span class="number">2006</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">&#x27;news-year-archive&#x27;</span>, args=(year,)))</span><br></pre></td></tr></table></figure><blockquote><p>其中，起到核心作用的是我们通过<code>name=&#39;news-year-archive&#39;</code>为那条url起了一个可以被引用的名称。</p></blockquote><p>URL名称name使用的字符串可以包含任何你喜欢的字符，但是过度的放纵有可能带来重名的冲突，比如两个不同的app，在各自的urlconf中为某一条url取了相同的name，这就会带来麻烦。为了解决这个问题，又引出了下面命名的URL模式。</p><p><strong>注意</strong>：</p><ul><li>在全局配置url时，include需要两个参数，arg和namespace, 当namespace不为空时，arg参数必须是一个2元组，除了urlpatterns不能为空之外，app_name也必须填写。具体参看<a href="https://www.cnblogs.com/wendaobiancheng/p/9109257.html">https://www.cnblogs.com/wendaobiancheng/p/9109257.html</a></li><li>若多个app同时有一个index路由，访问时可能达不到效果，这时我们需用到命名空间，应该这样写<code>&#123; % url &#39;namespce:name&#39;  % &#125;</code>,  其中<code>namespace</code>为主路由的名称且一定要定义。</li><li>如果带有参数，则写成<code>&#123; % url &#39;namespce:name&#39; value1 value2 ...  % &#125;</code></li><li>如果带有关键字参数，则写成<code>&#123; % url &#39;namespce:name&#39; p1=value1 p2=value2 ...  % &#125;</code></li></ul><h1 id="命名的URL模式（URL别名）"><a href="#命名的URL模式（URL别名）" class="headerlink" title="命名的URL模式（URL别名）"></a>命名的URL模式（URL别名）</h1><p>URL别名可以保证反查到唯一的URL，即使不同的app使用相同的URL名称。</p><p>第三方应用始终使用带命名空间的URL是一个很好的做法。</p><p>类似地，它还允许你在一个应用有多个实例部署的情况下反查URL。 换句话讲，因为一个应用的多个实例共享相同的命名URL，命名空间提供了一种区分这些命名URL 的方法。</p><p>实现命名空间的做法很简单，在urlconf文件中添加<code>app_name = &#39;polls&#39;</code>和<code>namespace=&#39;author-polls&#39;</code>这种类似的定义。</p><p><strong>范例</strong>：</p><p>以两个实例为例子：’publisher-polls’ 和’author-polls’。</p><p>假设我们已经在创建和显示投票时考虑了实例命名空间的问题，代码如下：</p><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;author-polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>, namespace=<span class="string">&#x27;author-polls&#x27;</span>)),</span><br><span class="line">    path(<span class="string">&#x27;publisher-polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>, namespace=<span class="string">&#x27;publisher-polls&#x27;</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>polls/urls.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如果当前的app实例是其中的一个，例如我们正在渲染实例’author-polls’中的detail视图，’polls:index’将解析到’author-polls’实例的index视图。</p><p>根据以上设置，可以使用下面的查询：</p><p>在基于类的视图的方法中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reverse(&#39;polls:index&#39;, current_app&#x3D;self.request.resolver_match.namespace)</span><br></pre></td></tr></table></figure><p>和在模板中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; % url &#39;polls:index&#39; % &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果没有当前app实例，例如如果我们在站点的其它地方渲染一个页面，’polls:index’将解析到polls注册的最后一个app实例空间。 因为没有默认的实例（命名空间为’polls’的实例），将使用注册的polls 的最后一个实例。 这将是’publisher-polls’，因为它是在urlpatterns中最后一个声明的。</p><h1 id="URL命名空间和include的URLconf"><a href="#URL命名空间和include的URLconf" class="headerlink" title="URL命名空间和include的URLconf"></a>URL命名空间和include的URLconf</h1><p>可以通过两种方式指定include的URLconf的应用名称空间。</p><p><strong>第一种</strong></p><p>在include的URLconf模块中设置与urlpatterns属性相同级别的<code>app_name</code>属性。必须将实际模块或模块的字符串引用传递到include()，而不是urlpatterns本身的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">polls/urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">app_name = <span class="string">&#x27;polls&#x27;</span></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">    ...</span><br><span class="line">]</span><br><span class="line">urls.py</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(<span class="string">&#x27;polls.urls&#x27;</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>此时，polls.urls中定义的URL将具有应用名称空间polls。</p><p><strong>第二种</strong></p><p>include一个包含嵌套命名空间数据的对象。如果你include()一个url()实例的列表，那么该对象中包含的URL将添加到全局命名空间。 但是，你也可以include()一个2元组，其中包含：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(&lt;list of path()&#x2F;re_path() instances&gt;, &lt;application namespace&gt;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">rom django.urls <span class="keyword">import</span> include, path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line">polls_patterns = ([</span><br><span class="line">    path(<span class="string">&#x27;&#x27;</span>, views.IndexView.as_view(), name=<span class="string">&#x27;index&#x27;</span>),</span><br><span class="line">    path(<span class="string">&#x27;&lt;int:pk&gt;/&#x27;</span>, views.DetailView.as_view(), name=<span class="string">&#x27;detail&#x27;</span>),</span><br><span class="line">], <span class="string">&#x27;polls&#x27;</span>)</span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">&#x27;polls/&#x27;</span>, include(polls_patterns)),</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这将include指定的URL模式到给定的app命名空间。</p><p>可以使用include()的namespace参数指定app实例命名空间。如果未指定，则app实例命名空间默认为URLconf的app命名空间。</p><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>Django对于路由的介绍：<a href="https://www.django.cn/course/show-7.html">https://www.django.cn/course/show-7.html</a></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1lvcND.png" alt="1lvcND.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-04-DjangoTemplate</title>
      <link href="2020/01/30/Django-04-DjangoTemplate/"/>
      <url>2020/01/30/Django-04-DjangoTemplate/</url>
      
        <content type="html"><![CDATA[<p><strong>注意：</strong></p><blockquote><p>在django中，对于 { {    } }和{ %   % }，前后的  “{ {“  以及  “{ %”  中间是没有空格的，由于hexo渲染的问题，本篇文章的某些部分不得已在中间加空格，但切记是没有的！！！</p></blockquote><h1 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h1><p>在Django框架中，模板是可以帮助开发者快速生成呈现给用户<br>页面的工具</p><p>模板的设计方式实现了我们MVT中VT的解耦，VT有 着N:M的关<br>系，一个V可以调用任意T，一个T可以供任意V使用</p><p>模板处理分为两个过程<br>①加载<br>②渲染</p><h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><h2 id="模板主要有两个部分"><a href="#模板主要有两个部分" class="headerlink" title="模板主要有两个部分"></a>模板主要有两个部分</h2><p>①HTML静态代码<br>②动态插入的代码段(挖坑，填坑)</p><p>模板中的动态代码段除了做基本的静态填充，还可以实现一些<br>基本的运算，转换和逻辑</p><h2 id="模板中的变量"><a href="#模板中的变量" class="headerlink" title="模板中的变量"></a>模板中的变量</h2><p>视图传递给模板的数据</p><p>遵守标识符规则<br>语法<code>&#123;&#123; var &#125;&#125;</code><br>如果变量不存在，则插入空字符串</p><h2 id="模板中的点语法"><a href="#模板中的点语法" class="headerlink" title="模板中的点语法"></a>模板中的点语法</h2><ul><li><p>字典查询         grades    grade</p></li><li><p>属性或者方法   grade.gname</p></li><li><p>索引             grades.0.gname</p></li></ul><p>模板中的小弊端，调用对象的方法，不能传递参数</p><h2 id="模板中的标签"><a href="#模板中的标签" class="headerlink" title="模板中的标签"></a>模板中的标签</h2><ul><li>语法  <code> &#123; %  tag  % &#125;</code></li><li>作用 1. 加载外部传入的变量<pre><code>2.在输出中创建文本3.控制循环或逻辑</code></pre></li></ul><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><p>格式：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span> 表达式%&#125;</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span>表达式%&#125;</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">if</span></span>表达式%&#125;</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">elif</span></span>表达式%&#125;</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p>格式：</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;%<span class="name"><span class="name">for</span></span>变量<span class="keyword">in</span>列表%&#125;</span></span><br><span class="line"><span class="xml">语句1</span></span><br><span class="line"><span class="xml"># 当列表为空或不存在时,执行empty之后的语句</span></span><br><span class="line"><span class="xml"></span><span class="template-tag">&#123;% <span class="name"><span class="name">empty</span></span> %&#125;</span></span><br><span class="line"><span class="xml">语句2</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>&#123;&#123; forloop.counter &#125;&#125;</code>表示当前是第几次循环，从1数数</li><li><code>&#123;&#123; forloop.counter0&#125;&#125;</code>表示当前是第几次循环，从0数数</li><li><code>&#123;&#123; forloop.revcounter&#125;&#125;</code>表示当前是第几次循环，倒着数数，到1停</li><li><code>&#123;&#123; forloop.revcounter0&#125;&#125;</code>表示当前第几次循环，倒着数，到0停</li><li><code>&#123;&#123; forloop.first&#125;&#125;</code>是否是第一个布尔值</li><li><code>&#123;&#123; forloop.last&#125;&#125;</code>是否是最后一个布尔值</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li><p>单行注释<br>{ #被注释掉的内容# }</p></li><li><p>多行注释</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;% comment %&#125;</span></span><br><span class="line"><span class="comment">内容</span></span><br><span class="line"><span class="comment">&#123;% endcomment %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="乘除"><a href="#乘除" class="headerlink" title="乘除"></a>乘除</h3><p><code>&#123; % widthratio 数 分母 分子 % &#125;</code></p><h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><p><code>&#123; % if num|divisibleby:2 % &#125;</code></p><h3 id="ifequal"><a href="#ifequal" class="headerlink" title="ifequal"></a>ifequal</h3><p>如果相等</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">ifequal</span></span> value1 value2 %&#125;</span><span class="xml"> # 如果value1等于value2</span></span><br><span class="line"><span class="xml">语句</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endifequal</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ifnotequal"><a href="#ifnotequal" class="headerlink" title="ifnotequal"></a>ifnotequal</h3><p>如果不相等</p><h3 id="url"><a href="#url" class="headerlink" title="url"></a>url</h3><p>反向解析<br><code>&#123; % url &#39;namespace:name&#39; p1 p2 % &#125;</code></p><h3 id="csrf-token"><a href="#csrf-token" class="headerlink" title="csrf_token"></a>csrf_token</h3><p>用于跨站请求伪造保护的<br>格式<code>&#123; % csrf_ token % &#125;</code></p><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><code>&#123; &#123;var|过滤器&#125; &#125;</code><br>作用:在变量显示前修改</p><ul><li><p>add  参数 加 数字相加 字符串拼接 列表拼接<br><code>&#123; &#123; p.page| add:5 &#125; &#125;</code></p></li><li><p>没有减法过滤器，但是加法里可以加负数<br><code>&#123; &#123; p.page| add:-5&#125; &#125;</code></p></li><li><p>lower  小写<br><code>&#123; &#123; p.pname|lower &#125; &#125;</code></p></li><li><p>upper  大写</p><p><code>&#123; &#123; p.pname|upper&#125; &#125;</code></p></li><li><p>default:参数 变量不存在或者为空 显示默认值</p></li><li><p>filesizeformat 人性化显示文件大小 kb PB</p></li><li><p>title 首字母大写</p></li><li><p>ljust:20 左对齐</p></li><li><p>rjust:20 右对齐</p></li><li><p>center:20 居中</p></li><li><p>length 长度</p></li><li><p>slice:’::’ 切片</p></li><li><p>join:’_’ 拼接列表</p></li><li><p>first 取第一个元素</p></li><li><p>last 取最后一个元素</p></li><li><p>safe 取消对HTML代码的转义</p></li><li><p>date:’Y-m-d H:i:s’ 日期的格式化</p></li><li><p>truncatechars:18 文本上的时候进行截断 按18截断</p></li></ul><p>过滤器可以传递参数，参数需要使用引号引起来;</p><p>比如join:                  <code>&#123; &#123; students|join&#39;=&#39; &#125; &#125;</code></p><p>默认值:default,格式<code>&#123; &#123;var|default value&#125; &#125;</code></p><p>如果变量没有被提供或者为False，空，会使用默认值</p><p>根据指定格式转换日期为字符串，处理时间的就是针对date进行的转换<br>              <code>&#123; &#123; dateVal | date:&#39;y-m-d&#39; &#125; &#125;</code></p><p>常见过滤器使用方法可以参照</p><ul><li><a href="https://www.cnblogs.com/pythonyeyu/p/10115769.html">https://www.cnblogs.com/pythonyeyu/p/10115769.html</a></li><li><a href="https://blog.csdn.net/tonghuaxl/article/details/80406884">https://blog.csdn.net/tonghuaxl/article/details/80406884</a></li></ul><h3 id="HTML转义"><a href="#HTML转义" class="headerlink" title="HTML转义"></a>HTML转义</h3><p>将接收到的数据当成普通字符串处理还是当成HTML代码来渲染的一个问题</p><ul><li><p>渲染成html:<code>&#123;&#123; code |safe&#125;&#125;</code>(谨慎使用)</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">autoescape</span></span> off%&#125;</span></span><br><span class="line"><span class="xml">    code</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endautoescape</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>不想渲染</p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">autoescape</span></span> on%&#125;</span></span><br><span class="line"><span class="xml">    code</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endautoescape</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h3><p>跨站请求伪造</p><p>某些恶意网站包含链接，表单，按钮，Js利用登陆用户在浏览器中的认证信息，进行非法操作，攻击服务，破坏数据</p><p>在表单中添加<br><code>&#123; % csrf_ _token % &#125;</code><br>在settings中的中间件MIDDLEWARE中配置打开<br><code>&#39;django.middleware.csrf.CsrfViewMiddleware&#39;,</code></p><h2 id="模板中的继承"><a href="#模板中的继承" class="headerlink" title="模板中的继承"></a>模板中的继承</h2><p>模板也可以继承</p><ul><li>关键字block:挖坑，用来规划布局<ul><li>首次出现，代表规划</li><li>第二次出现，代表填充以前的规划</li><li>第三次出现，代表填充以前的规则，默认动作是覆盖<ul><li>如果不想覆盖，可以添加<code>&#123;&#123;block.super&#125;&#125;</code></li><li>这样就实现了增量式操作</li></ul></li></ul></li></ul><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> XXX%&#125;</span></span><br><span class="line"><span class="xml">code</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><ul><li>extends继承，写在开头位置</li><li><code>&#123; % extends &#39;父模板路径&#39; % &#125;</code></li><li>include:加载模板进行渲染，可以将页面作为一部分，嵌入到其他页面中<br>格式    <code>&#123; % include &#39;模板文件&#39; % &#125;</code></li><li>block+extends<ul><li>化整为零</li></ul></li><li>include+block<ul><li>由零聚一</li></ul></li></ul><p><strong>注意</strong>：</p><ul><li>三个标签可以和混合使用，能用block+extends搞定的，就尽量不要使用include，因为效率比较低</li><li>include可以单独使用</li><li>如果已经继承自一个父模板，子模版重写自己的页面结构，是不会生效的，只能在已有的“坑”中写。</li></ul><h1 id="静态资源"><a href="#静态资源" class="headerlink" title="静态资源"></a>静态资源</h1><p>在工程中一般把css，js，img等固定的资源放入新建的static文件夹，并在settings中注册</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1QAXX4.png" alt="1QAXX4.png"></p><p>以css为例</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1QEQ9f.png" alt="1QEQ9f.png"></p><p>在页面的顶端导入<code>&#123; % load  static % &#125;</code>或者<code>&#123; % load  staticfiles % &#125;</code></p><p>链接即可写成<code>href=&quot;&#123; % static &#39;css/demo.css&#39; % &#125;&quot;</code>式的绝对路径</p><p><strong>坑点：</strong> </p><ul><li>仅在debug模式下可以使用</li><li>以后需要单独处理</li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1lquE4.png" alt="1lquE4.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-02-DjangoModel-01</title>
      <link href="2020/01/28/Django-02-DjangoModel-01/"/>
      <url>2020/01/28/Django-02-DjangoModel-01/</url>
      
        <content type="html"><![CDATA[<h1 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h1><ul><li>在企业开发中，我们通常都是从数据开始发的</li></ul><h1 id="Django模型"><a href="#Django模型" class="headerlink" title="Django模型"></a>Django模型</h1><p> Django对各种数据库都提供了很好的支持，对不同的数据库，Django提供了统一调用的API，我们可以根据不同的业务需求使用不同的数据库。</p><h2 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h2><p> <code>pip install pymysql</code></p><p> 在工程目录的<strong>init</strong>.py文件中输入</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymsql</span><br><span class="line">pymsql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><p>完成数据库驱动加载</p><h2 id="在settings-py中配置数据库连接信息"><a href="#在settings-py中配置数据库连接信息" class="headerlink" title="在settings.py中配置数据库连接信息"></a>在settings.py中配置数据库连接信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>:<span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;EV1DjangoModel&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;yourpassword&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br></pre></td></tr></table></figure><h1 id="开发流程"><a href="#开发流程" class="headerlink" title="开发流程"></a>开发流程</h1><p>1.配置数据库<br>2.定义模型类（一个模型类对应数据库中的一张表）<br>3.生成迁移文件<br>4.执行迁移生成数据表<br>5.使用模型类进行增删改查（CRUD）操作</p><h1 id="ORM技术"><a href="#ORM技术" class="headerlink" title="ORM技术"></a>ORM技术</h1><ul><li>对象关系映射</li><li>可以简单理解为翻译机</li><li>核心思想：解耦合</li></ul><hr><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NHSXD.png" alt="8NHSXD.png"></p><h1 id="Django定义模型"><a href="#Django定义模型" class="headerlink" title="Django定义模型"></a>Django定义模型</h1><h2 id="重要概念：模型，表，属性，字段"><a href="#重要概念：模型，表，属性，字段" class="headerlink" title="重要概念：模型，表，属性，字段"></a>重要概念：模型，表，属性，字段</h2><p>一个模型类在数据库中对应一张表，在模型类中定义的属性，对应该模型对照表中的一个字段<br>定义属性见定义属性文件</p><h2 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h2><ul><li><p>概述</p><ul><li><p>django根据属性的类型确定以下信息</p><ul><li>当前选择的数据库支持字段的类型</li><li>渲染管理表单时使用的默认html控件</li><li>在管理站点最低限度的验证</li></ul></li><li><p>django会为表增加自动增长的主键列，每个模型只能有一-个主键列， 如果使用选项设置某属性为主键列后，则django不会 再生成默认的主键列</p></li><li><p>属性命名限制</p><ul><li>遵循标识符规则</li><li>由于django的查询方式， 不允许使用连续的下划线</li></ul></li></ul></li><li><p>库</p><ul><li>定义属性时，需要字段类型，字段类型，字段类型被定义在django.db .models.fields目录下， 为了方便使用，被导入到django .db. models中</li><li>使用方式<ul><li>导入from django. db import models</li><li>通过models. Field创建字段类型的对象，赋值给属性</li></ul></li></ul></li><li><p>逻辑删除</p><ul><li>对于重要数据都做逻辑删除，不做物理删除，实现方法是定义isDelete属性，类型为BooleanField, 默认值为False</li></ul></li><li><p>字段类型</p><ul><li>AutoField<ul><li>一个根据实际ID自动增长的IntegerField,通常不指定。如果不指定，一个主键字段将自动添加到模型中</li></ul></li><li>CharEield (max_ length=字符长度)<ul><li>字符串，默认的表单样式是TextInput</li></ul></li><li>TextField<ul><li>大文本字段，一般超过4000使用，默认的表单控件是Textarea</li></ul></li><li>IntegerField整数</li><li>DecimalField (max_ digits=None, decimal_ places=None)<ul><li>使用python的Decima1实例表示的十进制浮点数</li><li>参数说明<ul><li>DecimalField.max_ digits<ul><li>位数总数</li></ul></li><li>DecimalField.decimal _places<ul><li>小数点后的数字位数</li></ul></li></ul></li></ul></li><li>FloatField<ul><li>用Python的float实例来表示的浮点数</li></ul></li><li>BooleanField<ul><li>true/false 字段，此字段的默认表单控制是CheckboxInput</li></ul></li><li>NullBooleanField<ul><li>支持null、true、 false三种值</li></ul></li><li>DateField( [auto_ now=False，auto_ now_ add=False] )<ul><li>使用Python的datetime .date实例表示的日期</li><li>参数说明<ul><li>DateField. auto_ now<ul><li>每次保存对象时，自动设置该字段为当前时间，用于”最后- -次修改”的时间戳，它总是使用当前日期，默认为false </li></ul></li><li>DateField.auto_now add<ul><li>当对象第一次被创建时自动设置当前时间，用于创建的时间戳，它总是使用当前日期，默认为false</li></ul></li></ul></li><li>该字段默认对应的表单控件是一个TextInput. 在管理员站点添加了一个JavaScript写的日历控件，和一个”Today”的快捷按钮， 包含了一 个额外的invalid</li><li>注意<ul><li>auto_now_add, auto_now. and default 这些设置是相互排斥的，他们之间的任何组合将会发生错误的结果</li></ul></li></ul></li><li>TimeField<ul><li>使用Python的datetime . time实例表示的时间，参数同DateField</li></ul></li><li>DateTimeField<ul><li>使用Python的datetime . datetime实例表示的日期和时间，参数同DateField</li></ul></li><li>FileField<ul><li>一个上传文件的字段</li></ul></li><li>ImageField<ul><li>继承了FileField的所有属性和方法，但对上传的对象进行校验，确保它是个有效的image</li></ul></li></ul></li><li><p>字段选项</p><ul><li>概述<ul><li>通过字段选项，可以实现对字段的约束</li><li>在字段对象时通过关键字参数指定</li></ul></li><li>null<ul><li>如果为True，Django 将空值以NULL存储到数据库中，默认值是False</li></ul></li><li>blank<ul><li>如果为True,则该字段允许为空白，默认值是False .</li></ul></li><li>注意<ul><li>null是数据库范畴的概念，blank是表单验证证范畴的</li></ul></li><li>db_ column<ul><li>字段的名称，如果未指定，则使用属性的名称</li></ul></li><li>db_ index<ul><li>若值为True, 则在表中会为此字段创建索引</li></ul></li><li>default<ul><li>默认值</li></ul></li><li>primary_ key<ul><li>若为True, 则该字段会成为模型的主键字段</li></ul></li><li>unique<ul><li>如果为True, 这个字段在表中必须有唯一值</li></ul></li></ul></li><li><p>关系</p><ul><li>分类<ul><li>ForeignKey: 一对多，将字段定义在多的端中</li><li>ManyToManyField:多对多，将字段定义在两端中</li><li>OneTooneField:一对一 ，将字段定义在任意一端中 </li></ul></li><li>用一访问多<ul><li>格式<ul><li>对象.模型类小写_ set</li></ul></li><li>示例<ul><li>grade .students_ set</li></ul></li></ul></li><li>用一访问一<ul><li>格式<ul><li>对象.模型类小写</li></ul></li><li>示例<ul><li>grade . students</li></ul></li><li>访问id<ul><li>格式<ul><li>对象.属性_ id</li></ul></li><li>示例<ul><li>student. sgrade_ id</li></ul></li></ul></li></ul></li></ul></li></ul><h2 id="创建模型类"><a href="#创建模型类" class="headerlink" title="创建模型类"></a>创建模型类</h2><p>元选项，在模型类中定义Meta，用于设置元信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">    db_table=xxx <span class="comment">#定义数据表名，推荐使用小写字母</span></span><br><span class="line">    ordering=[]</span><br><span class="line"><span class="comment">#对象的默认排序字段，获取对象列表时使用，通常时Integer类型，升序ording[&#x27;id&#x27;],降序ording[&quot;-id&quot;]</span></span><br></pre></td></tr></table></figure><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    p_name=models.CharField(max_length=<span class="number">16</span>,unique=<span class="literal">True</span>)</span><br><span class="line">    p_age=models.IntegerField(default=<span class="number">18</span>,db_column=<span class="string">&#x27;age&#x27;</span>)</span><br><span class="line">    <span class="comment"># False代表男，True代表女</span></span><br><span class="line">    p_sex=models.BooleanField(default=<span class="literal">True</span>,db_column=<span class="string">&#x27;sex&#x27;</span>)</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        db_table=<span class="string">&#x27;People&#x27;</span></span><br></pre></td></tr></table></figure><p>随后输入<code>python manage.py makemigrations</code>生成迁移文件</p><p>以及<code>python manage.py migration</code>执行迁移</p><h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KL236.png" alt="1KL236.png"></p><h1 id="模型成员objects"><a href="#模型成员objects" class="headerlink" title="模型成员objects"></a>模型成员objects</h1><p>Django默认通过模型的objects对象实现模型数据查询</p><p>Django有两种过滤器用于筛选记录</p><ul><li>filter：返回符合筛选条件的数据集</li><li>exclude：返回不符合筛选条件的数据集</li></ul><p>多个filter和exclude可以连接在一起查询（链式调用）例如：<code>Person.objects.filter().filter().xxxx.exclude()...</code></p><h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><p>首先将数据模型建立好</p><ul><li><p>首先在App中建立urls并在根路由中注册</p></li><li><p>然后在App.models.py中建立添加函数</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_persons</span>(<span class="params">request</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        person=Person()</span><br><span class="line">        flag=random.randrange(<span class="number">100</span>)</span><br><span class="line">        person.p_name=<span class="string">f&#x27;Tom<span class="subst">&#123;flag&#125;</span>&#x27;</span></span><br><span class="line">        person.p_age=flag</span><br><span class="line">        person.p_sex=flag%<span class="number">2</span></span><br><span class="line">        person.save()  </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;批量创建成功!&quot;</span>)</span><br></pre></td></tr></table></figure><ul><li>最后在App.models.py中建立查询函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_persons</span>(<span class="params">request</span>):</span></span><br><span class="line">    persons=Person.objects.<span class="built_in">filter</span>(p_age__gt=<span class="number">18</span>)<span class="comment">#年龄大于18</span></span><br><span class="line">    context=&#123;</span><br><span class="line">        <span class="string">&#x27;persons&#x27;</span>:persons</span><br><span class="line">    &#125;</span><br><span class="line">    print(<span class="built_in">type</span>(persons))</span><br><span class="line">    <span class="keyword">return</span> render(request,<span class="string">&#x27;person_list.html&#x27;</span>,con</span><br><span class="line">                  text=context)</span><br></pre></td></tr></table></figure><ul><li>渲染的网页界面</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>person_list<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>PersonList<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for person in persons %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>姓名：&#123;&#123; person.p_name &#125;&#125; 年龄：&#123;&#123; person.p_age &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="结果-1"><a href="#结果-1" class="headerlink" title="结果"></a>结果</h2><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KjCcV.png" alt="1KjCcV.png"></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>筛选出的结果类型为查询结果集</p><p><code>&lt;class &#39;django.db.models.query.QuerySet&#39;&gt;</code></p><h1 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h1><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><p>向数据库中添加数据</p><p>当创建对象时，django不会对数据库进行读写操作，当调用save()方法时才与数据库交互，将对象保存到数据库中</p><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>_ init_ 已经在父 类models.Model中使用，在自定义的模型中无法使用</p><h2 id="创建对象方案"><a href="#创建对象方案" class="headerlink" title="创建对象方案"></a>创建对象方案</h2><p>在模型类中增加类方法去创建对象,是不会映射到表中的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">cls,name,age</span>):</span></span><br></pre></td></tr></table></figure><p>在自定义的管理器中添加方法来创建对象</p><h2 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h2><p>因为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_person</span>(<span class="params">requset</span>):</span></span><br><span class="line">    <span class="comment">#person=Person.objects.create(p_name=&#x27;Jerry&#x27;,p_age=18,p_sex=True)</span></span><br><span class="line">    <span class="comment">#会发现姓名部分为空，即 &quot;&quot; 而不是NULL或者NONE   不能重写__init__，可以通过其他手段，实现属性自定义赋值</span></span><br><span class="line">    person=Person(p_age=<span class="number">28</span>)</span><br><span class="line">    person.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;Jerry创建成功&quot;</span>)</span><br></pre></td></tr></table></figure><p>所以在models.py文件里创建对象的类中写入以下函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create</span>(<span class="params">cls,p_name,p_age=<span class="number">50</span>,p_sex=<span class="literal">True</span></span>):</span></span><br><span class="line">    <span class="comment"># 其中可以自由发挥</span></span><br><span class="line">    <span class="keyword">return</span> cls(p_name=p_name,p_age=p_age,p_sex=p_sex)</span><br></pre></td></tr></table></figure><p>于是前面创建对象的函数就可以自定义了，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_person</span>(<span class="params">requset</span>):</span></span><br><span class="line">    person=Person.create(<span class="string">&#x27;Jack&#x27;</span>)</span><br><span class="line">    person.save()</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">&quot;创建成功&quot;</span>)</span><br></pre></td></tr></table></figure><h1 id="模型的查询"><a href="#模型的查询" class="headerlink" title="模型的查询"></a>模型的查询</h1><ul><li>查询集表示从数据库获取的对象集合</li><li>查询集可以有多个过滤器</li><li>过滤器就是一个函数，基于所给的参数限制查询集结果</li><li>从SQL角度来说，查询集合和select语句等价，过滤器就像where条件</li></ul><h2 id="查询集和过滤器"><a href="#查询集和过滤器" class="headerlink" title="查询集和过滤器"></a>查询集和过滤器</h2><ul><li>在管理器上调用方法返回查询集</li><li>查询经过过滤器筛选后返回新的查询集，所以可以写成链式调用</li><li>返回查询集的方法称为过滤器<ul><li>all()                            返回所有数据</li><li>filter()                        返回符合条件的数据</li><li>exclude()                   过滤掉符合条件的数据</li><li>order. by()                 排序</li><li>values()                      一条数据就是一个字典，返回一个列表</li></ul></li></ul><h2 id="返回单个数据"><a href="#返回单个数据" class="headerlink" title="返回单个数据"></a>返回单个数据</h2><ul><li><p>get(): 返回一个满足条件的对象（坑）</p><ul><li>如果没有找到符合条件的对象，会引发模型类.DoesNotExist异常</li></ul><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KjkBF.png" alt="1KjkBF.png"></p><ul><li><p>如果找到多个，会引发模型类.MultiObiectsReturned 异常</p><p>​    <img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KjA74.png" alt="1KjA74.png"></p></li></ul></li><li><p>first(): 返回查询集中的第一个对象，使用：all().first()</p></li><li><p>last(): 返回查询集中的最后一个对象，使用：all().last()</p><ul><li>隐藏bug：如果数据较乱，可能会出现first()和last()获取的是相同的对象</li><li>解决方案：显式，手动写排序规则</li></ul></li><li><p>count():返回当前查询集中的对象个数</p></li><li><p>exists():判断查询集中是否有数据，如果有数据返回True没有反之</p></li></ul><h1 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h1><h2 id="1开头"><a href="#1开头" class="headerlink" title="1开头"></a>1开头</h2><p><strong>1xx(临时响应)表示临时响应并需要请求者继续执行操作的状态代码。代码说明</strong></p><p>100 (继续) 请求者应当继续提出请求。 服务器返回此代码表示已收到请求的第一部分，正在等待其余部分。</p><p>101 (切换协议) 请求者已要求服务器切换协议，服务器已确认并准备切换。</p><h2 id="2开头"><a href="#2开头" class="headerlink" title="2开头"></a>2开头</h2><p><strong>2xx (成功)表示成功处理了请求的状态代码。代码说明</strong></p><p>200 (成功) 服务器已成功处理了请求。 通常，这表示服务器提供了请求的网页。</p><p>201 (已创建) 请求成功并且服务器创建了新的资源。</p><p>202 (已接受) 服务器已接受请求，但尚未处理。</p><p>203 (非授权信息) 服务器已成功处理了请求，但返回的信息可能来自另一来源。</p><p>204 (无内容) 服务器成功处理了请求，但没有返回任何内容。</p><p>205 (重置内容) 服务器成功处理了请求，但没有返回任何内容。</p><p>206 (部分内容) 服务器成功处理了部分 GET 请求。</p><h2 id="3开头"><a href="#3开头" class="headerlink" title="3开头"></a>3开头</h2><p><strong>3xx (重定向) 表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向。代码说明</strong></p><p>300 (多种选择) 针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择。</p><p>301 (永久移动) 请求的网页已永久移动到新位置。 服务器返回此响应(对 GET 或 HEAD 请求的响应)时，会自动将请求者转到新位置。</p><p>302 (临时移动) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><p>303 (查看其他位置) 请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码。</p><p>304 (未修改) 自从上次请求后，请求的网页未修改过。 服务器返回此响应时，不会返回网页内容。</p><p>305 (使用代理) 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理。</p><p>307 (临时重定向) 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求。</p><h2 id="4开头"><a href="#4开头" class="headerlink" title="4开头"></a>4开头</h2><p><strong>4xx(请求错误) 这些状态代码表示请求可能出错，妨碍了服务器的处理。代码说明</strong></p><p>400 (错误请求) 服务器不理解请求的语法。</p><p>401 (未授权) 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。</p><p>403 (禁止) 服务器拒绝请求。</p><p>404 (未找到) 服务器找不到请求的网页。</p><p>405 (方法禁用) 禁用请求中指定的方法。</p><p>406 (不接受) 无法使用请求的内容特性响应请求的网页。</p><p>407 (需要代理授权) 此状态代码与 401(未授权)类似，但指定请求者应当授权使用代理。</p><p>408 (请求超时) 服务器等候请求时发生超时。</p><p>409 (冲突) 服务器在完成请求时发生冲突。 服务器必须在响应中包含有关冲突的信息。</p><p>410 (已删除) 如果请求的资源已永久删除，服务器就会返回此响应。</p><p>411 (需要有效长度) 服务器不接受不含有效内容长度标头字段的请求。</p><p>412 (未满足前提条件) 服务器未满足请求者在请求中设置的其中一个前提条件。</p><p>413 (请求实体过大) 服务器无法处理请求，因为请求实体过大，超出服务器的处理能力。</p><p>414 (请求的 URI 过长) 请求的 URI(通常为网址)过长，服务器无法处理。</p><p>415 (不支持的媒体类型) 请求的格式不受请求页面的支持。</p><p>416 (请求范围不符合要求) 如果页面无法提供请求的范围，则服务器会返回此状态代码。</p><p>417 (未满足期望值) 服务器未满足”期望”请求标头字段的要求。</p><h2 id="5开头"><a href="#5开头" class="headerlink" title="5开头"></a>5开头</h2><p><strong>5xx(服务器错误)这些状态代码表示服务器在尝试处理请求时发生内部错误。 这些错误可能是服务器本身的错误，而不是请求出错。代码说明</strong></p><p>500 (服务器内部错误) 服务器遇到错误，无法完成请求。</p><p>501 (尚未实施) 服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码。</p><p>502 (错误网关) 服务器作为网关或代理，从上游服务器收到无效响应。</p><p>503 (服务不可用) 服务器目前无法使用(由于超载或停机维护)。 通常，这只是暂时状态。</p><p>504 (网关超时) 服务器作为网关或代理，但是没有及时从上游服务器收到请求。</p><p>505 (HTTP 版本不受支持) 服务器不支持请求中所用的 HTTP 协议版本。</p><h1 id="限制查询集和查询集的缓存"><a href="#限制查询集和查询集的缓存" class="headerlink" title="限制查询集和查询集的缓存"></a>限制查询集和查询集的缓存</h1><p>限制查询集，可以使用下标的方法进行限制，等同于sql中limit和offset，即并不是全部查询之后再进行切割</p><p>studentList = Student.objects.all()[0:5]     下标不能是负数</p><p>查询集的缓存:每个查询集都包含一个缓存，来最小化对数据库的访问。只有我们在迭代结果集，或者获取单个对象属性的时候，才会去查询数据库。</p><p>在新建的查询集中，缓存首次为空，第一次对查询集求值，会发生数据缓存，django会将查询出来的数据做一个缓存， 并返回查询结构，以后的查询直接使用查询集的缓存。</p><h1 id="字段查询"><a href="#字段查询" class="headerlink" title="字段查询"></a>字段查询</h1><p>对sql中where的实现，作为方法filter(),exclude(),get()的参数</p><p>语法:属性名称__比较运算符=值(双下划线)</p><p>外键:属性名_ id</p><p>转义: like语句中 使用%是为了匹配占位，匹配数据中的%<br>( where like %‘ )<br>            filter(sname contains=’%’)</p><h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><ul><li><p>exact:判断，大小写敏感，filter(isDelete = False)</p></li><li><p>contains:是否包含，大小写敏感，filter(sname__contains=’孔’)</p></li><li><p>startswith,endswith:以values开头或结尾， 大小写敏感以上四个在运算符前加上i(ignore)就不区分大小写了iexact…</p></li><li><p>isnull,isnotnull:是否为空，filter(sname__ jisnull=False)</p></li><li><p>in:是否包含在范围内,filter(pk__in=[2,4,6,8])</p></li><li><p>gt,gte,It,Ite:大于，大于等于，小于小于等于filter(sage__gt30)</p></li><li><p>时间的<br>year,month,day,week_day,hour,minute,second:<br>filter(lasttime__year=2020)</p><ul><li><p>坑：django中查询条件有时区问题</p><ul><li><p>关闭django中自定义的时区</p><p>在settings中把<code>USE_TZ = True</code>改为<code>USE_TZ = False</code></p></li><li><p>在数据库中创建对应的时区表</p></li></ul></li></ul></li><li><p>查询快捷:<br>pk:代表主键，filter(pk=1)</p></li><li><p>跨关系查询:<br>模型类名__属性名__比较运算符， 实际上就是处理的数据库中的join<br>grade = Grade.objects.filter(student_ scontend_ _contains=’小小明’)<br>描述中带有“小小明”这三个字的数据属于哪个班级</p></li></ul><h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><p>使用aggregate()函数返回聚合函数的值，如Student.objects().aggregate(Max(‘sage’))</p><ul><li>Avg:平均值</li><li>Count:数量</li><li>Max:最大</li><li>Min:最小</li><li>Sum:求和</li></ul><h1 id="F对象"><a href="#F对象" class="headerlink" title="F对象"></a>F对象</h1><p>可以使用模型的A属性与B属性进行比较</p><p>grades = Grade.objects.filter(girlnum_ gt=F(‘boynum’) )</p><p>F对象支持算数运算</p><p>grades = Grade.objects.filter(girlnum gt=F(‘boynum’) +10 )</p><h1 id="Q对象"><a href="#Q对象" class="headerlink" title="Q对象"></a>Q对象</h1><p>过滤器的方法中的关键参数，可以对条件进行封装，常用于组合条件</p><ul><li>年龄小于25<ul><li>Student.objects.filter(Q(sage_ _It=25))</li></ul></li><li>年龄小于25，身高大于160<ul><li>Student.objects.filter(Q(sage_ <em>It=25)&amp;Q(sheight\</em> _gt=160))</li></ul></li></ul><p>Q对象语法支持| (or), &amp; (and), ~(取反)</p><ul><li>年龄大于等于的<ul><li>Student.objects.filter(~Q(sage_ _It=25))</li></ul></li></ul><h1 id="模型成员"><a href="#模型成员" class="headerlink" title="模型成员"></a>模型成员</h1><ul><li><p>类属性</p><ul><li><p>显性:开发者手动书写的属性</p></li><li><p>隐性: objects是一个Manager类型的一个对象，作用于数据库进行交互<br>当模型类没有指定管理器的时候，Django会自动为我们创建模型管理器</p></li><li><p>当然我们也可以自定义管理器，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">models.Model</span>):</span> </span><br><span class="line">stuManager = models.Manager()</span><br></pre></td></tr></table></figure><p>当自定义模型管理器时，objects就不存在了，Django就<br>不会为我们自动生成模型管理器</p></li></ul></li></ul><h2 id="自定义管理器"><a href="#自定义管理器" class="headerlink" title="自定义管理器"></a>自定义管理器</h2><p>模型管理器是Django的模型与数据库进行交互的接口，一个模型可以有多个模型管理器</p><p>自定义模型管理器作用:</p><ul><li>可以向管理器中添加额外的方法</li><li>修改管理器返回的原始查询集</li><li>提供创建对象的方式</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentManager</span>(<span class="params">models.Manager</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span>(<span class="params">self</span>):</span><span class="comment"># 这是固定的函数名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>(StudentManager,self).get_queryset.<span class="built_in">filter</span>(isDelete=<span class="literal">False</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">createStudent</span>(<span class="params">self</span>):</span></span><br><span class="line">        stu = self.model()</span><br><span class="line">        <span class="comment">#设置属性</span></span><br><span class="line">        <span class="keyword">return</span> stu</span><br></pre></td></tr></table></figure><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1MCIQs.png" alt="1MCIQs.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-1:HelloDjango</title>
      <link href="2020/01/28/Django-01-HelloDjango/"/>
      <url>2020/01/28/Django-01-HelloDjango/</url>
      
        <content type="html"><![CDATA[<h1 id="Django简介"><a href="#Django简介" class="headerlink" title="Django简介"></a>Django简介</h1><p>Django是一个开放<a href="https://baike.baidu.com/item/%E6%BA%90%E4%BB%A3%E7%A0%81/3814213">源代码</a>的Web应用框架，由<a href="https://baike.baidu.com/item/Python/407313">Python</a>写成。采用了MTV的框架模式，即模型M，视图V和模版T。它最初是被开发来用于管理劳伦斯出版集团旗下的一些以新闻内容为主的网站的，即是CMS（内容管理系统）软件。并于2005年7月在BSD许可证下发布。这套框架是以比利时的吉普赛爵士吉他手Django Reinhardt来命名的。</p><p>官网：<a href="https://www.djangoproject.com/">https://www.djangoproject.com/</a></p><h1 id="开发环境配置"><a href="#开发环境配置" class="headerlink" title="开发环境配置"></a>开发环境配置</h1><p>本次Django项目使用的版本是Django2.2  LTS版本</p><p>默认建立在Ubuntu系统上并且使用虚拟环境</p><p>具体方法请自行百度</p><h1 id="CS-BS模型介绍"><a href="#CS-BS模型介绍" class="headerlink" title="CS,BS模型介绍"></a>CS,BS模型介绍</h1><p><a href="https://imgchr.com/i/8NbSCq"><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/8NbSCq.png" alt="8NbSCq.png"></a></p><p>C/S结构，即Client/Server(客户机/服务器)结构，是大家熟知的软件系统体系结构，通过将任务合理分配到Client端和Server端，降低了系统的通讯开销，可以充分利用两端硬件环境的优势。早期的软件系统多以此作为首选设计标准。</p><p>（用的是ip，tcp/udp通信协议）<br>B/S结构，即Browser/Server(浏览器/服务器)结构，是随着Internet技术的兴起，对C/S结构的一种变化或者改进的结构。在这种结构下，用户界面完全通过WWW浏览器实现，一部分事务逻辑在前端实现，但是主要事务逻辑在服务器端实现，形成所谓3-tier结构。 （采用的是上层的http或者https通信协议）<br>B/S结构，主要是利用了不断成熟的WWW浏览器技术，结合浏览器的多种scrīpt语言(VBscrīpt、Javascrīpt…)和ActiveX技术，用通用浏览器就实现了原来需要复杂专用软件才能实现的强大功能，并节约了开发成本，是一种全新的软件系统构造技术。随着Windows 98/Windows 2000将浏览器技术植入操作系统内部，这种结构更成为当今应用软件的首选体系结构。<br>C/S 与 B/S 区别：<br>Client/Server是建立在局域网的基础上的.Browser/Server是建立在广域网的基础上的.<br>1．硬件环境不同<br>C/S 一般建立在专用的网络上, 小范围里的网络环境, 局域网之间再通过专门服务器提供连接和数据交换服务.<br>B/S 建立在广域网之上的, 不必是专门的网络硬件环境,例如电话上网, 租用设备. 信息管理. 有比C/S更强的适应范围, 一般只要有操作系统和浏览器就行</p><p>2．对安全要求不同<br>C/S 一般面向相对固定的用户群, 对信息安全的控制能力很强. 一般高度机密的信息系统采用C/S 结构适宜. 可以通过B/S发布部分可公开信息.<br>B/S 建立在广域网之上, 对安全的控制能力相对弱, 面向是不可知的用户群.</p><p>3．对程序架构不同<br>C/S 程序可以更加注重流程, 可以对权限多层次校验, 对系统运行速度可以较少考虑.<br>B/S 对安全以及访问速度的多重的考虑, 建立在需要更加优化的基础之上. 比C/S有更高的要求 B/S结构的程序架构是发展的趋势, 从MS的.Net系列的BizTalk 2000 Exchange 2000等, 全面支持网络的构件搭建的系统. SUN 和IBM推的JavaBean 构件技术等,使 B/S更加成熟.</p><p>4．软件重用不同<br>C/S 程序可以不可避免的整体性考虑, 构件的重用性不如在B/S要求下的构件的重用性好.<br>B/S 对的多重结构,要求构件相对独立的功能. 能够相对较好的重用.</p><p>5．系统维护不同<br>系统维护在是软件生存周期中,开销大, ——-重要<br>C/S 程序由于整体性, 必须整体考察, 处理出现的问题以及系统升级. 升级难. 可能是再做一个全新的系统<br>B/S 构件组成,方面构件个别的更换,实现系统的无缝升级. 系统维护开销减到最小.用户从网上自己下载安装就可以实现升级.</p><p>6．处理问题不同<br>C/S 程序可以处理用户面固定, 并且在相同区域, 安全要求高需求, 与操作系统相关. 应该都是相同的系统<br>B/S 建立在广域网上, 面向不同的用户群, 分散地域, 这是C/S无法作到的. 与操作系统平台关系最小.</p><p>7．用户接口不同<br>C/S 多是建立的Window平台上,表现方法有限,对程序员普遍要求较高<br>B/S 建立在浏览器上, 有更加丰富和生动的表现方式与用户交流. 并且大部分难度减低,减低开发成本.</p><p>8．信息流不同<br>C/S 程序一般是典型的中央集权的机械式处理, 交互性相对低<br>B/S 信息流向可变化, B-B B-C B-G等信息、流向的变化, 更象交易中心</p><h1 id="MVC设计模式"><a href="#MVC设计模式" class="headerlink" title="MVC设计模式"></a>MVC设计模式</h1><p>MVC 是一种使用 MVC（Model View Controller 模型-视图-控制器）设计创建 Web 应用程序的模式：</p><ul><li>Model（模型）表示应用程序核心（比如数据库记录列表）。</li><li>View（视图）显示数据（数据库记录）。</li><li>Controller（控制器）处理输入（写入数据库记录）。</li></ul><p>MVC 模式同时提供了对 HTML、CSS 和 JavaScript 的完全控制。</p><p><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分。<br>　　通常模型对象负责在数据库中存取数据。</p><p><strong>View（视图）</strong>是应用程序中处理数据显示的部分。<br>　　通常视图是依据模型数据创建的。</p><p><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。<br>　　通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</p><p>MVC 分层有助于管理复杂的应用程序，因为您可以在一个时间内专门关注一个方面。例如，您可以在不依赖业务逻辑的情况下专注于视图设计。同时也让应用程序的测试更加容易。</p><p>MVC 分层同时也简化了分组开发。不同的开发人员可同时开发视图、控制器逻辑和业务逻辑。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1QDw0e.png" alt="1QDw0e.png"></p><h1 id="MTV设计模式"><a href="#MTV设计模式" class="headerlink" title="MTV设计模式"></a>MTV设计模式</h1><p>Django的MTV模式本质上和MVC是一样的，也是为了各组件间的松耦合关系，只是定义上有些许不同，Django的MTV分别是指：</p><p><strong>M 代表模型（Model）：</strong>负责业务对象和数据库的关系映射（ORM）。</p><p><strong>T  代表模板（Tempalte）：</strong>负责如何把页面展示给用户（html）。</p><p><strong>V  代表视图（View）：</strong>负责业务逻辑，并在适当的时候调用Model和Template。</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1QDc1P.png" alt="1QDc1P.png"></p><h1 id="创建一个Django项目"><a href="#创建一个Django项目" class="headerlink" title="创建一个Django项目"></a>创建一个Django项目</h1><p>在终端输入<code>django-admin startproject xxx</code>创建一个名字为xxx的项目</p><p>查看默认目录结构</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KbkvD.png" alt="1KbkvD.png"></p><p>在终端输入<code>python manage.py runserver</code>启动调试服务器，默认ip：127.0.0.1，默认端口：8000</p><p>在浏览器中打开会出现如下画面，即代表着初始化成功</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KbMPP.png" alt="1KbMPP.png"></p><p><strong>注意</strong>：pycharm中打开的文件夹是manage.py的上一层目录</p><h1 id="Django目录介绍"><a href="#Django目录介绍" class="headerlink" title="Django目录介绍"></a>Django目录介绍</h1><ul><li>manage.py:是Django用于管理本项目的命令行工具，之后进行站点运行，数据库自动生成等都是通过本文件完成。</li><li>HelloDiango/_ <em>init</em> _ .py告诉python该目录是一个python包， 暂无内容，后期一些工具的初始化可能会用到</li><li>HelloDiango/settings.py Django项目的配置文件，默认状态其中定义了本项目引用的组件，项目名，数据库，静态资源等。</li><li>HelloDiango/urls.py 维护项目的URL路由映射，即定义当客户端访问时由哪个模块进行响应。</li><li>HelloDiango/wsgi.py.定义WSGI的接口信息，主要用于服务器集成，通常本文件生成后无需改动。</li></ul><p>settings.py文件部分介绍(改动部分在代码中会有注释介绍)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Build paths inside the project like this: os.path.join(BASE_DIR, ...)</span></span><br><span class="line">BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: keep the secret key used in production secret!</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;*reqgfy9el+d94q#&amp;ons-n&amp;_apyz9b^3v%nln)h0r89vt77br$&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SECURITY WARNING: don&#x27;t run with debug turned on in production!</span></span><br><span class="line">DEBUG = <span class="literal">True</span></span><br><span class="line"><span class="comment">#这里设为&quot;*&quot;代表都可访问</span></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">&#x27;*&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Application definition，即注册的app，在每次新建一个app后，都要在INSTALLED_APPS这个列表中进行注册，这里以App为例</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">&#x27;django.contrib.admin&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.contenttypes&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.staticfiles&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment">#中间件</span></span><br><span class="line">MIDDLEWARE = [</span><br><span class="line">    <span class="string">&#x27;django.middleware.security.SecurityMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.sessions.middleware.SessionMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.common.CommonMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.csrf.CsrfViewMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.auth.middleware.AuthenticationMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.contrib.messages.middleware.MessageMiddleware&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;django.middleware.clickjacking.XFrameOptionsMiddleware&#x27;</span>,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># 根路由</span></span><br><span class="line">ROOT_URLCONF = <span class="string">&#x27;HelloDjango.urls&#x27;</span></span><br><span class="line"><span class="comment"># 模板</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;BACKEND&#x27;</span>: <span class="string">&#x27;django.template.backends.django.DjangoTemplates&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;DIRS&#x27;</span>: [],</span><br><span class="line">        <span class="string">&#x27;APP_DIRS&#x27;</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">&#x27;OPTIONS&#x27;</span>: &#123;</span><br><span class="line">            <span class="string">&#x27;context_processors&#x27;</span>: [</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.debug&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.template.context_processors.request&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.auth.context_processors.auth&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;django.contrib.messages.context_processors.messages&#x27;</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">WSGI_APPLICATION = <span class="string">&#x27;HelloDjango.wsgi.application&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.sqlite3&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: os.path.join(BASE_DIR, <span class="string">&#x27;db.sqlite3&#x27;</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Password validation</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators</span></span><br><span class="line"></span><br><span class="line">AUTH_PASSWORD_VALIDATORS = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.UserAttributeSimilarityValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.MinimumLengthValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.CommonPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;django.contrib.auth.password_validation.NumericPasswordValidator&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/topics/i18n/</span></span><br><span class="line"><span class="comment"># 一般改为zh-hans,代表中文</span></span><br><span class="line">LANGUAGE_CODE = <span class="string">&#x27;zh-hans&#x27;</span></span><br><span class="line"><span class="comment"># 一般改位北京时间，但是得注意是上海</span></span><br><span class="line">TIME_ZONE = <span class="string">&#x27;Asia/Shanghai&#x27;</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/2.2/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">&#x27;/static/&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="测试服务器的启动"><a href="#测试服务器的启动" class="headerlink" title="测试服务器的启动"></a>测试服务器的启动</h1><p><code>python manager.py runserver [[ip:]port]</code></p><p>可以直接进行服务运行默认执行起来的端口是8000,也可以自己指定ip和端口</p><p>ip指定为0.0.0.0的时候，匹配本机的全部ip</p><p>浏览器访问:localhost:8000可以看到服务器启动成功</p><h1 id="迁移数据-pycharm连接数据库"><a href="#迁移数据-pycharm连接数据库" class="headerlink" title="迁移数据,pycharm连接数据库"></a>迁移数据,pycharm连接数据库</h1><p>迁移的概念:就是将模型映射到数据库的过程</p><p>生成迁移:<code>python manager.py makemigrations</code></p><p>执行迁移:<code>python mananger.py migrate</code></p><p>在初次启动服务器的时候会出现红字</p><p><code>You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions. Run &#39;python manage.py migrate&#39; to apply them.</code></p><p>这个是因为数据没有迁移</p><p>在终端中输入<code>python manage.py migrate</code>进行数据迁移，即可消失</p><p>介绍DataBase模块，可以直接连接操作数据库Sqlite和MySQL</p><ul><li>在settings.py文件中，DATABASES改为如下</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;ENGINE&#x27;</span>:<span class="string">&#x27;django.db.backends.mysql&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;NAME&#x27;</span>:<span class="string">&#x27;yourMySQLname&#x27;</span>,<span class="comment"># 自定义</span></span><br><span class="line"><span class="string">&#x27;USER&#x27;</span>:<span class="string">&#x27;root&#x27;</span>,<span class="comment"># 自定义</span></span><br><span class="line"><span class="string">&#x27;PASSWORD&#x27;</span>:<span class="string">&#x27;yourpassword&#x27;</span>,<span class="comment"># 自定义</span></span><br><span class="line"><span class="string">&#x27;HOST&#x27;</span>:<span class="string">&#x27;127.0.0.1&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;PORT&#x27;</span>:<span class="string">&#x27;3306&#x27;</span>,</span><br></pre></td></tr></table></figure><ul><li>其次在MySQL中建立表，在pycharm中连接</li><li>最后终端执行迁移</li></ul><p><strong>注意</strong>：在执行迁移的时候可能会出现如下错误</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django.core.exceptions.ImproperlyConfigured: Error loading MySQLdb module: No module named <span class="string">&#x27;MySQLdb&#x27;</span> .</span><br><span class="line">Did you install mysqlclient or MySQL-python?</span><br></pre></td></tr></table></figure><p><strong>填坑</strong>：</p><p>首先介绍一下python中常用的MySQL库</p><ul><li>mysqlclient<ul><li>python2，3都能直接使用</li><li>致命缺点<ul><li>对msql安装又要求，必须指定位置存在配置文件</li></ul></li></ul></li><li>python-mysql<ul><li>支持python2，不支持python3</li></ul></li><li>pymysql<ul><li>python2，python3都支持</li><li>还可以伪装成前面的库</li></ul></li></ul><p>因此要在项目的_ <em>init</em> _.py文件中加入如下代码进行伪装</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">pymysql.install_as_MySQLdb()</span><br></pre></td></tr></table></figure><h1 id="创建一个应用"><a href="#创建一个应用" class="headerlink" title="创建一个应用"></a>创建一个应用</h1><p>在终端输入<code>django-admin startproject xxx</code>或者<code>python manage.py startapp xxx</code>创建一个名字为xxx的app</p><p>查看目录结构</p><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KbwGV.png" alt="1KbwGV.png"></p><p>使用应用前需要将应用配置到项目中，在settings.py中将 应用加入到INSTALLED_ APPS选项中</p><h1 id="项目目录介绍"><a href="#项目目录介绍" class="headerlink" title="项目目录介绍"></a>项目目录介绍</h1><ul><li>_ <em>init</em> _ .py:其中暂无内 容，使得app成为一个包</li><li>admin.py:管理站点模型的声明文件，默认为空</li><li>apps.py:应用信息定义文件，在其中生成了AppConfig,该类用于定义应用名等数据</li><li>models.py:添加模型层数据类文件</li><li>views.py:定义URL相应函数(路由规则)</li><li>migrations包:自动生成，生成迁移文件的</li><li>tests.py:测试代码文件</li></ul><h1 id="基本视图"><a href="#基本视图" class="headerlink" title="基本视图"></a>基本视图</h1><ul><li>首先我们在views.py中建立一个路由响应函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">welcome</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&#x27;HelloDjango&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>接着我们在urls中进行注册</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> App <span class="keyword">import</span> views</span><br><span class="line">path(<span class="string">&#x27;welcome/&quot;,views.welcome)</span></span><br></pre></td></tr></table></figure><p>基于模块化的设计，我们通常会在每个app中定义自己的urls</p><p>在项目的urls中将app的urls包含进来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line">path(<span class="string">&#x27;welcome/&quot; ,include(&#x27;</span>App.urls<span class="string">&#x27;))</span></span><br></pre></td></tr></table></figure><h1 id="基本模板"><a href="#基本模板" class="headerlink" title="基本模板"></a>基本模板</h1><p>模板实际上就是我们用HTML写好的页面</p><p>创建模板文件夹,两种:</p><ul><li><p>在工程目录的需要注册</p><p>settings中 的TEMPLATES中的DIRS中添加<code>os.path.join(BASE_ DIR,&#39;templates&#39;)</code></p><p>在模板文件夹中创建模板文件</p></li><li><p>在views中去加载渲染模板</p></li></ul><ol><li><pre><code class="python">from django.template import loadertemplate = loader.get_ template(&#39;xxx&#39;)return HttpResponse(template.render())<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   **注意**：此种方法在注册时需要改变：&#96;xxx.apps.xxxConfig&#96;</span><br><span class="line"></span><br><span class="line">2. &#96;return render(request,&#39;xx&#39;)&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 定义模型（简单例子）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">- 定义年级</span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;python</span><br><span class="line">  class Grade (models.Model) :</span><br><span class="line">      gname &#x3D; models.CharField(max_length&#x3D;10)</span><br><span class="line">      gdate &#x3D; models.Date TimeField()</span><br><span class="line">      ggirlnum &#x3D; models.IntegerField()</span><br><span class="line">      gboynum &#x3D; models.IntegerField()</span><br><span class="line">      isDelete &#x3D; models.BooleanField()</span><br><span class="line">  </span><br></pre></td></tr></table></figure></code></pre></li></ol><ul><li><p>定义学生</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Students</span>(<span class="params">models.Model</span>):</span></span><br><span class="line">    sname = models.CharField(max_ length=<span class="number">20</span>)</span><br><span class="line">    sgender = models.BooleanField(default=<span class="literal">True</span>)</span><br><span class="line">    sage = models.IntegerField()</span><br><span class="line">    sinfo = models.CharField(max_ length=<span class="number">20</span>)</span><br><span class="line">    isDelete = models .BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    <span class="comment">#关联外键</span></span><br><span class="line">    sgrade = models.ForeignKey(Grade,on_delete=models.CASCADE)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><p><strong>注意</strong>：</p><p>在django2.0后，定义外键和一对一关系的时候需要加on_delete选项，此参数为了避免两个表里的数据不一致问题，不然会报错：TypeError: <strong>init</strong>() missing 1 required positional argument: ‘on_delete’</p><p>参数说明：<br>            on_delete有CASCADE、PROTECT、SET_NULL、SET_DEFAULT、SET()五个可选择的值，一般情况下使用CASCADE就可以了。<br>            CASCADE：此值设置，是级联删除。<br>            PROTECT：此值设置，是会报完整性错误。<br>            SET_NULL：此值设置，会把外键设置为null，前提是允许为null。<br>            SET_DEFAULT：此值设置，会把设置为外键的默认值。<br>            SET()：此值设置，会调用外面的值，可以是一个函数。</p><h1 id="测试数据模型"><a href="#测试数据模型" class="headerlink" title="测试数据模型"></a>测试数据模型</h1><p>进入python shell: <code>python manage.py shell</code><br>导入包: </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> App.models ,<span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> diango.utils <span class="keyword">import</span> timezone</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> *</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>数据测试增删改查</p><ul><li><p>查询:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名.obiects.<span class="built_in">all</span>()</span><br><span class="line">Grade.obiects.<span class="built_in">all</span>()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>插入数据:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">grade_one= Grade()</span><br><span class="line">grad_one_gname= <span class="string">&#x27;class1&#x27;</span></span><br><span class="line">grade_one_gdate_datetime(year=<span class="number">2020</span>,month=<span class="number">1</span>,day=<span class="number">1</span>)</span><br><span class="line">grade_one_ggirlnum=<span class="number">5</span></span><br><span class="line">grade_one_gboynum= <span class="number">60</span></span><br><span class="line">grade_one_save()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查看某个指定对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">类名.objects.get(pk=<span class="number">1</span>)</span><br><span class="line">Grade.objects.get(pk=<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">模型对象.属性=属性值</span><br><span class="line">模型对象.save()</span><br><span class="line">grade_one_gboynum = <span class="number">55</span></span><br><span class="line">grade_one_save()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>删除数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">模型对象.delete()</span><br><span class="line">grade_ one.delete()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试关联对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">stu = Students()</span><br><span class="line">stu.sname=<span class="string">&#x27;Tom&#x27;</span></span><br><span class="line">stu.sgender=<span class="literal">True</span></span><br><span class="line">stu.sage= <span class="number">20</span></span><br><span class="line">stu.sinfo=<span class="string">&#x27;小天才&#x27;</span></span><br><span class="line">stu.sgrade=grade_one</span><br><span class="line">stu.save()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>获得关联对象集合</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对象名.关联的类名小写_ set.all()</span></span><br><span class="line">grade_ one.student <span class="built_in">set</span>.<span class="built_in">all</span>()<span class="comment">#获取班级中的所有同学</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h1 id="结合使用"><a href="#结合使用" class="headerlink" title="结合使用"></a>结合使用</h1><ul><li><p>在urls配置路由规则</p></li><li><p>在views中调用models中的函数进行查询</p></li><li><p>在views中对模板进行渲染</p></li><li><p>模板获取views中传过来的数据</p></li><li><p>渲染后的模板显示给用户挖坑<br>表达式</p><p>而填坑需要构建context的参数</p><p>如：</p><p>context={</p><p>​    ‘student’:’小明’</p><p>}</p></li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul><li>django简介：<a href="https://baike.baidu.com/item/django/61531?fr=aladdin">https://baike.baidu.com/item/django/61531?fr=aladdin</a></li><li>CS/BS模型介绍：<a href="https://blog.csdn.net/weixin_43025071/article/details/99415216">https://blog.csdn.net/weixin_43025071/article/details/99415216</a></li><li>MVC模型介绍：<a href="https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&fromid=8160955&fr=aladdin">https://baike.baidu.com/item/MVC%E6%A1%86%E6%9E%B6/9241230?fromtitle=MVC%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F&amp;fromid=8160955&amp;fr=aladdin</a></li><li>MTV模型介绍：<a href="https://blog.csdn.net/acs713/article/details/40651457">https://blog.csdn.net/acs713/article/details/40651457</a></li></ul><h1 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h1><p><img src="https://gitee.com/Kinmfer/BlogImages/raw/master/img/1KjOv6.png" alt="1KjOv6.png"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Web框架 </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度搜索技巧</title>
      <link href="2019/11/15/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
      <url>2019/11/15/%E7%99%BE%E5%BA%A6%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<h1 id="加号——强制包含关键词"><a href="#加号——强制包含关键词" class="headerlink" title="+加号——强制包含关键词"></a>+加号——强制包含关键词</h1><p>将“+”后面的关键词强制包含到搜索结果中</p><h1 id="减号——排除关键词或者网站"><a href="#减号——排除关键词或者网站" class="headerlink" title="-减号——排除关键词或者网站"></a>-减号——排除关键词或者网站</h1><p>在某个字词或网站网址前添加短横 (-) 可排除所有包含该字词的搜索结果。在搜索“汽车品牌美洲虎”和“动物美洲虎”这类同义词时，此功能特别实用。<br>提示：您也可以根据其他运算符排除搜索结果，例如排除特定网站中的所有搜索结果。例：美洲虎速度 -汽车或熊猫 -site:baike.baidu.com</p><h1 id="””双引号和书名号——精确匹配"><a href="#””双引号和书名号——精确匹配" class="headerlink" title="””双引号和书名号——精确匹配"></a>””双引号和书名号——精确匹配</h1><p>查询词加上双引号“”则表示查询词不能被拆分，在搜索结果中必需完整出现，可以对查询词精确匹配。如果不加双引号“”经过百度分析后可能会拆分。<br>查询词加上书名号《》有两层特殊功能，一是书名号会出现在搜索结果中；二是被书名号扩起来的内容，不会被拆分。 书名号在某些情况下特别有效果，比如查询词为手机，如果不加书名号在很多情况下出来的是通讯工具手机，而加上书名号后，《手机》结果就都是关于电影方面的了。</p><h1 id="（-）——并行搜索"><a href="#（-）——并行搜索" class="headerlink" title="（|）——并行搜索"></a>（|）——并行搜索</h1><p>逻辑“或”的操作，使用”A|B”来搜索”或者包含关键词A，或者包含关键词B”的网页。使用同义词作关键词并在各关键词中使用“|”运算符可提高检索的全面性。如：“计算机|电脑”搜索即可。</p><h1 id="site——在特定网站或域中搜索"><a href="#site——在特定网站或域中搜索" class="headerlink" title="site——在特定网站或域中搜索"></a>site——在特定网站或域中搜索</h1><p>仅搜索来自特定网站的结果。site:”后面跟的站点域名，不要带“http://”。site:和站点名之间，不要带空格。<br>例：奥林匹克 site:nytimes.com<br>提示：也可以在特定顶级域（如 .org 或 .edu）或国家/地区顶级域（如 .de 或 .jp）中进行搜索。例：奥林匹克 site:.gov</p><h1 id="inurl——在特定url链接中搜索"><a href="#inurl——在特定url链接中搜索" class="headerlink" title="inurl——在特定url链接中搜索"></a>inurl——在特定url链接中搜索</h1><p>在搜索中加入“inurl:”可以限定在网站url链接中搜索网站信息。由于关键词出现在url 中对排名有一定影响，使用inurl:搜索可以更准确地找到竞争对手。<br>例如：auto视频教程 inurl:video<br>搜索词“auto视频教程”是可以出现在网页的任何位置，而“video”则必须出现在网页url中。</p><h1 id="intitle——在特定的网页标题中搜索"><a href="#intitle——在特定的网页标题中搜索" class="headerlink" title="intitle——在特定的网页标题中搜索"></a>intitle——在特定的网页标题中搜索</h1><p>在搜索中加入“intitle：”可以限定在网页标题title中搜索网站信息。intitle:和后面的关键词之间不要有空格。<br>例如:出国留学 intitle:美国<br>搜索词“出国留学”可以出现在网页的任何位置，而“美国”必需出现在网页title中。<br>使用intitle 指令找到的文件是更准确的竞争页面。如果关键词只出现在页面可见文字中，而没有出现在title 中，大部分情况是并没有针对关键词进行优化，所以也不是有力的竞争对手。</p><h1 id="filetype——在特定文档格式中搜索"><a href="#filetype——在特定文档格式中搜索" class="headerlink" title="filetype——在特定文档格式中搜索"></a>filetype——在特定文档格式中搜索</h1><p>在搜索中加入“Filetype:”可以限定在文档格式中搜索网页信息，支持文档格式有pdf，ps,dwf, kml, kmz, doc，xls，ppt，rtf,swf,all(所有上面的文档格式)。对于找文档资料相当有帮助。<br>例如：photoshop实用技巧 filetype:doc</p><p>下面这一条在知乎里面找到的，一段文字说了半天也不知道他这方法用来干啥的，个人感觉并没有什么用，有虫子知道第9条干啥的不？欢迎留言讨论</p><h1 id="“开始连接”、“正在连接”——搜索"><a href="#“开始连接”、“正在连接”——搜索" class="headerlink" title="“开始连接”、“正在连接”——搜索***"></a>“开始连接”、“正在连接”——搜索***</h1><p>网络上有很多热心人提供的下载地址。为了表明真实可靠，把下载过程也同时附上。现在比较流行的下载工具是flashget和迅雷。 Flashget下载开始就是“正在连接”，迅雷则是“开始连接”。所以，可以用想找的电影名字，加上“开始连接”或者“正在连接”，来寻找。 检索式形式如：“电影名 开始连接”、电影名 正在连接”、“电影名 (开始连接 | 正在连接)” 。如：哈利波特4 开始连接 、倩女幽魂 正在连接 、史前一万年 (正在连接 | 开始连接) 。</p><p>下面三条也是知乎找的，第10、11条完全没搞懂怎么用以及有什么便利之处，有虫子知道的话，欢迎留言讨论</p><h1 id="『』——查找论坛版块"><a href="#『』——查找论坛版块" class="headerlink" title="『』——查找论坛版块"></a>『』——查找论坛版块</h1><p>百度作为国人自己开发的搜索引擎，支持的中文标点符号最多。『』是直行双引号。 检索式形式如： 『论坛版块名称』 。如：『影视交流』。PS：这个直行双引号怎么输入呢？调出中文输入法，选择“软键盘”——“标点符号”，就能找到。</p><h1 id="“文本方式”——查找论坛内容"><a href="#“文本方式”——查找论坛内容" class="headerlink" title="“文本方式”——查找论坛内容"></a>“文本方式”——查找论坛内容</h1><p>论坛是个宝库，资源丰富，人才荟萃。交流的气息浓，在反复的讨论和回帖中，可以获得相对真实的信息。如：文本方式 可口可乐 、文本方式 超级女声。</p><h1 id="intitle-bookmarks——查询别人的收藏夹"><a href="#intitle-bookmarks——查询别人的收藏夹" class="headerlink" title="intitle:bookmarks——查询别人的收藏夹"></a>intitle:bookmarks——查询别人的收藏夹</h1><p>IE浏览器的收藏夹导出后，网页的标题（title）是bookmarks。百度的intitle语法可以把搜索范围限定在网页标题内。所以，用intitle语法可以查询别人的收藏夹，结果应该都是精品，没有哪个人会把垃圾放到自己收藏夹的。如：小说 intitle:bookmarks \查找小说的精彩站点 语文 intitle:bookmarks \查找语文方面的精彩站点 。</p>]]></content>
      
      
      <categories>
          
          <category> 杂 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-6</title>
      <link href="2019/11/10/Network-6/"/>
      <url>2019/11/10/Network-6/</url>
      
        <content type="html"><![CDATA[<h1 id="清理BGP进程"><a href="#清理BGP进程" class="headerlink" title="清理BGP进程"></a>清理BGP进程</h1><h2 id="硬清："><a href="#硬清：" class="headerlink" title="硬清："></a>硬清：</h2><p><code>clear ip bgp * </code>  要down掉所有邻居，要重建建立</p><h2 id="软清："><a href="#软清：" class="headerlink" title="软清："></a>软清：</h2><p><code>clear ip bgp * soft</code>  不会down掉邻居，重新收发路由</p><p><code>clear ip bgp * so out</code>  重新发一次路由</p><h2 id="路由重刷新："><a href="#路由重刷新：" class="headerlink" title="路由重刷新："></a>路由重刷新：</h2><p>(config-router)</p><p><code>nei 2.2.2.2 soft-reconfiguration inbound</code></p><p><code>clear ip bgp * soft in</code></p><hr><p>查看我对2.2.2.2这个邻居通告出去的所有路由的情况</p><p><code>sh ip bgp nei 2.2.2.2 adver</code></p><p>查看我这个邻居给了我什么</p><p><code>sh ip bgp nei 2.2.2.2 received-routers</code></p><hr><h1 id="BGP路由汇总"><a href="#BGP路由汇总" class="headerlink" title="BGP路由汇总"></a>BGP路由汇总</h1><p>BGP在任何一台设备都可以汇总</p><p><code>agg [汇总的路由][汇总的掩码]</code></p><p>BGP默认会把汇总和明细都发出去</p><p><code>agg [汇总的路由][汇总的掩码]summary-only</code> </p><p>在汇总的设备上产生s&gt;，把其他条目抑制了，本地生成的东西会丢失as号</p><p><code>agg [汇总的路由][汇总的掩码]summary-only as-set</code>  </p><p>这样的汇总会携带as号，不会环路</p><p><code>agg [汇总的路由][汇总的掩码]summary-only as-set attribute-map [route-map]名</code>   </p><p><code>router-map zj per 10</code></p><p><code>set metric 50</code></p><hr><h1 id="过载保护"><a href="#过载保护" class="headerlink" title="过载保护"></a>过载保护</h1><p><code>nei 2.2.2.2 maximum-prefix 3 50 warning-only/restsrt</code></p><p>监控R2传给自己的条目，为3条，如果超过50%，就执行什么动作</p><h1 id="社团属性"><a href="#社团属性" class="headerlink" title="社团属性"></a>社团属性</h1><p>主要来控制路由的传播范围</p><p>社团属性，也叫共同体属性，属于可选传递属性</p><p>可选：就是BGP所有邻居有可能不识别这个属性</p><p>社团属性类似于tag标记，它允许一个路由器可以用标签指示符来标记路由，并且允许其他路由器根据标记对路由进行处理，并且允许打上多个标记</p><p>社团属性分为2种：</p><p>1.well-known communities  公认团体</p><p>2.private communities  私有团体</p><p>社团属性预分类好了3类well-known属性：<br>no-advertise:携带这个的不会给任何bgp邻居，也就是指传达给一个邻居</p><p>no-export:携带这个的不会传出as，只会给IBGP邻居</p><p>local-as:携带这个的不会传出小as</p><p>默认情况下社团属性不会传给邻居，所以必须有以下命令</p><p>(config-router)</p><p><code>nei 1.1.1.1 send-com</code></p><p>只会传给1.1.1.1这个邻居，并且只在他身上生效，默认不会继续传递</p><p>发送方p><p><code>acce 1 per 33.3.3.0</code></p><p><code>router-map zj per 10</code></p><p><code>mat ip add 1</code></p><p><code>set community 4:22</code></p><p><code>route-map zg per 20</code></p><p> (config-router)</p><p><code>nei 32.32.23.2 route-map zj out</code></p><p><code>nei 32.32.23.2 send-community</code></p><p>接收方</p><p><code>ip community-list 1 per 4:22</code></p><p><code>route-map zj1 deny 10</code></p><p><code>mat community 1</code></p><p><code>route-map zj1 per 20</code></p><p>(config-router)</p><p><code>nei 1.1.1.1 route-map zj1 out</code></p><hr><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>用来对对as号进行过滤，控制自己只接收哪些路由</p><p>^ 表达以什么开头</p><p>$ 表达以什么结尾</p><p>_ 匹配一个符号</p><p>. 匹配任意一个字符</p><p>* 之前的字符可以重复0-多次</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>100 : （10086 i，100 i，12100 i）</p><p><em>100</em> : （99 100 103 i）</p><p>_100$ : （32 33 34 100 i）</p><p>^100_ : （100 33 334 35 i）</p><p>^100$ ：（100 i）</p><p>100$ ：（33 34 35 9100 i）</p><p>.* ：所有路由</p><p><code>sh ip bgp regexp ^100$</code></p><p>1.</p><p><code>ip as-path acce 1 per ^3$</code></p><p>(config-router)</p><p><code>nei 2.2.2.2 filter-list 1 in</code> 只允许给我（3 i）这种情况的路由</p><p>2.</p><p><code>ip as-path acce 1 per _5$</code></p><p><code>route-map AS per 10</code></p><p><code>match as-path 1</code></p><p><code>set wei 100</code></p><p><code>route-map AS per 20</code></p><p>(config-router)</p><p><code>nei 32.32.23.3 route-map AS in</code></p><hr><h1 id="条件通告"><a href="#条件通告" class="headerlink" title="条件通告"></a>条件通告</h1><p>当本地出现/不出现什么路由的时候才通告给对方</p><p><code>acce 1 per 5.5.5.0</code> 对方</p><p><code>acce 2 per 33.3.3.0</code> 自己</p><p><code>route-map IN per 10</code></p><p><code>mat ip add 1</code></p><p><code>route-map OUT per 10</code></p><p><code>mat ip add 2</code></p><p>(config-router)</p><p><code>nei 32.32.35.5 advertise-map IN exit-map OUT</code></p><p>如果IN列表的东西出现了，才发布自己OUT列表的东西</p><hr><h1 id="BGP负载均衡"><a href="#BGP负载均衡" class="headerlink" title="BGP负载均衡"></a>BGP负载均衡</h1><p>(config-router)</p><p><code>maxi [多少条]</code> 让本路由器最多支持多少条负载均衡</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-5</title>
      <link href="2019/11/10/Network-5/"/>
      <url>2019/11/10/Network-5/</url>
      
        <content type="html"><![CDATA[<h1 id="BGP"><a href="#BGP" class="headerlink" title="BGP"></a>BGP</h1><p>BGP（border gateway protocol）边界网关路由协议</p><p>通过是否工作在同一个as（自治系统）进行划分的</p><p>AS（autonomous systems）：运行同一种选路策略，由统一管理者管理</p><p>RFC文档：对于as定义，一组被统一管理的路由器，它们使用同一个内部网关协议，并且使用外部网关协议到其他AS</p><p>IANA（英特网地址授权委员会）分配ip和as号</p><p>AS号范围：0-65535</p><p>其中0，65535都被保留的，1-64511是公有as64512-65534私有as</p><p>现在ios系统支持4字节的as号（2^32）个as</p><p>IGP： RIP  EIGRP  OSPF  ISIS IGRP</p><p>EGP:   BGPv4   EGP（EGP是BGP前身）</p><p>BGP属于路径向量路由协议</p><p>使用BGP的原因：</p><p>1.一个数据包从一个AS到另一个的时候，必须使用BGP</p><p>2.当多条链路从一个as到另一个as时候，必须使用BGP</p><p>3.当离开as部署路由策略和路由选择，建议使用BGP</p><p>BGP使用触发更新和增量更新</p><hr><h2 id="BGP特点"><a href="#BGP特点" class="headerlink" title="BGP特点"></a>BGP特点</h2><p>1.BGP基于tcp，并且是唯一一个基于tcp的路径选择协议，源端口大于1024的随机端口，（1024以下的是比较重要的端口），目标端口是179，基于tcp，由于也是端到端的，所以要主动 指neighbor才能建立邻居</p><p>2.BGP只支持触发更新</p><p>3.通过keep alive消息维持tcp会话</p><p>4.BGP有丰富的度量值（丰富的属性）</p><p>5.给大型网络设计的（比如英特网）</p><hr><h2 id="BGP三张表"><a href="#BGP三张表" class="headerlink" title="BGP三张表"></a>BGP三张表</h2><h3 id="1-邻居表"><a href="#1-邻居表" class="headerlink" title="1.邻居表"></a>1.邻居表</h3><p>记录了BGP的邻居，BGP邻居可以非直连，需要手工指定，BGP是没有组播地址，都是单播</p><h3 id="2-BGP表"><a href="#2-BGP表" class="headerlink" title="2.BGP表"></a>2.BGP表</h3><p>记录了从邻居那里学来的所有路由，可以有多条路径去往目标，携带BGP属性</p><h3 id="3-路由表"><a href="#3-路由表" class="headerlink" title="3.路由表"></a>3.路由表</h3><p>BGP默认不负载均衡，总会通过BGP表选出一条最佳的路径</p><hr><h2 id="BGP的AD-20-200"><a href="#BGP的AD-20-200" class="headerlink" title="BGP的AD 20 200"></a>BGP的AD 20 200</h2><hr><h2 id="BGP的4个消息"><a href="#BGP的4个消息" class="headerlink" title="BGP的4个消息"></a>BGP的4个消息</h2><h3 id="1-open"><a href="#1-open" class="headerlink" title="1.open"></a>1.open</h3><p>发现邻居，包括hold time（默认180s）和router-id</p><h3 id="2-keep-alive"><a href="#2-keep-alive" class="headerlink" title="2.keep alive"></a>2.keep alive</h3><p>维系邻居，维系tcp邻居，每60s发送一次，3倍时间没收到对面的，就表示邻居挂了</p><h3 id="3-update"><a href="#3-update" class="headerlink" title="3.update"></a>3.update</h3><p>通过报文，通告从邻居那里知道的路径，并携带了丰富的网络属性，只通告最优的的给邻居 </p><h3 id="4-notification"><a href="#4-notification" class="headerlink" title="4.notification"></a>4.notification</h3><p>当配置出现错误时候的消息，当BGP死了的时候也会出现 </p><hr><h2 id="BGP的5个状态"><a href="#BGP的5个状态" class="headerlink" title="BGP的5个状态"></a>BGP的5个状态</h2><h3 id="1-idle"><a href="#1-idle" class="headerlink" title="1.idle"></a>1.idle</h3><p>找路由表看看是否有去邻居的路由，如果找不到就卡在idle状态，这个时候需要检查底层IGP</p><h3 id="2-connect"><a href="#2-connect" class="headerlink" title="2.connect"></a>2.connect</h3><p>路由器知道去邻居的路径，并且在这个状态完成tcp三次握手</p><h3 id="3-open-sent"><a href="#3-open-sent" class="headerlink" title="3.open sent"></a>3.open sent</h3><p>向邻居发送open消息</p><h3 id="4-open-confirm"><a href="#4-open-confirm" class="headerlink" title="4.open confirm"></a>4.open confirm</h3><p>作为一种response响应，如果没有响应，会卡在active状态（活动非正常状态），这个时候需要检查对端</p><h4 id="（一般常见问题-）"><a href="#（一般常见问题-）" class="headerlink" title="（一般常见问题:）"></a>（一般常见问题:）</h4><p>1.对端没有路由达到我的更新源2.邻居neighbor地址错了3.对端没指neighbor4.as号错误</p><h3 id="5-established"><a href="#5-established" class="headerlink" title="5.established"></a>5.established</h3><p>最终BGP状态</p><hr><h2 id="BGP的neighbor"><a href="#BGP的neighbor" class="headerlink" title="BGP的neighbor"></a>BGP的neighbor</h2><p>BGP的neighbor又被称为BGP的peers，也就是BGP对等体</p><p>BGP的speaker指运行BGP的路由器</p><p>EBGP：运行在as与as之间的设备</p><p>IBGP： 运行在同一个as之内的设备</p><p>EBGP建议使用直连，IBGP建议使用环回口</p><p>EBGP管理距离20</p><p>IBGP管理距离200</p><p>本地路由也是200</p><hr><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>(config)</p><p><code>router bgp [as]</code>  这里as表示整个路由器属于某个as</p><p><code>bgp router-id [rid]</code>  这里必须要写rid</p><p><code>nei [对端ip] remote-as [对端as]</code>  </p><p><code>nei [对端ip] up [接口]</code>  给对端指定自己的更新源</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>BGP默认更新源是自己的出接口，如果要用环回口建立邻居，需要修改自己的更新源（两边都要做）</p><p>(config -router)</p><p><code>nei 2.2.2.2 remote 64511</code></p><p><code>nei 2.2.2.2 up lo0</code></p><p>EBGP建立邻居也可以用环回口，但是不会通，因为EBGP之间的ttl=1，所以需要更改EBGP跳数 </p><p>(config-router)</p><p><code>nei 4.4.4.4 remote 64512</code></p><p><code>nei 4.4.4.4 up lo0</code></p><p><code>nei 4.4.4.4 ebgp-mul</code>  更改默认跳数</p><p>[nei 4.4.4.4 ebgp-mul 255==nei 4.4.4.4 ebgp-mul]</p><p><code>sh ip bgp sum</code> 查看bgp邻居信息</p><p><code>sh ip bgp nei</code>  查看bgp邻居细节信息</p><p>用<code>clear ip bgp * </code>重置bgp进程（硬重启） </p><p>用<code>clear ip bgp * so</code> 软重启 </p><p><code>sh tcp bri</code>查看自己和对方开放的端口，ESTAB才算真的通信 </p><p>sh ip bgp 查看bgp表 </p><p>必须* + &gt; 才可以载入路由表中！！！！ </p><p>* 代表路由可用 &gt; 代表最优路由（同一条路由理论上永远只有一个） </p><p>r 代表本地路由装载失败，因为BGP的ad大于其他协议，但是该路由最优，还是会传给BGP对等体 <code>sh ip bgp rib-fail </code></p><p>next-hop 如果是0.0.0.0代表myself，本地宣告 </p><p> &gt; 的路由一定会传递给bgp对等体，但不一定载入本地路由表 </p><p>*&gt; 该路由最优，一定会被装到路由表 </p><p>打&gt;的条件： 1.下一跳可达 下一跳不可达解决方案： </p><p>写静态路由 </p><p>在EBGP条件下可以考虑<code>nei 4.4.4.4 next-hop-self </code></p><p>2.如果“同步”开启，就要满足“同步”原则 “同步规则”从IBGP邻居学到的路由，不能使用也不能传给EBGP邻居，直到从IGP也学到该路由 一般情况关闭同步</p><p>(config-router)</p><p><code>no syn </code></p><p>3.选路 </p><hr><p>bgp宣告： </p><p>bgp宣告的是路由！！！！不是接口，只要路由表存在的路由，都可以宣告进bgp </p><p>(config-router) </p><p><code>net 11.1.1.0 mask 255.255.255.0</code> 要和路由表完全一致 </p><p>EBGP传给自己内部as信息的时候，下一跳不会改变，可能造成自己内部其他对等体的下一跳不可达问题，导致没有&gt; </p><p>所以需要在边界路由器对内部 </p><p>(config-router) </p><p><code>nei 2.2.2.2 next-hop-self</code> 告诉自己对等体把自己当作下一跳 </p><hr><p>【ospf宣告环回口会把环回口变成32位子网，影响选路，所以需要进入lo接口中，ip os net point-to-point，这样可以让环回口恢复24位子网】 </p><hr><h1 id="IBGP的水平分割"><a href="#IBGP的水平分割" class="headerlink" title="IBGP的水平分割"></a>IBGP的水平分割</h1><p>从IBGP邻居学到的路由不会传给其他的IBGP邻居（BGP防环用的）</p><p>所以可以考虑建立全互联关系</p><hr><p>在防环的情况下打破水平分割</p><p>1.路由反射器（RR:router-reflector）</p><p>RRC（路由反射器用户）</p><p>non-RRC</p><p>配置RRC发命令会发生在中间路由器上</p><p>（config-router）</p><p><code>nei [邻居rid] router-reflactor-client</code>  把目标配置成RRC，自己就成为RR</p><p>路由反射器只能反射路由，不能对路由属性（比如next-hop）进行修改，是爱没办法只能用静态路由解决</p><h2 id="路由反射防环方法："><a href="#路由反射防环方法：" class="headerlink" title="路由反射防环方法："></a>路由反射防环方法：</h2><p>1.ogrinator 起源者属性</p><p>如果起源者的rid是自己的rid，就不能接受该路由</p><p>使用<code>sh ip bgp x.x.x.0</code>  查看路由的属性</p><p>默认情况起源者是开启的</p><p>2.cluster-list簇列表属性，罗列了路由器所有经过的RR的rid</p><p>收到的路由簇列表中如果有本地的RID，就deny该路由 </p><hr><h2 id="配置联盟"><a href="#配置联盟" class="headerlink" title="配置联盟"></a>配置联盟</h2><p>联盟里的EBGP是不受水平分割影响的，联盟只对内部有效，对于别的as的设备来说是透明的</p><p>配置</p><p>(config)</p><p><code>router bgp 12 </code>  进入小as</p><p><code>bgp router-id 2.2.2.2</code></p><p><code>nei 1.1.1.1 remote 12</code></p><p><code>nei 1.1.1.1 up lo0</code></p><p><code>nei 23.23.23.3 remote 3</code></p><p><code>bgp conf id 123</code>  声明自己所在的大as号叫123</p><p>！！！在联盟与联盟之间的边界路由要配置<code>bgp conf peers [对方as号]</code> ，让路由器知道实际上对方as也和自己一样属于同一个大as中 </p><hr><h2 id="配置peer-group"><a href="#配置peer-group" class="headerlink" title="配置peer group"></a>配置peer group</h2><p>配置模版</p><p><code>nei [peer group名:TEST] peer-group</code> 定义一个模版</p><p><code>nei TEST remote 123</code></p><p><code>nei TEST up lo0</code></p><p><code>nei TEST route-ref</code></p><p><code>nei 1.1.1.1 peer TEST</code></p><hr><h2 id="BGP认证"><a href="#BGP认证" class="headerlink" title="BGP认证"></a>BGP认证</h2><p>BGP只支持md5认证，没有明文认证</p><p>(config-router)</p><p><code>nei [邻居] pass [0-7加密类型] [密码]</code></p><p>0明文显示，7是cisco私有密文显示</p><hr><h2 id="BGP路由属性"><a href="#BGP路由属性" class="headerlink" title="BGP路由属性"></a>BGP路由属性</h2><p>公认vs任选</p><p>公认：所有厂商都支持</p><p>任选：不是所有厂商都支持</p><p>必须遵守vs任意遵守</p><p>可传输vs非可传输</p><hr><h3 id="公认必尊属性"><a href="#公认必尊属性" class="headerlink" title="公认必尊属性"></a>公认必尊属性</h3><p>所有厂商都识别，必须选择使用，一定携带在路由更新消息中</p><h3 id="公认任意遵守属性"><a href="#公认任意遵守属性" class="headerlink" title="公认任意遵守属性"></a>公认任意遵守属性</h3><p>所有厂商都识别，不一定用它，有可能出现在更新消息中</p><h3 id="任选属性"><a href="#任选属性" class="headerlink" title="任选属性"></a>任选属性</h3><p>-任选可传输：如果识别，本地生效后传给邻居，如果不识别，也是可以传给邻居的</p><p>-任选非可传输：如果不识别，就忽略它，不会传给邻居</p><hr><h3 id="打-号的是公认必遵："><a href="#打-号的是公认必遵：" class="headerlink" title="打*号的是公认必遵："></a>打*号的是公认必遵：</h3><p>as path*</p><p>next-hop*</p><p>origin*</p><p>local preference</p><p>MED</p><p>weight</p><hr><h4 id="as-path"><a href="#as-path" class="headerlink" title="as path"></a>as path</h4><p>作用：用来描述一条路由经过的as的，EBGP用来放环的</p><p>选路：优选短的as path，代表经历了少的as，距离本地近</p><p>分类：公认必遵</p><h4 id="next-hop"><a href="#next-hop" class="headerlink" title="next-hop"></a>next-hop</h4><p>作用：0.0.0.0代表路由是本地产生的</p><p>选路：优选起源于本地的路由0.0.0.0</p><p>分类：公认必遵</p><h4 id="origin"><a href="#origin" class="headerlink" title="origin"></a>origin</h4><p>作用：描述路由起源的</p><p>i 通过network命令宣告进来的</p><p>e 通过EGP协议重发布进来的</p><p>？通过其他协议重发布进来的</p><p>选路：优选起源代码小的</p><p>​            代码i&lt;e&lt;?</p><p>分类：公认必遵</p><h4 id="weight"><a href="#weight" class="headerlink" title="weight"></a>weight</h4><p>作用：只影响本地路由选择</p><p>选路：优选大的weight值</p><p>默认32768和0，起源本地的路由都是32768，邻居来的都是0</p><p>分类：cisco私有的，最安全的属性，因为影响范围小</p><h4 id="local-preference"><a href="#local-preference" class="headerlink" title="local-preference"></a>local-preference</h4><p>作用：适用于数据包出站选路（数据包从as出去）</p><p>选路：</p><p>越大越优先，默认100</p><p>分类：公认任意遵守属性，但是影响整个as的设备，适用于影响本as的IBGP邻居的出站</p><h4 id="MED（metric）"><a href="#MED（metric）" class="headerlink" title="MED（metric）"></a>MED（metric）</h4><p>作用：影响其他as的EBGP设备，影响入站选路</p><p>选路：越小越优先，默认值0</p><p>分类：任选非可传输属性</p><hr><h3 id="BGP的最终选路原则："><a href="#BGP的最终选路原则：" class="headerlink" title="BGP的最终选路原则："></a>BGP的最终选路原则：</h3><p>1.优选高的weight值</p><p>2.优选高的local preference值</p><p>3.优选起源于本地的路由（next-hop）</p><p>4.优选最短的as-path</p><p>5.优选最小的origin code（i，e，？）</p><p>6.优选最小的MED值</p><p>7.EBGP路由优于IBGP路由</p><p>8.优选最近的IGP邻居</p><p>9.优选最老的EBGP路由</p><p>10.优选最小邻居的router-id</p><p>11.优选最小邻居的ip地址</p><p>（理论上前6条就搞定了）</p><hr><h3 id="注意！！！！"><a href="#注意！！！！" class="headerlink" title="注意！！！！"></a>注意！！！！</h3><p> 所有路由属性的修改，最后清进程！！！全部在数据发出方清！！！！！！ </p><hr><h3 id="weight："><a href="#weight：" class="headerlink" title="weight："></a>weight：</h3><p>本地有效，只在这个路由器起作用</p><h4 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h4><p>1.</p><p>(config-router)</p><p><code>nei [邻居] wei [weight值] </code>修改针对某个邻居传来的所有路由的weight值</p><p>之后没反应，要用<code>clear ip bgp * so</code>在数据发出方清理</p><p>2.</p><p><code>acce 1 per 33.3.3.0</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add 1</code></p><p><code>set weight 99</code></p><p><code>route-map kinmfer per 20 </code> 一定要写空语句，放过其他路由</p><p>(config-router)</p><p><code>nei 4.4.4.4 route-map kinmfer in</code></p><hr><h3 id="local-preference（本地优先级）"><a href="#local-preference（本地优先级）" class="headerlink" title="local-preference（本地优先级）"></a>local-preference（本地优先级）</h3><p>不能传出as，可以本as内所有设备生效</p><p>告诉自己的IBGP邻居如何离开本as</p><p>默认值=100</p><p>设置方法：通常在本as的边界路由器设置</p><h4 id="配置-2"><a href="#配置-2" class="headerlink" title="配置"></a>配置</h4><p>1.</p><p><code>bgp def local-pre [本地优先级值]</code></p><p>自己身上清理就可以看到结果</p><p>2.</p><p><code>ip pre 100 per 33.3.3.0/24</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add pre 100</code></p><p><code>set local-pre 101</code></p><p><code>route-map kinmfer per 20</code></p><p>(config-router)</p><p><code>nei 1.1.1.1 route-map kinmfer out</code></p><hr><h3 id="next-hop-1"><a href="#next-hop-1" class="headerlink" title="next-hop"></a>next-hop</h3><h4 id="配置-3"><a href="#配置-3" class="headerlink" title="配置"></a>配置</h4><p><code>ip pre 100 per 33.3.3.0/24</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add pre 100</code></p><p><code>set next-hop 0.0.0.0</code></p><p><code>route-map kinmfer per 20</code></p><hr><h3 id="as-path-1"><a href="#as-path-1" class="headerlink" title="as-path"></a>as-path</h3><p>只能增长不能减少</p><h4 id="配置-4"><a href="#配置-4" class="headerlink" title="配置"></a>配置</h4><p><code>acce 1 per 33.3.3.0</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add 1</code></p><p><code>set as-path prepend 10 20 30 40</code></p><p><code>route-map kinmfer per 20</code></p><p>(config-router)</p><p><code>nei 32.32.23.3 route-map kinmfer in</code></p><p>之后要在R3上面清</p><p>如果是in方向，就是 10 20 30 40 3 i，如果是out就是3 10 20 30 40 i</p><p>set的as号最好写重复的，不然会造成环路</p><hr><h3 id="origin-code"><a href="#origin-code" class="headerlink" title="origin code"></a>origin code</h3><p>i=IGP 是network</p><p>e=EGP 早期EGP协议重发布进来</p><p>？=incomplete 重发布进BGP的路由或者静态路由</p><h4 id="配置-5"><a href="#配置-5" class="headerlink" title="配置"></a>配置</h4><p>R1</p><p><code>acce 1 per 3.3.3.0</code></p><p><code>acce 2 per 33.3.3.0</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add 1</code></p><p><code>set origin egp 999</code></p><p><code>route-map kinmfer per 20</code></p><p><code>mat ip add 2</code></p><p><code>set origin incomplete</code></p><p><code>route-map kinmfer per 30</code></p><p>(config-router)</p><p><code>nei 4.4.4.4 route-map kinmfer in</code></p><hr><h3 id="MED选路适用于EBGP邻居进站的选路"><a href="#MED选路适用于EBGP邻居进站的选路" class="headerlink" title="MED选路适用于EBGP邻居进站的选路"></a>MED选路适用于EBGP邻居进站的选路</h3><p>1.</p><p>(config-router)</p><p><code>default-metric [med值]</code> 大规模修改metric</p><p>修改这个只对从邻居发出的路由有效，但是对邻居转发的路由无效</p><p>2.</p><p>R2</p><p><code>acce 1 per 3.3.3.0</code></p><p><code>route-map kinmfer per 10</code></p><p><code>mat ip add 1</code></p><p><code>set metric 11</code></p><p><code>route-map kinmfer per 20</code></p><p>(config-router)</p><p><code>nei 1.1.1.1 route-map kinmfer out</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-4</title>
      <link href="2019/11/10/Network-4/"/>
      <url>2019/11/10/Network-4/</url>
      
        <content type="html"><![CDATA[<h1 id="路由控制："><a href="#路由控制：" class="headerlink" title="路由控制："></a>路由控制：</h1><p>访问控制列表，前缀列表，route-map</p><hr><h2 id="访问控制列表："><a href="#访问控制列表：" class="headerlink" title="访问控制列表："></a>访问控制列表：</h2><h3 id="ACL"><a href="#ACL" class="headerlink" title="ACL"></a>ACL</h3><p>分类：标识流量进行特殊处理</p><p>过滤：通过过滤流经路由器的流量对网络进行管理</p><h4 id="ACL编号："><a href="#ACL编号：" class="headerlink" title="ACL编号："></a>ACL编号：</h4><p>标准ACL编号：1-99，1300-1999</p><p>拓展ACL编号：100-199，2000-2699</p><p>ACL写完之后，系统默认加deny any，无法用sh命令查看，所以如果有必要需要加上<code>acce 1 per any</code></p><p><code>sh ip acce </code>查看所有的acl信息</p><h4 id="标准acl"><a href="#标准acl" class="headerlink" title="标准acl"></a>标准acl</h4><h5 id="抓流量！"><a href="#抓流量！" class="headerlink" title="抓流量！"></a>抓流量！</h5><p><code>acce [编号] per/deny [源地址] [反掩码] </code></p><p>如果需要<code>acce [编号] per any</code> 放行其他的</p><h5 id="抓路由！"><a href="#抓路由！" class="headerlink" title="抓路由！"></a>抓路由！</h5><p>acce 10 per host 1.1.1.0 = acce 10 per 1.1.1.0 0.0.0.0 = acce 10 per 1.1.1.0</p><p>一般在某些分发列表，偏移列表等地方调用</p><p>在接口调用的都是抓流量用</p><p>(config-if)</p><p><code>ip acce [编号] in/out</code></p><p>-——————–</p><p>1.1.1.0</p><p>1.1.2.0</p><p>1.1.3.0</p><p>1.1.0.0 0.0.3.0（后面其实是叫通配符）</p><p>-——————–</p><h4 id="拓展acl："><a href="#拓展acl：" class="headerlink" title="拓展acl："></a>拓展acl：</h4><p>检查源地址和目的地址</p><p>还可以搞特定的端口和程序</p><p>精确和不精确匹配掩码</p><h5 id="抓源目流量"><a href="#抓源目流量" class="headerlink" title="抓源目流量"></a>抓源目流量</h5><p><code>acce [编号] deny/per [协议] [源地址] [反掩码] [目的地址] [反掩码] </code></p><p><code>acce [编号] per ip any any</code> 如果有必要的话！</p><h5 id="抓端口流量"><a href="#抓端口流量" class="headerlink" title="抓端口流量"></a>抓端口流量</h5><p><code>acce 100 per tcp/udp [源地址] [反掩码] eq/gt/lt/neq [协议/端口]</code></p><p><code>access-list 100 per tcp 1.1.1.0 0.0.0.255 4.4.4.0 0.0.0.255 eq 80</code> 只允许1去访问4的80</p><hr><h4 id="其他配置方法："><a href="#其他配置方法：" class="headerlink" title="其他配置方法："></a>其他配置方法：</h4><p>(config)</p><p><code>ip acce st/ext [编号]</code></p><p><code>10 per xxxxx</code></p><p><code>20 per xxxxx</code></p><p>如果要删，<code>no 10</code></p><p>创建自命名的acl</p><p><code>ip acce st/ext [名字]</code></p><hr><h2 id="前缀列表"><a href="#前缀列表" class="headerlink" title="前缀列表"></a>前缀列表</h2><p>只能抓路由，不能抓数据包</p><p>(config)</p><p><code>ip pre [列表名] per/deny [网段/通配符] le/ge [多少位]</code></p><p>le代表定义最大掩码长度</p><p>ge代表定义最小掩码长度</p><p><code>sh ip pre </code>查看前缀列表</p><p><code>ip pre test per 3.3.3.0/24 </code>代表前24位必须匹配</p><p><code>ip pre test per 3.3.3.0/24 le 30</code> 前24位必须匹配，掩码必须小于等于30，同时大于等于24位</p><p><code>ip pre test pre 3.3.3.0/24 ge 26 </code>前24位必须匹配，掩码必须大于等于26位</p><p><code>ip pre test per 3.3.3.0/24 ge 26 le 28</code> 掩码必须大于等于26位小于等于28位</p><p><code>ip pre test per 0.0.0.0/0 le 32</code>相当于permit any</p><p><code>ip pre test per 0.0.0.0/1 le 32</code> 抓A类路由</p><p><code>ip pre test per 128.0.0.0/2 le 32</code> 抓B类路由</p><p><code>ip pre test per 192.0.0.0/3 le 32</code> 抓C类路由</p><hr><p>eigpr重发布ospf</p><p><code>redis os 1 me 1000 100 255 1 1500</code></p><p>在ospf重发布eigrp</p><p><code>redis ei 1 sub</code></p><pre><code>R2ip prefix-list test: 2 entries  seq 5 deny 11.1.1.1/32  seq 10 permit 0.0.0.0/0 le 32</code></pre><p><code>router ei 1</code></p><p><code>distr pre test out os 1</code>在eigrp的进程里告诉其他eigrp1的同伴我分发的路由按照prefix-list抓到的为标准，这路由来自ospf 1里</p><hr><h1 id="route-map"><a href="#route-map" class="headerlink" title="route-map"></a>route-map</h1><p>可以做到过滤和修改路由属性</p><h2 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h2><p>1.重发布的时候做路由控制</p><p>2.PBR（基于策略的路由）policy-based routing</p><p>3.BGP选路</p><p><code>acce 1 per 3.3.3.0</code> 用acl抓取3.3.3.0的路由</p><p><code>ip pre test per 4.4.4.0/24 </code>用前缀列表抓4.4.4.0的路由</p><p><code>route-map E2O per 10</code> 第一条route-map</p><p><code>mat ip add 1 </code> 匹配acl1的内容</p><p><code>set metric 99 </code> 为这个内容抓取的路由设置metric为99</p><p><code>route-map E2O per 20 </code></p><p><code>mat ip add pre test</code></p><p><code>set metric 98</code></p><p><code>route-map E2O per 30</code> 加上空语句，意思per anying,set nothing</p><p>(config-router)</p><p>比如在ospf里重发布eigrp</p><p><code>redis ei 1 sub route-map E2O</code></p><hr><h2 id="PBR权限优于路由表"><a href="#PBR权限优于路由表" class="headerlink" title="PBR权限优于路由表"></a>PBR权限优于路由表</h2><p>调用的时候必须在数据包的in方向调用！！！！</p><p>在分界的地方</p><p><code>acce 1 per 1.1.1.1 0.0.0.0</code></p><p><code>route-map PBR per 10</code></p><p><code>mat ip add 1</code></p><p><code>set ip next-hop 192.168.34.4</code></p><p>【set int [出接口]】</p><p><code>int [入接口]</code></p><p><code>ip policy route-map PBR</code></p><hr><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>route-map匹配路由，不匹配的路由会被drop（需要写空语句）</p><p>route-map匹配数据，不匹配的数据会按照原来的方式进行转发（不需要写空语句）</p><hr><h1 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h1><p>1.在路由器上，允许来自1.1.1.0网段的流量通过</p><p><code>acce 1 per 1.1.1.0 0.0.0.255</code></p><p>2.允许来自1.1.1.0网段的流量去访问4.4.4.0网段</p><p><code>acce 100 per ip 1.1.1.0 0.0.0.255 4.4.4.0 0.0.0.255</code></p><p>3.拒绝来自1.1.1.0网段的流量，但是允许其他的</p><p><code>acce 1 deny 1.1.1.0 0.0.0.255</code></p><p><code>acce 1 per any</code></p><p>4.允许1.1.1.1 telnet 4.4.4.4 的流量通过，其他拒绝</p><p><code>acce 100 per tcp host ()1.1.1.1 host 4.4.4.4 eq telnet</code></p><p>5.抓出1.1.1.0的路由</p><p><code>acce 1 per 1.1.1.0 0.0.0.0</code></p><p>6.用一条acl抓出1.1.0.0 1.1.1.0 1.1.2.0 1.1.3.0四个子网</p><p><code>acce 1 per 1.1.0.0 0.0.3.0</code></p><p>7.用一条语句抓出1.1.0.0-1.1.255.0/24之间所有子网号为奇数的路由</p><p><code>acce 1 per 1.1.1.0 0.0.254.0</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-3</title>
      <link href="2019/11/10/Network-3/"/>
      <url>2019/11/10/Network-3/</url>
      
        <content type="html"><![CDATA[<h1 id="ospf开放最短路径优先"><a href="#ospf开放最短路径优先" class="headerlink" title="ospf开放最短路径优先"></a>ospf开放最短路径优先</h1><p>链路状态路由协议，IGP</p><p>无类路由协议</p><p>基于ip协议，协议号89</p><p>ospf使用组播和单播更新</p><p>224.0.0.5，224.0.0.6</p><p>AD = 110</p><p>支持明文和md5认证</p><p>【RFC2328】</p><p>版本：</p><p>ospfv2 = ipv4</p><p>ospfv3 = ipv6</p><p>ospf因为open，所以每个厂商都会用，而且算法优良，收敛迅速</p><hr><h1 id="ospf三张表："><a href="#ospf三张表：" class="headerlink" title="ospf三张表："></a>ospf三张表：</h1><h2 id="邻居表："><a href="#邻居表：" class="headerlink" title="邻居表："></a>邻居表：</h2><p>记录了ospf的所有邻居关系，而且只能直连建立邻居，因为组播224.0.0.5的ttl=1</p><h2 id="拓扑表："><a href="#拓扑表：" class="headerlink" title="拓扑表："></a>拓扑表：</h2><p>也叫LSDB（链路状态数据库），装载了所有路径信息</p><h2 id="路由表："><a href="#路由表：" class="headerlink" title="路由表："></a>路由表：</h2><p>ospf转发数据库，通过spf算法算出来的最佳路径</p><hr><h2 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h2><p>链路状态知道的内容比距离矢量更丰富</p><hr><h1 id="ospf采用层次化网络设计："><a href="#ospf采用层次化网络设计：" class="headerlink" title="ospf采用层次化网络设计："></a>ospf采用层次化网络设计：</h1><p>引用了分area的概念</p><p>建议分成2个区域</p><p>1.骨干区域，也叫传输区域，也叫area 0（backbone area）</p><p>2.常规区域（nonbackbone areas）</p><p>备注：一个成熟的ospf网络设计，一定是骨干牵着一堆非骨干的</p><h2 id="层次化设计好处："><a href="#层次化设计好处：" class="headerlink" title="层次化设计好处："></a>层次化设计好处：</h2><p>1.减少路由表条目</p><p>2.可以把拓扑的改变限制在一个区域</p><p>3.lsa泛洪可以限制在一个区域的边界</p><p>完全工作在骨干区域的路由器叫backbone router</p><p>工作在骨干区域和非骨干区域中间的路由器（ABRs）</p><hr><h1 id="ospf的5个包："><a href="#ospf的5个包：" class="headerlink" title="ospf的5个包："></a>ospf的5个包：</h1><p>1.hello 包，发现邻居</p><p>2.database description（DBD）数据库描述包</p><p>3.link-state request（LSR）链路状态请求包</p><p>4.link-state update（LSU）链路状态更新包</p><p>5.link-state acknowledgement（LSACK）回复</p><hr><h1 id="ospf的邻居状态机："><a href="#ospf的邻居状态机：" class="headerlink" title="ospf的邻居状态机："></a>ospf的邻居状态机：</h1><p>1.down</p><p>2.init</p><p>3.two-way</p><p>4.ex-start 选举DR BDR</p><p>5.exchange 谁的router-id大谁做主，主先发LSDB，是摘要信息</p><p>6.loading</p><p>7.full</p><p>【attempt只出现在NBMA网络，尝试状态】</p><p>down—-init—–two-way——-ex-start——–exchange——-loading———-full</p><p>|——hello——-|       |—-DBD———|      |–LSR,LSU,LSACK-|</p><hr><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>(config)</p><p><code>router ospf [进程号] </code>进程号随便写</p><p><code>router-id [路由器router-id]</code> 一定要写！！！！！</p><p><code>net [ip] [反掩码] area [区域] </code>宣告</p><p><code>sh ip os nei</code> 查看邻居表</p><p><code>sh ip os da</code> 查看拓扑表</p><p><code>sh ip rou </code>查看路由表</p><p>O = ospf同区域内路由</p><p>O IA = ospf域间路由（和我不是一个area）</p><p><code>sh ip os bor</code> 看谁是我这个area的ABR</p><p><code>sh run | se os</code> 查看ospf配置</p><hr><h1 id="router-id细节："><a href="#router-id细节：" class="headerlink" title="router-id细节："></a>router-id细节：</h1><p>唯一标识一台ospf设备的东西</p><p>1.手动指定的最优先</p><p>2.选取环回口中最大的</p><p>3.选取物理地址中最大的</p><p>ospf的router-id一旦选取了就会很稳定如果需要修改或者重新配置</p><p><code>clear ip os pro</code>之后写yes</p><p>如果网络中出现2个一样的router-id，那么就无法建立邻居</p><hr><h1 id="DR，BDR，DRother选举："><a href="#DR，BDR，DRother选举：" class="headerlink" title="DR，BDR，DRother选举："></a>DR，BDR，DRother选举：</h1><p>DR指定路由器（designated router）</p><p>BDR备份指定路由器（backup designated rotuer）</p><p>（减少更新次数）</p><h2 id="DR，BDR选举规则："><a href="#DR，BDR选举规则：" class="headerlink" title="DR，BDR选举规则："></a>DR，BDR选举规则：</h2><p>1.比优先级，越大越优先，cisco默认优先级（priority）都为1，可以设置0-255，如果设置为0就是不参与选举，如果设置为255，就意味着最有可能成为DR</p><p>2.优先级一样就比较router-id，越大越优先</p><h2 id="DR，BDR特点："><a href="#DR，BDR特点：" class="headerlink" title="DR，BDR特点："></a>DR，BDR特点：</h2><p>1.DR，BDR一旦选举完成，修改优先级就没用，除非你重启</p><p>2.如果DR挂了，BDR自动成为DR，哪怕在area中有人优先级比他更高，然后在若干个DRother中选一个当BDR</p><p>3.DR，BDR如果想重新选举，就要重置这两台设备上的进程，在DRother上做重置没用</p><p>4.DRother之间互相为two-way状态</p><p>5.DR，BDR概念是接口的概念，和路由器无关</p><p>6.DR，BDR是不同网段分别选举的</p><p>(config-if)</p><p><code>ip os pri [0-255] </code>调接口的优先级</p><hr><h2 id="ospf通过hello包建立邻居："><a href="#ospf通过hello包建立邻居：" class="headerlink" title="ospf通过hello包建立邻居："></a>ospf通过hello包建立邻居：</h2><p>1.每隔10s：在点到点或者广播网络</p><p>2.每隔30s：其余的</p><p><code>sh ip os int [接口]</code> 查看ospf的接口信息</p><p>在ospf网络中，dead时间是hello时间的4倍</p><p>(config-if)</p><p><code>ip os hello [多少秒]</code> 修改hello时间，dead会随之修改</p><p><code>ip os dead [多少秒] </code>强改dead时间</p><p><code>ip os dead mini hello [除数] </code>把dead时间修改，hello会被改成毫秒级（1/除数），dead永久为1s</p><hr><h1 id="LSA（link-state-advertisement）链路状态通告"><a href="#LSA（link-state-advertisement）链路状态通告" class="headerlink" title="LSA（link state advertisement）链路状态通告"></a>LSA（link state advertisement）链路状态通告</h1><p>LSDB放的就是LSA</p><h2 id="LSA-1：Router-LSA"><a href="#LSA-1：Router-LSA" class="headerlink" title="LSA-1：Router LSA"></a>LSA-1：Router LSA</h2><p>通告自己的RID</p><p>在一个ospf的area里，有几个设备就有几个1号lsa</p><p>有一台或者零台设备和该设备相连，叫做stub network（末节网络）</p><h2 id="LSA-2：network-lsa"><a href="#LSA-2：network-lsa" class="headerlink" title="LSA-2：network lsa"></a>LSA-2：network lsa</h2><p>LSA-2只有DR一人通告，通告的内容是DR的router-id</p><p>lsa-2是对1号的一个补充</p><p>不管是1号还是2号，都是一个area内的！！！</p><h2 id="LSA-3：summary-network-lsa汇总网络lsa"><a href="#LSA-3：summary-network-lsa汇总网络lsa" class="headerlink" title="LSA-3：summary network lsa汇总网络lsa"></a>LSA-3：summary network lsa汇总网络lsa</h2><p>由ABR通告的</p><p>有多少个O IA的路由就有多少个LSA</p><h2 id="LSA-5：external-lsa外部lsa"><a href="#LSA-5：external-lsa外部lsa" class="headerlink" title="LSA-5：external lsa外部lsa"></a>LSA-5：external lsa外部lsa</h2><p>由ASBR通告的</p><p>有几个O E2就有几个5号lsa</p><p>在其他路由协议和ospf之间的路由器叫ASBR（自治系统边界路由器），自己area内的可以通过1号lsa知道谁是ASBR</p><h2 id="LSA-4：summary-ASBR-lsa"><a href="#LSA-4：summary-ASBR-lsa" class="headerlink" title="LSA-4：summary ASBR lsa"></a>LSA-4：summary ASBR lsa</h2><p>告诉其他区域路由谁是ASBR</p><p>通告者是ABR，通告内容是谁是ASBR</p><hr><p><code>sh ip os da router</code> 查看1号lsa</p><p><code>sh ip os da net </code>查看2号lsa</p><p><code>sh ip os da sum</code> 查看3号lsa</p><p><code>sh ip os da ext</code> 查看5号lsa</p><p><code>sh ip os da asbr</code> 查看4号lsa</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>lsa-1:</p><p>直连网段，直连路由器（邻居），直连网络类型，虚链路，描述的是直连信息</p><p>lsa-2：</p><p>在MA网络，我们的DR（DR通告）</p><p>lsa-3：</p><p>描述域间路由，目标网络，子网掩码，cost（ABR通告）</p><p>lsa-5：</p><p>描述普通区域内的外部路由（ASBR通告）</p><p>lsa-4:</p><p>描述ASBR所在位置（ABR通告）</p><p>-—————</p><h1 id="ospf的组播："><a href="#ospf的组播：" class="headerlink" title="ospf的组播："></a>ospf的组播：</h1><p>所有路由器向DR发送使用224.0.0.6（DR，BDR监听）</p><p>DR向所有路由器发送使用224.0.0.5（所有ospf路由器监听）</p><p>（如果网络中不选择DR BDR，就统一使用224.0.0.5）</p><hr><h1 id="ospf认证："><a href="#ospf认证：" class="headerlink" title="ospf认证："></a>ospf认证：</h1><p>默认情况不做认证</p><p>支持区域和链路的明文，密文认证</p><h2 id="链路明文认证："><a href="#链路明文认证：" class="headerlink" title="链路明文认证："></a>链路明文认证：</h2><p>(config-if)</p><p><code>ip os authentication-key [密码]</code> 在接口下设置密码</p><p><code>ip os authentication</code> 声明使用明文认证</p><h2 id="链路密文认证："><a href="#链路密文认证：" class="headerlink" title="链路密文认证："></a>链路密文认证：</h2><p>(config-if)</p><p><code>ip os me 1 md [密码]</code></p><p><code>ip os authen me</code> 声明使用密文认证</p><h2 id="区域密文认证："><a href="#区域密文认证：" class="headerlink" title="区域密文认证："></a>区域密文认证：</h2><p><code>ip os me 1 md [密码]</code></p><p><code>router os 1</code></p><p><code>area [区域] authen me </code>声明区域密文认证</p><h2 id="区域明文认证："><a href="#区域明文认证：" class="headerlink" title="区域明文认证："></a>区域明文认证：</h2><p>(config-if)</p><p><code>ip os authentication-key [密码]</code></p><p><code>router os 1</code></p><p><code>area [区域] authen</code></p><p>密文的key最多8个字符串，密文16个</p><p>链路认证和区域认证同时存在，以链路为主</p><hr><h1 id="不规则区域："><a href="#不规则区域：" class="headerlink" title="不规则区域："></a>不规则区域：</h1><p>(config-router)</p><p><code>area [要穿越的区域] vir [目标ABR的RID]</code></p><p>虚链路，逻辑上增加area0的范围</p><p>网络类型：virtual link</p><p>虚链路术语DNA</p><p><code>sh ip os vir</code> 查看虚链路情况</p><p>早期会比较hello时间，后面直接没了，最终达到full状态不进行hello包发送</p><p>虚链路认证：</p><p>(config-router)</p><p><code>area 1 vir [对端RID] authen me</code></p><p><code>area 1 vir [对端RID] me 1 md [密码]</code></p><hr><h1 id="路由汇总："><a href="#路由汇总：" class="headerlink" title="路由汇总："></a>路由汇总：</h1><p>ospf的路由汇总只能在abr和asbr上做</p><p>如果在abr上做，可以汇总域间和域外路由</p><p>如果在asbr上只能汇总域外</p><p>（域内路由无法汇总）</p><h2 id="域间汇总"><a href="#域间汇总" class="headerlink" title="域间汇总"></a>域间汇总</h2><p>(config-router)在abr上做</p><p>area 1 range 10.1.96.0 255.255.240.0 </p><p>汇总出现在area1中的10.1.100.0   10.1.105.0/24两条路由，到area0中</p><h2 id="域外汇总"><a href="#域外汇总" class="headerlink" title="域外汇总"></a>域外汇总</h2><p>(config-router)在asbr上做</p><p>summary-address 10.1.96.0 255.255.240.0</p><hr><h1 id="ospf特殊区域："><a href="#ospf特殊区域：" class="headerlink" title="ospf特殊区域："></a>ospf特殊区域：</h1><h2 id="1-stub末节区域"><a href="#1-stub末节区域" class="headerlink" title="1.stub末节区域"></a>1.stub末节区域</h2><p>不能接收lsa-5和lsa-4，只有域内和域间路由</p><p>(config-router)</p><p><code>area 1 stub</code> 本区域所有路由器都要配置</p><p>abr会自动产生一条3号lsa的默认路由</p><p>在abr上</p><p><code>area 1 def 15</code> 修改默认路由的cost值</p><h2 id="2-totally-stub-area完全末节区域"><a href="#2-totally-stub-area完全末节区域" class="headerlink" title="2.totally stub area完全末节区域"></a>2.totally stub area完全末节区域</h2><p>不能接收lsa-5，4，3，也就是只有域内路由</p><p>(config-router)abr上添加</p><p><code>area 1 stub no-sum</code></p><p>abr会自动产生一条3号lsa的默认路由</p><p>###【配置成为stub或者totally stub的条件】</p><p>1.如果有多个abr并且允许次优路径产生</p><p>2.该区域所有路由器必须配置成stub路由器</p><p>3.该区域不允许出现asbr（也就是该区域不允许出现重发布操作）</p><p>4.骨干区域不能成为stub</p><p>5.stub中不允许出现虚链路！</p><h2 id="3-NSSA（not-so-stubby-areas）不要这么末节的区域"><a href="#3-NSSA（not-so-stubby-areas）不要这么末节的区域" class="headerlink" title="3.NSSA（not-so-stubby areas）不要这么末节的区域"></a>3.NSSA（not-so-stubby areas）不要这么末节的区域</h2><p>不允许接收lsa-5，4，abr不会产生默认路由！</p><p>(config-router)</p><p><code>area 1 nssa</code> 要在area1所有设备上配置</p><p>需要在abr上下放一个默认路由</p><p>(config-router)abr</p><p><code>area 1 nssa def</code></p><p>产生一条O*N2的默认路由</p><p>阻止重发布进入nssa区域</p><p>(config-router)</p><p><code>area 1 nssa no-redis</code></p><h2 id="4-totally-NSSA"><a href="#4-totally-NSSA" class="headerlink" title="4.totally NSSA"></a>4.totally NSSA</h2><p>把lsa-3，4，5都过滤掉，abr下放默认路由</p><p>abr上增加</p><p>(config-router)</p><p><code>area 1 nssa no-sum</code></p><h2 id="nssa和stub不同"><a href="#nssa和stub不同" class="headerlink" title="nssa和stub不同"></a>nssa和stub不同</h2><p>nssa可以出现asbr，stub不能</p><p>nssa的外部路由是lsa-7描述的，使用sh ip os da nssa-ext可以看到，也就O N路由，只会在nssa区域里出现，在nssa的abr上进行Lsa-7=》Lsa-5的转换，外部路由接收到的是lsa-5，也就是O E2，此时ABR多了一个形象叫ASBR</p><p>（totally stub和totally nssa是cisco私有）</p><hr><h1 id="cost："><a href="#cost：" class="headerlink" title="cost："></a>cost：</h1><p>(config-if)</p><p><code>ip os co [cost值] </code>修改自己的</p><hr><h1 id="lsdb过载保护："><a href="#lsdb过载保护：" class="headerlink" title="lsdb过载保护："></a>lsdb过载保护：</h1><p>(config-router)</p><p><code>max-lsa ?</code></p><hr><h1 id="默认路由："><a href="#默认路由：" class="headerlink" title="默认路由："></a>默认路由：</h1><p>强制下放默认路由</p><p>(config-router)</p><p><code>default-information originate always metric 3</code></p><p>有就下放没有就不下放</p><p><code>default-information originate</code></p><hr><h1 id="负载均衡："><a href="#负载均衡：" class="headerlink" title="负载均衡："></a>负载均衡：</h1><p>(config-router)</p><p><code>maxi [多少条]</code></p><hr><h1 id="关闭发hello包的能力："><a href="#关闭发hello包的能力：" class="headerlink" title="关闭发hello包的能力："></a>关闭发hello包的能力：</h1><p>一般用在连接终端的设备上</p><p>(config-router)</p><p><code>passive [接口]</code></p><hr><p>A—5—-B—-20—-D</p><p>|—30—C—-10—-|</p><p>ABC是一个ospf内的，D是外部，如果采用O E1来算，那么A的ASBR就是B，如果采用O E2来算的话，A的ASBR就是C</p><p>O E1是我到目标的总路径</p><p>O E2是下一跳到目标的路径</p><hr><h1 id="修改AD："><a href="#修改AD：" class="headerlink" title="修改AD："></a>修改AD：</h1><p>(config-router)在ospf和eigrp的边界上</p><p><code>distan 100</code> 此时边界路由器的AD变成100</p><p><code>distan 88 3.3.3.3 0.0.0.0 </code>针对某个通告给我的人修改</p><p><code>distan os ext 99</code> 专门修改lsa-5和7的ad值</p><hr><h1 id="分发列表："><a href="#分发列表：" class="headerlink" title="分发列表："></a>分发列表：</h1><p><code>acce 10 deny 10.1.100.0</code></p><p><code>acce 10 per any</code></p><p>(config-router)</p><p><code>distr 10 in [接口]</code></p><p>该路由器无法收到deny的目标，但是lsa还会传递！！！所以其他路由器依然不会deny</p><hr><h1 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h1><p>ospf重发布除直连以外的任何路由都要加sub，否则会丢失对面的掩码</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-2</title>
      <link href="2019/11/04/Network-2/"/>
      <url>2019/11/04/Network-2/</url>
      
        <content type="html"><![CDATA[<h1 id="动态路由协议"><a href="#动态路由协议" class="headerlink" title="动态路由协议"></a>动态路由协议</h1><h2 id="AS（自治系统）"><a href="#AS（自治系统）" class="headerlink" title="AS（自治系统）"></a>AS（自治系统）</h2><p>IGP协议，工作在AS内部：</p><p>IGP协议根据对网络的认识：</p><h3 id="1-距离矢量DV（distance-vector）"><a href="#1-距离矢量DV（distance-vector）" class="headerlink" title="1.距离矢量DV（distance-vector）"></a>1.距离矢量DV（distance-vector）</h3><p>RIP，EIGRP，IGRP（淘汰）</p><p>将整个路由表进行复制，将副本特定的时间传一份给邻居，邻居学习并计算metric值</p><h3 id="2-链路状态LS（link-state）"><a href="#2-链路状态LS（link-state）" class="headerlink" title="2.链路状态LS（link-state）"></a>2.链路状态LS（link-state）</h3><p>OSPF，ISIS</p><p>路由器之间传递拓扑信息，并且计算</p><p>EGP协议，工作在AS和AS之间</p><p>BGP协议</p><hr><h2 id="RIP（routing-information-protocol）路由信息协议"><a href="#RIP（routing-information-protocol）路由信息协议" class="headerlink" title="RIP（routing information protocol）路由信息协议"></a>RIP（routing information protocol）路由信息协议</h2><p>最大支持15跳，16跳不可达，不适合大型网络</p><p>使用UDP520端口通信，源端口和目标端口都是520</p><p>周期性发送整个路由表</p><p>AD=120</p><p>分为version1和2</p><p>v1</p><p>不支持可变长子网掩码（8，16，24），不支持自动汇总，广播更新（更新的内容是地址簇，标识，网段，metric）最多支持25条路由条目，不包含下一跳信息的，不携带子网掩码</p><p>v2</p><p>支持可变长子网掩码，支持自动汇总，组播方式更新，组播地址224.0.0.9，可以给路由打标记，包含下一跳信息，携带子网掩码   </p><h3 id="RIP的定时器："><a href="#RIP的定时器：" class="headerlink" title="RIP的定时器："></a>RIP的定时器：</h3><p>路由更新定时器30s（思科采用15%的偏移量，也就是25-30s之间，防止同步更新）</p><p>路由的失效定时器180s–路由失效之后通知给邻居</p><p>路由刷新定时器240s–将该路由删除</p><p>路由抑制定时器180s–如果接收到一个路由更新条目，它的跳数大于自己已知的跳数，那么就会进入抑制计时器（6个更新周期），此时路由器状态为抑制状态，不再接收来自这个路由的更新</p><h3 id="解决DV环路问题："><a href="#解决DV环路问题：" class="headerlink" title="解决DV环路问题："></a>解决DV环路问题：</h3><p>1.设置16跳最大</p><p>2.水平分割，从该接口接收到的信息不从该接口发出</p><p>3.路由中毒，将16跳的路由变成（infinity）</p><p>4.holddown timer，冻结时间</p><p>如果在冻结时间内，路由恢复，继续采纳该路由</p><p>如果在冻结时间内，收到了更好的路由，就用更好的</p><p>如果在冻结时间内，收到了更差的路由，就不采纳</p><p>5.triggered updates，触发更新（目前只会用在低速链路上，带宽小于1.544M）</p><p>避免长时间占用带宽，只在拓扑发生变化的时候更新</p><h3 id="配置命令："><a href="#配置命令：" class="headerlink" title="配置命令："></a>配置命令：</h3><p>(config)</p><p><code>router rip</code> 启动rip协议</p><p><code>ver 2</code> 使用版本2</p><p><code>network [主类宣告]</code>  告诉大家我有谁</p><p>认证</p><p>v1不支持认证，v2支持明文和密文认证（默认用明文）</p><p>(config)</p><p><code>key chain R1</code> 定义一个钥匙串名字叫R1</p><p><code>key 1</code>      第一把钥匙</p><p><code>key-string 123</code>  (注意空格！！！空格算一个字符！！！)</p><p>(config-if)</p><p><code>ip rip authen key-chain R1</code>  把钥匙挂在接口上</p><p><code>ip rip authen mo md5</code> 把钥匙进行加密</p><p>（认证这种东西，两边都要配）</p><hr><h2 id="EIGRP增强内部网关路由协议"><a href="#EIGRP增强内部网关路由协议" class="headerlink" title="EIGRP增强内部网关路由协议"></a>EIGRP增强内部网关路由协议</h2><p>—–是cisco私有的</p><p>EIGRP是触发更新</p><p>支持组播更新和单播更新，支持VLSM，可以关闭自动汇总，可以手工关闭汇总</p><h3 id="metric的计算："><a href="#metric的计算：" class="headerlink" title="metric的计算："></a>metric的计算：</h3><p>带宽，延迟，负载，可靠性，MTU。默认只考虑带宽（bandwith）和延迟（delay）</p><p>EIGRP直接封装ip头部，协议号88</p><p>EIGRP属于距离矢量，高级的距离矢量</p><p>默认承载路由100条</p><p>AD=5（汇总），90（正常），170（外部）</p><p>支持并且只支持md5认证，默认情况不做认证</p><p>更新只发送改变的路由表</p><p>组播地址：224.0.0.10</p><h3 id="EIGRP需要建立邻居关系："><a href="#EIGRP需要建立邻居关系：" class="headerlink" title="EIGRP需要建立邻居关系："></a>EIGRP需要建立邻居关系：</h3><h4 id="邻居表："><a href="#邻居表：" class="headerlink" title="邻居表："></a>邻居表：</h4><p>1.两个设备必须互相连接</p><p>2.对方必须运行EIGRP</p><p>3.必须互相发送hello包</p><h4 id="拓扑表："><a href="#拓扑表：" class="headerlink" title="拓扑表："></a>拓扑表：</h4><p>所有路由都保存在这里，不管好坏</p><h4 id="路由表："><a href="#路由表：" class="headerlink" title="路由表："></a>路由表：</h4><p>从拓扑表中取出的最佳路径</p><hr><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h4 id="EIGRP的数据包："><a href="#EIGRP的数据包：" class="headerlink" title="EIGRP的数据包："></a>EIGRP的数据包：</h4><p>1.hello，组播</p><p>2.update，点到点</p><p>3.query，组播和单播</p><p>4.reply，单播</p><p>5.ack，单播（解决ip不可靠的问题）</p><p>（注意：2，3，4需要ack作为可靠保证）</p><hr><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>(config)</p><p><code>router ei [as号]</code> 启动EIGRP协议，as号要一样</p><p><code>no au</code> 关闭自动汇总</p><p><code>net [自己的ip网段]\[反掩码]</code>  宣告</p><p><code>sh ip ei nei</code> 查看邻居表</p><p><code>sh run | se [路由协议/其他东西]</code> 查看sh run中某个特定协议</p><p><code>sh run int [接口]</code> 查看接口下运行了什么</p><hr><h3 id="汇总："><a href="#汇总：" class="headerlink" title="汇总："></a>汇总：</h3><p>好处：</p><p>1.减少路由条目</p><p>2.使路由表翻动概率减少</p><p>3.使用最小的metric沿途累加</p><p>4.eigrp的手动汇总，会在自己身上产生一条通往null0的路由，该路由用来防止环路，并且ad为5，本地有效</p><p>10.1.8.0</p><p>10.1.9.0</p><p>10.1.10.0</p><p>10.1.11.0</p><p>========</p><p>00001000</p><p>00001001</p><p>00001010</p><p>00001011</p><p>========</p><p>00001000</p><p>11111100</p><p>00000011 = 3</p><p>汇总之后的</p><p>10.1.8.0 255.255.252.0</p><p>反掩码写法</p><p>10.1.8.0  0.0.3.255</p><p>(config-router)</p><p><code>net 10.1.8.0 0.0.3.255</code></p><p>在要汇总的接口上</p><p>(config-if)</p><p><code>ip sum ei 1 10.1.8.0 255.255.252.0</code></p><h3 id="钥匙问题："><a href="#钥匙问题：" class="headerlink" title="钥匙问题："></a>钥匙问题：</h3><p>1.</p><p>key1=123   key1=123</p><p>2.</p><p>key1=123   key1=345 key2=123</p><p>R1没有，R2有</p><p>3.</p><p>key1=123 key2=456     key1=456 key2=123</p><p>都有</p><p>4.</p><p>key3=123 key5=234      key2=456 key6=234 key7=123</p><p>R1没有，R2有</p><hr><h3 id="DUAL算法：弥散更新算法"><a href="#DUAL算法：弥散更新算法" class="headerlink" title="DUAL算法：弥散更新算法"></a>DUAL算法：弥散更新算法</h3><p>AD–通告距离，邻居到达目的地的metric</p><p>FD–可行性距离，本路由器到达目的地的metric</p><p>successor（S）–后继路由器，具有最优metric的路由</p><p>feasible successor（FS）–可行性后继路由器，符合条件的后备路由</p><hr><p><code>sh ip ei to</code> 查看拓扑表</p><p><code>clear ip ei nei </code>清除邻居表（如果你嫌慢，或者你增加了其他网络，eigrp还没反应）</p><hr><h3 id="eigrp的认证：（基于接口的！！！！！）"><a href="#eigrp的认证：（基于接口的！！！！！）" class="headerlink" title="eigrp的认证：（基于接口的！！！！！）"></a>eigrp的认证：（基于接口的！！！！！）</h3><p><code>key chain R1</code></p><p><code>key 1</code></p><p><code>key-string 123</code></p><p>在接口下</p><p><code>ip authen mo ei [as号] md5</code></p><p><code>ip authen key-chain ei [as号]\[钥匙串名字]</code></p><p>（备注：如果只有key-chain，没有声明使用md5，此时是不认证的！！）</p><p><code>show key chain</code> 查看钥匙信息</p><p><code>sh run int [接口]</code> 查看接口配置信息</p><p><code>sh ip ei int [接口]</code> 查看eigrp接口信息</p><p><code>debug ei pack</code> 查看eigrp的详细包信息</p><hr><h3 id="修改hello时间："><a href="#修改hello时间：" class="headerlink" title="修改hello时间："></a>修改hello时间：</h3><p>&gt;1.544M 5s发一次</p><p>&lt;       60s发一次</p><p>(config-if)</p><p><code>ip hello-int ei [as号]\[多少秒]</code></p><p><code>ip hold-time ei [as号]\[多少秒]</code></p><p>一边的hello对应另一边的hold</p><hr><h3 id="负载均衡："><a href="#负载均衡：" class="headerlink" title="负载均衡："></a>负载均衡：</h3><p>默认支持4条负载均衡</p><p>(config-router)</p><p><code>maxi [多少条]</code></p><hr><h3 id="metric："><a href="#metric：" class="headerlink" title="metric："></a>metric：</h3><p>带宽 负载  延迟 可靠性 MTU</p><p>  1       0      1       0        0</p><p>默认情况下，只和带宽和负载有关系</p><p>计算公式：</p><p>FD=(10^7/BW+Delay/10)*256</p><p>BW:Kbps（小数点去尾）</p><p>Delay:微秒 延迟之和</p><p>接口延迟和带宽</p><table><thead><tr><th>接口</th><th>BW</th><th>DLY</th></tr></thead><tbody><tr><td>Ethernet</td><td>10000</td><td>1000</td></tr><tr><td>Serial</td><td>1544</td><td>20000</td></tr><tr><td>Loopback</td><td>800w</td><td>5000</td></tr></tbody></table><p>路由传播方向入接口！！！！！！metric的累加</p><p>(config-if)</p><p><code>delay [微秒*10] </code></p><p><code>band [带宽/kb]</code></p><hr><h3 id="偏移列表："><a href="#偏移列表：" class="headerlink" title="偏移列表："></a>偏移列表：</h3><p>R1</p><p>(config)</p><p><code>acc 10 per 3.3.3.0</code> 抓取哪一条路由</p><p>router ei 1`</p><p><code>off 10 in [增加多少metric]\[加在哪个接口上]</code> 把acl为10的抓取的信息，在in方向，增加多少metric，挂到哪个接口上</p><hr><h3 id="分发列表："><a href="#分发列表：" class="headerlink" title="分发列表："></a>分发列表：</h3><p>(config)</p><p>只抓取3.3.3.0的路由</p><p><code>acce 10 per 3.3.3.0 </code></p><p><code>acce deny any</code>（电脑默认添加拒绝其他，你看不到）</p><p>除了3.3.3.0以外的路由</p><p><code>acce 10 deny 3.3.3.0</code></p><p><code>acce 10 per any</code></p><p><code>router ei 1</code></p><p><code>distr 10 in/out [接口]</code></p><hr><h3 id="修改管理距离（AD）："><a href="#修改管理距离（AD）：" class="headerlink" title="修改管理距离（AD）："></a>修改管理距离（AD）：</h3><p>无法穿越，修改自己身上的</p><p>R2</p><p><code>acce 10 per 3.3.3.0</code></p><p><code>router ei 1</code></p><p><code>distan [ad的值]\[R3出接口的ip] [反掩码]\[acl列表]</code></p><hr><h3 id="重发布："><a href="#重发布：" class="headerlink" title="重发布："></a>重发布：</h3><p>在边界路由器上做！！！！！</p><p><code>router ei 1</code></p><p>redis rip 无法成功，因为metric无限大，重发布进eigrp的东西必须指定带宽延迟可靠性MTU的值！！！</p><p><code>redis rip me 1000 100 255 1 1500</code></p><p><code>router rip</code></p><p><code>redis ei [as] me 1</code></p><hr><h3 id="默认路由："><a href="#默认路由：" class="headerlink" title="默认路由："></a>默认路由：</h3><h4 id="1-通过静态宣告"><a href="#1-通过静态宣告" class="headerlink" title="1.通过静态宣告"></a>1.通过静态宣告</h4><p><code>ip route 0.0.0.0 0.0.0.0 [出接口]</code></p><p><code>router ei 1</code></p><p><code>net 0.0.0.0 0.0.0.0</code></p><h4 id="2-通过重发布来"><a href="#2-通过重发布来" class="headerlink" title="2.通过重发布来"></a>2.通过重发布来</h4><p><code>ip route 0.0.0.0 0.0.0.0 [出接口]</code></p><p><code>router ei 1</code></p><p><code>redis st</code></p><h4 id="3-写汇总"><a href="#3-写汇总" class="headerlink" title="3.写汇总"></a>3.写汇总</h4><p>(config-if)</p><p><code>ip sum ei [as] 0.0.0.0 0.0.0.0</code></p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Network-1</title>
      <link href="2019/11/04/Network-1/"/>
      <url>2019/11/04/Network-1/</url>
      
        <content type="html"><![CDATA[<h1 id="ISO-OSI七层模型"><a href="#ISO-OSI七层模型" class="headerlink" title="ISO-OSI七层模型"></a>ISO-OSI七层模型</h1><h2 id="物理层"><a href="#物理层" class="headerlink" title="物理层"></a>物理层</h2><p>定义电器，机械的流程规范  </p><p>PDU：</p><p>bit/比特</p><p>设备：</p><p>hub(集线器)</p><p>备注：</p><p>没有寻址的概念</p><hr><h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><p>定义如何格式化数据，支持错误检测</p><p>典型协议：</p><p>以太网，帧中继</p><p>PDU：</p><p>frame/帧</p><p>设备：</p><p>以太网交换机</p><p>备注：</p><p>交换机可以通过mac地址转发数据，逻辑链路控制</p><p>ctrl+r = 运行</p><p>cmd = 命令提示符</p><p>ipconfig 查看网络信息</p><p>ipconfig /all 详细信息</p><hr><h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>定义一个逻辑寻址，选择最佳路径传递路由的数据包</p><p>典型协议：</p><p>ip，icmp（ping命令），ipx，arp</p><p>PDU：</p><p>packet/数据包</p><p>设备：</p><p>路由器</p><p>备注：</p><p>实现寻址</p><hr><h2 id="传输层"><a href="#传输层" class="headerlink" title="传输层"></a>传输层</h2><p>提供可靠/不可靠的传输</p><p>典型协议：</p><p>tcp udp port eigrp ospf</p><p>PDU：</p><p>fragment/数据段</p><p>备注：</p><p>负责流量传输和会话建立</p><hr><h2 id="会话层"><a href="#会话层" class="headerlink" title="会话层"></a>会话层</h2><p>控制会话，建立管理终止应用程序会话</p><p>典型协议：</p><p>NFS SQL ASP RPC RSVP windows</p><p>备注：</p><p>负责会话建立</p><hr><h2 id="表示层"><a href="#表示层" class="headerlink" title="表示层"></a>表示层</h2><p>格式化数据（加密）</p><p>ascii jpeg mp3 mp4</p><p>备注：</p><p>可以提供加密服务</p><hr><h2 id="应用层"><a href="#应用层" class="headerlink" title="应用层"></a>应用层</h2><p>控制应用程序</p><p>典型协议：</p><p>telnet http https ftp smtp RIP BGP（部分）</p><p>备注：</p><p>给应用程序提供网络服务</p><hr><h1 id="TCP-IP-协议"><a href="#TCP-IP-协议" class="headerlink" title="TCP/IP 协议"></a>TCP/IP 协议</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>提供一种传输方式</p><p>tcp（可靠传输）面向连接，数据包进行排序</p><p>udp（不可靠）无连接，不排序</p><p>表识上层应用</p><p>netstat 查看端口号信息</p><p>netstat -ano 查看详细信息</p><h2 id="tcp3次握手（期待确认）"><a href="#tcp3次握手（期待确认）" class="headerlink" title="tcp3次握手（期待确认）"></a>tcp3次握手（期待确认）</h2><p>syn是请求，ack回复，seq序列号</p><p>tcp：任何syn请求，不管正确还是错误，我们必须要以一个ack值来回复</p><p>主机A—–(syn标志位1，ack=300，seq=100，ctrl=syn)—–&gt;主机B</p><p>主机A&lt;—–(syn和ack置位，同意建立连接,ack=301，seq=100)——主机B</p><p>主机A——(只有ack置位，ack=301,seq=101)——&gt;主机B</p><p>因为三次握手的漏洞，所以有DOS拒绝服务攻击</p><p>DDOS分布式拒绝服务攻击</p><h2 id="端口号："><a href="#端口号：" class="headerlink" title="端口号："></a>端口号：</h2><p>1-65535个端口</p><p>tcp：</p><p>telnet-23</p><p>ftp-20，21</p><p>http-80</p><p>dns-53</p><p>https-443</p><p>udp：</p><p>rip-520</p><p>tftp-69</p><p>dns-53</p><p>snmp-161</p><p>理论上，端口号有用的多数出现在&lt;1024的端口</p><hr><h1 id="广播，组播，单播"><a href="#广播，组播，单播" class="headerlink" title="广播，组播，单播"></a>广播，组播，单播</h1><h2 id="ip协议："><a href="#ip协议：" class="headerlink" title="ip协议："></a>ip协议：</h2><p>（不同网络号之间的设备无法通信</p><p>以一种逻辑的方式隔离广播</p><p>运行于osi中的网络层</p><p>面向无连接的</p><p>独立处理数据包</p><p>尽力而为的传输</p><p>无数据恢复功能</p><p>范围：</p><p>0.0.0.0-255.255.255.255</p><p>00000000.00000000.00000000.00000000</p><p>11111111.11111111.11111111.11111111</p><p>A类地址：</p><p>第一个bit为0，其他任意</p><p>0.0.0.0-127.255.255.255</p><p>前8位为网络位，后24位为主机位</p><p>0，127是不能使用的地址，0代表默认，127代表我自己（环回口，测试本地网卡用的）</p><p>B类地址：</p><p>前2个bit固定，其他任意，128-191，前16位网络位，后16位主机位</p><p>C类地址：</p><p>前3个bit固定，其他任意，192-223，前24位网络位，后8位主机位</p><p>ABC类地址都属于单播地址，可以分配给终端，主机，接口的地址</p><p>D类，224-239，组播地址</p><p>E类，240-255，科学研究</p><h2 id="网络号"><a href="#网络号" class="headerlink" title="网络号"></a>网络号</h2><p>子网掩码和ip地址的二进制相与，得出网络号</p><p>192.168.0.1  255.255.255.0  =   192.168.0.1/24</p><p>11000000.10101000.00000000.00000001</p><p>11111111.11111111.11111111.00000000</p><p>=================================</p><p>11000000.10101000.00000000.00000000 </p><p>192.168.0.0</p><h2 id="可变长子网掩码"><a href="#可变长子网掩码" class="headerlink" title="可变长子网掩码"></a>可变长子网掩码</h2><p>192.168.100.0网段，分给8个公司，每个公司都得在不同的网络号里面</p><p>11111111.11111111.11111111.11100000 = 255.255.255.224</p><p>11000000.10101000.01100100.00000000 = 192.168.100.0</p><p>11000000.10101000.01100100.00100000 = 192.168.100.32</p><p>11000000.10101000.01100100.01000000 = 192.168.100.64</p><p>11000000.10101000.01100100.01100000 = 192.168.100.96</p><p>11000000.10101000.01100100.10000000 = 192.168.100.128</p><p>11000000.10101000.01100100.10100000 = 192.168.100.160</p><p>11000000.10101000.01100100.11000000 = 192.168.100.192</p><p>11000000.10101000.01100100.11100000 = 192.168.100.224</p><hr><h1 id="arp地址解析协议（内网中的通讯录）"><a href="#arp地址解析协议（内网中的通讯录）" class="headerlink" title="arp地址解析协议（内网中的通讯录）"></a>arp地址解析协议（内网中的通讯录）</h1><p>cmd</p><p>arp -a 显示arp表</p><p>以太网才有arp，帧中继是没有arp的</p><p>ip地址解析为mac地址</p><p>1.主机A发送arp广播</p><p>2.主机B单播回复给A，回应里保存了B的mac地址</p><p>arp表三要素：</p><p>对方ip，对方mac，出接口</p><p>arp表老化时间4小时</p><hr><h1 id="eve-ng环境"><a href="#eve-ng环境" class="headerlink" title="eve-ng环境"></a>eve-ng环境</h1><h2 id="入门命令"><a href="#入门命令" class="headerlink" title="入门命令"></a>入门命令</h2><p>所有的命令都可以用tab键补全</p><p>使用特权模式进入路由器</p><p><code>en</code></p><p>进入配置模式</p><p><code>conf t</code></p><p>改个名字</p><p><code>ho [名字]</code></p><p>优化命令</p><p><code>no ip domain-lo</code> 关闭域名查询(当你输错命令的时候不会卡住)</p><p><code>line con 0</code> 进入0控制线</p><p><code>no exec-t</code>设置控制台会话永不超时</p><p><code>logg syn</code> 防止弹出信息干扰输入</p><p><code>exit</code> 退一格</p><p><code>ena pass</code> [密码] 设置enable密码</p><p><code>sh run</code> 查看本路由器运行的所有内容</p><p><code>no xxxxxxx</code>命令 取消什么命令</p><p><code>ena sec [密码]</code> 设置一个加密过的密码</p><h2 id="给接口设置ip地址"><a href="#给接口设置ip地址" class="headerlink" title="给接口设置ip地址"></a>给接口设置ip地址</h2><p><code>int [接口号]</code>  进入接口</p><p><code>no sh</code> 开启接口(路由器所有接口默认状态都是sh)</p><p><code>ip add [ip地址]\[子网掩码]</code>添加ip地址</p><p><code>sh ip int bri</code> 看到路由器所有接口的状态</p><p>ping是使用icmp协议的，而且是双向的！！！！！！</p><p><code>ping [目标ip地址]</code> 测试连通性</p><p><code>ping [目标ip] so [自己端口] </code>带源ping</p><hr><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><p>路由的意思叫路径学习和最佳路径学习</p><p><code>sh ip rou</code> 查看路由表（能出现在路由表里的不一定是所有路径，但是一定是最佳路径）</p><p><strong>L</strong>  自己的</p><p><strong>C</strong>  直连</p><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由:"></a>静态路由:</h3><p>默认AD为1，metric为0</p><p>由管理员手工指定，安全且稳定</p><p><code>ip route [目标网段]\[子网掩码] [出接口/下一跳]</code></p><p>（都尽量写下一跳）</p><h3 id="浮动的静态路由："><a href="#浮动的静态路由：" class="headerlink" title="浮动的静态路由："></a>浮动的静态路由：</h3><p><code>ip route [目标网段]\[子网掩码] [出接口/下一跳]\[AD值]</code></p><p>永不消逝的静态路由：</p><p>即使接口sh了也不会消失</p><p><code>ip route [目标网段]\[子网掩码] [出接口/下一跳] per</code></p><h3 id="默认路由："><a href="#默认路由：" class="headerlink" title="默认路由："></a>默认路由：</h3><p>不知道怎么走，就走默认路由</p><p><code>ip route 0.0.0.0 0.0.0.0 [出接口/下一跳] </code></p><p>注意：一台路由器只能配置一个默认路由，而且它是最后的选择</p><h3 id="跟踪路由的路径"><a href="#跟踪路由的路径" class="headerlink" title="跟踪路由的路径"></a>跟踪路由的路径</h3><p><code>trac [目标ip]</code></p><p><code>trac [目标ip] so [端口]</code></p><p><code>ctrl+shift+6 </code>强行跳出来</p><h3 id="环回口来假装pc"><a href="#环回口来假装pc" class="headerlink" title="环回口来假装pc"></a>环回口来假装pc</h3><p><code>int lo[编号]</code> 开启一个环回口</p><p><code>ip add [ip]\[子网掩码]</code></p><h3 id="路由器选路："><a href="#路由器选路：" class="headerlink" title="路由器选路："></a>路由器选路：</h3><p>[AD值/metric值]</p><p>先比较AD值，AD值一样再比较metric值</p><p>AD管理距离：</p><p>通过不同的路由协议产生不同的AD，越小越优先</p><p>metric值（度量值）：</p><p>通过同一个路由协议学到的AD值一样的情况下，比metric值</p>]]></content>
      
      
      <categories>
          
          <category> 网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cisco </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
